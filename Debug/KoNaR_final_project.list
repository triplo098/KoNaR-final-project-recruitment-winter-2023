
KoNaR_final_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be84  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  0800c018  0800c018  0001c018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c43c  0800c43c  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c43c  0800c43c  0001c43c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c444  0800c444  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c444  0800c444  0001c444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c448  0800c448  0001c448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800c44c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002de4  200001d8  0800c624  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002fbc  0800c624  00022fbc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019ae4  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003782  00000000  00000000  00039d2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001828  00000000  00000000  0003d4b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012d9  00000000  00000000  0003ece0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a258  00000000  00000000  0003ffb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b3d9  00000000  00000000  0006a211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00100aa6  00000000  00000000  000855ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000077d4  00000000  00000000  00186090  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0018d864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bffc 	.word	0x0800bffc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800bffc 	.word	0x0800bffc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	4a07      	ldr	r2, [pc, #28]	; (8000f70 <vApplicationGetIdleTaskMemory+0x2c>)
 8000f54:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	4a06      	ldr	r2, [pc, #24]	; (8000f74 <vApplicationGetIdleTaskMemory+0x30>)
 8000f5a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2280      	movs	r2, #128	; 0x80
 8000f60:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f62:	bf00      	nop
 8000f64:	3714      	adds	r7, #20
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	200001f4 	.word	0x200001f4
 8000f74:	20000248 	.word	0x20000248

08000f78 <lsm6dsl_read_it>:

void lsm6dsl_write_it(uint8_t address, uint8_t value) {
	  HAL_I2C_Mem_Write_IT(&hi2c1, LSM6DSL_I2C_ADDRESS, address, 1, &value, 1);
}

void lsm6dsl_read_it(uint8_t address, uint8_t num) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af02      	add	r7, sp, #8
 8000f7e:	4603      	mov	r3, r0
 8000f80:	460a      	mov	r2, r1
 8000f82:	71fb      	strb	r3, [r7, #7]
 8000f84:	4613      	mov	r3, r2
 8000f86:	71bb      	strb	r3, [r7, #6]
	  HAL_I2C_Mem_Read_IT(&hi2c1, LSM6DSL_I2C_ADDRESS, address, 1, sensor_buffer, num);
 8000f88:	79fb      	ldrb	r3, [r7, #7]
 8000f8a:	b29a      	uxth	r2, r3
 8000f8c:	79bb      	ldrb	r3, [r7, #6]
 8000f8e:	b29b      	uxth	r3, r3
 8000f90:	9301      	str	r3, [sp, #4]
 8000f92:	4b05      	ldr	r3, [pc, #20]	; (8000fa8 <lsm6dsl_read_it+0x30>)
 8000f94:	9300      	str	r3, [sp, #0]
 8000f96:	2301      	movs	r3, #1
 8000f98:	21d6      	movs	r1, #214	; 0xd6
 8000f9a:	4804      	ldr	r0, [pc, #16]	; (8000fac <lsm6dsl_read_it+0x34>)
 8000f9c:	f001 fc12 	bl	80027c4 <HAL_I2C_Mem_Read_IT>
}
 8000fa0:	bf00      	nop
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	200005c4 	.word	0x200005c4
 8000fac:	20000448 	.word	0x20000448

08000fb0 <lsm6dsl_read>:

void lsm6dsl_read(uint8_t address, uint8_t* dest,uint8_t num) {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af04      	add	r7, sp, #16
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	6039      	str	r1, [r7, #0]
 8000fba:	71fb      	strb	r3, [r7, #7]
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	71bb      	strb	r3, [r7, #6]
	  HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_I2C_ADDRESS, address, 1, dest, num, HAL_MAX_DELAY);
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	b29a      	uxth	r2, r3
 8000fc4:	79bb      	ldrb	r3, [r7, #6]
 8000fc6:	b29b      	uxth	r3, r3
 8000fc8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000fcc:	9102      	str	r1, [sp, #8]
 8000fce:	9301      	str	r3, [sp, #4]
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	9300      	str	r3, [sp, #0]
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	21d6      	movs	r1, #214	; 0xd6
 8000fd8:	4803      	ldr	r0, [pc, #12]	; (8000fe8 <lsm6dsl_read+0x38>)
 8000fda:	f001 fad9 	bl	8002590 <HAL_I2C_Mem_Read>
}
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	20000448 	.word	0x20000448

08000fec <HAL_I2C_MemRxCpltCallback>:



void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
	if(hi2c == &hi2c1) {
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4a06      	ldr	r2, [pc, #24]	; (8001010 <HAL_I2C_MemRxCpltCallback+0x24>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d102      	bne.n	8001002 <HAL_I2C_MemRxCpltCallback+0x16>
		data_ready_flag = true;
 8000ffc:	4b05      	ldr	r3, [pc, #20]	; (8001014 <HAL_I2C_MemRxCpltCallback+0x28>)
 8000ffe:	2201      	movs	r2, #1
 8001000:	701a      	strb	r2, [r3, #0]
	}
}
 8001002:	bf00      	nop
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	20000448 	.word	0x20000448
 8001014:	200005c2 	.word	0x200005c2

08001018 <HAL_TIM_PeriodElapsedCallback>:




void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]

	if (htim == &htim2) {
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	4a0a      	ldr	r2, [pc, #40]	; (800104c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d103      	bne.n	8001030 <HAL_TIM_PeriodElapsedCallback+0x18>

		blink_flag = true;
 8001028:	4b09      	ldr	r3, [pc, #36]	; (8001050 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800102a:	2201      	movs	r2, #1
 800102c:	701a      	strb	r2, [r3, #0]

		data_send_flag = true;

	}

}
 800102e:	e006      	b.n	800103e <HAL_TIM_PeriodElapsedCallback+0x26>
	} else if (htim == &htim3) {
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4a08      	ldr	r2, [pc, #32]	; (8001054 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d102      	bne.n	800103e <HAL_TIM_PeriodElapsedCallback+0x26>
		data_send_flag = true;
 8001038:	4b07      	ldr	r3, [pc, #28]	; (8001058 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800103a:	2201      	movs	r2, #1
 800103c:	701a      	strb	r2, [r3, #0]
}
 800103e:	bf00      	nop
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	2000049c 	.word	0x2000049c
 8001050:	200005c0 	.word	0x200005c0
 8001054:	200004e8 	.word	0x200004e8
 8001058:	200005c3 	.word	0x200005c3

0800105c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == B1_Pin) {
 8001066:	88fb      	ldrh	r3, [r7, #6]
 8001068:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800106c:	d103      	bne.n	8001076 <HAL_GPIO_EXTI_Callback+0x1a>

		button_flag = true;
 800106e:	4b08      	ldr	r3, [pc, #32]	; (8001090 <HAL_GPIO_EXTI_Callback+0x34>)
 8001070:	2201      	movs	r2, #1
 8001072:	701a      	strb	r2, [r3, #0]
	} else if (GPIO_Pin == GPIO_PIN_10) {

		data_ready_flag = true;

	}
}
 8001074:	e006      	b.n	8001084 <HAL_GPIO_EXTI_Callback+0x28>
	} else if (GPIO_Pin == GPIO_PIN_10) {
 8001076:	88fb      	ldrh	r3, [r7, #6]
 8001078:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800107c:	d102      	bne.n	8001084 <HAL_GPIO_EXTI_Callback+0x28>
		data_ready_flag = true;
 800107e:	4b05      	ldr	r3, [pc, #20]	; (8001094 <HAL_GPIO_EXTI_Callback+0x38>)
 8001080:	2201      	movs	r2, #1
 8001082:	701a      	strb	r2, [r3, #0]
}
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	200005c1 	.word	0x200005c1
 8001094:	200005c2 	.word	0x200005c2

08001098 <blink>:
//		transmitCompleteFlag = true;
//	}
//
//}

void blink(void *param) {
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]

	while(1) {

		if (blink_flag == true) {
 80010a0:	4b06      	ldr	r3, [pc, #24]	; (80010bc <blink+0x24>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d0fa      	beq.n	80010a0 <blink+0x8>

			blink_flag = false;
 80010aa:	4b04      	ldr	r3, [pc, #16]	; (80010bc <blink+0x24>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(DIODE_GPIO_Port, DIODE_Pin);
 80010b0:	2110      	movs	r1, #16
 80010b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010b6:	f001 f99d 	bl	80023f4 <HAL_GPIO_TogglePin>
		if (blink_flag == true) {
 80010ba:	e7f1      	b.n	80010a0 <blink+0x8>
 80010bc:	200005c0 	.word	0x200005c0

080010c0 <button>:

	}

}

void button(void *param) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b092      	sub	sp, #72	; 0x48
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]

	char buffer[64] = {0};
 80010c8:	2300      	movs	r3, #0
 80010ca:	60bb      	str	r3, [r7, #8]
 80010cc:	f107 030c 	add.w	r3, r7, #12
 80010d0:	223c      	movs	r2, #60	; 0x3c
 80010d2:	2100      	movs	r1, #0
 80010d4:	4618      	mov	r0, r3
 80010d6:	f008 fe98 	bl	8009e0a <memset>

	while (1) {

		if (button_flag == true) {
 80010da:	4b0e      	ldr	r3, [pc, #56]	; (8001114 <button+0x54>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d0fa      	beq.n	80010da <button+0x1a>

			button_flag = false;
 80010e4:	4b0b      	ldr	r3, [pc, #44]	; (8001114 <button+0x54>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	701a      	strb	r2, [r3, #0]
			snprintf((char*) buffer, sizeof(buffer), "Button Pressed!\r\n");
 80010ea:	f107 0308 	add.w	r3, r7, #8
 80010ee:	4a0a      	ldr	r2, [pc, #40]	; (8001118 <button+0x58>)
 80010f0:	2140      	movs	r1, #64	; 0x40
 80010f2:	4618      	mov	r0, r3
 80010f4:	f008 fdf2 	bl	8009cdc <sniprintf>
			HAL_UART_Transmit_IT(&huart2, (uint8_t*) buffer, strlen((char*)buffer));
 80010f8:	f107 0308 	add.w	r3, r7, #8
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff f8b7 	bl	8000270 <strlen>
 8001102:	4603      	mov	r3, r0
 8001104:	b29a      	uxth	r2, r3
 8001106:	f107 0308 	add.w	r3, r7, #8
 800110a:	4619      	mov	r1, r3
 800110c:	4803      	ldr	r0, [pc, #12]	; (800111c <button+0x5c>)
 800110e:	f005 fd15 	bl	8006b3c <HAL_UART_Transmit_IT>
		if (button_flag == true) {
 8001112:	e7e2      	b.n	80010da <button+0x1a>
 8001114:	200005c1 	.word	0x200005c1
 8001118:	0800c018 	.word	0x0800c018
 800111c:	20000534 	.word	0x20000534

08001120 <sensor>:

		}
	}
}

void sensor(void *param) {
 8001120:	b580      	push	{r7, lr}
 8001122:	b096      	sub	sp, #88	; 0x58
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]


	char str[64] = {0};
 8001128:	2300      	movs	r3, #0
 800112a:	613b      	str	r3, [r7, #16]
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	223c      	movs	r2, #60	; 0x3c
 8001132:	2100      	movs	r1, #0
 8001134:	4618      	mov	r0, r3
 8001136:	f008 fe68 	bl	8009e0a <memset>

	uint8_t who_i_am;
//	HAL_I2C_Mem_Read_IT(&hi2c1, LSM6DSL_I2C_ADDRESS, LSM6DSL_WHO_AM_I, 1, &who_i_am, 1);
//	lsm6dsl_read_it(LSM6DSL_I2C_ADDRESS, 1);
	lsm6dsl_read(LSM6DSL_WHO_AM_I, &who_i_am, 1);
 800113a:	f107 030f 	add.w	r3, r7, #15
 800113e:	2201      	movs	r2, #1
 8001140:	4619      	mov	r1, r3
 8001142:	200f      	movs	r0, #15
 8001144:	f7ff ff34 	bl	8000fb0 <lsm6dsl_read>

	if(who_i_am == 0b01101010) {
 8001148:	7bfb      	ldrb	r3, [r7, #15]
 800114a:	2b6a      	cmp	r3, #106	; 0x6a
 800114c:	d104      	bne.n	8001158 <sensor+0x38>

		HAL_GPIO_TogglePin(DIODE_GPIO_Port, DIODE_Pin);
 800114e:	2110      	movs	r1, #16
 8001150:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001154:	f001 f94e 	bl	80023f4 <HAL_GPIO_TogglePin>

	}

	while (1) {

		if (data_ready_flag == true && data_send_flag == true) {
 8001158:	4b21      	ldr	r3, [pc, #132]	; (80011e0 <sensor+0xc0>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	b2db      	uxtb	r3, r3
 800115e:	2b00      	cmp	r3, #0
 8001160:	d0fa      	beq.n	8001158 <sensor+0x38>
 8001162:	4b20      	ldr	r3, [pc, #128]	; (80011e4 <sensor+0xc4>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	b2db      	uxtb	r3, r3
 8001168:	2b00      	cmp	r3, #0
 800116a:	d0f5      	beq.n	8001158 <sensor+0x38>

			data_ready_flag = false;
 800116c:	4b1c      	ldr	r3, [pc, #112]	; (80011e0 <sensor+0xc0>)
 800116e:	2200      	movs	r2, #0
 8001170:	701a      	strb	r2, [r3, #0]
			data_send_flag = false;
 8001172:	4b1c      	ldr	r3, [pc, #112]	; (80011e4 <sensor+0xc4>)
 8001174:	2200      	movs	r2, #0
 8001176:	701a      	strb	r2, [r3, #0]

			lsm6dsl_read_it(LSM6DSL_MAG_OFFX_L, 2);
 8001178:	2102      	movs	r1, #2
 800117a:	202d      	movs	r0, #45	; 0x2d
 800117c:	f7ff fefc 	bl	8000f78 <lsm6dsl_read_it>


			const uint16_t mag_offx = (((uint16_t)sensor_buffer[1]<<8)) | sensor_buffer[0];
 8001180:	4b19      	ldr	r3, [pc, #100]	; (80011e8 <sensor+0xc8>)
 8001182:	785b      	ldrb	r3, [r3, #1]
 8001184:	021b      	lsls	r3, r3, #8
 8001186:	b21a      	sxth	r2, r3
 8001188:	4b17      	ldr	r3, [pc, #92]	; (80011e8 <sensor+0xc8>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	b21b      	sxth	r3, r3
 800118e:	4313      	orrs	r3, r2
 8001190:	b21b      	sxth	r3, r3
 8001192:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56


			//TODO find information about how to interpret magnetometr value
			const float mag = mag_offx/1.0;
 8001196:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff f9c2 	bl	8000524 <__aeabi_i2d>
 80011a0:	4602      	mov	r2, r0
 80011a2:	460b      	mov	r3, r1
 80011a4:	4610      	mov	r0, r2
 80011a6:	4619      	mov	r1, r3
 80011a8:	f7ff fcfe 	bl	8000ba8 <__aeabi_d2f>
 80011ac:	4603      	mov	r3, r0
 80011ae:	653b      	str	r3, [r7, #80]	; 0x50

			//TODO
//			button_flag = false
//			snprintf((char*) buffer, sizeof(buffer), "Button Pressed!\r\n");
//			HAL_UART_Transmit_IT(&huart2, (uint8_t*) buffer, strlen((char*)buffer));
			sprintf(str, "Mag off X %+2.3f\n\r", mag);
 80011b0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80011b2:	f7ff f9c9 	bl	8000548 <__aeabi_f2d>
 80011b6:	4602      	mov	r2, r0
 80011b8:	460b      	mov	r3, r1
 80011ba:	f107 0010 	add.w	r0, r7, #16
 80011be:	490b      	ldr	r1, [pc, #44]	; (80011ec <sensor+0xcc>)
 80011c0:	f008 fdc0 	bl	8009d44 <siprintf>

			HAL_UART_Transmit_IT(&huart2,  (uint8_t *) str, strlen(str));
 80011c4:	f107 0310 	add.w	r3, r7, #16
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff f851 	bl	8000270 <strlen>
 80011ce:	4603      	mov	r3, r0
 80011d0:	b29a      	uxth	r2, r3
 80011d2:	f107 0310 	add.w	r3, r7, #16
 80011d6:	4619      	mov	r1, r3
 80011d8:	4805      	ldr	r0, [pc, #20]	; (80011f0 <sensor+0xd0>)
 80011da:	f005 fcaf 	bl	8006b3c <HAL_UART_Transmit_IT>
		if (data_ready_flag == true && data_send_flag == true) {
 80011de:	e7bb      	b.n	8001158 <sensor+0x38>
 80011e0:	200005c2 	.word	0x200005c2
 80011e4:	200005c3 	.word	0x200005c3
 80011e8:	200005c4 	.word	0x200005c4
 80011ec:	0800c02c 	.word	0x0800c02c
 80011f0:	20000534 	.word	0x20000534

080011f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011f4:	b5b0      	push	{r4, r5, r7, lr}
 80011f6:	b08a      	sub	sp, #40	; 0x28
 80011f8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011fa:	f000 fd1f 	bl	8001c3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011fe:	f000 f853 	bl	80012a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001202:	f000 f9c5 	bl	8001590 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001206:	f000 f8e1 	bl	80013cc <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800120a:	f000 f991 	bl	8001530 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800120e:	f000 f937 	bl	8001480 <MX_TIM3_Init>
  MX_I2C1_Init();
 8001212:	f000 f89b 	bl	800134c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */


  //starting timer for LED blink 13 Hz
  HAL_TIM_Base_Start_IT(&htim2);
 8001216:	481c      	ldr	r0, [pc, #112]	; (8001288 <main+0x94>)
 8001218:	f004 fc56 	bl	8005ac8 <HAL_TIM_Base_Start_IT>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800121c:	4b1b      	ldr	r3, [pc, #108]	; (800128c <main+0x98>)
 800121e:	1d3c      	adds	r4, r7, #4
 8001220:	461d      	mov	r5, r3
 8001222:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001224:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001226:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800122a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800122e:	1d3b      	adds	r3, r7, #4
 8001230:	2100      	movs	r1, #0
 8001232:	4618      	mov	r0, r3
 8001234:	f006 fddc 	bl	8007df0 <osThreadCreate>
 8001238:	4603      	mov	r3, r0
 800123a:	4a15      	ldr	r2, [pc, #84]	; (8001290 <main+0x9c>)
 800123c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800123e:	f006 fdd0 	bl	8007de2 <osKernelStart>
  /* USER CODE BEGIN WHILE */




  xTaskCreate(blink, "blink", 512, NULL, 5, NULL);
 8001242:	2300      	movs	r3, #0
 8001244:	9301      	str	r3, [sp, #4]
 8001246:	2305      	movs	r3, #5
 8001248:	9300      	str	r3, [sp, #0]
 800124a:	2300      	movs	r3, #0
 800124c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001250:	4910      	ldr	r1, [pc, #64]	; (8001294 <main+0xa0>)
 8001252:	4811      	ldr	r0, [pc, #68]	; (8001298 <main+0xa4>)
 8001254:	f006 ff3d 	bl	80080d2 <xTaskCreate>
  xTaskCreate(button, "button", 512, NULL, 5, NULL);
 8001258:	2300      	movs	r3, #0
 800125a:	9301      	str	r3, [sp, #4]
 800125c:	2305      	movs	r3, #5
 800125e:	9300      	str	r3, [sp, #0]
 8001260:	2300      	movs	r3, #0
 8001262:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001266:	490d      	ldr	r1, [pc, #52]	; (800129c <main+0xa8>)
 8001268:	480d      	ldr	r0, [pc, #52]	; (80012a0 <main+0xac>)
 800126a:	f006 ff32 	bl	80080d2 <xTaskCreate>
  xTaskCreate(sensor, "button", 512, NULL, 5, NULL);
 800126e:	2300      	movs	r3, #0
 8001270:	9301      	str	r3, [sp, #4]
 8001272:	2305      	movs	r3, #5
 8001274:	9300      	str	r3, [sp, #0]
 8001276:	2300      	movs	r3, #0
 8001278:	f44f 7200 	mov.w	r2, #512	; 0x200
 800127c:	4907      	ldr	r1, [pc, #28]	; (800129c <main+0xa8>)
 800127e:	4809      	ldr	r0, [pc, #36]	; (80012a4 <main+0xb0>)
 8001280:	f006 ff27 	bl	80080d2 <xTaskCreate>

  while (1)
 8001284:	e7fe      	b.n	8001284 <main+0x90>
 8001286:	bf00      	nop
 8001288:	2000049c 	.word	0x2000049c
 800128c:	0800c05c 	.word	0x0800c05c
 8001290:	200005bc 	.word	0x200005bc
 8001294:	0800c040 	.word	0x0800c040
 8001298:	08001099 	.word	0x08001099
 800129c:	0800c048 	.word	0x0800c048
 80012a0:	080010c1 	.word	0x080010c1
 80012a4:	08001121 	.word	0x08001121

080012a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b096      	sub	sp, #88	; 0x58
 80012ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ae:	f107 0314 	add.w	r3, r7, #20
 80012b2:	2244      	movs	r2, #68	; 0x44
 80012b4:	2100      	movs	r1, #0
 80012b6:	4618      	mov	r0, r3
 80012b8:	f008 fda7 	bl	8009e0a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012bc:	463b      	mov	r3, r7
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	605a      	str	r2, [r3, #4]
 80012c4:	609a      	str	r2, [r3, #8]
 80012c6:	60da      	str	r2, [r3, #12]
 80012c8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80012ca:	f44f 7000 	mov.w	r0, #512	; 0x200
 80012ce:	f003 f8e9 	bl	80044a4 <HAL_PWREx_ControlVoltageScaling>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80012d8:	f000 f9e0 	bl	800169c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012dc:	2302      	movs	r3, #2
 80012de:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012e4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012e6:	2310      	movs	r3, #16
 80012e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012ea:	2302      	movs	r3, #2
 80012ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012ee:	2302      	movs	r3, #2
 80012f0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80012f2:	2301      	movs	r3, #1
 80012f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80012f6:	230a      	movs	r3, #10
 80012f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80012fa:	2307      	movs	r3, #7
 80012fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80012fe:	2302      	movs	r3, #2
 8001300:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001302:	2302      	movs	r3, #2
 8001304:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001306:	f107 0314 	add.w	r3, r7, #20
 800130a:	4618      	mov	r0, r3
 800130c:	f003 f920 	bl	8004550 <HAL_RCC_OscConfig>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001316:	f000 f9c1 	bl	800169c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800131a:	230f      	movs	r3, #15
 800131c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800131e:	2303      	movs	r3, #3
 8001320:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001322:	2300      	movs	r3, #0
 8001324:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001326:	2300      	movs	r3, #0
 8001328:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800132a:	2300      	movs	r3, #0
 800132c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800132e:	463b      	mov	r3, r7
 8001330:	2104      	movs	r1, #4
 8001332:	4618      	mov	r0, r3
 8001334:	f003 fce8 	bl	8004d08 <HAL_RCC_ClockConfig>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800133e:	f000 f9ad 	bl	800169c <Error_Handler>
  }
}
 8001342:	bf00      	nop
 8001344:	3758      	adds	r7, #88	; 0x58
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
	...

0800134c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001350:	4b1b      	ldr	r3, [pc, #108]	; (80013c0 <MX_I2C1_Init+0x74>)
 8001352:	4a1c      	ldr	r2, [pc, #112]	; (80013c4 <MX_I2C1_Init+0x78>)
 8001354:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8001356:	4b1a      	ldr	r3, [pc, #104]	; (80013c0 <MX_I2C1_Init+0x74>)
 8001358:	4a1b      	ldr	r2, [pc, #108]	; (80013c8 <MX_I2C1_Init+0x7c>)
 800135a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800135c:	4b18      	ldr	r3, [pc, #96]	; (80013c0 <MX_I2C1_Init+0x74>)
 800135e:	2200      	movs	r2, #0
 8001360:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001362:	4b17      	ldr	r3, [pc, #92]	; (80013c0 <MX_I2C1_Init+0x74>)
 8001364:	2201      	movs	r2, #1
 8001366:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001368:	4b15      	ldr	r3, [pc, #84]	; (80013c0 <MX_I2C1_Init+0x74>)
 800136a:	2200      	movs	r2, #0
 800136c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800136e:	4b14      	ldr	r3, [pc, #80]	; (80013c0 <MX_I2C1_Init+0x74>)
 8001370:	2200      	movs	r2, #0
 8001372:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001374:	4b12      	ldr	r3, [pc, #72]	; (80013c0 <MX_I2C1_Init+0x74>)
 8001376:	2200      	movs	r2, #0
 8001378:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800137a:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <MX_I2C1_Init+0x74>)
 800137c:	2200      	movs	r2, #0
 800137e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001380:	4b0f      	ldr	r3, [pc, #60]	; (80013c0 <MX_I2C1_Init+0x74>)
 8001382:	2200      	movs	r2, #0
 8001384:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001386:	480e      	ldr	r0, [pc, #56]	; (80013c0 <MX_I2C1_Init+0x74>)
 8001388:	f001 f866 	bl	8002458 <HAL_I2C_Init>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001392:	f000 f983 	bl	800169c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001396:	2100      	movs	r1, #0
 8001398:	4809      	ldr	r0, [pc, #36]	; (80013c0 <MX_I2C1_Init+0x74>)
 800139a:	f002 ffdd 	bl	8004358 <HAL_I2CEx_ConfigAnalogFilter>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80013a4:	f000 f97a 	bl	800169c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80013a8:	2100      	movs	r1, #0
 80013aa:	4805      	ldr	r0, [pc, #20]	; (80013c0 <MX_I2C1_Init+0x74>)
 80013ac:	f003 f81f 	bl	80043ee <HAL_I2CEx_ConfigDigitalFilter>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80013b6:	f000 f971 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	20000448 	.word	0x20000448
 80013c4:	40005400 	.word	0x40005400
 80013c8:	10909cec 	.word	0x10909cec

080013cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b08a      	sub	sp, #40	; 0x28
 80013d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013d2:	f107 031c 	add.w	r3, r7, #28
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	605a      	str	r2, [r3, #4]
 80013dc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013de:	463b      	mov	r3, r7
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]
 80013ea:	611a      	str	r2, [r3, #16]
 80013ec:	615a      	str	r2, [r3, #20]
 80013ee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013f0:	4b22      	ldr	r3, [pc, #136]	; (800147c <MX_TIM2_Init+0xb0>)
 80013f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1108;
 80013f8:	4b20      	ldr	r3, [pc, #128]	; (800147c <MX_TIM2_Init+0xb0>)
 80013fa:	f240 4254 	movw	r2, #1108	; 0x454
 80013fe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001400:	4b1e      	ldr	r3, [pc, #120]	; (800147c <MX_TIM2_Init+0xb0>)
 8001402:	2200      	movs	r2, #0
 8001404:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5548;
 8001406:	4b1d      	ldr	r3, [pc, #116]	; (800147c <MX_TIM2_Init+0xb0>)
 8001408:	f241 52ac 	movw	r2, #5548	; 0x15ac
 800140c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800140e:	4b1b      	ldr	r3, [pc, #108]	; (800147c <MX_TIM2_Init+0xb0>)
 8001410:	2200      	movs	r2, #0
 8001412:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001414:	4b19      	ldr	r3, [pc, #100]	; (800147c <MX_TIM2_Init+0xb0>)
 8001416:	2200      	movs	r2, #0
 8001418:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800141a:	4818      	ldr	r0, [pc, #96]	; (800147c <MX_TIM2_Init+0xb0>)
 800141c:	f004 fc1b 	bl	8005c56 <HAL_TIM_PWM_Init>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 8001426:	f000 f939 	bl	800169c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800142a:	2300      	movs	r3, #0
 800142c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800142e:	2300      	movs	r3, #0
 8001430:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001432:	f107 031c 	add.w	r3, r7, #28
 8001436:	4619      	mov	r1, r3
 8001438:	4810      	ldr	r0, [pc, #64]	; (800147c <MX_TIM2_Init+0xb0>)
 800143a:	f005 fa8b 	bl	8006954 <HAL_TIMEx_MasterConfigSynchronization>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8001444:	f000 f92a 	bl	800169c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001448:	2360      	movs	r3, #96	; 0x60
 800144a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800144c:	2300      	movs	r3, #0
 800144e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001450:	2300      	movs	r3, #0
 8001452:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001454:	2300      	movs	r3, #0
 8001456:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001458:	463b      	mov	r3, r7
 800145a:	2200      	movs	r2, #0
 800145c:	4619      	mov	r1, r3
 800145e:	4807      	ldr	r0, [pc, #28]	; (800147c <MX_TIM2_Init+0xb0>)
 8001460:	f004 fdcc 	bl	8005ffc <HAL_TIM_PWM_ConfigChannel>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 800146a:	f000 f917 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800146e:	4803      	ldr	r0, [pc, #12]	; (800147c <MX_TIM2_Init+0xb0>)
 8001470:	f000 f9f2 	bl	8001858 <HAL_TIM_MspPostInit>

}
 8001474:	bf00      	nop
 8001476:	3728      	adds	r7, #40	; 0x28
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	2000049c 	.word	0x2000049c

08001480 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08a      	sub	sp, #40	; 0x28
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001486:	f107 031c 	add.w	r3, r7, #28
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	605a      	str	r2, [r3, #4]
 8001490:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001492:	463b      	mov	r3, r7
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
 800149e:	611a      	str	r2, [r3, #16]
 80014a0:	615a      	str	r2, [r3, #20]
 80014a2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014a4:	4b20      	ldr	r3, [pc, #128]	; (8001528 <MX_TIM3_Init+0xa8>)
 80014a6:	4a21      	ldr	r2, [pc, #132]	; (800152c <MX_TIM3_Init+0xac>)
 80014a8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 55516;
 80014aa:	4b1f      	ldr	r3, [pc, #124]	; (8001528 <MX_TIM3_Init+0xa8>)
 80014ac:	f64d 02dc 	movw	r2, #55516	; 0xd8dc
 80014b0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b2:	4b1d      	ldr	r3, [pc, #116]	; (8001528 <MX_TIM3_Init+0xa8>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80014b8:	4b1b      	ldr	r3, [pc, #108]	; (8001528 <MX_TIM3_Init+0xa8>)
 80014ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014be:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014c0:	4b19      	ldr	r3, [pc, #100]	; (8001528 <MX_TIM3_Init+0xa8>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014c6:	4b18      	ldr	r3, [pc, #96]	; (8001528 <MX_TIM3_Init+0xa8>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80014cc:	4816      	ldr	r0, [pc, #88]	; (8001528 <MX_TIM3_Init+0xa8>)
 80014ce:	f004 fb6b 	bl	8005ba8 <HAL_TIM_OC_Init>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 80014d8:	f000 f8e0 	bl	800169c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014dc:	2300      	movs	r3, #0
 80014de:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014e0:	2300      	movs	r3, #0
 80014e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014e4:	f107 031c 	add.w	r3, r7, #28
 80014e8:	4619      	mov	r1, r3
 80014ea:	480f      	ldr	r0, [pc, #60]	; (8001528 <MX_TIM3_Init+0xa8>)
 80014ec:	f005 fa32 	bl	8006954 <HAL_TIMEx_MasterConfigSynchronization>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80014f6:	f000 f8d1 	bl	800169c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80014fa:	2300      	movs	r3, #0
 80014fc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80014fe:	2300      	movs	r3, #0
 8001500:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001502:	2300      	movs	r3, #0
 8001504:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001506:	2300      	movs	r3, #0
 8001508:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800150a:	463b      	mov	r3, r7
 800150c:	2200      	movs	r2, #0
 800150e:	4619      	mov	r1, r3
 8001510:	4805      	ldr	r0, [pc, #20]	; (8001528 <MX_TIM3_Init+0xa8>)
 8001512:	f004 fcf9 	bl	8005f08 <HAL_TIM_OC_ConfigChannel>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 800151c:	f000 f8be 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001520:	bf00      	nop
 8001522:	3728      	adds	r7, #40	; 0x28
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	200004e8 	.word	0x200004e8
 800152c:	40000400 	.word	0x40000400

08001530 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001534:	4b14      	ldr	r3, [pc, #80]	; (8001588 <MX_USART2_UART_Init+0x58>)
 8001536:	4a15      	ldr	r2, [pc, #84]	; (800158c <MX_USART2_UART_Init+0x5c>)
 8001538:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800153a:	4b13      	ldr	r3, [pc, #76]	; (8001588 <MX_USART2_UART_Init+0x58>)
 800153c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001540:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001542:	4b11      	ldr	r3, [pc, #68]	; (8001588 <MX_USART2_UART_Init+0x58>)
 8001544:	2200      	movs	r2, #0
 8001546:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001548:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <MX_USART2_UART_Init+0x58>)
 800154a:	2200      	movs	r2, #0
 800154c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800154e:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <MX_USART2_UART_Init+0x58>)
 8001550:	2200      	movs	r2, #0
 8001552:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001554:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <MX_USART2_UART_Init+0x58>)
 8001556:	220c      	movs	r2, #12
 8001558:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800155a:	4b0b      	ldr	r3, [pc, #44]	; (8001588 <MX_USART2_UART_Init+0x58>)
 800155c:	2200      	movs	r2, #0
 800155e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001560:	4b09      	ldr	r3, [pc, #36]	; (8001588 <MX_USART2_UART_Init+0x58>)
 8001562:	2200      	movs	r2, #0
 8001564:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001566:	4b08      	ldr	r3, [pc, #32]	; (8001588 <MX_USART2_UART_Init+0x58>)
 8001568:	2200      	movs	r2, #0
 800156a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800156c:	4b06      	ldr	r3, [pc, #24]	; (8001588 <MX_USART2_UART_Init+0x58>)
 800156e:	2200      	movs	r2, #0
 8001570:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001572:	4805      	ldr	r0, [pc, #20]	; (8001588 <MX_USART2_UART_Init+0x58>)
 8001574:	f005 fa94 	bl	8006aa0 <HAL_UART_Init>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800157e:	f000 f88d 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	20000534 	.word	0x20000534
 800158c:	40004400 	.word	0x40004400

08001590 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b08a      	sub	sp, #40	; 0x28
 8001594:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001596:	f107 0314 	add.w	r3, r7, #20
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	605a      	str	r2, [r3, #4]
 80015a0:	609a      	str	r2, [r3, #8]
 80015a2:	60da      	str	r2, [r3, #12]
 80015a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015a6:	4b36      	ldr	r3, [pc, #216]	; (8001680 <MX_GPIO_Init+0xf0>)
 80015a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015aa:	4a35      	ldr	r2, [pc, #212]	; (8001680 <MX_GPIO_Init+0xf0>)
 80015ac:	f043 0304 	orr.w	r3, r3, #4
 80015b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015b2:	4b33      	ldr	r3, [pc, #204]	; (8001680 <MX_GPIO_Init+0xf0>)
 80015b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b6:	f003 0304 	and.w	r3, r3, #4
 80015ba:	613b      	str	r3, [r7, #16]
 80015bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015be:	4b30      	ldr	r3, [pc, #192]	; (8001680 <MX_GPIO_Init+0xf0>)
 80015c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c2:	4a2f      	ldr	r2, [pc, #188]	; (8001680 <MX_GPIO_Init+0xf0>)
 80015c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ca:	4b2d      	ldr	r3, [pc, #180]	; (8001680 <MX_GPIO_Init+0xf0>)
 80015cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015d2:	60fb      	str	r3, [r7, #12]
 80015d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d6:	4b2a      	ldr	r3, [pc, #168]	; (8001680 <MX_GPIO_Init+0xf0>)
 80015d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015da:	4a29      	ldr	r2, [pc, #164]	; (8001680 <MX_GPIO_Init+0xf0>)
 80015dc:	f043 0301 	orr.w	r3, r3, #1
 80015e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015e2:	4b27      	ldr	r3, [pc, #156]	; (8001680 <MX_GPIO_Init+0xf0>)
 80015e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	60bb      	str	r3, [r7, #8]
 80015ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ee:	4b24      	ldr	r3, [pc, #144]	; (8001680 <MX_GPIO_Init+0xf0>)
 80015f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f2:	4a23      	ldr	r2, [pc, #140]	; (8001680 <MX_GPIO_Init+0xf0>)
 80015f4:	f043 0302 	orr.w	r3, r3, #2
 80015f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015fa:	4b21      	ldr	r3, [pc, #132]	; (8001680 <MX_GPIO_Init+0xf0>)
 80015fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	607b      	str	r3, [r7, #4]
 8001604:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIODE_GPIO_Port, DIODE_Pin, GPIO_PIN_RESET);
 8001606:	2200      	movs	r2, #0
 8001608:	2110      	movs	r1, #16
 800160a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800160e:	f000 fed9 	bl	80023c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001612:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001616:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001618:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800161c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161e:	2300      	movs	r3, #0
 8001620:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001622:	f107 0314 	add.w	r3, r7, #20
 8001626:	4619      	mov	r1, r3
 8001628:	4816      	ldr	r0, [pc, #88]	; (8001684 <MX_GPIO_Init+0xf4>)
 800162a:	f000 fd21 	bl	8002070 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIODE_Pin */
  GPIO_InitStruct.Pin = DIODE_Pin;
 800162e:	2310      	movs	r3, #16
 8001630:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001632:	2301      	movs	r3, #1
 8001634:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163a:	2300      	movs	r3, #0
 800163c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIODE_GPIO_Port, &GPIO_InitStruct);
 800163e:	f107 0314 	add.w	r3, r7, #20
 8001642:	4619      	mov	r1, r3
 8001644:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001648:	f000 fd12 	bl	8002070 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800164c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001650:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001652:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001656:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001658:	2300      	movs	r3, #0
 800165a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800165c:	f107 0314 	add.w	r3, r7, #20
 8001660:	4619      	mov	r1, r3
 8001662:	4809      	ldr	r0, [pc, #36]	; (8001688 <MX_GPIO_Init+0xf8>)
 8001664:	f000 fd04 	bl	8002070 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001668:	2200      	movs	r2, #0
 800166a:	2105      	movs	r1, #5
 800166c:	2028      	movs	r0, #40	; 0x28
 800166e:	f000 fc3c 	bl	8001eea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001672:	2028      	movs	r0, #40	; 0x28
 8001674:	f000 fc55 	bl	8001f22 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001678:	bf00      	nop
 800167a:	3728      	adds	r7, #40	; 0x28
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40021000 	.word	0x40021000
 8001684:	48000800 	.word	0x48000800
 8001688:	48000400 	.word	0x48000400

0800168c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001694:	2001      	movs	r0, #1
 8001696:	f006 fbf7 	bl	8007e88 <osDelay>
 800169a:	e7fb      	b.n	8001694 <StartDefaultTask+0x8>

0800169c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016a0:	b672      	cpsid	i
}
 80016a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016a4:	e7fe      	b.n	80016a4 <Error_Handler+0x8>
	...

080016a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ae:	4b11      	ldr	r3, [pc, #68]	; (80016f4 <HAL_MspInit+0x4c>)
 80016b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016b2:	4a10      	ldr	r2, [pc, #64]	; (80016f4 <HAL_MspInit+0x4c>)
 80016b4:	f043 0301 	orr.w	r3, r3, #1
 80016b8:	6613      	str	r3, [r2, #96]	; 0x60
 80016ba:	4b0e      	ldr	r3, [pc, #56]	; (80016f4 <HAL_MspInit+0x4c>)
 80016bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	607b      	str	r3, [r7, #4]
 80016c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016c6:	4b0b      	ldr	r3, [pc, #44]	; (80016f4 <HAL_MspInit+0x4c>)
 80016c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ca:	4a0a      	ldr	r2, [pc, #40]	; (80016f4 <HAL_MspInit+0x4c>)
 80016cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016d0:	6593      	str	r3, [r2, #88]	; 0x58
 80016d2:	4b08      	ldr	r3, [pc, #32]	; (80016f4 <HAL_MspInit+0x4c>)
 80016d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016da:	603b      	str	r3, [r7, #0]
 80016dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80016de:	2200      	movs	r2, #0
 80016e0:	210f      	movs	r1, #15
 80016e2:	f06f 0001 	mvn.w	r0, #1
 80016e6:	f000 fc00 	bl	8001eea <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ea:	bf00      	nop
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	40021000 	.word	0x40021000

080016f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b0ac      	sub	sp, #176	; 0xb0
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001700:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	60da      	str	r2, [r3, #12]
 800170e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001710:	f107 0314 	add.w	r3, r7, #20
 8001714:	2288      	movs	r2, #136	; 0x88
 8001716:	2100      	movs	r1, #0
 8001718:	4618      	mov	r0, r3
 800171a:	f008 fb76 	bl	8009e0a <memset>
  if(hi2c->Instance==I2C1)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a25      	ldr	r2, [pc, #148]	; (80017b8 <HAL_I2C_MspInit+0xc0>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d142      	bne.n	80017ae <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001728:	2340      	movs	r3, #64	; 0x40
 800172a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800172c:	2300      	movs	r3, #0
 800172e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001730:	f107 0314 	add.w	r3, r7, #20
 8001734:	4618      	mov	r0, r3
 8001736:	f003 fd0b 	bl	8005150 <HAL_RCCEx_PeriphCLKConfig>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001740:	f7ff ffac 	bl	800169c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001744:	4b1d      	ldr	r3, [pc, #116]	; (80017bc <HAL_I2C_MspInit+0xc4>)
 8001746:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001748:	4a1c      	ldr	r2, [pc, #112]	; (80017bc <HAL_I2C_MspInit+0xc4>)
 800174a:	f043 0302 	orr.w	r3, r3, #2
 800174e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001750:	4b1a      	ldr	r3, [pc, #104]	; (80017bc <HAL_I2C_MspInit+0xc4>)
 8001752:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001754:	f003 0302 	and.w	r3, r3, #2
 8001758:	613b      	str	r3, [r7, #16]
 800175a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800175c:	23c0      	movs	r3, #192	; 0xc0
 800175e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001762:	2312      	movs	r3, #18
 8001764:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001768:	2300      	movs	r3, #0
 800176a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800176e:	2303      	movs	r3, #3
 8001770:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001774:	2304      	movs	r3, #4
 8001776:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800177a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800177e:	4619      	mov	r1, r3
 8001780:	480f      	ldr	r0, [pc, #60]	; (80017c0 <HAL_I2C_MspInit+0xc8>)
 8001782:	f000 fc75 	bl	8002070 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001786:	4b0d      	ldr	r3, [pc, #52]	; (80017bc <HAL_I2C_MspInit+0xc4>)
 8001788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800178a:	4a0c      	ldr	r2, [pc, #48]	; (80017bc <HAL_I2C_MspInit+0xc4>)
 800178c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001790:	6593      	str	r3, [r2, #88]	; 0x58
 8001792:	4b0a      	ldr	r3, [pc, #40]	; (80017bc <HAL_I2C_MspInit+0xc4>)
 8001794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001796:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800179e:	2200      	movs	r2, #0
 80017a0:	2105      	movs	r1, #5
 80017a2:	201f      	movs	r0, #31
 80017a4:	f000 fba1 	bl	8001eea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80017a8:	201f      	movs	r0, #31
 80017aa:	f000 fbba 	bl	8001f22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80017ae:	bf00      	nop
 80017b0:	37b0      	adds	r7, #176	; 0xb0
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40005400 	.word	0x40005400
 80017bc:	40021000 	.word	0x40021000
 80017c0:	48000400 	.word	0x48000400

080017c4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017d4:	d113      	bne.n	80017fe <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017d6:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <HAL_TIM_PWM_MspInit+0x44>)
 80017d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017da:	4a0b      	ldr	r2, [pc, #44]	; (8001808 <HAL_TIM_PWM_MspInit+0x44>)
 80017dc:	f043 0301 	orr.w	r3, r3, #1
 80017e0:	6593      	str	r3, [r2, #88]	; 0x58
 80017e2:	4b09      	ldr	r3, [pc, #36]	; (8001808 <HAL_TIM_PWM_MspInit+0x44>)
 80017e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80017ee:	2200      	movs	r2, #0
 80017f0:	2105      	movs	r1, #5
 80017f2:	201c      	movs	r0, #28
 80017f4:	f000 fb79 	bl	8001eea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80017f8:	201c      	movs	r0, #28
 80017fa:	f000 fb92 	bl	8001f22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80017fe:	bf00      	nop
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40021000 	.word	0x40021000

0800180c <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM3)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a0d      	ldr	r2, [pc, #52]	; (8001850 <HAL_TIM_OC_MspInit+0x44>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d113      	bne.n	8001846 <HAL_TIM_OC_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800181e:	4b0d      	ldr	r3, [pc, #52]	; (8001854 <HAL_TIM_OC_MspInit+0x48>)
 8001820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001822:	4a0c      	ldr	r2, [pc, #48]	; (8001854 <HAL_TIM_OC_MspInit+0x48>)
 8001824:	f043 0302 	orr.w	r3, r3, #2
 8001828:	6593      	str	r3, [r2, #88]	; 0x58
 800182a:	4b0a      	ldr	r3, [pc, #40]	; (8001854 <HAL_TIM_OC_MspInit+0x48>)
 800182c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001836:	2200      	movs	r2, #0
 8001838:	2105      	movs	r1, #5
 800183a:	201d      	movs	r0, #29
 800183c:	f000 fb55 	bl	8001eea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001840:	201d      	movs	r0, #29
 8001842:	f000 fb6e 	bl	8001f22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001846:	bf00      	nop
 8001848:	3710      	adds	r7, #16
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40000400 	.word	0x40000400
 8001854:	40021000 	.word	0x40021000

08001858 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b088      	sub	sp, #32
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001860:	f107 030c 	add.w	r3, r7, #12
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	605a      	str	r2, [r3, #4]
 800186a:	609a      	str	r2, [r3, #8]
 800186c:	60da      	str	r2, [r3, #12]
 800186e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001878:	d11c      	bne.n	80018b4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800187a:	4b10      	ldr	r3, [pc, #64]	; (80018bc <HAL_TIM_MspPostInit+0x64>)
 800187c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800187e:	4a0f      	ldr	r2, [pc, #60]	; (80018bc <HAL_TIM_MspPostInit+0x64>)
 8001880:	f043 0301 	orr.w	r3, r3, #1
 8001884:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001886:	4b0d      	ldr	r3, [pc, #52]	; (80018bc <HAL_TIM_MspPostInit+0x64>)
 8001888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	60bb      	str	r3, [r7, #8]
 8001890:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001892:	2320      	movs	r3, #32
 8001894:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001896:	2302      	movs	r3, #2
 8001898:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189a:	2300      	movs	r3, #0
 800189c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189e:	2300      	movs	r3, #0
 80018a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80018a2:	2301      	movs	r3, #1
 80018a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a6:	f107 030c 	add.w	r3, r7, #12
 80018aa:	4619      	mov	r1, r3
 80018ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018b0:	f000 fbde 	bl	8002070 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80018b4:	bf00      	nop
 80018b6:	3720      	adds	r7, #32
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	40021000 	.word	0x40021000

080018c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b0ac      	sub	sp, #176	; 0xb0
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	605a      	str	r2, [r3, #4]
 80018d2:	609a      	str	r2, [r3, #8]
 80018d4:	60da      	str	r2, [r3, #12]
 80018d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018d8:	f107 0314 	add.w	r3, r7, #20
 80018dc:	2288      	movs	r2, #136	; 0x88
 80018de:	2100      	movs	r1, #0
 80018e0:	4618      	mov	r0, r3
 80018e2:	f008 fa92 	bl	8009e0a <memset>
  if(huart->Instance==USART2)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a25      	ldr	r2, [pc, #148]	; (8001980 <HAL_UART_MspInit+0xc0>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d143      	bne.n	8001978 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80018f0:	2302      	movs	r3, #2
 80018f2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80018f4:	2300      	movs	r3, #0
 80018f6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018f8:	f107 0314 	add.w	r3, r7, #20
 80018fc:	4618      	mov	r0, r3
 80018fe:	f003 fc27 	bl	8005150 <HAL_RCCEx_PeriphCLKConfig>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001908:	f7ff fec8 	bl	800169c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800190c:	4b1d      	ldr	r3, [pc, #116]	; (8001984 <HAL_UART_MspInit+0xc4>)
 800190e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001910:	4a1c      	ldr	r2, [pc, #112]	; (8001984 <HAL_UART_MspInit+0xc4>)
 8001912:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001916:	6593      	str	r3, [r2, #88]	; 0x58
 8001918:	4b1a      	ldr	r3, [pc, #104]	; (8001984 <HAL_UART_MspInit+0xc4>)
 800191a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800191c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001920:	613b      	str	r3, [r7, #16]
 8001922:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001924:	4b17      	ldr	r3, [pc, #92]	; (8001984 <HAL_UART_MspInit+0xc4>)
 8001926:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001928:	4a16      	ldr	r2, [pc, #88]	; (8001984 <HAL_UART_MspInit+0xc4>)
 800192a:	f043 0301 	orr.w	r3, r3, #1
 800192e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001930:	4b14      	ldr	r3, [pc, #80]	; (8001984 <HAL_UART_MspInit+0xc4>)
 8001932:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001934:	f003 0301 	and.w	r3, r3, #1
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800193c:	230c      	movs	r3, #12
 800193e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001942:	2302      	movs	r3, #2
 8001944:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001948:	2300      	movs	r3, #0
 800194a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800194e:	2303      	movs	r3, #3
 8001950:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001954:	2307      	movs	r3, #7
 8001956:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800195a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800195e:	4619      	mov	r1, r3
 8001960:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001964:	f000 fb84 	bl	8002070 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001968:	2200      	movs	r2, #0
 800196a:	2105      	movs	r1, #5
 800196c:	2026      	movs	r0, #38	; 0x26
 800196e:	f000 fabc 	bl	8001eea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001972:	2026      	movs	r0, #38	; 0x26
 8001974:	f000 fad5 	bl	8001f22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001978:	bf00      	nop
 800197a:	37b0      	adds	r7, #176	; 0xb0
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	40004400 	.word	0x40004400
 8001984:	40021000 	.word	0x40021000

08001988 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800198c:	e7fe      	b.n	800198c <NMI_Handler+0x4>

0800198e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800198e:	b480      	push	{r7}
 8001990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001992:	e7fe      	b.n	8001992 <HardFault_Handler+0x4>

08001994 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001998:	e7fe      	b.n	8001998 <MemManage_Handler+0x4>

0800199a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800199a:	b480      	push	{r7}
 800199c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800199e:	e7fe      	b.n	800199e <BusFault_Handler+0x4>

080019a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019a4:	e7fe      	b.n	80019a4 <UsageFault_Handler+0x4>

080019a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019a6:	b480      	push	{r7}
 80019a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019aa:	bf00      	nop
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019b8:	f000 f99c 	bl	8001cf4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80019bc:	f006 ffe8 	bl	8008990 <xTaskGetSchedulerState>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d001      	beq.n	80019ca <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80019c6:	f007 fa27 	bl	8008e18 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
	...

080019d0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019d4:	4802      	ldr	r0, [pc, #8]	; (80019e0 <TIM2_IRQHandler+0x10>)
 80019d6:	f004 f995 	bl	8005d04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019da:	bf00      	nop
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	2000049c 	.word	0x2000049c

080019e4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80019e8:	4802      	ldr	r0, [pc, #8]	; (80019f4 <TIM3_IRQHandler+0x10>)
 80019ea:	f004 f98b 	bl	8005d04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80019ee:	bf00      	nop
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	200004e8 	.word	0x200004e8

080019f8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80019fc:	4802      	ldr	r0, [pc, #8]	; (8001a08 <I2C1_EV_IRQHandler+0x10>)
 80019fe:	f000 ff67 	bl	80028d0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001a02:	bf00      	nop
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	20000448 	.word	0x20000448

08001a0c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a10:	4802      	ldr	r0, [pc, #8]	; (8001a1c <USART2_IRQHandler+0x10>)
 8001a12:	f005 f8f1 	bl	8006bf8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	20000534 	.word	0x20000534

08001a20 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001a24:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001a28:	f000 fcfe 	bl	8002428 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001a2c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001a30:	f000 fcfa 	bl	8002428 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a34:	bf00      	nop
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  return 1;
 8001a3c:	2301      	movs	r3, #1
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <_kill>:

int _kill(int pid, int sig)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a52:	f008 fa2d 	bl	8009eb0 <__errno>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2216      	movs	r2, #22
 8001a5a:	601a      	str	r2, [r3, #0]
  return -1;
 8001a5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <_exit>:

void _exit (int status)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f7ff ffe7 	bl	8001a48 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a7a:	e7fe      	b.n	8001a7a <_exit+0x12>

08001a7c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a88:	2300      	movs	r3, #0
 8001a8a:	617b      	str	r3, [r7, #20]
 8001a8c:	e00a      	b.n	8001aa4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a8e:	f3af 8000 	nop.w
 8001a92:	4601      	mov	r1, r0
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	1c5a      	adds	r2, r3, #1
 8001a98:	60ba      	str	r2, [r7, #8]
 8001a9a:	b2ca      	uxtb	r2, r1
 8001a9c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	617b      	str	r3, [r7, #20]
 8001aa4:	697a      	ldr	r2, [r7, #20]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	dbf0      	blt.n	8001a8e <_read+0x12>
  }

  return len;
 8001aac:	687b      	ldr	r3, [r7, #4]
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3718      	adds	r7, #24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b086      	sub	sp, #24
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	60f8      	str	r0, [r7, #12]
 8001abe:	60b9      	str	r1, [r7, #8]
 8001ac0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	617b      	str	r3, [r7, #20]
 8001ac6:	e009      	b.n	8001adc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	1c5a      	adds	r2, r3, #1
 8001acc:	60ba      	str	r2, [r7, #8]
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	617b      	str	r3, [r7, #20]
 8001adc:	697a      	ldr	r2, [r7, #20]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	dbf1      	blt.n	8001ac8 <_write+0x12>
  }
  return len;
 8001ae4:	687b      	ldr	r3, [r7, #4]
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3718      	adds	r7, #24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <_close>:

int _close(int file)
{
 8001aee:	b480      	push	{r7}
 8001af0:	b083      	sub	sp, #12
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001af6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr

08001b06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b06:	b480      	push	{r7}
 8001b08:	b083      	sub	sp, #12
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
 8001b0e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b16:	605a      	str	r2, [r3, #4]
  return 0;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr

08001b26 <_isatty>:

int _isatty(int file)
{
 8001b26:	b480      	push	{r7}
 8001b28:	b083      	sub	sp, #12
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b2e:	2301      	movs	r3, #1
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3714      	adds	r7, #20
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
	...

08001b58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b60:	4a14      	ldr	r2, [pc, #80]	; (8001bb4 <_sbrk+0x5c>)
 8001b62:	4b15      	ldr	r3, [pc, #84]	; (8001bb8 <_sbrk+0x60>)
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b6c:	4b13      	ldr	r3, [pc, #76]	; (8001bbc <_sbrk+0x64>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d102      	bne.n	8001b7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b74:	4b11      	ldr	r3, [pc, #68]	; (8001bbc <_sbrk+0x64>)
 8001b76:	4a12      	ldr	r2, [pc, #72]	; (8001bc0 <_sbrk+0x68>)
 8001b78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b7a:	4b10      	ldr	r3, [pc, #64]	; (8001bbc <_sbrk+0x64>)
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4413      	add	r3, r2
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d207      	bcs.n	8001b98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b88:	f008 f992 	bl	8009eb0 <__errno>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	220c      	movs	r2, #12
 8001b90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b96:	e009      	b.n	8001bac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b98:	4b08      	ldr	r3, [pc, #32]	; (8001bbc <_sbrk+0x64>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b9e:	4b07      	ldr	r3, [pc, #28]	; (8001bbc <_sbrk+0x64>)
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	4a05      	ldr	r2, [pc, #20]	; (8001bbc <_sbrk+0x64>)
 8001ba8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001baa:	68fb      	ldr	r3, [r7, #12]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3718      	adds	r7, #24
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	20018000 	.word	0x20018000
 8001bb8:	00000400 	.word	0x00000400
 8001bbc:	20000604 	.word	0x20000604
 8001bc0:	20002fc0 	.word	0x20002fc0

08001bc4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001bc8:	4b06      	ldr	r3, [pc, #24]	; (8001be4 <SystemInit+0x20>)
 8001bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bce:	4a05      	ldr	r2, [pc, #20]	; (8001be4 <SystemInit+0x20>)
 8001bd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001bd8:	bf00      	nop
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	e000ed00 	.word	0xe000ed00

08001be8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001be8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c20 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bec:	f7ff ffea 	bl	8001bc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bf0:	480c      	ldr	r0, [pc, #48]	; (8001c24 <LoopForever+0x6>)
  ldr r1, =_edata
 8001bf2:	490d      	ldr	r1, [pc, #52]	; (8001c28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bf4:	4a0d      	ldr	r2, [pc, #52]	; (8001c2c <LoopForever+0xe>)
  movs r3, #0
 8001bf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bf8:	e002      	b.n	8001c00 <LoopCopyDataInit>

08001bfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bfe:	3304      	adds	r3, #4

08001c00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c04:	d3f9      	bcc.n	8001bfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c06:	4a0a      	ldr	r2, [pc, #40]	; (8001c30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c08:	4c0a      	ldr	r4, [pc, #40]	; (8001c34 <LoopForever+0x16>)
  movs r3, #0
 8001c0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c0c:	e001      	b.n	8001c12 <LoopFillZerobss>

08001c0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c10:	3204      	adds	r2, #4

08001c12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c14:	d3fb      	bcc.n	8001c0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c16:	f008 f951 	bl	8009ebc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c1a:	f7ff faeb 	bl	80011f4 <main>

08001c1e <LoopForever>:

LoopForever:
    b LoopForever
 8001c1e:	e7fe      	b.n	8001c1e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001c20:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001c24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c28:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001c2c:	0800c44c 	.word	0x0800c44c
  ldr r2, =_sbss
 8001c30:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001c34:	20002fbc 	.word	0x20002fbc

08001c38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c38:	e7fe      	b.n	8001c38 <ADC1_2_IRQHandler>
	...

08001c3c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c42:	2300      	movs	r3, #0
 8001c44:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c46:	4b0c      	ldr	r3, [pc, #48]	; (8001c78 <HAL_Init+0x3c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a0b      	ldr	r2, [pc, #44]	; (8001c78 <HAL_Init+0x3c>)
 8001c4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c50:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c52:	2003      	movs	r0, #3
 8001c54:	f000 f93e 	bl	8001ed4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c58:	200f      	movs	r0, #15
 8001c5a:	f000 f80f 	bl	8001c7c <HAL_InitTick>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d002      	beq.n	8001c6a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	71fb      	strb	r3, [r7, #7]
 8001c68:	e001      	b.n	8001c6e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c6a:	f7ff fd1d 	bl	80016a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c6e:	79fb      	ldrb	r3, [r7, #7]
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40022000 	.word	0x40022000

08001c7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c84:	2300      	movs	r3, #0
 8001c86:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001c88:	4b17      	ldr	r3, [pc, #92]	; (8001ce8 <HAL_InitTick+0x6c>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d023      	beq.n	8001cd8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c90:	4b16      	ldr	r3, [pc, #88]	; (8001cec <HAL_InitTick+0x70>)
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	4b14      	ldr	r3, [pc, #80]	; (8001ce8 <HAL_InitTick+0x6c>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	4619      	mov	r1, r3
 8001c9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f000 f949 	bl	8001f3e <HAL_SYSTICK_Config>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d10f      	bne.n	8001cd2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2b0f      	cmp	r3, #15
 8001cb6:	d809      	bhi.n	8001ccc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cb8:	2200      	movs	r2, #0
 8001cba:	6879      	ldr	r1, [r7, #4]
 8001cbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001cc0:	f000 f913 	bl	8001eea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001cc4:	4a0a      	ldr	r2, [pc, #40]	; (8001cf0 <HAL_InitTick+0x74>)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6013      	str	r3, [r2, #0]
 8001cca:	e007      	b.n	8001cdc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	73fb      	strb	r3, [r7, #15]
 8001cd0:	e004      	b.n	8001cdc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	73fb      	strb	r3, [r7, #15]
 8001cd6:	e001      	b.n	8001cdc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3710      	adds	r7, #16
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	20000008 	.word	0x20000008
 8001cec:	20000000 	.word	0x20000000
 8001cf0:	20000004 	.word	0x20000004

08001cf4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001cf8:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <HAL_IncTick+0x20>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	4b06      	ldr	r3, [pc, #24]	; (8001d18 <HAL_IncTick+0x24>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4413      	add	r3, r2
 8001d04:	4a04      	ldr	r2, [pc, #16]	; (8001d18 <HAL_IncTick+0x24>)
 8001d06:	6013      	str	r3, [r2, #0]
}
 8001d08:	bf00      	nop
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	20000008 	.word	0x20000008
 8001d18:	20000608 	.word	0x20000608

08001d1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d20:	4b03      	ldr	r3, [pc, #12]	; (8001d30 <HAL_GetTick+0x14>)
 8001d22:	681b      	ldr	r3, [r3, #0]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	20000608 	.word	0x20000608

08001d34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b085      	sub	sp, #20
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f003 0307 	and.w	r3, r3, #7
 8001d42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d44:	4b0c      	ldr	r3, [pc, #48]	; (8001d78 <__NVIC_SetPriorityGrouping+0x44>)
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d4a:	68ba      	ldr	r2, [r7, #8]
 8001d4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d50:	4013      	ands	r3, r2
 8001d52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d66:	4a04      	ldr	r2, [pc, #16]	; (8001d78 <__NVIC_SetPriorityGrouping+0x44>)
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	60d3      	str	r3, [r2, #12]
}
 8001d6c:	bf00      	nop
 8001d6e:	3714      	adds	r7, #20
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr
 8001d78:	e000ed00 	.word	0xe000ed00

08001d7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d80:	4b04      	ldr	r3, [pc, #16]	; (8001d94 <__NVIC_GetPriorityGrouping+0x18>)
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	0a1b      	lsrs	r3, r3, #8
 8001d86:	f003 0307 	and.w	r3, r3, #7
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr
 8001d94:	e000ed00 	.word	0xe000ed00

08001d98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	4603      	mov	r3, r0
 8001da0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	db0b      	blt.n	8001dc2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001daa:	79fb      	ldrb	r3, [r7, #7]
 8001dac:	f003 021f 	and.w	r2, r3, #31
 8001db0:	4907      	ldr	r1, [pc, #28]	; (8001dd0 <__NVIC_EnableIRQ+0x38>)
 8001db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db6:	095b      	lsrs	r3, r3, #5
 8001db8:	2001      	movs	r0, #1
 8001dba:	fa00 f202 	lsl.w	r2, r0, r2
 8001dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001dc2:	bf00      	nop
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	e000e100 	.word	0xe000e100

08001dd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	4603      	mov	r3, r0
 8001ddc:	6039      	str	r1, [r7, #0]
 8001dde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	db0a      	blt.n	8001dfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	b2da      	uxtb	r2, r3
 8001dec:	490c      	ldr	r1, [pc, #48]	; (8001e20 <__NVIC_SetPriority+0x4c>)
 8001dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df2:	0112      	lsls	r2, r2, #4
 8001df4:	b2d2      	uxtb	r2, r2
 8001df6:	440b      	add	r3, r1
 8001df8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dfc:	e00a      	b.n	8001e14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	b2da      	uxtb	r2, r3
 8001e02:	4908      	ldr	r1, [pc, #32]	; (8001e24 <__NVIC_SetPriority+0x50>)
 8001e04:	79fb      	ldrb	r3, [r7, #7]
 8001e06:	f003 030f 	and.w	r3, r3, #15
 8001e0a:	3b04      	subs	r3, #4
 8001e0c:	0112      	lsls	r2, r2, #4
 8001e0e:	b2d2      	uxtb	r2, r2
 8001e10:	440b      	add	r3, r1
 8001e12:	761a      	strb	r2, [r3, #24]
}
 8001e14:	bf00      	nop
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr
 8001e20:	e000e100 	.word	0xe000e100
 8001e24:	e000ed00 	.word	0xe000ed00

08001e28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b089      	sub	sp, #36	; 0x24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f003 0307 	and.w	r3, r3, #7
 8001e3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	f1c3 0307 	rsb	r3, r3, #7
 8001e42:	2b04      	cmp	r3, #4
 8001e44:	bf28      	it	cs
 8001e46:	2304      	movcs	r3, #4
 8001e48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	3304      	adds	r3, #4
 8001e4e:	2b06      	cmp	r3, #6
 8001e50:	d902      	bls.n	8001e58 <NVIC_EncodePriority+0x30>
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	3b03      	subs	r3, #3
 8001e56:	e000      	b.n	8001e5a <NVIC_EncodePriority+0x32>
 8001e58:	2300      	movs	r3, #0
 8001e5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	fa02 f303 	lsl.w	r3, r2, r3
 8001e66:	43da      	mvns	r2, r3
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	401a      	ands	r2, r3
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	fa01 f303 	lsl.w	r3, r1, r3
 8001e7a:	43d9      	mvns	r1, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e80:	4313      	orrs	r3, r2
         );
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3724      	adds	r7, #36	; 0x24
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
	...

08001e90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ea0:	d301      	bcc.n	8001ea6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e00f      	b.n	8001ec6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ea6:	4a0a      	ldr	r2, [pc, #40]	; (8001ed0 <SysTick_Config+0x40>)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	3b01      	subs	r3, #1
 8001eac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eae:	210f      	movs	r1, #15
 8001eb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001eb4:	f7ff ff8e 	bl	8001dd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001eb8:	4b05      	ldr	r3, [pc, #20]	; (8001ed0 <SysTick_Config+0x40>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ebe:	4b04      	ldr	r3, [pc, #16]	; (8001ed0 <SysTick_Config+0x40>)
 8001ec0:	2207      	movs	r2, #7
 8001ec2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	e000e010 	.word	0xe000e010

08001ed4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f7ff ff29 	bl	8001d34 <__NVIC_SetPriorityGrouping>
}
 8001ee2:	bf00      	nop
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b086      	sub	sp, #24
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	60b9      	str	r1, [r7, #8]
 8001ef4:	607a      	str	r2, [r7, #4]
 8001ef6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001efc:	f7ff ff3e 	bl	8001d7c <__NVIC_GetPriorityGrouping>
 8001f00:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	68b9      	ldr	r1, [r7, #8]
 8001f06:	6978      	ldr	r0, [r7, #20]
 8001f08:	f7ff ff8e 	bl	8001e28 <NVIC_EncodePriority>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f12:	4611      	mov	r1, r2
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7ff ff5d 	bl	8001dd4 <__NVIC_SetPriority>
}
 8001f1a:	bf00      	nop
 8001f1c:	3718      	adds	r7, #24
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b082      	sub	sp, #8
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	4603      	mov	r3, r0
 8001f2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff ff31 	bl	8001d98 <__NVIC_EnableIRQ>
}
 8001f36:	bf00      	nop
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b082      	sub	sp, #8
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f7ff ffa2 	bl	8001e90 <SysTick_Config>
 8001f4c:	4603      	mov	r3, r0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f56:	b480      	push	{r7}
 8001f58:	b085      	sub	sp, #20
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d008      	beq.n	8001f80 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2204      	movs	r2, #4
 8001f72:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e022      	b.n	8001fc6 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f022 020e 	bic.w	r2, r2, #14
 8001f8e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f022 0201 	bic.w	r2, r2, #1
 8001f9e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa4:	f003 021c 	and.w	r2, r3, #28
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fac:	2101      	movs	r1, #1
 8001fae:	fa01 f202 	lsl.w	r2, r1, r2
 8001fb2:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001fc4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3714      	adds	r7, #20
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr

08001fd2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b084      	sub	sp, #16
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d005      	beq.n	8001ff6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2204      	movs	r2, #4
 8001fee:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	73fb      	strb	r3, [r7, #15]
 8001ff4:	e029      	b.n	800204a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f022 020e 	bic.w	r2, r2, #14
 8002004:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f022 0201 	bic.w	r2, r2, #1
 8002014:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201a:	f003 021c 	and.w	r2, r3, #28
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002022:	2101      	movs	r1, #1
 8002024:	fa01 f202 	lsl.w	r2, r1, r2
 8002028:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2201      	movs	r2, #1
 800202e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800203e:	2b00      	cmp	r3, #0
 8002040:	d003      	beq.n	800204a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	4798      	blx	r3
    }
  }
  return status;
 800204a:	7bfb      	ldrb	r3, [r7, #15]
}
 800204c:	4618      	mov	r0, r3
 800204e:	3710      	adds	r7, #16
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002062:	b2db      	uxtb	r3, r3
}
 8002064:	4618      	mov	r0, r3
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002070:	b480      	push	{r7}
 8002072:	b087      	sub	sp, #28
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800207a:	2300      	movs	r3, #0
 800207c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800207e:	e17f      	b.n	8002380 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	2101      	movs	r1, #1
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	fa01 f303 	lsl.w	r3, r1, r3
 800208c:	4013      	ands	r3, r2
 800208e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2b00      	cmp	r3, #0
 8002094:	f000 8171 	beq.w	800237a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f003 0303 	and.w	r3, r3, #3
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d005      	beq.n	80020b0 <HAL_GPIO_Init+0x40>
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f003 0303 	and.w	r3, r3, #3
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d130      	bne.n	8002112 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	2203      	movs	r2, #3
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	43db      	mvns	r3, r3
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	4013      	ands	r3, r2
 80020c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	68da      	ldr	r2, [r3, #12]
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	693a      	ldr	r2, [r7, #16]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	693a      	ldr	r2, [r7, #16]
 80020de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020e6:	2201      	movs	r2, #1
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	43db      	mvns	r3, r3
 80020f0:	693a      	ldr	r2, [r7, #16]
 80020f2:	4013      	ands	r3, r2
 80020f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	091b      	lsrs	r3, r3, #4
 80020fc:	f003 0201 	and.w	r2, r3, #1
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	693a      	ldr	r2, [r7, #16]
 8002108:	4313      	orrs	r3, r2
 800210a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f003 0303 	and.w	r3, r3, #3
 800211a:	2b03      	cmp	r3, #3
 800211c:	d118      	bne.n	8002150 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002122:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002124:	2201      	movs	r2, #1
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	43db      	mvns	r3, r3
 800212e:	693a      	ldr	r2, [r7, #16]
 8002130:	4013      	ands	r3, r2
 8002132:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	08db      	lsrs	r3, r3, #3
 800213a:	f003 0201 	and.w	r2, r3, #1
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	693a      	ldr	r2, [r7, #16]
 8002146:	4313      	orrs	r3, r2
 8002148:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	693a      	ldr	r2, [r7, #16]
 800214e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f003 0303 	and.w	r3, r3, #3
 8002158:	2b03      	cmp	r3, #3
 800215a:	d017      	beq.n	800218c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	2203      	movs	r2, #3
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	43db      	mvns	r3, r3
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	4013      	ands	r3, r2
 8002172:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	689a      	ldr	r2, [r3, #8]
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	4313      	orrs	r3, r2
 8002184:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	693a      	ldr	r2, [r7, #16]
 800218a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f003 0303 	and.w	r3, r3, #3
 8002194:	2b02      	cmp	r3, #2
 8002196:	d123      	bne.n	80021e0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	08da      	lsrs	r2, r3, #3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	3208      	adds	r2, #8
 80021a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	f003 0307 	and.w	r3, r3, #7
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	220f      	movs	r2, #15
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	43db      	mvns	r3, r3
 80021b6:	693a      	ldr	r2, [r7, #16]
 80021b8:	4013      	ands	r3, r2
 80021ba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	691a      	ldr	r2, [r3, #16]
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	f003 0307 	and.w	r3, r3, #7
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	fa02 f303 	lsl.w	r3, r2, r3
 80021cc:	693a      	ldr	r2, [r7, #16]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	08da      	lsrs	r2, r3, #3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	3208      	adds	r2, #8
 80021da:	6939      	ldr	r1, [r7, #16]
 80021dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	2203      	movs	r2, #3
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	43db      	mvns	r3, r3
 80021f2:	693a      	ldr	r2, [r7, #16]
 80021f4:	4013      	ands	r3, r2
 80021f6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f003 0203 	and.w	r2, r3, #3
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	693a      	ldr	r2, [r7, #16]
 800220a:	4313      	orrs	r3, r2
 800220c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	693a      	ldr	r2, [r7, #16]
 8002212:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800221c:	2b00      	cmp	r3, #0
 800221e:	f000 80ac 	beq.w	800237a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002222:	4b5f      	ldr	r3, [pc, #380]	; (80023a0 <HAL_GPIO_Init+0x330>)
 8002224:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002226:	4a5e      	ldr	r2, [pc, #376]	; (80023a0 <HAL_GPIO_Init+0x330>)
 8002228:	f043 0301 	orr.w	r3, r3, #1
 800222c:	6613      	str	r3, [r2, #96]	; 0x60
 800222e:	4b5c      	ldr	r3, [pc, #368]	; (80023a0 <HAL_GPIO_Init+0x330>)
 8002230:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	60bb      	str	r3, [r7, #8]
 8002238:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800223a:	4a5a      	ldr	r2, [pc, #360]	; (80023a4 <HAL_GPIO_Init+0x334>)
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	089b      	lsrs	r3, r3, #2
 8002240:	3302      	adds	r3, #2
 8002242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002246:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	f003 0303 	and.w	r3, r3, #3
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	220f      	movs	r2, #15
 8002252:	fa02 f303 	lsl.w	r3, r2, r3
 8002256:	43db      	mvns	r3, r3
 8002258:	693a      	ldr	r2, [r7, #16]
 800225a:	4013      	ands	r3, r2
 800225c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002264:	d025      	beq.n	80022b2 <HAL_GPIO_Init+0x242>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a4f      	ldr	r2, [pc, #316]	; (80023a8 <HAL_GPIO_Init+0x338>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d01f      	beq.n	80022ae <HAL_GPIO_Init+0x23e>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a4e      	ldr	r2, [pc, #312]	; (80023ac <HAL_GPIO_Init+0x33c>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d019      	beq.n	80022aa <HAL_GPIO_Init+0x23a>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a4d      	ldr	r2, [pc, #308]	; (80023b0 <HAL_GPIO_Init+0x340>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d013      	beq.n	80022a6 <HAL_GPIO_Init+0x236>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a4c      	ldr	r2, [pc, #304]	; (80023b4 <HAL_GPIO_Init+0x344>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d00d      	beq.n	80022a2 <HAL_GPIO_Init+0x232>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a4b      	ldr	r2, [pc, #300]	; (80023b8 <HAL_GPIO_Init+0x348>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d007      	beq.n	800229e <HAL_GPIO_Init+0x22e>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a4a      	ldr	r2, [pc, #296]	; (80023bc <HAL_GPIO_Init+0x34c>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d101      	bne.n	800229a <HAL_GPIO_Init+0x22a>
 8002296:	2306      	movs	r3, #6
 8002298:	e00c      	b.n	80022b4 <HAL_GPIO_Init+0x244>
 800229a:	2307      	movs	r3, #7
 800229c:	e00a      	b.n	80022b4 <HAL_GPIO_Init+0x244>
 800229e:	2305      	movs	r3, #5
 80022a0:	e008      	b.n	80022b4 <HAL_GPIO_Init+0x244>
 80022a2:	2304      	movs	r3, #4
 80022a4:	e006      	b.n	80022b4 <HAL_GPIO_Init+0x244>
 80022a6:	2303      	movs	r3, #3
 80022a8:	e004      	b.n	80022b4 <HAL_GPIO_Init+0x244>
 80022aa:	2302      	movs	r3, #2
 80022ac:	e002      	b.n	80022b4 <HAL_GPIO_Init+0x244>
 80022ae:	2301      	movs	r3, #1
 80022b0:	e000      	b.n	80022b4 <HAL_GPIO_Init+0x244>
 80022b2:	2300      	movs	r3, #0
 80022b4:	697a      	ldr	r2, [r7, #20]
 80022b6:	f002 0203 	and.w	r2, r2, #3
 80022ba:	0092      	lsls	r2, r2, #2
 80022bc:	4093      	lsls	r3, r2
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80022c4:	4937      	ldr	r1, [pc, #220]	; (80023a4 <HAL_GPIO_Init+0x334>)
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	089b      	lsrs	r3, r3, #2
 80022ca:	3302      	adds	r3, #2
 80022cc:	693a      	ldr	r2, [r7, #16]
 80022ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80022d2:	4b3b      	ldr	r3, [pc, #236]	; (80023c0 <HAL_GPIO_Init+0x350>)
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	43db      	mvns	r3, r3
 80022dc:	693a      	ldr	r2, [r7, #16]
 80022de:	4013      	ands	r3, r2
 80022e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d003      	beq.n	80022f6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80022f6:	4a32      	ldr	r2, [pc, #200]	; (80023c0 <HAL_GPIO_Init+0x350>)
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80022fc:	4b30      	ldr	r3, [pc, #192]	; (80023c0 <HAL_GPIO_Init+0x350>)
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	43db      	mvns	r3, r3
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	4013      	ands	r3, r2
 800230a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d003      	beq.n	8002320 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	4313      	orrs	r3, r2
 800231e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002320:	4a27      	ldr	r2, [pc, #156]	; (80023c0 <HAL_GPIO_Init+0x350>)
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002326:	4b26      	ldr	r3, [pc, #152]	; (80023c0 <HAL_GPIO_Init+0x350>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	43db      	mvns	r3, r3
 8002330:	693a      	ldr	r2, [r7, #16]
 8002332:	4013      	ands	r3, r2
 8002334:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d003      	beq.n	800234a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	4313      	orrs	r3, r2
 8002348:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800234a:	4a1d      	ldr	r2, [pc, #116]	; (80023c0 <HAL_GPIO_Init+0x350>)
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002350:	4b1b      	ldr	r3, [pc, #108]	; (80023c0 <HAL_GPIO_Init+0x350>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	43db      	mvns	r3, r3
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	4013      	ands	r3, r2
 800235e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d003      	beq.n	8002374 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800236c:	693a      	ldr	r2, [r7, #16]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	4313      	orrs	r3, r2
 8002372:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002374:	4a12      	ldr	r2, [pc, #72]	; (80023c0 <HAL_GPIO_Init+0x350>)
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	3301      	adds	r3, #1
 800237e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	fa22 f303 	lsr.w	r3, r2, r3
 800238a:	2b00      	cmp	r3, #0
 800238c:	f47f ae78 	bne.w	8002080 <HAL_GPIO_Init+0x10>
  }
}
 8002390:	bf00      	nop
 8002392:	bf00      	nop
 8002394:	371c      	adds	r7, #28
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	40021000 	.word	0x40021000
 80023a4:	40010000 	.word	0x40010000
 80023a8:	48000400 	.word	0x48000400
 80023ac:	48000800 	.word	0x48000800
 80023b0:	48000c00 	.word	0x48000c00
 80023b4:	48001000 	.word	0x48001000
 80023b8:	48001400 	.word	0x48001400
 80023bc:	48001800 	.word	0x48001800
 80023c0:	40010400 	.word	0x40010400

080023c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	460b      	mov	r3, r1
 80023ce:	807b      	strh	r3, [r7, #2]
 80023d0:	4613      	mov	r3, r2
 80023d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023d4:	787b      	ldrb	r3, [r7, #1]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d003      	beq.n	80023e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023da:	887a      	ldrh	r2, [r7, #2]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80023e0:	e002      	b.n	80023e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80023e2:	887a      	ldrh	r2, [r7, #2]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	460b      	mov	r3, r1
 80023fe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	695b      	ldr	r3, [r3, #20]
 8002404:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002406:	887a      	ldrh	r2, [r7, #2]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	4013      	ands	r3, r2
 800240c:	041a      	lsls	r2, r3, #16
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	43d9      	mvns	r1, r3
 8002412:	887b      	ldrh	r3, [r7, #2]
 8002414:	400b      	ands	r3, r1
 8002416:	431a      	orrs	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	619a      	str	r2, [r3, #24]
}
 800241c:	bf00      	nop
 800241e:	3714      	adds	r7, #20
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	4603      	mov	r3, r0
 8002430:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002432:	4b08      	ldr	r3, [pc, #32]	; (8002454 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002434:	695a      	ldr	r2, [r3, #20]
 8002436:	88fb      	ldrh	r3, [r7, #6]
 8002438:	4013      	ands	r3, r2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d006      	beq.n	800244c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800243e:	4a05      	ldr	r2, [pc, #20]	; (8002454 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002440:	88fb      	ldrh	r3, [r7, #6]
 8002442:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002444:	88fb      	ldrh	r3, [r7, #6]
 8002446:	4618      	mov	r0, r3
 8002448:	f7fe fe08 	bl	800105c <HAL_GPIO_EXTI_Callback>
  }
}
 800244c:	bf00      	nop
 800244e:	3708      	adds	r7, #8
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	40010400 	.word	0x40010400

08002458 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d101      	bne.n	800246a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e08d      	b.n	8002586 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002470:	b2db      	uxtb	r3, r3
 8002472:	2b00      	cmp	r3, #0
 8002474:	d106      	bne.n	8002484 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f7ff f93a 	bl	80016f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2224      	movs	r2, #36	; 0x24
 8002488:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f022 0201 	bic.w	r2, r2, #1
 800249a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685a      	ldr	r2, [r3, #4]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024a8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	689a      	ldr	r2, [r3, #8]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024b8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d107      	bne.n	80024d2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	689a      	ldr	r2, [r3, #8]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024ce:	609a      	str	r2, [r3, #8]
 80024d0:	e006      	b.n	80024e0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	689a      	ldr	r2, [r3, #8]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80024de:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d108      	bne.n	80024fa <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	685a      	ldr	r2, [r3, #4]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024f6:	605a      	str	r2, [r3, #4]
 80024f8:	e007      	b.n	800250a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	685a      	ldr	r2, [r3, #4]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002508:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	6812      	ldr	r2, [r2, #0]
 8002514:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002518:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800251c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	68da      	ldr	r2, [r3, #12]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800252c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	691a      	ldr	r2, [r3, #16]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	695b      	ldr	r3, [r3, #20]
 8002536:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	430a      	orrs	r2, r1
 8002546:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	69d9      	ldr	r1, [r3, #28]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a1a      	ldr	r2, [r3, #32]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	430a      	orrs	r2, r1
 8002556:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f042 0201 	orr.w	r2, r2, #1
 8002566:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2220      	movs	r2, #32
 8002572:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
	...

08002590 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b088      	sub	sp, #32
 8002594:	af02      	add	r7, sp, #8
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	4608      	mov	r0, r1
 800259a:	4611      	mov	r1, r2
 800259c:	461a      	mov	r2, r3
 800259e:	4603      	mov	r3, r0
 80025a0:	817b      	strh	r3, [r7, #10]
 80025a2:	460b      	mov	r3, r1
 80025a4:	813b      	strh	r3, [r7, #8]
 80025a6:	4613      	mov	r3, r2
 80025a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b20      	cmp	r3, #32
 80025b4:	f040 80fd 	bne.w	80027b2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80025b8:	6a3b      	ldr	r3, [r7, #32]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d002      	beq.n	80025c4 <HAL_I2C_Mem_Read+0x34>
 80025be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d105      	bne.n	80025d0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025ca:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e0f1      	b.n	80027b4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d101      	bne.n	80025de <HAL_I2C_Mem_Read+0x4e>
 80025da:	2302      	movs	r3, #2
 80025dc:	e0ea      	b.n	80027b4 <HAL_I2C_Mem_Read+0x224>
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2201      	movs	r2, #1
 80025e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80025e6:	f7ff fb99 	bl	8001d1c <HAL_GetTick>
 80025ea:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	9300      	str	r3, [sp, #0]
 80025f0:	2319      	movs	r3, #25
 80025f2:	2201      	movs	r2, #1
 80025f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025f8:	68f8      	ldr	r0, [r7, #12]
 80025fa:	f001 fbe0 	bl	8003dbe <I2C_WaitOnFlagUntilTimeout>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e0d5      	b.n	80027b4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2222      	movs	r2, #34	; 0x22
 800260c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2240      	movs	r2, #64	; 0x40
 8002614:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2200      	movs	r2, #0
 800261c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6a3a      	ldr	r2, [r7, #32]
 8002622:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002628:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2200      	movs	r2, #0
 800262e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002630:	88f8      	ldrh	r0, [r7, #6]
 8002632:	893a      	ldrh	r2, [r7, #8]
 8002634:	8979      	ldrh	r1, [r7, #10]
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	9301      	str	r3, [sp, #4]
 800263a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800263c:	9300      	str	r3, [sp, #0]
 800263e:	4603      	mov	r3, r0
 8002640:	68f8      	ldr	r0, [r7, #12]
 8002642:	f000 fec3 	bl	80033cc <I2C_RequestMemoryRead>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d005      	beq.n	8002658 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e0ad      	b.n	80027b4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800265c:	b29b      	uxth	r3, r3
 800265e:	2bff      	cmp	r3, #255	; 0xff
 8002660:	d90e      	bls.n	8002680 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	22ff      	movs	r2, #255	; 0xff
 8002666:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800266c:	b2da      	uxtb	r2, r3
 800266e:	8979      	ldrh	r1, [r7, #10]
 8002670:	4b52      	ldr	r3, [pc, #328]	; (80027bc <HAL_I2C_Mem_Read+0x22c>)
 8002672:	9300      	str	r3, [sp, #0]
 8002674:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002678:	68f8      	ldr	r0, [r7, #12]
 800267a:	f001 fd59 	bl	8004130 <I2C_TransferConfig>
 800267e:	e00f      	b.n	80026a0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002684:	b29a      	uxth	r2, r3
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800268e:	b2da      	uxtb	r2, r3
 8002690:	8979      	ldrh	r1, [r7, #10]
 8002692:	4b4a      	ldr	r3, [pc, #296]	; (80027bc <HAL_I2C_Mem_Read+0x22c>)
 8002694:	9300      	str	r3, [sp, #0]
 8002696:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800269a:	68f8      	ldr	r0, [r7, #12]
 800269c:	f001 fd48 	bl	8004130 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	9300      	str	r3, [sp, #0]
 80026a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a6:	2200      	movs	r2, #0
 80026a8:	2104      	movs	r1, #4
 80026aa:	68f8      	ldr	r0, [r7, #12]
 80026ac:	f001 fb87 	bl	8003dbe <I2C_WaitOnFlagUntilTimeout>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e07c      	b.n	80027b4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c4:	b2d2      	uxtb	r2, r2
 80026c6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026cc:	1c5a      	adds	r2, r3, #1
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026d6:	3b01      	subs	r3, #1
 80026d8:	b29a      	uxth	r2, r3
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	3b01      	subs	r3, #1
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d034      	beq.n	8002760 <HAL_I2C_Mem_Read+0x1d0>
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d130      	bne.n	8002760 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	9300      	str	r3, [sp, #0]
 8002702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002704:	2200      	movs	r2, #0
 8002706:	2180      	movs	r1, #128	; 0x80
 8002708:	68f8      	ldr	r0, [r7, #12]
 800270a:	f001 fb58 	bl	8003dbe <I2C_WaitOnFlagUntilTimeout>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d001      	beq.n	8002718 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e04d      	b.n	80027b4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800271c:	b29b      	uxth	r3, r3
 800271e:	2bff      	cmp	r3, #255	; 0xff
 8002720:	d90e      	bls.n	8002740 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	22ff      	movs	r2, #255	; 0xff
 8002726:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800272c:	b2da      	uxtb	r2, r3
 800272e:	8979      	ldrh	r1, [r7, #10]
 8002730:	2300      	movs	r3, #0
 8002732:	9300      	str	r3, [sp, #0]
 8002734:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002738:	68f8      	ldr	r0, [r7, #12]
 800273a:	f001 fcf9 	bl	8004130 <I2C_TransferConfig>
 800273e:	e00f      	b.n	8002760 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002744:	b29a      	uxth	r2, r3
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800274e:	b2da      	uxtb	r2, r3
 8002750:	8979      	ldrh	r1, [r7, #10]
 8002752:	2300      	movs	r3, #0
 8002754:	9300      	str	r3, [sp, #0]
 8002756:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800275a:	68f8      	ldr	r0, [r7, #12]
 800275c:	f001 fce8 	bl	8004130 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002764:	b29b      	uxth	r3, r3
 8002766:	2b00      	cmp	r3, #0
 8002768:	d19a      	bne.n	80026a0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800276a:	697a      	ldr	r2, [r7, #20]
 800276c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800276e:	68f8      	ldr	r0, [r7, #12]
 8002770:	f001 fbbb 	bl	8003eea <I2C_WaitOnSTOPFlagUntilTimeout>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e01a      	b.n	80027b4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2220      	movs	r2, #32
 8002784:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	6859      	ldr	r1, [r3, #4]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	4b0b      	ldr	r3, [pc, #44]	; (80027c0 <HAL_I2C_Mem_Read+0x230>)
 8002792:	400b      	ands	r3, r1
 8002794:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2220      	movs	r2, #32
 800279a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027ae:	2300      	movs	r3, #0
 80027b0:	e000      	b.n	80027b4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80027b2:	2302      	movs	r3, #2
  }
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3718      	adds	r7, #24
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	80002400 	.word	0x80002400
 80027c0:	fe00e800 	.word	0xfe00e800

080027c4 <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b086      	sub	sp, #24
 80027c8:	af02      	add	r7, sp, #8
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	4608      	mov	r0, r1
 80027ce:	4611      	mov	r1, r2
 80027d0:	461a      	mov	r2, r3
 80027d2:	4603      	mov	r3, r0
 80027d4:	817b      	strh	r3, [r7, #10]
 80027d6:	460b      	mov	r3, r1
 80027d8:	813b      	strh	r3, [r7, #8]
 80027da:	4613      	mov	r3, r2
 80027dc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	2b20      	cmp	r3, #32
 80027e8:	d166      	bne.n	80028b8 <HAL_I2C_Mem_Read_IT+0xf4>
  {
    if ((pData == NULL) || (Size == 0U))
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d002      	beq.n	80027f6 <HAL_I2C_Mem_Read_IT+0x32>
 80027f0:	8bbb      	ldrh	r3, [r7, #28]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d105      	bne.n	8002802 <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027fc:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e05b      	b.n	80028ba <HAL_I2C_Mem_Read_IT+0xf6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	699b      	ldr	r3, [r3, #24]
 8002808:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800280c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002810:	d101      	bne.n	8002816 <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 8002812:	2302      	movs	r3, #2
 8002814:	e051      	b.n	80028ba <HAL_I2C_Mem_Read_IT+0xf6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800281c:	2b01      	cmp	r3, #1
 800281e:	d101      	bne.n	8002824 <HAL_I2C_Mem_Read_IT+0x60>
 8002820:	2302      	movs	r3, #2
 8002822:	e04a      	b.n	80028ba <HAL_I2C_Mem_Read_IT+0xf6>
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2222      	movs	r2, #34	; 0x22
 8002830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2240      	movs	r2, #64	; 0x40
 8002838:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2200      	movs	r2, #0
 8002840:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	8bba      	ldrh	r2, [r7, #28]
 800284c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	4a1c      	ldr	r2, [pc, #112]	; (80028c4 <HAL_I2C_Mem_Read_IT+0x100>)
 8002852:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	4a1c      	ldr	r2, [pc, #112]	; (80028c8 <HAL_I2C_Mem_Read_IT+0x104>)
 8002858:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->Devaddress  = DevAddress;
 800285a:	897a      	ldrh	r2, [r7, #10]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002860:	88fb      	ldrh	r3, [r7, #6]
 8002862:	2b01      	cmp	r3, #1
 8002864:	d109      	bne.n	800287a <HAL_I2C_Mem_Read_IT+0xb6>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002866:	893b      	ldrh	r3, [r7, #8]
 8002868:	b2da      	uxtb	r2, r3
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002876:	651a      	str	r2, [r3, #80]	; 0x50
 8002878:	e00b      	b.n	8002892 <HAL_I2C_Mem_Read_IT+0xce>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800287a:	893b      	ldrh	r3, [r7, #8]
 800287c:	0a1b      	lsrs	r3, r3, #8
 800287e:	b29b      	uxth	r3, r3
 8002880:	b2da      	uxtb	r2, r3
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	629a      	str	r2, [r3, #40]	; 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8002888:	893b      	ldrh	r3, [r7, #8]
 800288a:	b2db      	uxtb	r3, r3
 800288c:	461a      	mov	r2, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002892:	88fb      	ldrh	r3, [r7, #6]
 8002894:	b2da      	uxtb	r2, r3
 8002896:	8979      	ldrh	r1, [r7, #10]
 8002898:	4b0c      	ldr	r3, [pc, #48]	; (80028cc <HAL_I2C_Mem_Read_IT+0x108>)
 800289a:	9300      	str	r3, [sp, #0]
 800289c:	2300      	movs	r3, #0
 800289e:	68f8      	ldr	r0, [r7, #12]
 80028a0:	f001 fc46 	bl	8004130 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80028ac:	2101      	movs	r1, #1
 80028ae:	68f8      	ldr	r0, [r7, #12]
 80028b0:	f001 fc70 	bl	8004194 <I2C_Enable_IRQ>

    return HAL_OK;
 80028b4:	2300      	movs	r3, #0
 80028b6:	e000      	b.n	80028ba <HAL_I2C_Mem_Read_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 80028b8:	2302      	movs	r3, #2
  }
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3710      	adds	r7, #16
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	ffff0000 	.word	0xffff0000
 80028c8:	080029c1 	.word	0x080029c1
 80028cc:	80002000 	.word	0x80002000

080028d0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	699b      	ldr	r3, [r3, #24]
 80028de:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d005      	beq.n	80028fc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028f4:	68ba      	ldr	r2, [r7, #8]
 80028f6:	68f9      	ldr	r1, [r7, #12]
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	4798      	blx	r3
  }
}
 80028fc:	bf00      	nop
 80028fe:	3710      	adds	r7, #16
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800290c:	bf00      	nop
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002920:	bf00      	nop
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002934:	bf00      	nop
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002948:	bf00      	nop
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	460b      	mov	r3, r1
 800295e:	70fb      	strb	r3, [r7, #3]
 8002960:	4613      	mov	r3, r2
 8002962:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002964:	bf00      	nop
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002978:	bf00      	nop
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800298c:	bf00      	nop
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80029a0:	bf00      	nop
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80029b4:	bf00      	nop
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                        uint32_t ITSources)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b088      	sub	sp, #32
 80029c4:	af02      	add	r7, sp, #8
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80029cc:	4b8d      	ldr	r3, [pc, #564]	; (8002c04 <I2C_Mem_ISR_IT+0x244>)
 80029ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d101      	bne.n	80029e2 <I2C_Mem_ISR_IT+0x22>
 80029de:	2302      	movs	r3, #2
 80029e0:	e10c      	b.n	8002bfc <I2C_Mem_ISR_IT+0x23c>
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2201      	movs	r2, #1
 80029e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	f003 0310 	and.w	r3, r3, #16
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d012      	beq.n	8002a1a <I2C_Mem_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d00d      	beq.n	8002a1a <I2C_Mem_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2210      	movs	r2, #16
 8002a04:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a0a:	f043 0204 	orr.w	r2, r3, #4
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002a12:	68f8      	ldr	r0, [r7, #12]
 8002a14:	f001 f991 	bl	8003d3a <I2C_Flush_TXDR>
 8002a18:	e0dd      	b.n	8002bd6 <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	f003 0304 	and.w	r3, r3, #4
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d022      	beq.n	8002a6a <I2C_Mem_ISR_IT+0xaa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d01d      	beq.n	8002a6a <I2C_Mem_ISR_IT+0xaa>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	f023 0304 	bic.w	r3, r3, #4
 8002a34:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a40:	b2d2      	uxtb	r2, r2
 8002a42:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a48:	1c5a      	adds	r2, r3, #1
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a52:	3b01      	subs	r3, #1
 8002a54:	b29a      	uxth	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	3b01      	subs	r3, #1
 8002a62:	b29a      	uxth	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a68:	e0b5      	b.n	8002bd6 <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	f003 0302 	and.w	r3, r3, #2
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d02c      	beq.n	8002ace <I2C_Mem_ISR_IT+0x10e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d027      	beq.n	8002ace <I2C_Mem_ISR_IT+0x10e>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a86:	d118      	bne.n	8002aba <I2C_Mem_ISR_IT+0xfa>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8c:	781a      	ldrb	r2, [r3, #0]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a98:	1c5a      	adds	r2, r3, #1
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	b29a      	uxth	r2, r3
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	3b01      	subs	r3, #1
 8002ab2:	b29a      	uxth	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8002ab8:	e08d      	b.n	8002bd6 <I2C_Mem_ISR_IT+0x216>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68fa      	ldr	r2, [r7, #12]
 8002ac0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002ac2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002aca:	651a      	str	r2, [r3, #80]	; 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8002acc:	e083      	b.n	8002bd6 <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d03c      	beq.n	8002b52 <I2C_Mem_ISR_IT+0x192>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d037      	beq.n	8002b52 <I2C_Mem_ISR_IT+0x192>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d02c      	beq.n	8002b46 <I2C_Mem_ISR_IT+0x186>
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d128      	bne.n	8002b46 <I2C_Mem_ISR_IT+0x186>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	2bff      	cmp	r3, #255	; 0xff
 8002afc:	d910      	bls.n	8002b20 <I2C_Mem_ISR_IT+0x160>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	22ff      	movs	r2, #255	; 0xff
 8002b02:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b08:	b299      	uxth	r1, r3
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b0e:	b2da      	uxtb	r2, r3
 8002b10:	2300      	movs	r3, #0
 8002b12:	9300      	str	r3, [sp, #0]
 8002b14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b18:	68f8      	ldr	r0, [r7, #12]
 8002b1a:	f001 fb09 	bl	8004130 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b1e:	e017      	b.n	8002b50 <I2C_Mem_ISR_IT+0x190>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b24:	b29a      	uxth	r2, r3
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b2e:	b299      	uxth	r1, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b34:	b2da      	uxtb	r2, r3
 8002b36:	2300      	movs	r3, #0
 8002b38:	9300      	str	r3, [sp, #0]
 8002b3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b3e:	68f8      	ldr	r0, [r7, #12]
 8002b40:	f001 faf6 	bl	8004130 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b44:	e004      	b.n	8002b50 <I2C_Mem_ISR_IT+0x190>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002b46:	2140      	movs	r1, #64	; 0x40
 8002b48:	68f8      	ldr	r0, [r7, #12]
 8002b4a:	f000 ffdf 	bl	8003b0c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b4e:	e042      	b.n	8002bd6 <I2C_Mem_ISR_IT+0x216>
 8002b50:	e041      	b.n	8002bd6 <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d03c      	beq.n	8002bd6 <I2C_Mem_ISR_IT+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d037      	beq.n	8002bd6 <I2C_Mem_ISR_IT+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002b66:	2101      	movs	r1, #1
 8002b68:	68f8      	ldr	r0, [r7, #12]
 8002b6a:	f001 fb97 	bl	800429c <I2C_Disable_IRQ>

    /* Enable ERR, TC, STOP, NACK and RXI interrupts */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002b6e:	2102      	movs	r1, #2
 8002b70:	68f8      	ldr	r0, [r7, #12]
 8002b72:	f001 fb0f 	bl	8004194 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b22      	cmp	r3, #34	; 0x22
 8002b80:	d101      	bne.n	8002b86 <I2C_Mem_ISR_IT+0x1c6>
    {
      direction = I2C_GENERATE_START_READ;
 8002b82:	4b21      	ldr	r3, [pc, #132]	; (8002c08 <I2C_Mem_ISR_IT+0x248>)
 8002b84:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	2bff      	cmp	r3, #255	; 0xff
 8002b8e:	d910      	bls.n	8002bb2 <I2C_Mem_ISR_IT+0x1f2>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	22ff      	movs	r2, #255	; 0xff
 8002b94:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b9a:	b299      	uxth	r1, r3
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ba0:	b2da      	uxtb	r2, r3
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	9300      	str	r3, [sp, #0]
 8002ba6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002baa:	68f8      	ldr	r0, [r7, #12]
 8002bac:	f001 fac0 	bl	8004130 <I2C_TransferConfig>
 8002bb0:	e011      	b.n	8002bd6 <I2C_Mem_ISR_IT+0x216>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bb6:	b29a      	uxth	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bc0:	b299      	uxth	r1, r3
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bc6:	b2da      	uxtb	r2, r3
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	9300      	str	r3, [sp, #0]
 8002bcc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bd0:	68f8      	ldr	r0, [r7, #12]
 8002bd2:	f001 faad 	bl	8004130 <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	f003 0320 	and.w	r3, r3, #32
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d008      	beq.n	8002bf2 <I2C_Mem_ISR_IT+0x232>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d003      	beq.n	8002bf2 <I2C_Mem_ISR_IT+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8002bea:	6939      	ldr	r1, [r7, #16]
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	f000 fd5f 	bl	80036b0 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002bfa:	2300      	movs	r3, #0
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3718      	adds	r7, #24
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	80002000 	.word	0x80002000
 8002c08:	80002400 	.word	0x80002400

08002c0c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b086      	sub	sp, #24
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	60b9      	str	r1, [r7, #8]
 8002c16:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d101      	bne.n	8002c30 <I2C_Slave_ISR_IT+0x24>
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	e0e1      	b.n	8002df4 <I2C_Slave_ISR_IT+0x1e8>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	f003 0320 	and.w	r3, r3, #32
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d008      	beq.n	8002c54 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d003      	beq.n	8002c54 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002c4c:	6939      	ldr	r1, [r7, #16]
 8002c4e:	68f8      	ldr	r0, [r7, #12]
 8002c50:	f000 fdf6 	bl	8003840 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	f003 0310 	and.w	r3, r3, #16
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d04b      	beq.n	8002cf6 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d046      	beq.n	8002cf6 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d128      	bne.n	8002cc4 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b28      	cmp	r3, #40	; 0x28
 8002c7c:	d108      	bne.n	8002c90 <I2C_Slave_ISR_IT+0x84>
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c84:	d104      	bne.n	8002c90 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002c86:	6939      	ldr	r1, [r7, #16]
 8002c88:	68f8      	ldr	r0, [r7, #12]
 8002c8a:	f000 feeb 	bl	8003a64 <I2C_ITListenCplt>
 8002c8e:	e031      	b.n	8002cf4 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	2b29      	cmp	r3, #41	; 0x29
 8002c9a:	d10e      	bne.n	8002cba <I2C_Slave_ISR_IT+0xae>
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ca2:	d00a      	beq.n	8002cba <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2210      	movs	r2, #16
 8002caa:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002cac:	68f8      	ldr	r0, [r7, #12]
 8002cae:	f001 f844 	bl	8003d3a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002cb2:	68f8      	ldr	r0, [r7, #12]
 8002cb4:	f000 fc9f 	bl	80035f6 <I2C_ITSlaveSeqCplt>
 8002cb8:	e01c      	b.n	8002cf4 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2210      	movs	r2, #16
 8002cc0:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002cc2:	e08f      	b.n	8002de4 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2210      	movs	r2, #16
 8002cca:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd0:	f043 0204 	orr.w	r2, r3, #4
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d003      	beq.n	8002ce6 <I2C_Slave_ISR_IT+0xda>
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ce4:	d17e      	bne.n	8002de4 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cea:	4619      	mov	r1, r3
 8002cec:	68f8      	ldr	r0, [r7, #12]
 8002cee:	f000 ff0d 	bl	8003b0c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002cf2:	e077      	b.n	8002de4 <I2C_Slave_ISR_IT+0x1d8>
 8002cf4:	e076      	b.n	8002de4 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	f003 0304 	and.w	r3, r3, #4
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d02f      	beq.n	8002d60 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d02a      	beq.n	8002d60 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d018      	beq.n	8002d46 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1e:	b2d2      	uxtb	r2, r2
 8002d20:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d26:	1c5a      	adds	r2, r3, #1
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d30:	3b01      	subs	r3, #1
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d14b      	bne.n	8002de8 <I2C_Slave_ISR_IT+0x1dc>
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d56:	d047      	beq.n	8002de8 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	f000 fc4c 	bl	80035f6 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002d5e:	e043      	b.n	8002de8 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	f003 0308 	and.w	r3, r3, #8
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d009      	beq.n	8002d7e <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d004      	beq.n	8002d7e <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002d74:	6939      	ldr	r1, [r7, #16]
 8002d76:	68f8      	ldr	r0, [r7, #12]
 8002d78:	f000 fb7c 	bl	8003474 <I2C_ITAddrCplt>
 8002d7c:	e035      	b.n	8002dea <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	f003 0302 	and.w	r3, r3, #2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d030      	beq.n	8002dea <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d02b      	beq.n	8002dea <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d018      	beq.n	8002dce <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da0:	781a      	ldrb	r2, [r3, #0]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dac:	1c5a      	adds	r2, r3, #1
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	3b01      	subs	r3, #1
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dc4:	3b01      	subs	r3, #1
 8002dc6:	b29a      	uxth	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	851a      	strh	r2, [r3, #40]	; 0x28
 8002dcc:	e00d      	b.n	8002dea <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002dd4:	d002      	beq.n	8002ddc <I2C_Slave_ISR_IT+0x1d0>
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d106      	bne.n	8002dea <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002ddc:	68f8      	ldr	r0, [r7, #12]
 8002dde:	f000 fc0a 	bl	80035f6 <I2C_ITSlaveSeqCplt>
 8002de2:	e002      	b.n	8002dea <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8002de4:	bf00      	nop
 8002de6:	e000      	b.n	8002dea <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8002de8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002df2:	2300      	movs	r3, #0
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3718      	adds	r7, #24
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b088      	sub	sp, #32
 8002e00:	af02      	add	r7, sp, #8
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d101      	bne.n	8002e16 <I2C_Master_ISR_DMA+0x1a>
 8002e12:	2302      	movs	r3, #2
 8002e14:	e0d9      	b.n	8002fca <I2C_Master_ISR_DMA+0x1ce>
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	f003 0310 	and.w	r3, r3, #16
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d016      	beq.n	8002e56 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d011      	beq.n	8002e56 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2210      	movs	r2, #16
 8002e38:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e3e:	f043 0204 	orr.w	r2, r3, #4
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002e46:	2120      	movs	r1, #32
 8002e48:	68f8      	ldr	r0, [r7, #12]
 8002e4a:	f001 f9a3 	bl	8004194 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	f000 ff73 	bl	8003d3a <I2C_Flush_TXDR>
 8002e54:	e0b4      	b.n	8002fc0 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d071      	beq.n	8002f44 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d06c      	beq.n	8002f44 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e78:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d04e      	beq.n	8002f22 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e90:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	2bff      	cmp	r3, #255	; 0xff
 8002e9a:	d906      	bls.n	8002eaa <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	22ff      	movs	r2, #255	; 0xff
 8002ea0:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8002ea2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ea6:	617b      	str	r3, [r7, #20]
 8002ea8:	e010      	b.n	8002ecc <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eae:	b29a      	uxth	r2, r3
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ebc:	d003      	beq.n	8002ec6 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec2:	617b      	str	r3, [r7, #20]
 8002ec4:	e002      	b.n	8002ecc <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8002ec6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002eca:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ed0:	b2da      	uxtb	r2, r3
 8002ed2:	8a79      	ldrh	r1, [r7, #18]
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	9300      	str	r3, [sp, #0]
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	68f8      	ldr	r0, [r7, #12]
 8002edc:	f001 f928 	bl	8004130 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee4:	b29a      	uxth	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	b29a      	uxth	r2, r3
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b22      	cmp	r3, #34	; 0x22
 8002efc:	d108      	bne.n	8002f10 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f0c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002f0e:	e057      	b.n	8002fc0 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f1e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002f20:	e04e      	b.n	8002fc0 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f2c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f30:	d003      	beq.n	8002f3a <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8002f32:	68f8      	ldr	r0, [r7, #12]
 8002f34:	f000 fb22 	bl	800357c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8002f38:	e042      	b.n	8002fc0 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002f3a:	2140      	movs	r1, #64	; 0x40
 8002f3c:	68f8      	ldr	r0, [r7, #12]
 8002f3e:	f000 fde5 	bl	8003b0c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002f42:	e03d      	b.n	8002fc0 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d028      	beq.n	8002fa0 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d023      	beq.n	8002fa0 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d119      	bne.n	8002f96 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f70:	d025      	beq.n	8002fbe <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f76:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f7a:	d108      	bne.n	8002f8e <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	685a      	ldr	r2, [r3, #4]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f8a:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8002f8c:	e017      	b.n	8002fbe <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8002f8e:	68f8      	ldr	r0, [r7, #12]
 8002f90:	f000 faf4 	bl	800357c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8002f94:	e013      	b.n	8002fbe <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002f96:	2140      	movs	r1, #64	; 0x40
 8002f98:	68f8      	ldr	r0, [r7, #12]
 8002f9a:	f000 fdb7 	bl	8003b0c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002f9e:	e00e      	b.n	8002fbe <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	f003 0320 	and.w	r3, r3, #32
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d00a      	beq.n	8002fc0 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d005      	beq.n	8002fc0 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002fb4:	68b9      	ldr	r1, [r7, #8]
 8002fb6:	68f8      	ldr	r0, [r7, #12]
 8002fb8:	f000 fb7a 	bl	80036b0 <I2C_ITMasterCplt>
 8002fbc:	e000      	b.n	8002fc0 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8002fbe:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3718      	adds	r7, #24
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
	...

08002fd4 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b088      	sub	sp, #32
 8002fd8:	af02      	add	r7, sp, #8
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8002fe0:	4b8d      	ldr	r3, [pc, #564]	; (8003218 <I2C_Mem_ISR_DMA+0x244>)
 8002fe2:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d101      	bne.n	8002ff2 <I2C_Mem_ISR_DMA+0x1e>
 8002fee:	2302      	movs	r3, #2
 8002ff0:	e10e      	b.n	8003210 <I2C_Mem_ISR_DMA+0x23c>
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	f003 0310 	and.w	r3, r3, #16
 8003000:	2b00      	cmp	r3, #0
 8003002:	d016      	beq.n	8003032 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800300a:	2b00      	cmp	r3, #0
 800300c:	d011      	beq.n	8003032 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2210      	movs	r2, #16
 8003014:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301a:	f043 0204 	orr.w	r2, r3, #4
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003022:	2120      	movs	r1, #32
 8003024:	68f8      	ldr	r0, [r7, #12]
 8003026:	f001 f8b5 	bl	8004194 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800302a:	68f8      	ldr	r0, [r7, #12]
 800302c:	f000 fe85 	bl	8003d3a <I2C_Flush_TXDR>
 8003030:	e0e9      	b.n	8003206 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	f003 0302 	and.w	r3, r3, #2
 8003038:	2b00      	cmp	r3, #0
 800303a:	d00e      	beq.n	800305a <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003042:	2b00      	cmp	r3, #0
 8003044:	d009      	beq.n	800305a <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800304e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003056:	651a      	str	r2, [r3, #80]	; 0x50
 8003058:	e0d5      	b.n	8003206 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003060:	2b00      	cmp	r3, #0
 8003062:	d05f      	beq.n	8003124 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800306a:	2b00      	cmp	r3, #0
 800306c:	d05a      	beq.n	8003124 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800306e:	2101      	movs	r1, #1
 8003070:	68f8      	ldr	r0, [r7, #12]
 8003072:	f001 f913 	bl	800429c <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8003076:	2110      	movs	r1, #16
 8003078:	68f8      	ldr	r0, [r7, #12]
 800307a:	f001 f88b 	bl	8004194 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003082:	b29b      	uxth	r3, r3
 8003084:	2b00      	cmp	r3, #0
 8003086:	d048      	beq.n	800311a <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800308c:	b29b      	uxth	r3, r3
 800308e:	2bff      	cmp	r3, #255	; 0xff
 8003090:	d910      	bls.n	80030b4 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	22ff      	movs	r2, #255	; 0xff
 8003096:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800309c:	b299      	uxth	r1, r3
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030a2:	b2da      	uxtb	r2, r3
 80030a4:	2300      	movs	r3, #0
 80030a6:	9300      	str	r3, [sp, #0]
 80030a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030ac:	68f8      	ldr	r0, [r7, #12]
 80030ae:	f001 f83f 	bl	8004130 <I2C_TransferConfig>
 80030b2:	e011      	b.n	80030d8 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030b8:	b29a      	uxth	r2, r3
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030c2:	b299      	uxth	r1, r3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030c8:	b2da      	uxtb	r2, r3
 80030ca:	2300      	movs	r3, #0
 80030cc:	9300      	str	r3, [sp, #0]
 80030ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030d2:	68f8      	ldr	r0, [r7, #12]
 80030d4:	f001 f82c 	bl	8004130 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030dc:	b29a      	uxth	r2, r3
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	b29a      	uxth	r2, r3
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	2b22      	cmp	r3, #34	; 0x22
 80030f4:	d108      	bne.n	8003108 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003104:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003106:	e07e      	b.n	8003206 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003116:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003118:	e075      	b.n	8003206 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800311a:	2140      	movs	r1, #64	; 0x40
 800311c:	68f8      	ldr	r0, [r7, #12]
 800311e:	f000 fcf5 	bl	8003b0c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8003122:	e070      	b.n	8003206 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800312a:	2b00      	cmp	r3, #0
 800312c:	d05d      	beq.n	80031ea <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003134:	2b00      	cmp	r3, #0
 8003136:	d058      	beq.n	80031ea <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003138:	2101      	movs	r1, #1
 800313a:	68f8      	ldr	r0, [r7, #12]
 800313c:	f001 f8ae 	bl	800429c <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8003140:	2110      	movs	r1, #16
 8003142:	68f8      	ldr	r0, [r7, #12]
 8003144:	f001 f826 	bl	8004194 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800314e:	b2db      	uxtb	r3, r3
 8003150:	2b22      	cmp	r3, #34	; 0x22
 8003152:	d101      	bne.n	8003158 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8003154:	4b31      	ldr	r3, [pc, #196]	; (800321c <I2C_Mem_ISR_DMA+0x248>)
 8003156:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800315c:	b29b      	uxth	r3, r3
 800315e:	2bff      	cmp	r3, #255	; 0xff
 8003160:	d910      	bls.n	8003184 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	22ff      	movs	r2, #255	; 0xff
 8003166:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800316c:	b299      	uxth	r1, r3
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003172:	b2da      	uxtb	r2, r3
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	9300      	str	r3, [sp, #0]
 8003178:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800317c:	68f8      	ldr	r0, [r7, #12]
 800317e:	f000 ffd7 	bl	8004130 <I2C_TransferConfig>
 8003182:	e011      	b.n	80031a8 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003188:	b29a      	uxth	r2, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003192:	b299      	uxth	r1, r3
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003198:	b2da      	uxtb	r2, r3
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	9300      	str	r3, [sp, #0]
 800319e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031a2:	68f8      	ldr	r0, [r7, #12]
 80031a4:	f000 ffc4 	bl	8004130 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ac:	b29a      	uxth	r2, r3
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	b29a      	uxth	r2, r3
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b22      	cmp	r3, #34	; 0x22
 80031c4:	d108      	bne.n	80031d8 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031d4:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80031d6:	e016      	b.n	8003206 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031e6:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80031e8:	e00d      	b.n	8003206 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	f003 0320 	and.w	r3, r3, #32
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d008      	beq.n	8003206 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d003      	beq.n	8003206 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80031fe:	68b9      	ldr	r1, [r7, #8]
 8003200:	68f8      	ldr	r0, [r7, #12]
 8003202:	f000 fa55 	bl	80036b0 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3718      	adds	r7, #24
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	80002000 	.word	0x80002000
 800321c:	80002400 	.word	0x80002400

08003220 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b088      	sub	sp, #32
 8003224:	af00      	add	r7, sp, #0
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	60b9      	str	r1, [r7, #8]
 800322a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003230:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8003232:	2300      	movs	r3, #0
 8003234:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800323c:	2b01      	cmp	r3, #1
 800323e:	d101      	bne.n	8003244 <I2C_Slave_ISR_DMA+0x24>
 8003240:	2302      	movs	r3, #2
 8003242:	e0bf      	b.n	80033c4 <I2C_Slave_ISR_DMA+0x1a4>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	f003 0320 	and.w	r3, r3, #32
 8003252:	2b00      	cmp	r3, #0
 8003254:	d008      	beq.n	8003268 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800325c:	2b00      	cmp	r3, #0
 800325e:	d003      	beq.n	8003268 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8003260:	68b9      	ldr	r1, [r7, #8]
 8003262:	68f8      	ldr	r0, [r7, #12]
 8003264:	f000 faec 	bl	8003840 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	f003 0310 	and.w	r3, r3, #16
 800326e:	2b00      	cmp	r3, #0
 8003270:	f000 8095 	beq.w	800339e <I2C_Slave_ISR_DMA+0x17e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800327a:	2b00      	cmp	r3, #0
 800327c:	f000 808f 	beq.w	800339e <I2C_Slave_ISR_DMA+0x17e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d104      	bne.n	8003294 <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003290:	2b00      	cmp	r3, #0
 8003292:	d07d      	beq.n	8003390 <I2C_Slave_ISR_DMA+0x170>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003298:	2b00      	cmp	r3, #0
 800329a:	d00c      	beq.n	80032b6 <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d007      	beq.n	80032b6 <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d101      	bne.n	80032b6 <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 80032b2:	2301      	movs	r3, #1
 80032b4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d00c      	beq.n	80032d8 <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d007      	beq.n	80032d8 <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d101      	bne.n	80032d8 <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 80032d4:	2301      	movs	r3, #1
 80032d6:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d128      	bne.n	8003330 <I2C_Slave_ISR_DMA+0x110>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b28      	cmp	r3, #40	; 0x28
 80032e8:	d108      	bne.n	80032fc <I2C_Slave_ISR_DMA+0xdc>
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80032f0:	d104      	bne.n	80032fc <I2C_Slave_ISR_DMA+0xdc>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80032f2:	68b9      	ldr	r1, [r7, #8]
 80032f4:	68f8      	ldr	r0, [r7, #12]
 80032f6:	f000 fbb5 	bl	8003a64 <I2C_ITListenCplt>
 80032fa:	e048      	b.n	800338e <I2C_Slave_ISR_DMA+0x16e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003302:	b2db      	uxtb	r3, r3
 8003304:	2b29      	cmp	r3, #41	; 0x29
 8003306:	d10e      	bne.n	8003326 <I2C_Slave_ISR_DMA+0x106>
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800330e:	d00a      	beq.n	8003326 <I2C_Slave_ISR_DMA+0x106>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2210      	movs	r2, #16
 8003316:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8003318:	68f8      	ldr	r0, [r7, #12]
 800331a:	f000 fd0e 	bl	8003d3a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800331e:	68f8      	ldr	r0, [r7, #12]
 8003320:	f000 f969 	bl	80035f6 <I2C_ITSlaveSeqCplt>
 8003324:	e033      	b.n	800338e <I2C_Slave_ISR_DMA+0x16e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2210      	movs	r2, #16
 800332c:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800332e:	e034      	b.n	800339a <I2C_Slave_ISR_DMA+0x17a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2210      	movs	r2, #16
 8003336:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800333c:	f043 0204 	orr.w	r2, r3, #4
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800334a:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d003      	beq.n	800335a <I2C_Slave_ISR_DMA+0x13a>
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003358:	d11f      	bne.n	800339a <I2C_Slave_ISR_DMA+0x17a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800335a:	7dfb      	ldrb	r3, [r7, #23]
 800335c:	2b21      	cmp	r3, #33	; 0x21
 800335e:	d002      	beq.n	8003366 <I2C_Slave_ISR_DMA+0x146>
 8003360:	7dfb      	ldrb	r3, [r7, #23]
 8003362:	2b29      	cmp	r3, #41	; 0x29
 8003364:	d103      	bne.n	800336e <I2C_Slave_ISR_DMA+0x14e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2221      	movs	r2, #33	; 0x21
 800336a:	631a      	str	r2, [r3, #48]	; 0x30
 800336c:	e008      	b.n	8003380 <I2C_Slave_ISR_DMA+0x160>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800336e:	7dfb      	ldrb	r3, [r7, #23]
 8003370:	2b22      	cmp	r3, #34	; 0x22
 8003372:	d002      	beq.n	800337a <I2C_Slave_ISR_DMA+0x15a>
 8003374:	7dfb      	ldrb	r3, [r7, #23]
 8003376:	2b2a      	cmp	r3, #42	; 0x2a
 8003378:	d102      	bne.n	8003380 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2222      	movs	r2, #34	; 0x22
 800337e:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003384:	4619      	mov	r1, r3
 8003386:	68f8      	ldr	r0, [r7, #12]
 8003388:	f000 fbc0 	bl	8003b0c <I2C_ITError>
      if (treatdmanack == 1U)
 800338c:	e005      	b.n	800339a <I2C_Slave_ISR_DMA+0x17a>
 800338e:	e004      	b.n	800339a <I2C_Slave_ISR_DMA+0x17a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2210      	movs	r2, #16
 8003396:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003398:	e00f      	b.n	80033ba <I2C_Slave_ISR_DMA+0x19a>
      if (treatdmanack == 1U)
 800339a:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800339c:	e00d      	b.n	80033ba <I2C_Slave_ISR_DMA+0x19a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	f003 0308 	and.w	r3, r3, #8
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d008      	beq.n	80033ba <I2C_Slave_ISR_DMA+0x19a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d003      	beq.n	80033ba <I2C_Slave_ISR_DMA+0x19a>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80033b2:	68b9      	ldr	r1, [r7, #8]
 80033b4:	68f8      	ldr	r0, [r7, #12]
 80033b6:	f000 f85d 	bl	8003474 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80033c2:	2300      	movs	r3, #0
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3720      	adds	r7, #32
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b086      	sub	sp, #24
 80033d0:	af02      	add	r7, sp, #8
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	4608      	mov	r0, r1
 80033d6:	4611      	mov	r1, r2
 80033d8:	461a      	mov	r2, r3
 80033da:	4603      	mov	r3, r0
 80033dc:	817b      	strh	r3, [r7, #10]
 80033de:	460b      	mov	r3, r1
 80033e0:	813b      	strh	r3, [r7, #8]
 80033e2:	4613      	mov	r3, r2
 80033e4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80033e6:	88fb      	ldrh	r3, [r7, #6]
 80033e8:	b2da      	uxtb	r2, r3
 80033ea:	8979      	ldrh	r1, [r7, #10]
 80033ec:	4b20      	ldr	r3, [pc, #128]	; (8003470 <I2C_RequestMemoryRead+0xa4>)
 80033ee:	9300      	str	r3, [sp, #0]
 80033f0:	2300      	movs	r3, #0
 80033f2:	68f8      	ldr	r0, [r7, #12]
 80033f4:	f000 fe9c 	bl	8004130 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033f8:	69fa      	ldr	r2, [r7, #28]
 80033fa:	69b9      	ldr	r1, [r7, #24]
 80033fc:	68f8      	ldr	r0, [r7, #12]
 80033fe:	f000 fd2d 	bl	8003e5c <I2C_WaitOnTXISFlagUntilTimeout>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d001      	beq.n	800340c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e02c      	b.n	8003466 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800340c:	88fb      	ldrh	r3, [r7, #6]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d105      	bne.n	800341e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003412:	893b      	ldrh	r3, [r7, #8]
 8003414:	b2da      	uxtb	r2, r3
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	629a      	str	r2, [r3, #40]	; 0x28
 800341c:	e015      	b.n	800344a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800341e:	893b      	ldrh	r3, [r7, #8]
 8003420:	0a1b      	lsrs	r3, r3, #8
 8003422:	b29b      	uxth	r3, r3
 8003424:	b2da      	uxtb	r2, r3
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800342c:	69fa      	ldr	r2, [r7, #28]
 800342e:	69b9      	ldr	r1, [r7, #24]
 8003430:	68f8      	ldr	r0, [r7, #12]
 8003432:	f000 fd13 	bl	8003e5c <I2C_WaitOnTXISFlagUntilTimeout>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d001      	beq.n	8003440 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e012      	b.n	8003466 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003440:	893b      	ldrh	r3, [r7, #8]
 8003442:	b2da      	uxtb	r2, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	9300      	str	r3, [sp, #0]
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	2200      	movs	r2, #0
 8003452:	2140      	movs	r1, #64	; 0x40
 8003454:	68f8      	ldr	r0, [r7, #12]
 8003456:	f000 fcb2 	bl	8003dbe <I2C_WaitOnFlagUntilTimeout>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d001      	beq.n	8003464 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e000      	b.n	8003466 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003464:	2300      	movs	r3, #0
}
 8003466:	4618      	mov	r0, r3
 8003468:	3710      	adds	r7, #16
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	80002000 	.word	0x80002000

08003474 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003484:	b2db      	uxtb	r3, r3
 8003486:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800348a:	2b28      	cmp	r3, #40	; 0x28
 800348c:	d16a      	bne.n	8003564 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	699b      	ldr	r3, [r3, #24]
 8003494:	0c1b      	lsrs	r3, r3, #16
 8003496:	b2db      	uxtb	r3, r3
 8003498:	f003 0301 	and.w	r3, r3, #1
 800349c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	699b      	ldr	r3, [r3, #24]
 80034a4:	0c1b      	lsrs	r3, r3, #16
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80034ac:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034ba:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80034c8:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d138      	bne.n	8003544 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80034d2:	897b      	ldrh	r3, [r7, #10]
 80034d4:	09db      	lsrs	r3, r3, #7
 80034d6:	b29a      	uxth	r2, r3
 80034d8:	89bb      	ldrh	r3, [r7, #12]
 80034da:	4053      	eors	r3, r2
 80034dc:	b29b      	uxth	r3, r3
 80034de:	f003 0306 	and.w	r3, r3, #6
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d11c      	bne.n	8003520 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80034e6:	897b      	ldrh	r3, [r7, #10]
 80034e8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034ee:	1c5a      	adds	r2, r3, #1
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d13b      	bne.n	8003574 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2208      	movs	r2, #8
 8003508:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003512:	89ba      	ldrh	r2, [r7, #12]
 8003514:	7bfb      	ldrb	r3, [r7, #15]
 8003516:	4619      	mov	r1, r3
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f7ff fa1b 	bl	8002954 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800351e:	e029      	b.n	8003574 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003520:	893b      	ldrh	r3, [r7, #8]
 8003522:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003524:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f000 feb7 	bl	800429c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003536:	89ba      	ldrh	r2, [r7, #12]
 8003538:	7bfb      	ldrb	r3, [r7, #15]
 800353a:	4619      	mov	r1, r3
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f7ff fa09 	bl	8002954 <HAL_I2C_AddrCallback>
}
 8003542:	e017      	b.n	8003574 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003544:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f000 fea7 	bl	800429c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003556:	89ba      	ldrh	r2, [r7, #12]
 8003558:	7bfb      	ldrb	r3, [r7, #15]
 800355a:	4619      	mov	r1, r3
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f7ff f9f9 	bl	8002954 <HAL_I2C_AddrCallback>
}
 8003562:	e007      	b.n	8003574 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2208      	movs	r2, #8
 800356a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003574:	bf00      	nop
 8003576:	3710      	adds	r7, #16
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003592:	b2db      	uxtb	r3, r3
 8003594:	2b21      	cmp	r3, #33	; 0x21
 8003596:	d115      	bne.n	80035c4 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2220      	movs	r2, #32
 800359c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2211      	movs	r2, #17
 80035a4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80035ac:	2101      	movs	r1, #1
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 fe74 	bl	800429c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f7ff f9a1 	bl	8002904 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80035c2:	e014      	b.n	80035ee <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2220      	movs	r2, #32
 80035c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2212      	movs	r2, #18
 80035d0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80035d8:	2102      	movs	r1, #2
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 fe5e 	bl	800429c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f7ff f995 	bl	8002918 <HAL_I2C_MasterRxCpltCallback>
}
 80035ee:	bf00      	nop
 80035f0:	3708      	adds	r7, #8
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}

080035f6 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80035f6:	b580      	push	{r7, lr}
 80035f8:	b084      	sub	sp, #16
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003614:	2b00      	cmp	r3, #0
 8003616:	d008      	beq.n	800362a <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003626:	601a      	str	r2, [r3, #0]
 8003628:	e00c      	b.n	8003644 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d007      	beq.n	8003644 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003642:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800364a:	b2db      	uxtb	r3, r3
 800364c:	2b29      	cmp	r3, #41	; 0x29
 800364e:	d112      	bne.n	8003676 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2228      	movs	r2, #40	; 0x28
 8003654:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2221      	movs	r2, #33	; 0x21
 800365c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800365e:	2101      	movs	r1, #1
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f000 fe1b 	bl	800429c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f7ff f95c 	bl	800292c <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003674:	e017      	b.n	80036a6 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800367c:	b2db      	uxtb	r3, r3
 800367e:	2b2a      	cmp	r3, #42	; 0x2a
 8003680:	d111      	bne.n	80036a6 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2228      	movs	r2, #40	; 0x28
 8003686:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2222      	movs	r2, #34	; 0x22
 800368e:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003690:	2102      	movs	r1, #2
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 fe02 	bl	800429c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f7ff f94d 	bl	8002940 <HAL_I2C_SlaveRxCpltCallback>
}
 80036a6:	bf00      	nop
 80036a8:	3710      	adds	r7, #16
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
	...

080036b0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b086      	sub	sp, #24
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2220      	movs	r2, #32
 80036c4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b21      	cmp	r3, #33	; 0x21
 80036d0:	d107      	bne.n	80036e2 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80036d2:	2101      	movs	r1, #1
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f000 fde1 	bl	800429c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2211      	movs	r2, #17
 80036de:	631a      	str	r2, [r3, #48]	; 0x30
 80036e0:	e00c      	b.n	80036fc <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	2b22      	cmp	r3, #34	; 0x22
 80036ec:	d106      	bne.n	80036fc <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80036ee:	2102      	movs	r1, #2
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f000 fdd3 	bl	800429c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2212      	movs	r2, #18
 80036fa:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	6859      	ldr	r1, [r3, #4]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	4b4c      	ldr	r3, [pc, #304]	; (8003838 <I2C_ITMasterCplt+0x188>)
 8003708:	400b      	ands	r3, r1
 800370a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a49      	ldr	r2, [pc, #292]	; (800383c <I2C_ITMasterCplt+0x18c>)
 8003716:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	f003 0310 	and.w	r3, r3, #16
 800371e:	2b00      	cmp	r3, #0
 8003720:	d009      	beq.n	8003736 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2210      	movs	r2, #16
 8003728:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800372e:	f043 0204 	orr.w	r2, r3, #4
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800373c:	b2db      	uxtb	r3, r3
 800373e:	2b60      	cmp	r3, #96	; 0x60
 8003740:	d10a      	bne.n	8003758 <I2C_ITMasterCplt+0xa8>
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	f003 0304 	and.w	r3, r3, #4
 8003748:	2b00      	cmp	r3, #0
 800374a:	d005      	beq.n	8003758 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003752:	b2db      	uxtb	r3, r3
 8003754:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8003756:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 faee 	bl	8003d3a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003762:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800376a:	b2db      	uxtb	r3, r3
 800376c:	2b60      	cmp	r3, #96	; 0x60
 800376e:	d002      	beq.n	8003776 <I2C_ITMasterCplt+0xc6>
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d006      	beq.n	8003784 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800377a:	4619      	mov	r1, r3
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f000 f9c5 	bl	8003b0c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003782:	e054      	b.n	800382e <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800378a:	b2db      	uxtb	r3, r3
 800378c:	2b21      	cmp	r3, #33	; 0x21
 800378e:	d124      	bne.n	80037da <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2220      	movs	r2, #32
 8003794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	2b40      	cmp	r3, #64	; 0x40
 80037a8:	d10b      	bne.n	80037c2 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f7ff f8e2 	bl	8002984 <HAL_I2C_MemTxCpltCallback>
}
 80037c0:	e035      	b.n	800382e <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f7ff f896 	bl	8002904 <HAL_I2C_MasterTxCpltCallback>
}
 80037d8:	e029      	b.n	800382e <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	2b22      	cmp	r3, #34	; 0x22
 80037e4:	d123      	bne.n	800382e <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2220      	movs	r2, #32
 80037ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	2b40      	cmp	r3, #64	; 0x40
 80037fe:	d10b      	bne.n	8003818 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f7fd fbeb 	bl	8000fec <HAL_I2C_MemRxCpltCallback>
}
 8003816:	e00a      	b.n	800382e <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f7ff f875 	bl	8002918 <HAL_I2C_MasterRxCpltCallback>
}
 800382e:	bf00      	nop
 8003830:	3718      	adds	r7, #24
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	fe00e800 	.word	0xfe00e800
 800383c:	ffff0000 	.word	0xffff0000

08003840 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b086      	sub	sp, #24
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800385c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2220      	movs	r2, #32
 8003864:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003866:	7bfb      	ldrb	r3, [r7, #15]
 8003868:	2b21      	cmp	r3, #33	; 0x21
 800386a:	d002      	beq.n	8003872 <I2C_ITSlaveCplt+0x32>
 800386c:	7bfb      	ldrb	r3, [r7, #15]
 800386e:	2b29      	cmp	r3, #41	; 0x29
 8003870:	d108      	bne.n	8003884 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003872:	f248 0101 	movw	r1, #32769	; 0x8001
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 fd10 	bl	800429c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2221      	movs	r2, #33	; 0x21
 8003880:	631a      	str	r2, [r3, #48]	; 0x30
 8003882:	e019      	b.n	80038b8 <I2C_ITSlaveCplt+0x78>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003884:	7bfb      	ldrb	r3, [r7, #15]
 8003886:	2b22      	cmp	r3, #34	; 0x22
 8003888:	d002      	beq.n	8003890 <I2C_ITSlaveCplt+0x50>
 800388a:	7bfb      	ldrb	r3, [r7, #15]
 800388c:	2b2a      	cmp	r3, #42	; 0x2a
 800388e:	d108      	bne.n	80038a2 <I2C_ITSlaveCplt+0x62>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003890:	f248 0102 	movw	r1, #32770	; 0x8002
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f000 fd01 	bl	800429c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2222      	movs	r2, #34	; 0x22
 800389e:	631a      	str	r2, [r3, #48]	; 0x30
 80038a0:	e00a      	b.n	80038b8 <I2C_ITSlaveCplt+0x78>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80038a2:	7bfb      	ldrb	r3, [r7, #15]
 80038a4:	2b28      	cmp	r3, #40	; 0x28
 80038a6:	d107      	bne.n	80038b8 <I2C_ITSlaveCplt+0x78>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80038a8:	f248 0103 	movw	r1, #32771	; 0x8003
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f000 fcf5 	bl	800429c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	685a      	ldr	r2, [r3, #4]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038c6:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	6859      	ldr	r1, [r3, #4]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	4b62      	ldr	r3, [pc, #392]	; (8003a5c <I2C_ITSlaveCplt+0x21c>)
 80038d4:	400b      	ands	r3, r1
 80038d6:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f000 fa2e 	bl	8003d3a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d013      	beq.n	8003910 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80038f6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d01f      	beq.n	8003940 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	b29a      	uxth	r2, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800390e:	e017      	b.n	8003940 <I2C_ITSlaveCplt+0x100>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d012      	beq.n	8003940 <I2C_ITSlaveCplt+0x100>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003928:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800392e:	2b00      	cmp	r3, #0
 8003930:	d006      	beq.n	8003940 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	b29a      	uxth	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	f003 0304 	and.w	r3, r3, #4
 8003946:	2b00      	cmp	r3, #0
 8003948:	d020      	beq.n	800398c <I2C_ITSlaveCplt+0x14c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	f023 0304 	bic.w	r3, r3, #4
 8003950:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395c:	b2d2      	uxtb	r2, r2
 800395e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003964:	1c5a      	adds	r2, r3, #1
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800396e:	2b00      	cmp	r3, #0
 8003970:	d00c      	beq.n	800398c <I2C_ITSlaveCplt+0x14c>
    {
      hi2c->XferSize--;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003976:	3b01      	subs	r3, #1
 8003978:	b29a      	uxth	r2, r3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003982:	b29b      	uxth	r3, r3
 8003984:	3b01      	subs	r3, #1
 8003986:	b29a      	uxth	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003990:	b29b      	uxth	r3, r3
 8003992:	2b00      	cmp	r3, #0
 8003994:	d005      	beq.n	80039a2 <I2C_ITSlaveCplt+0x162>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800399a:	f043 0204 	orr.w	r2, r3, #4
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d010      	beq.n	80039da <I2C_ITSlaveCplt+0x19a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039bc:	4619      	mov	r1, r3
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 f8a4 	bl	8003b0c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	2b28      	cmp	r3, #40	; 0x28
 80039ce:	d141      	bne.n	8003a54 <I2C_ITSlaveCplt+0x214>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80039d0:	6979      	ldr	r1, [r7, #20]
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 f846 	bl	8003a64 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80039d8:	e03c      	b.n	8003a54 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039de:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80039e2:	d014      	beq.n	8003a0e <I2C_ITSlaveCplt+0x1ce>
    I2C_ITSlaveSeqCplt(hi2c);
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f7ff fe06 	bl	80035f6 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a1c      	ldr	r2, [pc, #112]	; (8003a60 <I2C_ITSlaveCplt+0x220>)
 80039ee:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2220      	movs	r2, #32
 80039f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f7fe ffb2 	bl	8002970 <HAL_I2C_ListenCpltCallback>
}
 8003a0c:	e022      	b.n	8003a54 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	2b22      	cmp	r3, #34	; 0x22
 8003a18:	d10e      	bne.n	8003a38 <I2C_ITSlaveCplt+0x1f8>
    hi2c->State = HAL_I2C_STATE_READY;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2220      	movs	r2, #32
 8003a1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f7fe ff85 	bl	8002940 <HAL_I2C_SlaveRxCpltCallback>
}
 8003a36:	e00d      	b.n	8003a54 <I2C_ITSlaveCplt+0x214>
    hi2c->State = HAL_I2C_STATE_READY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2220      	movs	r2, #32
 8003a3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f7fe ff6c 	bl	800292c <HAL_I2C_SlaveTxCpltCallback>
}
 8003a54:	bf00      	nop
 8003a56:	3718      	adds	r7, #24
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	fe00e800 	.word	0xfe00e800
 8003a60:	ffff0000 	.word	0xffff0000

08003a64 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b082      	sub	sp, #8
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a25      	ldr	r2, [pc, #148]	; (8003b08 <I2C_ITListenCplt+0xa4>)
 8003a72:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2220      	movs	r2, #32
 8003a7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	f003 0304 	and.w	r3, r3, #4
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d022      	beq.n	8003ae0 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa4:	b2d2      	uxtb	r2, r2
 8003aa6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aac:	1c5a      	adds	r2, r3, #1
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d012      	beq.n	8003ae0 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	b29a      	uxth	r2, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	3b01      	subs	r3, #1
 8003ace:	b29a      	uxth	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad8:	f043 0204 	orr.w	r2, r3, #4
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003ae0:	f248 0103 	movw	r1, #32771	; 0x8003
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f000 fbd9 	bl	800429c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2210      	movs	r2, #16
 8003af0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f7fe ff38 	bl	8002970 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003b00:	bf00      	nop
 8003b02:	3708      	adds	r7, #8
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	ffff0000 	.word	0xffff0000

08003b0c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b1c:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a6d      	ldr	r2, [pc, #436]	; (8003ce0 <I2C_ITError+0x1d4>)
 8003b2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	431a      	orrs	r2, r3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003b3e:	7bfb      	ldrb	r3, [r7, #15]
 8003b40:	2b28      	cmp	r3, #40	; 0x28
 8003b42:	d005      	beq.n	8003b50 <I2C_ITError+0x44>
 8003b44:	7bfb      	ldrb	r3, [r7, #15]
 8003b46:	2b29      	cmp	r3, #41	; 0x29
 8003b48:	d002      	beq.n	8003b50 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003b4a:	7bfb      	ldrb	r3, [r7, #15]
 8003b4c:	2b2a      	cmp	r3, #42	; 0x2a
 8003b4e:	d10b      	bne.n	8003b68 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003b50:	2103      	movs	r1, #3
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 fba2 	bl	800429c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2228      	movs	r2, #40	; 0x28
 8003b5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4a60      	ldr	r2, [pc, #384]	; (8003ce4 <I2C_ITError+0x1d8>)
 8003b64:	635a      	str	r2, [r3, #52]	; 0x34
 8003b66:	e030      	b.n	8003bca <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003b68:	f248 0103 	movw	r1, #32771	; 0x8003
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f000 fb95 	bl	800429c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 f8e1 	bl	8003d3a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	2b60      	cmp	r3, #96	; 0x60
 8003b82:	d01f      	beq.n	8003bc4 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2220      	movs	r2, #32
 8003b88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	f003 0320 	and.w	r3, r3, #32
 8003b96:	2b20      	cmp	r3, #32
 8003b98:	d114      	bne.n	8003bc4 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	699b      	ldr	r3, [r3, #24]
 8003ba0:	f003 0310 	and.w	r3, r3, #16
 8003ba4:	2b10      	cmp	r3, #16
 8003ba6:	d109      	bne.n	8003bbc <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2210      	movs	r2, #16
 8003bae:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bb4:	f043 0204 	orr.w	r2, r3, #4
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2220      	movs	r2, #32
 8003bc2:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bce:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d039      	beq.n	8003c4c <I2C_ITError+0x140>
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	2b11      	cmp	r3, #17
 8003bdc:	d002      	beq.n	8003be4 <I2C_ITError+0xd8>
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	2b21      	cmp	r3, #33	; 0x21
 8003be2:	d133      	bne.n	8003c4c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bf2:	d107      	bne.n	8003c04 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003c02:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7fe fa23 	bl	8002054 <HAL_DMA_GetState>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d017      	beq.n	8003c44 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c18:	4a33      	ldr	r2, [pc, #204]	; (8003ce8 <I2C_ITError+0x1dc>)
 8003c1a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f7fe f9d2 	bl	8001fd2 <HAL_DMA_Abort_IT>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d04d      	beq.n	8003cd0 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c3e:	4610      	mov	r0, r2
 8003c40:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003c42:	e045      	b.n	8003cd0 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f000 f851 	bl	8003cec <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003c4a:	e041      	b.n	8003cd0 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d039      	beq.n	8003cc8 <I2C_ITError+0x1bc>
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	2b12      	cmp	r3, #18
 8003c58:	d002      	beq.n	8003c60 <I2C_ITError+0x154>
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	2b22      	cmp	r3, #34	; 0x22
 8003c5e:	d133      	bne.n	8003cc8 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c6e:	d107      	bne.n	8003c80 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c7e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c84:	4618      	mov	r0, r3
 8003c86:	f7fe f9e5 	bl	8002054 <HAL_DMA_GetState>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d017      	beq.n	8003cc0 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c94:	4a14      	ldr	r2, [pc, #80]	; (8003ce8 <I2C_ITError+0x1dc>)
 8003c96:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f7fe f994 	bl	8001fd2 <HAL_DMA_Abort_IT>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d011      	beq.n	8003cd4 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003cba:	4610      	mov	r0, r2
 8003cbc:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003cbe:	e009      	b.n	8003cd4 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f000 f813 	bl	8003cec <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003cc6:	e005      	b.n	8003cd4 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f000 f80f 	bl	8003cec <I2C_TreatErrorCallback>
  }
}
 8003cce:	e002      	b.n	8003cd6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003cd0:	bf00      	nop
 8003cd2:	e000      	b.n	8003cd6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003cd4:	bf00      	nop
}
 8003cd6:	bf00      	nop
 8003cd8:	3710      	adds	r7, #16
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	ffff0000 	.word	0xffff0000
 8003ce4:	08002c0d 	.word	0x08002c0d
 8003ce8:	08003d83 	.word	0x08003d83

08003cec <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b082      	sub	sp, #8
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	2b60      	cmp	r3, #96	; 0x60
 8003cfe:	d10e      	bne.n	8003d1e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2220      	movs	r2, #32
 8003d04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f7fe fe48 	bl	80029ac <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003d1c:	e009      	b.n	8003d32 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f7fe fe33 	bl	8002998 <HAL_I2C_ErrorCallback>
}
 8003d32:	bf00      	nop
 8003d34:	3708      	adds	r7, #8
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}

08003d3a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003d3a:	b480      	push	{r7}
 8003d3c:	b083      	sub	sp, #12
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	699b      	ldr	r3, [r3, #24]
 8003d48:	f003 0302 	and.w	r3, r3, #2
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d103      	bne.n	8003d58 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2200      	movs	r2, #0
 8003d56:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	f003 0301 	and.w	r3, r3, #1
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d007      	beq.n	8003d76 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	699a      	ldr	r2, [r3, #24]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f042 0201 	orr.w	r2, r2, #1
 8003d74:	619a      	str	r2, [r3, #24]
  }
}
 8003d76:	bf00      	nop
 8003d78:	370c      	adds	r7, #12
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr

08003d82 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003d82:	b580      	push	{r7, lr}
 8003d84:	b084      	sub	sp, #16
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d8e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d003      	beq.n	8003da0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d003      	beq.n	8003db0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dac:	2200      	movs	r2, #0
 8003dae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8003db0:	68f8      	ldr	r0, [r7, #12]
 8003db2:	f7ff ff9b 	bl	8003cec <I2C_TreatErrorCallback>
}
 8003db6:	bf00      	nop
 8003db8:	3710      	adds	r7, #16
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}

08003dbe <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003dbe:	b580      	push	{r7, lr}
 8003dc0:	b084      	sub	sp, #16
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	60f8      	str	r0, [r7, #12]
 8003dc6:	60b9      	str	r1, [r7, #8]
 8003dc8:	603b      	str	r3, [r7, #0]
 8003dca:	4613      	mov	r3, r2
 8003dcc:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003dce:	e031      	b.n	8003e34 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003dd6:	d02d      	beq.n	8003e34 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dd8:	f7fd ffa0 	bl	8001d1c <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	683a      	ldr	r2, [r7, #0]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d302      	bcc.n	8003dee <I2C_WaitOnFlagUntilTimeout+0x30>
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d122      	bne.n	8003e34 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	699a      	ldr	r2, [r3, #24]
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	4013      	ands	r3, r2
 8003df8:	68ba      	ldr	r2, [r7, #8]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	bf0c      	ite	eq
 8003dfe:	2301      	moveq	r3, #1
 8003e00:	2300      	movne	r3, #0
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	461a      	mov	r2, r3
 8003e06:	79fb      	ldrb	r3, [r7, #7]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d113      	bne.n	8003e34 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e10:	f043 0220 	orr.w	r2, r3, #32
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2220      	movs	r2, #32
 8003e1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e00f      	b.n	8003e54 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	699a      	ldr	r2, [r3, #24]
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	68ba      	ldr	r2, [r7, #8]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	bf0c      	ite	eq
 8003e44:	2301      	moveq	r3, #1
 8003e46:	2300      	movne	r3, #0
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	79fb      	ldrb	r3, [r7, #7]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d0be      	beq.n	8003dd0 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3710      	adds	r7, #16
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e68:	e033      	b.n	8003ed2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	68b9      	ldr	r1, [r7, #8]
 8003e6e:	68f8      	ldr	r0, [r7, #12]
 8003e70:	f000 f87e 	bl	8003f70 <I2C_IsErrorOccurred>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d001      	beq.n	8003e7e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e031      	b.n	8003ee2 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e84:	d025      	beq.n	8003ed2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e86:	f7fd ff49 	bl	8001d1c <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	68ba      	ldr	r2, [r7, #8]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d302      	bcc.n	8003e9c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d11a      	bne.n	8003ed2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	699b      	ldr	r3, [r3, #24]
 8003ea2:	f003 0302 	and.w	r3, r3, #2
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d013      	beq.n	8003ed2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eae:	f043 0220 	orr.w	r2, r3, #32
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2220      	movs	r2, #32
 8003eba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e007      	b.n	8003ee2 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	699b      	ldr	r3, [r3, #24]
 8003ed8:	f003 0302 	and.w	r3, r3, #2
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d1c4      	bne.n	8003e6a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3710      	adds	r7, #16
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}

08003eea <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003eea:	b580      	push	{r7, lr}
 8003eec:	b084      	sub	sp, #16
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	60f8      	str	r0, [r7, #12]
 8003ef2:	60b9      	str	r1, [r7, #8]
 8003ef4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ef6:	e02f      	b.n	8003f58 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	68b9      	ldr	r1, [r7, #8]
 8003efc:	68f8      	ldr	r0, [r7, #12]
 8003efe:	f000 f837 	bl	8003f70 <I2C_IsErrorOccurred>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d001      	beq.n	8003f0c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e02d      	b.n	8003f68 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f0c:	f7fd ff06 	bl	8001d1c <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	68ba      	ldr	r2, [r7, #8]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d302      	bcc.n	8003f22 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d11a      	bne.n	8003f58 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	699b      	ldr	r3, [r3, #24]
 8003f28:	f003 0320 	and.w	r3, r3, #32
 8003f2c:	2b20      	cmp	r3, #32
 8003f2e:	d013      	beq.n	8003f58 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f34:	f043 0220 	orr.w	r2, r3, #32
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2220      	movs	r2, #32
 8003f40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e007      	b.n	8003f68 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	699b      	ldr	r3, [r3, #24]
 8003f5e:	f003 0320 	and.w	r3, r3, #32
 8003f62:	2b20      	cmp	r3, #32
 8003f64:	d1c8      	bne.n	8003ef8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f66:	2300      	movs	r3, #0
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3710      	adds	r7, #16
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b08a      	sub	sp, #40	; 0x28
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	699b      	ldr	r3, [r3, #24]
 8003f88:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	f003 0310 	and.w	r3, r3, #16
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d068      	beq.n	800406e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2210      	movs	r2, #16
 8003fa2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003fa4:	e049      	b.n	800403a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fac:	d045      	beq.n	800403a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003fae:	f7fd feb5 	bl	8001d1c <HAL_GetTick>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	68ba      	ldr	r2, [r7, #8]
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d302      	bcc.n	8003fc4 <I2C_IsErrorOccurred+0x54>
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d13a      	bne.n	800403a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fce:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003fd6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	699b      	ldr	r3, [r3, #24]
 8003fde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fe2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fe6:	d121      	bne.n	800402c <I2C_IsErrorOccurred+0xbc>
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fee:	d01d      	beq.n	800402c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003ff0:	7cfb      	ldrb	r3, [r7, #19]
 8003ff2:	2b20      	cmp	r3, #32
 8003ff4:	d01a      	beq.n	800402c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	685a      	ldr	r2, [r3, #4]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004004:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004006:	f7fd fe89 	bl	8001d1c <HAL_GetTick>
 800400a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800400c:	e00e      	b.n	800402c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800400e:	f7fd fe85 	bl	8001d1c <HAL_GetTick>
 8004012:	4602      	mov	r2, r0
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	2b19      	cmp	r3, #25
 800401a:	d907      	bls.n	800402c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800401c:	6a3b      	ldr	r3, [r7, #32]
 800401e:	f043 0320 	orr.w	r3, r3, #32
 8004022:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800402a:	e006      	b.n	800403a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	f003 0320 	and.w	r3, r3, #32
 8004036:	2b20      	cmp	r3, #32
 8004038:	d1e9      	bne.n	800400e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	699b      	ldr	r3, [r3, #24]
 8004040:	f003 0320 	and.w	r3, r3, #32
 8004044:	2b20      	cmp	r3, #32
 8004046:	d003      	beq.n	8004050 <I2C_IsErrorOccurred+0xe0>
 8004048:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800404c:	2b00      	cmp	r3, #0
 800404e:	d0aa      	beq.n	8003fa6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004050:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004054:	2b00      	cmp	r3, #0
 8004056:	d103      	bne.n	8004060 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	2220      	movs	r2, #32
 800405e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004060:	6a3b      	ldr	r3, [r7, #32]
 8004062:	f043 0304 	orr.w	r3, r3, #4
 8004066:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	699b      	ldr	r3, [r3, #24]
 8004074:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800407c:	2b00      	cmp	r3, #0
 800407e:	d00b      	beq.n	8004098 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004080:	6a3b      	ldr	r3, [r7, #32]
 8004082:	f043 0301 	orr.w	r3, r3, #1
 8004086:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004090:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004098:	69bb      	ldr	r3, [r7, #24]
 800409a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d00b      	beq.n	80040ba <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80040a2:	6a3b      	ldr	r3, [r7, #32]
 80040a4:	f043 0308 	orr.w	r3, r3, #8
 80040a8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80040b2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80040ba:	69bb      	ldr	r3, [r7, #24]
 80040bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d00b      	beq.n	80040dc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80040c4:	6a3b      	ldr	r3, [r7, #32]
 80040c6:	f043 0302 	orr.w	r3, r3, #2
 80040ca:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040d4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80040dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d01c      	beq.n	800411e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80040e4:	68f8      	ldr	r0, [r7, #12]
 80040e6:	f7ff fe28 	bl	8003d3a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	6859      	ldr	r1, [r3, #4]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	4b0d      	ldr	r3, [pc, #52]	; (800412c <I2C_IsErrorOccurred+0x1bc>)
 80040f6:	400b      	ands	r3, r1
 80040f8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040fe:	6a3b      	ldr	r3, [r7, #32]
 8004100:	431a      	orrs	r2, r3
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2220      	movs	r2, #32
 800410a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800411e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004122:	4618      	mov	r0, r3
 8004124:	3728      	adds	r7, #40	; 0x28
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	fe00e800 	.word	0xfe00e800

08004130 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004130:	b480      	push	{r7}
 8004132:	b087      	sub	sp, #28
 8004134:	af00      	add	r7, sp, #0
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	607b      	str	r3, [r7, #4]
 800413a:	460b      	mov	r3, r1
 800413c:	817b      	strh	r3, [r7, #10]
 800413e:	4613      	mov	r3, r2
 8004140:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004142:	897b      	ldrh	r3, [r7, #10]
 8004144:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004148:	7a7b      	ldrb	r3, [r7, #9]
 800414a:	041b      	lsls	r3, r3, #16
 800414c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004150:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004156:	6a3b      	ldr	r3, [r7, #32]
 8004158:	4313      	orrs	r3, r2
 800415a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800415e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	685a      	ldr	r2, [r3, #4]
 8004166:	6a3b      	ldr	r3, [r7, #32]
 8004168:	0d5b      	lsrs	r3, r3, #21
 800416a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800416e:	4b08      	ldr	r3, [pc, #32]	; (8004190 <I2C_TransferConfig+0x60>)
 8004170:	430b      	orrs	r3, r1
 8004172:	43db      	mvns	r3, r3
 8004174:	ea02 0103 	and.w	r1, r2, r3
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	697a      	ldr	r2, [r7, #20]
 800417e:	430a      	orrs	r2, r1
 8004180:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004182:	bf00      	nop
 8004184:	371c      	adds	r7, #28
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr
 800418e:	bf00      	nop
 8004190:	03ff63ff 	.word	0x03ff63ff

08004194 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004194:	b480      	push	{r7}
 8004196:	b085      	sub	sp, #20
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	460b      	mov	r3, r1
 800419e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80041a0:	2300      	movs	r3, #0
 80041a2:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041a8:	4a39      	ldr	r2, [pc, #228]	; (8004290 <I2C_Enable_IRQ+0xfc>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d032      	beq.n	8004214 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80041b2:	4a38      	ldr	r2, [pc, #224]	; (8004294 <I2C_Enable_IRQ+0x100>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d02d      	beq.n	8004214 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80041bc:	4a36      	ldr	r2, [pc, #216]	; (8004298 <I2C_Enable_IRQ+0x104>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d028      	beq.n	8004214 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80041c2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	da03      	bge.n	80041d2 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80041d0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80041d2:	887b      	ldrh	r3, [r7, #2]
 80041d4:	f003 0301 	and.w	r3, r3, #1
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d003      	beq.n	80041e4 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 80041e2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80041e4:	887b      	ldrh	r3, [r7, #2]
 80041e6:	f003 0302 	and.w	r3, r3, #2
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d003      	beq.n	80041f6 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 80041f4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80041f6:	887b      	ldrh	r3, [r7, #2]
 80041f8:	2b10      	cmp	r3, #16
 80041fa:	d103      	bne.n	8004204 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004202:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004204:	887b      	ldrh	r3, [r7, #2]
 8004206:	2b20      	cmp	r3, #32
 8004208:	d133      	bne.n	8004272 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	f043 0320 	orr.w	r3, r3, #32
 8004210:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004212:	e02e      	b.n	8004272 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004214:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004218:	2b00      	cmp	r3, #0
 800421a:	da03      	bge.n	8004224 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004222:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004224:	887b      	ldrh	r3, [r7, #2]
 8004226:	f003 0301 	and.w	r3, r3, #1
 800422a:	2b00      	cmp	r3, #0
 800422c:	d003      	beq.n	8004236 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8004234:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004236:	887b      	ldrh	r3, [r7, #2]
 8004238:	f003 0302 	and.w	r3, r3, #2
 800423c:	2b00      	cmp	r3, #0
 800423e:	d003      	beq.n	8004248 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8004246:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004248:	887b      	ldrh	r3, [r7, #2]
 800424a:	2b10      	cmp	r3, #16
 800424c:	d103      	bne.n	8004256 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004254:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004256:	887b      	ldrh	r3, [r7, #2]
 8004258:	2b20      	cmp	r3, #32
 800425a:	d103      	bne.n	8004264 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004262:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004264:	887b      	ldrh	r3, [r7, #2]
 8004266:	2b40      	cmp	r3, #64	; 0x40
 8004268:	d103      	bne.n	8004272 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004270:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	6819      	ldr	r1, [r3, #0]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	68fa      	ldr	r2, [r7, #12]
 800427e:	430a      	orrs	r2, r1
 8004280:	601a      	str	r2, [r3, #0]
}
 8004282:	bf00      	nop
 8004284:	3714      	adds	r7, #20
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop
 8004290:	08002dfd 	.word	0x08002dfd
 8004294:	08003221 	.word	0x08003221
 8004298:	08002fd5 	.word	0x08002fd5

0800429c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800429c:	b480      	push	{r7}
 800429e:	b085      	sub	sp, #20
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	460b      	mov	r3, r1
 80042a6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80042a8:	2300      	movs	r3, #0
 80042aa:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80042ac:	887b      	ldrh	r3, [r7, #2]
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d00f      	beq.n	80042d6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80042bc:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80042ca:	2b28      	cmp	r3, #40	; 0x28
 80042cc:	d003      	beq.n	80042d6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80042d4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80042d6:	887b      	ldrh	r3, [r7, #2]
 80042d8:	f003 0302 	and.w	r3, r3, #2
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d00f      	beq.n	8004300 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80042e6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80042f4:	2b28      	cmp	r3, #40	; 0x28
 80042f6:	d003      	beq.n	8004300 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80042fe:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004300:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004304:	2b00      	cmp	r3, #0
 8004306:	da03      	bge.n	8004310 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800430e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004310:	887b      	ldrh	r3, [r7, #2]
 8004312:	2b10      	cmp	r3, #16
 8004314:	d103      	bne.n	800431e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800431c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800431e:	887b      	ldrh	r3, [r7, #2]
 8004320:	2b20      	cmp	r3, #32
 8004322:	d103      	bne.n	800432c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f043 0320 	orr.w	r3, r3, #32
 800432a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800432c:	887b      	ldrh	r3, [r7, #2]
 800432e:	2b40      	cmp	r3, #64	; 0x40
 8004330:	d103      	bne.n	800433a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004338:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	6819      	ldr	r1, [r3, #0]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	43da      	mvns	r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	400a      	ands	r2, r1
 800434a:	601a      	str	r2, [r3, #0]
}
 800434c:	bf00      	nop
 800434e:	3714      	adds	r7, #20
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004368:	b2db      	uxtb	r3, r3
 800436a:	2b20      	cmp	r3, #32
 800436c:	d138      	bne.n	80043e0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004374:	2b01      	cmp	r3, #1
 8004376:	d101      	bne.n	800437c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004378:	2302      	movs	r3, #2
 800437a:	e032      	b.n	80043e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2224      	movs	r2, #36	; 0x24
 8004388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f022 0201 	bic.w	r2, r2, #1
 800439a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80043aa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	6819      	ldr	r1, [r3, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	683a      	ldr	r2, [r7, #0]
 80043b8:	430a      	orrs	r2, r1
 80043ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f042 0201 	orr.w	r2, r2, #1
 80043ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2220      	movs	r2, #32
 80043d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80043dc:	2300      	movs	r3, #0
 80043de:	e000      	b.n	80043e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80043e0:	2302      	movs	r3, #2
  }
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	370c      	adds	r7, #12
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr

080043ee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80043ee:	b480      	push	{r7}
 80043f0:	b085      	sub	sp, #20
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
 80043f6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	2b20      	cmp	r3, #32
 8004402:	d139      	bne.n	8004478 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800440a:	2b01      	cmp	r3, #1
 800440c:	d101      	bne.n	8004412 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800440e:	2302      	movs	r3, #2
 8004410:	e033      	b.n	800447a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2201      	movs	r2, #1
 8004416:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2224      	movs	r2, #36	; 0x24
 800441e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f022 0201 	bic.w	r2, r2, #1
 8004430:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004440:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	021b      	lsls	r3, r3, #8
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	4313      	orrs	r3, r2
 800444a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68fa      	ldr	r2, [r7, #12]
 8004452:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f042 0201 	orr.w	r2, r2, #1
 8004462:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2220      	movs	r2, #32
 8004468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004474:	2300      	movs	r3, #0
 8004476:	e000      	b.n	800447a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004478:	2302      	movs	r3, #2
  }
}
 800447a:	4618      	mov	r0, r3
 800447c:	3714      	adds	r7, #20
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr
	...

08004488 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004488:	b480      	push	{r7}
 800448a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800448c:	4b04      	ldr	r3, [pc, #16]	; (80044a0 <HAL_PWREx_GetVoltageRange+0x18>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004494:	4618      	mov	r0, r3
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr
 800449e:	bf00      	nop
 80044a0:	40007000 	.word	0x40007000

080044a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b085      	sub	sp, #20
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044b2:	d130      	bne.n	8004516 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80044b4:	4b23      	ldr	r3, [pc, #140]	; (8004544 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80044bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044c0:	d038      	beq.n	8004534 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80044c2:	4b20      	ldr	r3, [pc, #128]	; (8004544 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80044ca:	4a1e      	ldr	r2, [pc, #120]	; (8004544 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044d0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80044d2:	4b1d      	ldr	r3, [pc, #116]	; (8004548 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2232      	movs	r2, #50	; 0x32
 80044d8:	fb02 f303 	mul.w	r3, r2, r3
 80044dc:	4a1b      	ldr	r2, [pc, #108]	; (800454c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80044de:	fba2 2303 	umull	r2, r3, r2, r3
 80044e2:	0c9b      	lsrs	r3, r3, #18
 80044e4:	3301      	adds	r3, #1
 80044e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80044e8:	e002      	b.n	80044f0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	3b01      	subs	r3, #1
 80044ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80044f0:	4b14      	ldr	r3, [pc, #80]	; (8004544 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044f2:	695b      	ldr	r3, [r3, #20]
 80044f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044fc:	d102      	bne.n	8004504 <HAL_PWREx_ControlVoltageScaling+0x60>
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d1f2      	bne.n	80044ea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004504:	4b0f      	ldr	r3, [pc, #60]	; (8004544 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004506:	695b      	ldr	r3, [r3, #20]
 8004508:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800450c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004510:	d110      	bne.n	8004534 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e00f      	b.n	8004536 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004516:	4b0b      	ldr	r3, [pc, #44]	; (8004544 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800451e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004522:	d007      	beq.n	8004534 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004524:	4b07      	ldr	r3, [pc, #28]	; (8004544 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800452c:	4a05      	ldr	r2, [pc, #20]	; (8004544 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800452e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004532:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	3714      	adds	r7, #20
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	40007000 	.word	0x40007000
 8004548:	20000000 	.word	0x20000000
 800454c:	431bde83 	.word	0x431bde83

08004550 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b088      	sub	sp, #32
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d101      	bne.n	8004562 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e3ca      	b.n	8004cf8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004562:	4b97      	ldr	r3, [pc, #604]	; (80047c0 <HAL_RCC_OscConfig+0x270>)
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f003 030c 	and.w	r3, r3, #12
 800456a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800456c:	4b94      	ldr	r3, [pc, #592]	; (80047c0 <HAL_RCC_OscConfig+0x270>)
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	f003 0303 	and.w	r3, r3, #3
 8004574:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0310 	and.w	r3, r3, #16
 800457e:	2b00      	cmp	r3, #0
 8004580:	f000 80e4 	beq.w	800474c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d007      	beq.n	800459a <HAL_RCC_OscConfig+0x4a>
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	2b0c      	cmp	r3, #12
 800458e:	f040 808b 	bne.w	80046a8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	2b01      	cmp	r3, #1
 8004596:	f040 8087 	bne.w	80046a8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800459a:	4b89      	ldr	r3, [pc, #548]	; (80047c0 <HAL_RCC_OscConfig+0x270>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0302 	and.w	r3, r3, #2
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d005      	beq.n	80045b2 <HAL_RCC_OscConfig+0x62>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	699b      	ldr	r3, [r3, #24]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d101      	bne.n	80045b2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e3a2      	b.n	8004cf8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a1a      	ldr	r2, [r3, #32]
 80045b6:	4b82      	ldr	r3, [pc, #520]	; (80047c0 <HAL_RCC_OscConfig+0x270>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0308 	and.w	r3, r3, #8
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d004      	beq.n	80045cc <HAL_RCC_OscConfig+0x7c>
 80045c2:	4b7f      	ldr	r3, [pc, #508]	; (80047c0 <HAL_RCC_OscConfig+0x270>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045ca:	e005      	b.n	80045d8 <HAL_RCC_OscConfig+0x88>
 80045cc:	4b7c      	ldr	r3, [pc, #496]	; (80047c0 <HAL_RCC_OscConfig+0x270>)
 80045ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045d2:	091b      	lsrs	r3, r3, #4
 80045d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045d8:	4293      	cmp	r3, r2
 80045da:	d223      	bcs.n	8004624 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6a1b      	ldr	r3, [r3, #32]
 80045e0:	4618      	mov	r0, r3
 80045e2:	f000 fd55 	bl	8005090 <RCC_SetFlashLatencyFromMSIRange>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d001      	beq.n	80045f0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e383      	b.n	8004cf8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045f0:	4b73      	ldr	r3, [pc, #460]	; (80047c0 <HAL_RCC_OscConfig+0x270>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a72      	ldr	r2, [pc, #456]	; (80047c0 <HAL_RCC_OscConfig+0x270>)
 80045f6:	f043 0308 	orr.w	r3, r3, #8
 80045fa:	6013      	str	r3, [r2, #0]
 80045fc:	4b70      	ldr	r3, [pc, #448]	; (80047c0 <HAL_RCC_OscConfig+0x270>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6a1b      	ldr	r3, [r3, #32]
 8004608:	496d      	ldr	r1, [pc, #436]	; (80047c0 <HAL_RCC_OscConfig+0x270>)
 800460a:	4313      	orrs	r3, r2
 800460c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800460e:	4b6c      	ldr	r3, [pc, #432]	; (80047c0 <HAL_RCC_OscConfig+0x270>)
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	69db      	ldr	r3, [r3, #28]
 800461a:	021b      	lsls	r3, r3, #8
 800461c:	4968      	ldr	r1, [pc, #416]	; (80047c0 <HAL_RCC_OscConfig+0x270>)
 800461e:	4313      	orrs	r3, r2
 8004620:	604b      	str	r3, [r1, #4]
 8004622:	e025      	b.n	8004670 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004624:	4b66      	ldr	r3, [pc, #408]	; (80047c0 <HAL_RCC_OscConfig+0x270>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a65      	ldr	r2, [pc, #404]	; (80047c0 <HAL_RCC_OscConfig+0x270>)
 800462a:	f043 0308 	orr.w	r3, r3, #8
 800462e:	6013      	str	r3, [r2, #0]
 8004630:	4b63      	ldr	r3, [pc, #396]	; (80047c0 <HAL_RCC_OscConfig+0x270>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6a1b      	ldr	r3, [r3, #32]
 800463c:	4960      	ldr	r1, [pc, #384]	; (80047c0 <HAL_RCC_OscConfig+0x270>)
 800463e:	4313      	orrs	r3, r2
 8004640:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004642:	4b5f      	ldr	r3, [pc, #380]	; (80047c0 <HAL_RCC_OscConfig+0x270>)
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	69db      	ldr	r3, [r3, #28]
 800464e:	021b      	lsls	r3, r3, #8
 8004650:	495b      	ldr	r1, [pc, #364]	; (80047c0 <HAL_RCC_OscConfig+0x270>)
 8004652:	4313      	orrs	r3, r2
 8004654:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d109      	bne.n	8004670 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6a1b      	ldr	r3, [r3, #32]
 8004660:	4618      	mov	r0, r3
 8004662:	f000 fd15 	bl	8005090 <RCC_SetFlashLatencyFromMSIRange>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d001      	beq.n	8004670 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e343      	b.n	8004cf8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004670:	f000 fc4a 	bl	8004f08 <HAL_RCC_GetSysClockFreq>
 8004674:	4602      	mov	r2, r0
 8004676:	4b52      	ldr	r3, [pc, #328]	; (80047c0 <HAL_RCC_OscConfig+0x270>)
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	091b      	lsrs	r3, r3, #4
 800467c:	f003 030f 	and.w	r3, r3, #15
 8004680:	4950      	ldr	r1, [pc, #320]	; (80047c4 <HAL_RCC_OscConfig+0x274>)
 8004682:	5ccb      	ldrb	r3, [r1, r3]
 8004684:	f003 031f 	and.w	r3, r3, #31
 8004688:	fa22 f303 	lsr.w	r3, r2, r3
 800468c:	4a4e      	ldr	r2, [pc, #312]	; (80047c8 <HAL_RCC_OscConfig+0x278>)
 800468e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004690:	4b4e      	ldr	r3, [pc, #312]	; (80047cc <HAL_RCC_OscConfig+0x27c>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4618      	mov	r0, r3
 8004696:	f7fd faf1 	bl	8001c7c <HAL_InitTick>
 800469a:	4603      	mov	r3, r0
 800469c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800469e:	7bfb      	ldrb	r3, [r7, #15]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d052      	beq.n	800474a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80046a4:	7bfb      	ldrb	r3, [r7, #15]
 80046a6:	e327      	b.n	8004cf8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	699b      	ldr	r3, [r3, #24]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d032      	beq.n	8004716 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80046b0:	4b43      	ldr	r3, [pc, #268]	; (80047c0 <HAL_RCC_OscConfig+0x270>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a42      	ldr	r2, [pc, #264]	; (80047c0 <HAL_RCC_OscConfig+0x270>)
 80046b6:	f043 0301 	orr.w	r3, r3, #1
 80046ba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80046bc:	f7fd fb2e 	bl	8001d1c <HAL_GetTick>
 80046c0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80046c2:	e008      	b.n	80046d6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80046c4:	f7fd fb2a 	bl	8001d1c <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d901      	bls.n	80046d6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e310      	b.n	8004cf8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80046d6:	4b3a      	ldr	r3, [pc, #232]	; (80047c0 <HAL_RCC_OscConfig+0x270>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0302 	and.w	r3, r3, #2
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d0f0      	beq.n	80046c4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046e2:	4b37      	ldr	r3, [pc, #220]	; (80047c0 <HAL_RCC_OscConfig+0x270>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a36      	ldr	r2, [pc, #216]	; (80047c0 <HAL_RCC_OscConfig+0x270>)
 80046e8:	f043 0308 	orr.w	r3, r3, #8
 80046ec:	6013      	str	r3, [r2, #0]
 80046ee:	4b34      	ldr	r3, [pc, #208]	; (80047c0 <HAL_RCC_OscConfig+0x270>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a1b      	ldr	r3, [r3, #32]
 80046fa:	4931      	ldr	r1, [pc, #196]	; (80047c0 <HAL_RCC_OscConfig+0x270>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004700:	4b2f      	ldr	r3, [pc, #188]	; (80047c0 <HAL_RCC_OscConfig+0x270>)
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	69db      	ldr	r3, [r3, #28]
 800470c:	021b      	lsls	r3, r3, #8
 800470e:	492c      	ldr	r1, [pc, #176]	; (80047c0 <HAL_RCC_OscConfig+0x270>)
 8004710:	4313      	orrs	r3, r2
 8004712:	604b      	str	r3, [r1, #4]
 8004714:	e01a      	b.n	800474c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004716:	4b2a      	ldr	r3, [pc, #168]	; (80047c0 <HAL_RCC_OscConfig+0x270>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a29      	ldr	r2, [pc, #164]	; (80047c0 <HAL_RCC_OscConfig+0x270>)
 800471c:	f023 0301 	bic.w	r3, r3, #1
 8004720:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004722:	f7fd fafb 	bl	8001d1c <HAL_GetTick>
 8004726:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004728:	e008      	b.n	800473c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800472a:	f7fd faf7 	bl	8001d1c <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	2b02      	cmp	r3, #2
 8004736:	d901      	bls.n	800473c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004738:	2303      	movs	r3, #3
 800473a:	e2dd      	b.n	8004cf8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800473c:	4b20      	ldr	r3, [pc, #128]	; (80047c0 <HAL_RCC_OscConfig+0x270>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0302 	and.w	r3, r3, #2
 8004744:	2b00      	cmp	r3, #0
 8004746:	d1f0      	bne.n	800472a <HAL_RCC_OscConfig+0x1da>
 8004748:	e000      	b.n	800474c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800474a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0301 	and.w	r3, r3, #1
 8004754:	2b00      	cmp	r3, #0
 8004756:	d074      	beq.n	8004842 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	2b08      	cmp	r3, #8
 800475c:	d005      	beq.n	800476a <HAL_RCC_OscConfig+0x21a>
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	2b0c      	cmp	r3, #12
 8004762:	d10e      	bne.n	8004782 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	2b03      	cmp	r3, #3
 8004768:	d10b      	bne.n	8004782 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800476a:	4b15      	ldr	r3, [pc, #84]	; (80047c0 <HAL_RCC_OscConfig+0x270>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d064      	beq.n	8004840 <HAL_RCC_OscConfig+0x2f0>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d160      	bne.n	8004840 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e2ba      	b.n	8004cf8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800478a:	d106      	bne.n	800479a <HAL_RCC_OscConfig+0x24a>
 800478c:	4b0c      	ldr	r3, [pc, #48]	; (80047c0 <HAL_RCC_OscConfig+0x270>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a0b      	ldr	r2, [pc, #44]	; (80047c0 <HAL_RCC_OscConfig+0x270>)
 8004792:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004796:	6013      	str	r3, [r2, #0]
 8004798:	e026      	b.n	80047e8 <HAL_RCC_OscConfig+0x298>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047a2:	d115      	bne.n	80047d0 <HAL_RCC_OscConfig+0x280>
 80047a4:	4b06      	ldr	r3, [pc, #24]	; (80047c0 <HAL_RCC_OscConfig+0x270>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a05      	ldr	r2, [pc, #20]	; (80047c0 <HAL_RCC_OscConfig+0x270>)
 80047aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047ae:	6013      	str	r3, [r2, #0]
 80047b0:	4b03      	ldr	r3, [pc, #12]	; (80047c0 <HAL_RCC_OscConfig+0x270>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a02      	ldr	r2, [pc, #8]	; (80047c0 <HAL_RCC_OscConfig+0x270>)
 80047b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047ba:	6013      	str	r3, [r2, #0]
 80047bc:	e014      	b.n	80047e8 <HAL_RCC_OscConfig+0x298>
 80047be:	bf00      	nop
 80047c0:	40021000 	.word	0x40021000
 80047c4:	0800c080 	.word	0x0800c080
 80047c8:	20000000 	.word	0x20000000
 80047cc:	20000004 	.word	0x20000004
 80047d0:	4ba0      	ldr	r3, [pc, #640]	; (8004a54 <HAL_RCC_OscConfig+0x504>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a9f      	ldr	r2, [pc, #636]	; (8004a54 <HAL_RCC_OscConfig+0x504>)
 80047d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047da:	6013      	str	r3, [r2, #0]
 80047dc:	4b9d      	ldr	r3, [pc, #628]	; (8004a54 <HAL_RCC_OscConfig+0x504>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a9c      	ldr	r2, [pc, #624]	; (8004a54 <HAL_RCC_OscConfig+0x504>)
 80047e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d013      	beq.n	8004818 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047f0:	f7fd fa94 	bl	8001d1c <HAL_GetTick>
 80047f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047f6:	e008      	b.n	800480a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047f8:	f7fd fa90 	bl	8001d1c <HAL_GetTick>
 80047fc:	4602      	mov	r2, r0
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	2b64      	cmp	r3, #100	; 0x64
 8004804:	d901      	bls.n	800480a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e276      	b.n	8004cf8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800480a:	4b92      	ldr	r3, [pc, #584]	; (8004a54 <HAL_RCC_OscConfig+0x504>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d0f0      	beq.n	80047f8 <HAL_RCC_OscConfig+0x2a8>
 8004816:	e014      	b.n	8004842 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004818:	f7fd fa80 	bl	8001d1c <HAL_GetTick>
 800481c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800481e:	e008      	b.n	8004832 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004820:	f7fd fa7c 	bl	8001d1c <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	2b64      	cmp	r3, #100	; 0x64
 800482c:	d901      	bls.n	8004832 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e262      	b.n	8004cf8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004832:	4b88      	ldr	r3, [pc, #544]	; (8004a54 <HAL_RCC_OscConfig+0x504>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d1f0      	bne.n	8004820 <HAL_RCC_OscConfig+0x2d0>
 800483e:	e000      	b.n	8004842 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004840:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0302 	and.w	r3, r3, #2
 800484a:	2b00      	cmp	r3, #0
 800484c:	d060      	beq.n	8004910 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	2b04      	cmp	r3, #4
 8004852:	d005      	beq.n	8004860 <HAL_RCC_OscConfig+0x310>
 8004854:	69bb      	ldr	r3, [r7, #24]
 8004856:	2b0c      	cmp	r3, #12
 8004858:	d119      	bne.n	800488e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	2b02      	cmp	r3, #2
 800485e:	d116      	bne.n	800488e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004860:	4b7c      	ldr	r3, [pc, #496]	; (8004a54 <HAL_RCC_OscConfig+0x504>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004868:	2b00      	cmp	r3, #0
 800486a:	d005      	beq.n	8004878 <HAL_RCC_OscConfig+0x328>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d101      	bne.n	8004878 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e23f      	b.n	8004cf8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004878:	4b76      	ldr	r3, [pc, #472]	; (8004a54 <HAL_RCC_OscConfig+0x504>)
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	061b      	lsls	r3, r3, #24
 8004886:	4973      	ldr	r1, [pc, #460]	; (8004a54 <HAL_RCC_OscConfig+0x504>)
 8004888:	4313      	orrs	r3, r2
 800488a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800488c:	e040      	b.n	8004910 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d023      	beq.n	80048de <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004896:	4b6f      	ldr	r3, [pc, #444]	; (8004a54 <HAL_RCC_OscConfig+0x504>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a6e      	ldr	r2, [pc, #440]	; (8004a54 <HAL_RCC_OscConfig+0x504>)
 800489c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a2:	f7fd fa3b 	bl	8001d1c <HAL_GetTick>
 80048a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048a8:	e008      	b.n	80048bc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048aa:	f7fd fa37 	bl	8001d1c <HAL_GetTick>
 80048ae:	4602      	mov	r2, r0
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d901      	bls.n	80048bc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80048b8:	2303      	movs	r3, #3
 80048ba:	e21d      	b.n	8004cf8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048bc:	4b65      	ldr	r3, [pc, #404]	; (8004a54 <HAL_RCC_OscConfig+0x504>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d0f0      	beq.n	80048aa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048c8:	4b62      	ldr	r3, [pc, #392]	; (8004a54 <HAL_RCC_OscConfig+0x504>)
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	061b      	lsls	r3, r3, #24
 80048d6:	495f      	ldr	r1, [pc, #380]	; (8004a54 <HAL_RCC_OscConfig+0x504>)
 80048d8:	4313      	orrs	r3, r2
 80048da:	604b      	str	r3, [r1, #4]
 80048dc:	e018      	b.n	8004910 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048de:	4b5d      	ldr	r3, [pc, #372]	; (8004a54 <HAL_RCC_OscConfig+0x504>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a5c      	ldr	r2, [pc, #368]	; (8004a54 <HAL_RCC_OscConfig+0x504>)
 80048e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ea:	f7fd fa17 	bl	8001d1c <HAL_GetTick>
 80048ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80048f0:	e008      	b.n	8004904 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048f2:	f7fd fa13 	bl	8001d1c <HAL_GetTick>
 80048f6:	4602      	mov	r2, r0
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d901      	bls.n	8004904 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004900:	2303      	movs	r3, #3
 8004902:	e1f9      	b.n	8004cf8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004904:	4b53      	ldr	r3, [pc, #332]	; (8004a54 <HAL_RCC_OscConfig+0x504>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800490c:	2b00      	cmp	r3, #0
 800490e:	d1f0      	bne.n	80048f2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0308 	and.w	r3, r3, #8
 8004918:	2b00      	cmp	r3, #0
 800491a:	d03c      	beq.n	8004996 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	695b      	ldr	r3, [r3, #20]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d01c      	beq.n	800495e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004924:	4b4b      	ldr	r3, [pc, #300]	; (8004a54 <HAL_RCC_OscConfig+0x504>)
 8004926:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800492a:	4a4a      	ldr	r2, [pc, #296]	; (8004a54 <HAL_RCC_OscConfig+0x504>)
 800492c:	f043 0301 	orr.w	r3, r3, #1
 8004930:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004934:	f7fd f9f2 	bl	8001d1c <HAL_GetTick>
 8004938:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800493a:	e008      	b.n	800494e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800493c:	f7fd f9ee 	bl	8001d1c <HAL_GetTick>
 8004940:	4602      	mov	r2, r0
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	2b02      	cmp	r3, #2
 8004948:	d901      	bls.n	800494e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e1d4      	b.n	8004cf8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800494e:	4b41      	ldr	r3, [pc, #260]	; (8004a54 <HAL_RCC_OscConfig+0x504>)
 8004950:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004954:	f003 0302 	and.w	r3, r3, #2
 8004958:	2b00      	cmp	r3, #0
 800495a:	d0ef      	beq.n	800493c <HAL_RCC_OscConfig+0x3ec>
 800495c:	e01b      	b.n	8004996 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800495e:	4b3d      	ldr	r3, [pc, #244]	; (8004a54 <HAL_RCC_OscConfig+0x504>)
 8004960:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004964:	4a3b      	ldr	r2, [pc, #236]	; (8004a54 <HAL_RCC_OscConfig+0x504>)
 8004966:	f023 0301 	bic.w	r3, r3, #1
 800496a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800496e:	f7fd f9d5 	bl	8001d1c <HAL_GetTick>
 8004972:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004974:	e008      	b.n	8004988 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004976:	f7fd f9d1 	bl	8001d1c <HAL_GetTick>
 800497a:	4602      	mov	r2, r0
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	2b02      	cmp	r3, #2
 8004982:	d901      	bls.n	8004988 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004984:	2303      	movs	r3, #3
 8004986:	e1b7      	b.n	8004cf8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004988:	4b32      	ldr	r3, [pc, #200]	; (8004a54 <HAL_RCC_OscConfig+0x504>)
 800498a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800498e:	f003 0302 	and.w	r3, r3, #2
 8004992:	2b00      	cmp	r3, #0
 8004994:	d1ef      	bne.n	8004976 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0304 	and.w	r3, r3, #4
 800499e:	2b00      	cmp	r3, #0
 80049a0:	f000 80a6 	beq.w	8004af0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049a4:	2300      	movs	r3, #0
 80049a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80049a8:	4b2a      	ldr	r3, [pc, #168]	; (8004a54 <HAL_RCC_OscConfig+0x504>)
 80049aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d10d      	bne.n	80049d0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049b4:	4b27      	ldr	r3, [pc, #156]	; (8004a54 <HAL_RCC_OscConfig+0x504>)
 80049b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049b8:	4a26      	ldr	r2, [pc, #152]	; (8004a54 <HAL_RCC_OscConfig+0x504>)
 80049ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049be:	6593      	str	r3, [r2, #88]	; 0x58
 80049c0:	4b24      	ldr	r3, [pc, #144]	; (8004a54 <HAL_RCC_OscConfig+0x504>)
 80049c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049c8:	60bb      	str	r3, [r7, #8]
 80049ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049cc:	2301      	movs	r3, #1
 80049ce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049d0:	4b21      	ldr	r3, [pc, #132]	; (8004a58 <HAL_RCC_OscConfig+0x508>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d118      	bne.n	8004a0e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049dc:	4b1e      	ldr	r3, [pc, #120]	; (8004a58 <HAL_RCC_OscConfig+0x508>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a1d      	ldr	r2, [pc, #116]	; (8004a58 <HAL_RCC_OscConfig+0x508>)
 80049e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049e8:	f7fd f998 	bl	8001d1c <HAL_GetTick>
 80049ec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049ee:	e008      	b.n	8004a02 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049f0:	f7fd f994 	bl	8001d1c <HAL_GetTick>
 80049f4:	4602      	mov	r2, r0
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d901      	bls.n	8004a02 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e17a      	b.n	8004cf8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a02:	4b15      	ldr	r3, [pc, #84]	; (8004a58 <HAL_RCC_OscConfig+0x508>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d0f0      	beq.n	80049f0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d108      	bne.n	8004a28 <HAL_RCC_OscConfig+0x4d8>
 8004a16:	4b0f      	ldr	r3, [pc, #60]	; (8004a54 <HAL_RCC_OscConfig+0x504>)
 8004a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a1c:	4a0d      	ldr	r2, [pc, #52]	; (8004a54 <HAL_RCC_OscConfig+0x504>)
 8004a1e:	f043 0301 	orr.w	r3, r3, #1
 8004a22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a26:	e029      	b.n	8004a7c <HAL_RCC_OscConfig+0x52c>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	2b05      	cmp	r3, #5
 8004a2e:	d115      	bne.n	8004a5c <HAL_RCC_OscConfig+0x50c>
 8004a30:	4b08      	ldr	r3, [pc, #32]	; (8004a54 <HAL_RCC_OscConfig+0x504>)
 8004a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a36:	4a07      	ldr	r2, [pc, #28]	; (8004a54 <HAL_RCC_OscConfig+0x504>)
 8004a38:	f043 0304 	orr.w	r3, r3, #4
 8004a3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a40:	4b04      	ldr	r3, [pc, #16]	; (8004a54 <HAL_RCC_OscConfig+0x504>)
 8004a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a46:	4a03      	ldr	r2, [pc, #12]	; (8004a54 <HAL_RCC_OscConfig+0x504>)
 8004a48:	f043 0301 	orr.w	r3, r3, #1
 8004a4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a50:	e014      	b.n	8004a7c <HAL_RCC_OscConfig+0x52c>
 8004a52:	bf00      	nop
 8004a54:	40021000 	.word	0x40021000
 8004a58:	40007000 	.word	0x40007000
 8004a5c:	4b9c      	ldr	r3, [pc, #624]	; (8004cd0 <HAL_RCC_OscConfig+0x780>)
 8004a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a62:	4a9b      	ldr	r2, [pc, #620]	; (8004cd0 <HAL_RCC_OscConfig+0x780>)
 8004a64:	f023 0301 	bic.w	r3, r3, #1
 8004a68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a6c:	4b98      	ldr	r3, [pc, #608]	; (8004cd0 <HAL_RCC_OscConfig+0x780>)
 8004a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a72:	4a97      	ldr	r2, [pc, #604]	; (8004cd0 <HAL_RCC_OscConfig+0x780>)
 8004a74:	f023 0304 	bic.w	r3, r3, #4
 8004a78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d016      	beq.n	8004ab2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a84:	f7fd f94a 	bl	8001d1c <HAL_GetTick>
 8004a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a8a:	e00a      	b.n	8004aa2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a8c:	f7fd f946 	bl	8001d1c <HAL_GetTick>
 8004a90:	4602      	mov	r2, r0
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d901      	bls.n	8004aa2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e12a      	b.n	8004cf8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004aa2:	4b8b      	ldr	r3, [pc, #556]	; (8004cd0 <HAL_RCC_OscConfig+0x780>)
 8004aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aa8:	f003 0302 	and.w	r3, r3, #2
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d0ed      	beq.n	8004a8c <HAL_RCC_OscConfig+0x53c>
 8004ab0:	e015      	b.n	8004ade <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ab2:	f7fd f933 	bl	8001d1c <HAL_GetTick>
 8004ab6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ab8:	e00a      	b.n	8004ad0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004aba:	f7fd f92f 	bl	8001d1c <HAL_GetTick>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d901      	bls.n	8004ad0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	e113      	b.n	8004cf8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ad0:	4b7f      	ldr	r3, [pc, #508]	; (8004cd0 <HAL_RCC_OscConfig+0x780>)
 8004ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ad6:	f003 0302 	and.w	r3, r3, #2
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d1ed      	bne.n	8004aba <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ade:	7ffb      	ldrb	r3, [r7, #31]
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d105      	bne.n	8004af0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ae4:	4b7a      	ldr	r3, [pc, #488]	; (8004cd0 <HAL_RCC_OscConfig+0x780>)
 8004ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ae8:	4a79      	ldr	r2, [pc, #484]	; (8004cd0 <HAL_RCC_OscConfig+0x780>)
 8004aea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004aee:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	f000 80fe 	beq.w	8004cf6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004afe:	2b02      	cmp	r3, #2
 8004b00:	f040 80d0 	bne.w	8004ca4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004b04:	4b72      	ldr	r3, [pc, #456]	; (8004cd0 <HAL_RCC_OscConfig+0x780>)
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	f003 0203 	and.w	r2, r3, #3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d130      	bne.n	8004b7a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b22:	3b01      	subs	r3, #1
 8004b24:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d127      	bne.n	8004b7a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b34:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d11f      	bne.n	8004b7a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b44:	2a07      	cmp	r2, #7
 8004b46:	bf14      	ite	ne
 8004b48:	2201      	movne	r2, #1
 8004b4a:	2200      	moveq	r2, #0
 8004b4c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d113      	bne.n	8004b7a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b5c:	085b      	lsrs	r3, r3, #1
 8004b5e:	3b01      	subs	r3, #1
 8004b60:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d109      	bne.n	8004b7a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b70:	085b      	lsrs	r3, r3, #1
 8004b72:	3b01      	subs	r3, #1
 8004b74:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d06e      	beq.n	8004c58 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	2b0c      	cmp	r3, #12
 8004b7e:	d069      	beq.n	8004c54 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004b80:	4b53      	ldr	r3, [pc, #332]	; (8004cd0 <HAL_RCC_OscConfig+0x780>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d105      	bne.n	8004b98 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004b8c:	4b50      	ldr	r3, [pc, #320]	; (8004cd0 <HAL_RCC_OscConfig+0x780>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d001      	beq.n	8004b9c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e0ad      	b.n	8004cf8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004b9c:	4b4c      	ldr	r3, [pc, #304]	; (8004cd0 <HAL_RCC_OscConfig+0x780>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a4b      	ldr	r2, [pc, #300]	; (8004cd0 <HAL_RCC_OscConfig+0x780>)
 8004ba2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ba6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ba8:	f7fd f8b8 	bl	8001d1c <HAL_GetTick>
 8004bac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bae:	e008      	b.n	8004bc2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bb0:	f7fd f8b4 	bl	8001d1c <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	2b02      	cmp	r3, #2
 8004bbc:	d901      	bls.n	8004bc2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e09a      	b.n	8004cf8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bc2:	4b43      	ldr	r3, [pc, #268]	; (8004cd0 <HAL_RCC_OscConfig+0x780>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1f0      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004bce:	4b40      	ldr	r3, [pc, #256]	; (8004cd0 <HAL_RCC_OscConfig+0x780>)
 8004bd0:	68da      	ldr	r2, [r3, #12]
 8004bd2:	4b40      	ldr	r3, [pc, #256]	; (8004cd4 <HAL_RCC_OscConfig+0x784>)
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004bde:	3a01      	subs	r2, #1
 8004be0:	0112      	lsls	r2, r2, #4
 8004be2:	4311      	orrs	r1, r2
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004be8:	0212      	lsls	r2, r2, #8
 8004bea:	4311      	orrs	r1, r2
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004bf0:	0852      	lsrs	r2, r2, #1
 8004bf2:	3a01      	subs	r2, #1
 8004bf4:	0552      	lsls	r2, r2, #21
 8004bf6:	4311      	orrs	r1, r2
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004bfc:	0852      	lsrs	r2, r2, #1
 8004bfe:	3a01      	subs	r2, #1
 8004c00:	0652      	lsls	r2, r2, #25
 8004c02:	4311      	orrs	r1, r2
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c08:	0912      	lsrs	r2, r2, #4
 8004c0a:	0452      	lsls	r2, r2, #17
 8004c0c:	430a      	orrs	r2, r1
 8004c0e:	4930      	ldr	r1, [pc, #192]	; (8004cd0 <HAL_RCC_OscConfig+0x780>)
 8004c10:	4313      	orrs	r3, r2
 8004c12:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004c14:	4b2e      	ldr	r3, [pc, #184]	; (8004cd0 <HAL_RCC_OscConfig+0x780>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a2d      	ldr	r2, [pc, #180]	; (8004cd0 <HAL_RCC_OscConfig+0x780>)
 8004c1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c1e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004c20:	4b2b      	ldr	r3, [pc, #172]	; (8004cd0 <HAL_RCC_OscConfig+0x780>)
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	4a2a      	ldr	r2, [pc, #168]	; (8004cd0 <HAL_RCC_OscConfig+0x780>)
 8004c26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c2a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004c2c:	f7fd f876 	bl	8001d1c <HAL_GetTick>
 8004c30:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c32:	e008      	b.n	8004c46 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c34:	f7fd f872 	bl	8001d1c <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d901      	bls.n	8004c46 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004c42:	2303      	movs	r3, #3
 8004c44:	e058      	b.n	8004cf8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c46:	4b22      	ldr	r3, [pc, #136]	; (8004cd0 <HAL_RCC_OscConfig+0x780>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d0f0      	beq.n	8004c34 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c52:	e050      	b.n	8004cf6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e04f      	b.n	8004cf8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c58:	4b1d      	ldr	r3, [pc, #116]	; (8004cd0 <HAL_RCC_OscConfig+0x780>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d148      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004c64:	4b1a      	ldr	r3, [pc, #104]	; (8004cd0 <HAL_RCC_OscConfig+0x780>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a19      	ldr	r2, [pc, #100]	; (8004cd0 <HAL_RCC_OscConfig+0x780>)
 8004c6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c6e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004c70:	4b17      	ldr	r3, [pc, #92]	; (8004cd0 <HAL_RCC_OscConfig+0x780>)
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	4a16      	ldr	r2, [pc, #88]	; (8004cd0 <HAL_RCC_OscConfig+0x780>)
 8004c76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c7a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004c7c:	f7fd f84e 	bl	8001d1c <HAL_GetTick>
 8004c80:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c82:	e008      	b.n	8004c96 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c84:	f7fd f84a 	bl	8001d1c <HAL_GetTick>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d901      	bls.n	8004c96 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e030      	b.n	8004cf8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c96:	4b0e      	ldr	r3, [pc, #56]	; (8004cd0 <HAL_RCC_OscConfig+0x780>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d0f0      	beq.n	8004c84 <HAL_RCC_OscConfig+0x734>
 8004ca2:	e028      	b.n	8004cf6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	2b0c      	cmp	r3, #12
 8004ca8:	d023      	beq.n	8004cf2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004caa:	4b09      	ldr	r3, [pc, #36]	; (8004cd0 <HAL_RCC_OscConfig+0x780>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a08      	ldr	r2, [pc, #32]	; (8004cd0 <HAL_RCC_OscConfig+0x780>)
 8004cb0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004cb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cb6:	f7fd f831 	bl	8001d1c <HAL_GetTick>
 8004cba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cbc:	e00c      	b.n	8004cd8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cbe:	f7fd f82d 	bl	8001d1c <HAL_GetTick>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	d905      	bls.n	8004cd8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004ccc:	2303      	movs	r3, #3
 8004cce:	e013      	b.n	8004cf8 <HAL_RCC_OscConfig+0x7a8>
 8004cd0:	40021000 	.word	0x40021000
 8004cd4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cd8:	4b09      	ldr	r3, [pc, #36]	; (8004d00 <HAL_RCC_OscConfig+0x7b0>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d1ec      	bne.n	8004cbe <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004ce4:	4b06      	ldr	r3, [pc, #24]	; (8004d00 <HAL_RCC_OscConfig+0x7b0>)
 8004ce6:	68da      	ldr	r2, [r3, #12]
 8004ce8:	4905      	ldr	r1, [pc, #20]	; (8004d00 <HAL_RCC_OscConfig+0x7b0>)
 8004cea:	4b06      	ldr	r3, [pc, #24]	; (8004d04 <HAL_RCC_OscConfig+0x7b4>)
 8004cec:	4013      	ands	r3, r2
 8004cee:	60cb      	str	r3, [r1, #12]
 8004cf0:	e001      	b.n	8004cf6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e000      	b.n	8004cf8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004cf6:	2300      	movs	r3, #0
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3720      	adds	r7, #32
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	40021000 	.word	0x40021000
 8004d04:	feeefffc 	.word	0xfeeefffc

08004d08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d101      	bne.n	8004d1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e0e7      	b.n	8004eec <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d1c:	4b75      	ldr	r3, [pc, #468]	; (8004ef4 <HAL_RCC_ClockConfig+0x1ec>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0307 	and.w	r3, r3, #7
 8004d24:	683a      	ldr	r2, [r7, #0]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d910      	bls.n	8004d4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d2a:	4b72      	ldr	r3, [pc, #456]	; (8004ef4 <HAL_RCC_ClockConfig+0x1ec>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f023 0207 	bic.w	r2, r3, #7
 8004d32:	4970      	ldr	r1, [pc, #448]	; (8004ef4 <HAL_RCC_ClockConfig+0x1ec>)
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d3a:	4b6e      	ldr	r3, [pc, #440]	; (8004ef4 <HAL_RCC_ClockConfig+0x1ec>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 0307 	and.w	r3, r3, #7
 8004d42:	683a      	ldr	r2, [r7, #0]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d001      	beq.n	8004d4c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e0cf      	b.n	8004eec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0302 	and.w	r3, r3, #2
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d010      	beq.n	8004d7a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	689a      	ldr	r2, [r3, #8]
 8004d5c:	4b66      	ldr	r3, [pc, #408]	; (8004ef8 <HAL_RCC_ClockConfig+0x1f0>)
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d908      	bls.n	8004d7a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d68:	4b63      	ldr	r3, [pc, #396]	; (8004ef8 <HAL_RCC_ClockConfig+0x1f0>)
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	4960      	ldr	r1, [pc, #384]	; (8004ef8 <HAL_RCC_ClockConfig+0x1f0>)
 8004d76:	4313      	orrs	r3, r2
 8004d78:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0301 	and.w	r3, r3, #1
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d04c      	beq.n	8004e20 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	2b03      	cmp	r3, #3
 8004d8c:	d107      	bne.n	8004d9e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d8e:	4b5a      	ldr	r3, [pc, #360]	; (8004ef8 <HAL_RCC_ClockConfig+0x1f0>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d121      	bne.n	8004dde <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e0a6      	b.n	8004eec <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	2b02      	cmp	r3, #2
 8004da4:	d107      	bne.n	8004db6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004da6:	4b54      	ldr	r3, [pc, #336]	; (8004ef8 <HAL_RCC_ClockConfig+0x1f0>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d115      	bne.n	8004dde <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e09a      	b.n	8004eec <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d107      	bne.n	8004dce <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004dbe:	4b4e      	ldr	r3, [pc, #312]	; (8004ef8 <HAL_RCC_ClockConfig+0x1f0>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 0302 	and.w	r3, r3, #2
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d109      	bne.n	8004dde <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e08e      	b.n	8004eec <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004dce:	4b4a      	ldr	r3, [pc, #296]	; (8004ef8 <HAL_RCC_ClockConfig+0x1f0>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d101      	bne.n	8004dde <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e086      	b.n	8004eec <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004dde:	4b46      	ldr	r3, [pc, #280]	; (8004ef8 <HAL_RCC_ClockConfig+0x1f0>)
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	f023 0203 	bic.w	r2, r3, #3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	4943      	ldr	r1, [pc, #268]	; (8004ef8 <HAL_RCC_ClockConfig+0x1f0>)
 8004dec:	4313      	orrs	r3, r2
 8004dee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004df0:	f7fc ff94 	bl	8001d1c <HAL_GetTick>
 8004df4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004df6:	e00a      	b.n	8004e0e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004df8:	f7fc ff90 	bl	8001d1c <HAL_GetTick>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d901      	bls.n	8004e0e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e06e      	b.n	8004eec <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e0e:	4b3a      	ldr	r3, [pc, #232]	; (8004ef8 <HAL_RCC_ClockConfig+0x1f0>)
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	f003 020c 	and.w	r2, r3, #12
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d1eb      	bne.n	8004df8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 0302 	and.w	r3, r3, #2
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d010      	beq.n	8004e4e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	689a      	ldr	r2, [r3, #8]
 8004e30:	4b31      	ldr	r3, [pc, #196]	; (8004ef8 <HAL_RCC_ClockConfig+0x1f0>)
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d208      	bcs.n	8004e4e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e3c:	4b2e      	ldr	r3, [pc, #184]	; (8004ef8 <HAL_RCC_ClockConfig+0x1f0>)
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	492b      	ldr	r1, [pc, #172]	; (8004ef8 <HAL_RCC_ClockConfig+0x1f0>)
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e4e:	4b29      	ldr	r3, [pc, #164]	; (8004ef4 <HAL_RCC_ClockConfig+0x1ec>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 0307 	and.w	r3, r3, #7
 8004e56:	683a      	ldr	r2, [r7, #0]
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d210      	bcs.n	8004e7e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e5c:	4b25      	ldr	r3, [pc, #148]	; (8004ef4 <HAL_RCC_ClockConfig+0x1ec>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f023 0207 	bic.w	r2, r3, #7
 8004e64:	4923      	ldr	r1, [pc, #140]	; (8004ef4 <HAL_RCC_ClockConfig+0x1ec>)
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e6c:	4b21      	ldr	r3, [pc, #132]	; (8004ef4 <HAL_RCC_ClockConfig+0x1ec>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 0307 	and.w	r3, r3, #7
 8004e74:	683a      	ldr	r2, [r7, #0]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d001      	beq.n	8004e7e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e036      	b.n	8004eec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 0304 	and.w	r3, r3, #4
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d008      	beq.n	8004e9c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e8a:	4b1b      	ldr	r3, [pc, #108]	; (8004ef8 <HAL_RCC_ClockConfig+0x1f0>)
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	4918      	ldr	r1, [pc, #96]	; (8004ef8 <HAL_RCC_ClockConfig+0x1f0>)
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0308 	and.w	r3, r3, #8
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d009      	beq.n	8004ebc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ea8:	4b13      	ldr	r3, [pc, #76]	; (8004ef8 <HAL_RCC_ClockConfig+0x1f0>)
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	691b      	ldr	r3, [r3, #16]
 8004eb4:	00db      	lsls	r3, r3, #3
 8004eb6:	4910      	ldr	r1, [pc, #64]	; (8004ef8 <HAL_RCC_ClockConfig+0x1f0>)
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004ebc:	f000 f824 	bl	8004f08 <HAL_RCC_GetSysClockFreq>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	4b0d      	ldr	r3, [pc, #52]	; (8004ef8 <HAL_RCC_ClockConfig+0x1f0>)
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	091b      	lsrs	r3, r3, #4
 8004ec8:	f003 030f 	and.w	r3, r3, #15
 8004ecc:	490b      	ldr	r1, [pc, #44]	; (8004efc <HAL_RCC_ClockConfig+0x1f4>)
 8004ece:	5ccb      	ldrb	r3, [r1, r3]
 8004ed0:	f003 031f 	and.w	r3, r3, #31
 8004ed4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ed8:	4a09      	ldr	r2, [pc, #36]	; (8004f00 <HAL_RCC_ClockConfig+0x1f8>)
 8004eda:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004edc:	4b09      	ldr	r3, [pc, #36]	; (8004f04 <HAL_RCC_ClockConfig+0x1fc>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f7fc fecb 	bl	8001c7c <HAL_InitTick>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	72fb      	strb	r3, [r7, #11]

  return status;
 8004eea:	7afb      	ldrb	r3, [r7, #11]
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3710      	adds	r7, #16
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	40022000 	.word	0x40022000
 8004ef8:	40021000 	.word	0x40021000
 8004efc:	0800c080 	.word	0x0800c080
 8004f00:	20000000 	.word	0x20000000
 8004f04:	20000004 	.word	0x20000004

08004f08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b089      	sub	sp, #36	; 0x24
 8004f0c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	61fb      	str	r3, [r7, #28]
 8004f12:	2300      	movs	r3, #0
 8004f14:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f16:	4b3e      	ldr	r3, [pc, #248]	; (8005010 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	f003 030c 	and.w	r3, r3, #12
 8004f1e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f20:	4b3b      	ldr	r3, [pc, #236]	; (8005010 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	f003 0303 	and.w	r3, r3, #3
 8004f28:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d005      	beq.n	8004f3c <HAL_RCC_GetSysClockFreq+0x34>
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	2b0c      	cmp	r3, #12
 8004f34:	d121      	bne.n	8004f7a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d11e      	bne.n	8004f7a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004f3c:	4b34      	ldr	r3, [pc, #208]	; (8005010 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0308 	and.w	r3, r3, #8
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d107      	bne.n	8004f58 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004f48:	4b31      	ldr	r3, [pc, #196]	; (8005010 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f4e:	0a1b      	lsrs	r3, r3, #8
 8004f50:	f003 030f 	and.w	r3, r3, #15
 8004f54:	61fb      	str	r3, [r7, #28]
 8004f56:	e005      	b.n	8004f64 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004f58:	4b2d      	ldr	r3, [pc, #180]	; (8005010 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	091b      	lsrs	r3, r3, #4
 8004f5e:	f003 030f 	and.w	r3, r3, #15
 8004f62:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004f64:	4a2b      	ldr	r2, [pc, #172]	; (8005014 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f6c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d10d      	bne.n	8004f90 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004f78:	e00a      	b.n	8004f90 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	2b04      	cmp	r3, #4
 8004f7e:	d102      	bne.n	8004f86 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004f80:	4b25      	ldr	r3, [pc, #148]	; (8005018 <HAL_RCC_GetSysClockFreq+0x110>)
 8004f82:	61bb      	str	r3, [r7, #24]
 8004f84:	e004      	b.n	8004f90 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	2b08      	cmp	r3, #8
 8004f8a:	d101      	bne.n	8004f90 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004f8c:	4b23      	ldr	r3, [pc, #140]	; (800501c <HAL_RCC_GetSysClockFreq+0x114>)
 8004f8e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	2b0c      	cmp	r3, #12
 8004f94:	d134      	bne.n	8005000 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004f96:	4b1e      	ldr	r3, [pc, #120]	; (8005010 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	f003 0303 	and.w	r3, r3, #3
 8004f9e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	2b02      	cmp	r3, #2
 8004fa4:	d003      	beq.n	8004fae <HAL_RCC_GetSysClockFreq+0xa6>
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	2b03      	cmp	r3, #3
 8004faa:	d003      	beq.n	8004fb4 <HAL_RCC_GetSysClockFreq+0xac>
 8004fac:	e005      	b.n	8004fba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004fae:	4b1a      	ldr	r3, [pc, #104]	; (8005018 <HAL_RCC_GetSysClockFreq+0x110>)
 8004fb0:	617b      	str	r3, [r7, #20]
      break;
 8004fb2:	e005      	b.n	8004fc0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004fb4:	4b19      	ldr	r3, [pc, #100]	; (800501c <HAL_RCC_GetSysClockFreq+0x114>)
 8004fb6:	617b      	str	r3, [r7, #20]
      break;
 8004fb8:	e002      	b.n	8004fc0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	617b      	str	r3, [r7, #20]
      break;
 8004fbe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004fc0:	4b13      	ldr	r3, [pc, #76]	; (8005010 <HAL_RCC_GetSysClockFreq+0x108>)
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	091b      	lsrs	r3, r3, #4
 8004fc6:	f003 0307 	and.w	r3, r3, #7
 8004fca:	3301      	adds	r3, #1
 8004fcc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004fce:	4b10      	ldr	r3, [pc, #64]	; (8005010 <HAL_RCC_GetSysClockFreq+0x108>)
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	0a1b      	lsrs	r3, r3, #8
 8004fd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fd8:	697a      	ldr	r2, [r7, #20]
 8004fda:	fb03 f202 	mul.w	r2, r3, r2
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fe4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004fe6:	4b0a      	ldr	r3, [pc, #40]	; (8005010 <HAL_RCC_GetSysClockFreq+0x108>)
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	0e5b      	lsrs	r3, r3, #25
 8004fec:	f003 0303 	and.w	r3, r3, #3
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	005b      	lsls	r3, r3, #1
 8004ff4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004ff6:	697a      	ldr	r2, [r7, #20]
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ffe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005000:	69bb      	ldr	r3, [r7, #24]
}
 8005002:	4618      	mov	r0, r3
 8005004:	3724      	adds	r7, #36	; 0x24
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr
 800500e:	bf00      	nop
 8005010:	40021000 	.word	0x40021000
 8005014:	0800c098 	.word	0x0800c098
 8005018:	00f42400 	.word	0x00f42400
 800501c:	007a1200 	.word	0x007a1200

08005020 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005020:	b480      	push	{r7}
 8005022:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005024:	4b03      	ldr	r3, [pc, #12]	; (8005034 <HAL_RCC_GetHCLKFreq+0x14>)
 8005026:	681b      	ldr	r3, [r3, #0]
}
 8005028:	4618      	mov	r0, r3
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
 8005032:	bf00      	nop
 8005034:	20000000 	.word	0x20000000

08005038 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800503c:	f7ff fff0 	bl	8005020 <HAL_RCC_GetHCLKFreq>
 8005040:	4602      	mov	r2, r0
 8005042:	4b06      	ldr	r3, [pc, #24]	; (800505c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	0a1b      	lsrs	r3, r3, #8
 8005048:	f003 0307 	and.w	r3, r3, #7
 800504c:	4904      	ldr	r1, [pc, #16]	; (8005060 <HAL_RCC_GetPCLK1Freq+0x28>)
 800504e:	5ccb      	ldrb	r3, [r1, r3]
 8005050:	f003 031f 	and.w	r3, r3, #31
 8005054:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005058:	4618      	mov	r0, r3
 800505a:	bd80      	pop	{r7, pc}
 800505c:	40021000 	.word	0x40021000
 8005060:	0800c090 	.word	0x0800c090

08005064 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005068:	f7ff ffda 	bl	8005020 <HAL_RCC_GetHCLKFreq>
 800506c:	4602      	mov	r2, r0
 800506e:	4b06      	ldr	r3, [pc, #24]	; (8005088 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	0adb      	lsrs	r3, r3, #11
 8005074:	f003 0307 	and.w	r3, r3, #7
 8005078:	4904      	ldr	r1, [pc, #16]	; (800508c <HAL_RCC_GetPCLK2Freq+0x28>)
 800507a:	5ccb      	ldrb	r3, [r1, r3]
 800507c:	f003 031f 	and.w	r3, r3, #31
 8005080:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005084:	4618      	mov	r0, r3
 8005086:	bd80      	pop	{r7, pc}
 8005088:	40021000 	.word	0x40021000
 800508c:	0800c090 	.word	0x0800c090

08005090 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b086      	sub	sp, #24
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005098:	2300      	movs	r3, #0
 800509a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800509c:	4b2a      	ldr	r3, [pc, #168]	; (8005148 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800509e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d003      	beq.n	80050b0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80050a8:	f7ff f9ee 	bl	8004488 <HAL_PWREx_GetVoltageRange>
 80050ac:	6178      	str	r0, [r7, #20]
 80050ae:	e014      	b.n	80050da <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80050b0:	4b25      	ldr	r3, [pc, #148]	; (8005148 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050b4:	4a24      	ldr	r2, [pc, #144]	; (8005148 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050ba:	6593      	str	r3, [r2, #88]	; 0x58
 80050bc:	4b22      	ldr	r3, [pc, #136]	; (8005148 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050c4:	60fb      	str	r3, [r7, #12]
 80050c6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80050c8:	f7ff f9de 	bl	8004488 <HAL_PWREx_GetVoltageRange>
 80050cc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80050ce:	4b1e      	ldr	r3, [pc, #120]	; (8005148 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050d2:	4a1d      	ldr	r2, [pc, #116]	; (8005148 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050d8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050e0:	d10b      	bne.n	80050fa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2b80      	cmp	r3, #128	; 0x80
 80050e6:	d919      	bls.n	800511c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2ba0      	cmp	r3, #160	; 0xa0
 80050ec:	d902      	bls.n	80050f4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80050ee:	2302      	movs	r3, #2
 80050f0:	613b      	str	r3, [r7, #16]
 80050f2:	e013      	b.n	800511c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80050f4:	2301      	movs	r3, #1
 80050f6:	613b      	str	r3, [r7, #16]
 80050f8:	e010      	b.n	800511c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2b80      	cmp	r3, #128	; 0x80
 80050fe:	d902      	bls.n	8005106 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005100:	2303      	movs	r3, #3
 8005102:	613b      	str	r3, [r7, #16]
 8005104:	e00a      	b.n	800511c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2b80      	cmp	r3, #128	; 0x80
 800510a:	d102      	bne.n	8005112 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800510c:	2302      	movs	r3, #2
 800510e:	613b      	str	r3, [r7, #16]
 8005110:	e004      	b.n	800511c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2b70      	cmp	r3, #112	; 0x70
 8005116:	d101      	bne.n	800511c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005118:	2301      	movs	r3, #1
 800511a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800511c:	4b0b      	ldr	r3, [pc, #44]	; (800514c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f023 0207 	bic.w	r2, r3, #7
 8005124:	4909      	ldr	r1, [pc, #36]	; (800514c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	4313      	orrs	r3, r2
 800512a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800512c:	4b07      	ldr	r3, [pc, #28]	; (800514c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 0307 	and.w	r3, r3, #7
 8005134:	693a      	ldr	r2, [r7, #16]
 8005136:	429a      	cmp	r2, r3
 8005138:	d001      	beq.n	800513e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e000      	b.n	8005140 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800513e:	2300      	movs	r3, #0
}
 8005140:	4618      	mov	r0, r3
 8005142:	3718      	adds	r7, #24
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}
 8005148:	40021000 	.word	0x40021000
 800514c:	40022000 	.word	0x40022000

08005150 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b086      	sub	sp, #24
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005158:	2300      	movs	r3, #0
 800515a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800515c:	2300      	movs	r3, #0
 800515e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005168:	2b00      	cmp	r3, #0
 800516a:	d041      	beq.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005170:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005174:	d02a      	beq.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005176:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800517a:	d824      	bhi.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800517c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005180:	d008      	beq.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005182:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005186:	d81e      	bhi.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005188:	2b00      	cmp	r3, #0
 800518a:	d00a      	beq.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800518c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005190:	d010      	beq.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005192:	e018      	b.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005194:	4b86      	ldr	r3, [pc, #536]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	4a85      	ldr	r2, [pc, #532]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800519a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800519e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80051a0:	e015      	b.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	3304      	adds	r3, #4
 80051a6:	2100      	movs	r1, #0
 80051a8:	4618      	mov	r0, r3
 80051aa:	f000 fabb 	bl	8005724 <RCCEx_PLLSAI1_Config>
 80051ae:	4603      	mov	r3, r0
 80051b0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80051b2:	e00c      	b.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	3320      	adds	r3, #32
 80051b8:	2100      	movs	r1, #0
 80051ba:	4618      	mov	r0, r3
 80051bc:	f000 fba6 	bl	800590c <RCCEx_PLLSAI2_Config>
 80051c0:	4603      	mov	r3, r0
 80051c2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80051c4:	e003      	b.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	74fb      	strb	r3, [r7, #19]
      break;
 80051ca:	e000      	b.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80051cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051ce:	7cfb      	ldrb	r3, [r7, #19]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d10b      	bne.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80051d4:	4b76      	ldr	r3, [pc, #472]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051da:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051e2:	4973      	ldr	r1, [pc, #460]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051e4:	4313      	orrs	r3, r2
 80051e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80051ea:	e001      	b.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051ec:	7cfb      	ldrb	r3, [r7, #19]
 80051ee:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d041      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005200:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005204:	d02a      	beq.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005206:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800520a:	d824      	bhi.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800520c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005210:	d008      	beq.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005212:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005216:	d81e      	bhi.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005218:	2b00      	cmp	r3, #0
 800521a:	d00a      	beq.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800521c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005220:	d010      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005222:	e018      	b.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005224:	4b62      	ldr	r3, [pc, #392]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	4a61      	ldr	r2, [pc, #388]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800522a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800522e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005230:	e015      	b.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	3304      	adds	r3, #4
 8005236:	2100      	movs	r1, #0
 8005238:	4618      	mov	r0, r3
 800523a:	f000 fa73 	bl	8005724 <RCCEx_PLLSAI1_Config>
 800523e:	4603      	mov	r3, r0
 8005240:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005242:	e00c      	b.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	3320      	adds	r3, #32
 8005248:	2100      	movs	r1, #0
 800524a:	4618      	mov	r0, r3
 800524c:	f000 fb5e 	bl	800590c <RCCEx_PLLSAI2_Config>
 8005250:	4603      	mov	r3, r0
 8005252:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005254:	e003      	b.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	74fb      	strb	r3, [r7, #19]
      break;
 800525a:	e000      	b.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800525c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800525e:	7cfb      	ldrb	r3, [r7, #19]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d10b      	bne.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005264:	4b52      	ldr	r3, [pc, #328]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800526a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005272:	494f      	ldr	r1, [pc, #316]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005274:	4313      	orrs	r3, r2
 8005276:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800527a:	e001      	b.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800527c:	7cfb      	ldrb	r3, [r7, #19]
 800527e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005288:	2b00      	cmp	r3, #0
 800528a:	f000 80a0 	beq.w	80053ce <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800528e:	2300      	movs	r3, #0
 8005290:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005292:	4b47      	ldr	r3, [pc, #284]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800529a:	2b00      	cmp	r3, #0
 800529c:	d101      	bne.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800529e:	2301      	movs	r3, #1
 80052a0:	e000      	b.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80052a2:	2300      	movs	r3, #0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d00d      	beq.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052a8:	4b41      	ldr	r3, [pc, #260]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ac:	4a40      	ldr	r2, [pc, #256]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052b2:	6593      	str	r3, [r2, #88]	; 0x58
 80052b4:	4b3e      	ldr	r3, [pc, #248]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052bc:	60bb      	str	r3, [r7, #8]
 80052be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052c0:	2301      	movs	r3, #1
 80052c2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052c4:	4b3b      	ldr	r3, [pc, #236]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a3a      	ldr	r2, [pc, #232]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80052ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052ce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80052d0:	f7fc fd24 	bl	8001d1c <HAL_GetTick>
 80052d4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80052d6:	e009      	b.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052d8:	f7fc fd20 	bl	8001d1c <HAL_GetTick>
 80052dc:	4602      	mov	r2, r0
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	d902      	bls.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80052e6:	2303      	movs	r3, #3
 80052e8:	74fb      	strb	r3, [r7, #19]
        break;
 80052ea:	e005      	b.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80052ec:	4b31      	ldr	r3, [pc, #196]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d0ef      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80052f8:	7cfb      	ldrb	r3, [r7, #19]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d15c      	bne.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80052fe:	4b2c      	ldr	r3, [pc, #176]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005300:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005304:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005308:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d01f      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005316:	697a      	ldr	r2, [r7, #20]
 8005318:	429a      	cmp	r2, r3
 800531a:	d019      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800531c:	4b24      	ldr	r3, [pc, #144]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800531e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005322:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005326:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005328:	4b21      	ldr	r3, [pc, #132]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800532a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800532e:	4a20      	ldr	r2, [pc, #128]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005330:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005334:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005338:	4b1d      	ldr	r3, [pc, #116]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800533a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800533e:	4a1c      	ldr	r2, [pc, #112]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005340:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005344:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005348:	4a19      	ldr	r2, [pc, #100]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	f003 0301 	and.w	r3, r3, #1
 8005356:	2b00      	cmp	r3, #0
 8005358:	d016      	beq.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800535a:	f7fc fcdf 	bl	8001d1c <HAL_GetTick>
 800535e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005360:	e00b      	b.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005362:	f7fc fcdb 	bl	8001d1c <HAL_GetTick>
 8005366:	4602      	mov	r2, r0
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	1ad3      	subs	r3, r2, r3
 800536c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005370:	4293      	cmp	r3, r2
 8005372:	d902      	bls.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005374:	2303      	movs	r3, #3
 8005376:	74fb      	strb	r3, [r7, #19]
            break;
 8005378:	e006      	b.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800537a:	4b0d      	ldr	r3, [pc, #52]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800537c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005380:	f003 0302 	and.w	r3, r3, #2
 8005384:	2b00      	cmp	r3, #0
 8005386:	d0ec      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005388:	7cfb      	ldrb	r3, [r7, #19]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d10c      	bne.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800538e:	4b08      	ldr	r3, [pc, #32]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005394:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800539e:	4904      	ldr	r1, [pc, #16]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053a0:	4313      	orrs	r3, r2
 80053a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80053a6:	e009      	b.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80053a8:	7cfb      	ldrb	r3, [r7, #19]
 80053aa:	74bb      	strb	r3, [r7, #18]
 80053ac:	e006      	b.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80053ae:	bf00      	nop
 80053b0:	40021000 	.word	0x40021000
 80053b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053b8:	7cfb      	ldrb	r3, [r7, #19]
 80053ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80053bc:	7c7b      	ldrb	r3, [r7, #17]
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d105      	bne.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053c2:	4b9e      	ldr	r3, [pc, #632]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053c6:	4a9d      	ldr	r2, [pc, #628]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053cc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0301 	and.w	r3, r3, #1
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d00a      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80053da:	4b98      	ldr	r3, [pc, #608]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053e0:	f023 0203 	bic.w	r2, r3, #3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e8:	4994      	ldr	r1, [pc, #592]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053ea:	4313      	orrs	r3, r2
 80053ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 0302 	and.w	r3, r3, #2
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d00a      	beq.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80053fc:	4b8f      	ldr	r3, [pc, #572]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005402:	f023 020c 	bic.w	r2, r3, #12
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800540a:	498c      	ldr	r1, [pc, #560]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800540c:	4313      	orrs	r3, r2
 800540e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 0304 	and.w	r3, r3, #4
 800541a:	2b00      	cmp	r3, #0
 800541c:	d00a      	beq.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800541e:	4b87      	ldr	r3, [pc, #540]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005424:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542c:	4983      	ldr	r1, [pc, #524]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800542e:	4313      	orrs	r3, r2
 8005430:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 0308 	and.w	r3, r3, #8
 800543c:	2b00      	cmp	r3, #0
 800543e:	d00a      	beq.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005440:	4b7e      	ldr	r3, [pc, #504]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005446:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800544e:	497b      	ldr	r1, [pc, #492]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005450:	4313      	orrs	r3, r2
 8005452:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 0310 	and.w	r3, r3, #16
 800545e:	2b00      	cmp	r3, #0
 8005460:	d00a      	beq.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005462:	4b76      	ldr	r3, [pc, #472]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005468:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005470:	4972      	ldr	r1, [pc, #456]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005472:	4313      	orrs	r3, r2
 8005474:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 0320 	and.w	r3, r3, #32
 8005480:	2b00      	cmp	r3, #0
 8005482:	d00a      	beq.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005484:	4b6d      	ldr	r3, [pc, #436]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800548a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005492:	496a      	ldr	r1, [pc, #424]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005494:	4313      	orrs	r3, r2
 8005496:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d00a      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80054a6:	4b65      	ldr	r3, [pc, #404]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054b4:	4961      	ldr	r1, [pc, #388]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d00a      	beq.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80054c8:	4b5c      	ldr	r3, [pc, #368]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054d6:	4959      	ldr	r1, [pc, #356]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054d8:	4313      	orrs	r3, r2
 80054da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d00a      	beq.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80054ea:	4b54      	ldr	r3, [pc, #336]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054f0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054f8:	4950      	ldr	r1, [pc, #320]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054fa:	4313      	orrs	r3, r2
 80054fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005508:	2b00      	cmp	r3, #0
 800550a:	d00a      	beq.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800550c:	4b4b      	ldr	r3, [pc, #300]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800550e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005512:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800551a:	4948      	ldr	r1, [pc, #288]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800551c:	4313      	orrs	r3, r2
 800551e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800552a:	2b00      	cmp	r3, #0
 800552c:	d00a      	beq.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800552e:	4b43      	ldr	r3, [pc, #268]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005534:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800553c:	493f      	ldr	r1, [pc, #252]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800553e:	4313      	orrs	r3, r2
 8005540:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800554c:	2b00      	cmp	r3, #0
 800554e:	d028      	beq.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005550:	4b3a      	ldr	r3, [pc, #232]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005556:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800555e:	4937      	ldr	r1, [pc, #220]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005560:	4313      	orrs	r3, r2
 8005562:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800556a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800556e:	d106      	bne.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005570:	4b32      	ldr	r3, [pc, #200]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	4a31      	ldr	r2, [pc, #196]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005576:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800557a:	60d3      	str	r3, [r2, #12]
 800557c:	e011      	b.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005582:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005586:	d10c      	bne.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	3304      	adds	r3, #4
 800558c:	2101      	movs	r1, #1
 800558e:	4618      	mov	r0, r3
 8005590:	f000 f8c8 	bl	8005724 <RCCEx_PLLSAI1_Config>
 8005594:	4603      	mov	r3, r0
 8005596:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005598:	7cfb      	ldrb	r3, [r7, #19]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d001      	beq.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800559e:	7cfb      	ldrb	r3, [r7, #19]
 80055a0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d028      	beq.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80055ae:	4b23      	ldr	r3, [pc, #140]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055b4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055bc:	491f      	ldr	r1, [pc, #124]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055be:	4313      	orrs	r3, r2
 80055c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055cc:	d106      	bne.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055ce:	4b1b      	ldr	r3, [pc, #108]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	4a1a      	ldr	r2, [pc, #104]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055d8:	60d3      	str	r3, [r2, #12]
 80055da:	e011      	b.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80055e4:	d10c      	bne.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	3304      	adds	r3, #4
 80055ea:	2101      	movs	r1, #1
 80055ec:	4618      	mov	r0, r3
 80055ee:	f000 f899 	bl	8005724 <RCCEx_PLLSAI1_Config>
 80055f2:	4603      	mov	r3, r0
 80055f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80055f6:	7cfb      	ldrb	r3, [r7, #19]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d001      	beq.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80055fc:	7cfb      	ldrb	r3, [r7, #19]
 80055fe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005608:	2b00      	cmp	r3, #0
 800560a:	d02b      	beq.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800560c:	4b0b      	ldr	r3, [pc, #44]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800560e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005612:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800561a:	4908      	ldr	r1, [pc, #32]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800561c:	4313      	orrs	r3, r2
 800561e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005626:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800562a:	d109      	bne.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800562c:	4b03      	ldr	r3, [pc, #12]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	4a02      	ldr	r2, [pc, #8]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005632:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005636:	60d3      	str	r3, [r2, #12]
 8005638:	e014      	b.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800563a:	bf00      	nop
 800563c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005644:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005648:	d10c      	bne.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	3304      	adds	r3, #4
 800564e:	2101      	movs	r1, #1
 8005650:	4618      	mov	r0, r3
 8005652:	f000 f867 	bl	8005724 <RCCEx_PLLSAI1_Config>
 8005656:	4603      	mov	r3, r0
 8005658:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800565a:	7cfb      	ldrb	r3, [r7, #19]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d001      	beq.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005660:	7cfb      	ldrb	r3, [r7, #19]
 8005662:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800566c:	2b00      	cmp	r3, #0
 800566e:	d02f      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005670:	4b2b      	ldr	r3, [pc, #172]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005676:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800567e:	4928      	ldr	r1, [pc, #160]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005680:	4313      	orrs	r3, r2
 8005682:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800568a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800568e:	d10d      	bne.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	3304      	adds	r3, #4
 8005694:	2102      	movs	r1, #2
 8005696:	4618      	mov	r0, r3
 8005698:	f000 f844 	bl	8005724 <RCCEx_PLLSAI1_Config>
 800569c:	4603      	mov	r3, r0
 800569e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80056a0:	7cfb      	ldrb	r3, [r7, #19]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d014      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80056a6:	7cfb      	ldrb	r3, [r7, #19]
 80056a8:	74bb      	strb	r3, [r7, #18]
 80056aa:	e011      	b.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056b4:	d10c      	bne.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	3320      	adds	r3, #32
 80056ba:	2102      	movs	r1, #2
 80056bc:	4618      	mov	r0, r3
 80056be:	f000 f925 	bl	800590c <RCCEx_PLLSAI2_Config>
 80056c2:	4603      	mov	r3, r0
 80056c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80056c6:	7cfb      	ldrb	r3, [r7, #19]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d001      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80056cc:	7cfb      	ldrb	r3, [r7, #19]
 80056ce:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d00a      	beq.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80056dc:	4b10      	ldr	r3, [pc, #64]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80056de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056e2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056ea:	490d      	ldr	r1, [pc, #52]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80056ec:	4313      	orrs	r3, r2
 80056ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d00b      	beq.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80056fe:	4b08      	ldr	r3, [pc, #32]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005700:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005704:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800570e:	4904      	ldr	r1, [pc, #16]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005710:	4313      	orrs	r3, r2
 8005712:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005716:	7cbb      	ldrb	r3, [r7, #18]
}
 8005718:	4618      	mov	r0, r3
 800571a:	3718      	adds	r7, #24
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}
 8005720:	40021000 	.word	0x40021000

08005724 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b084      	sub	sp, #16
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800572e:	2300      	movs	r3, #0
 8005730:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005732:	4b75      	ldr	r3, [pc, #468]	; (8005908 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	f003 0303 	and.w	r3, r3, #3
 800573a:	2b00      	cmp	r3, #0
 800573c:	d018      	beq.n	8005770 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800573e:	4b72      	ldr	r3, [pc, #456]	; (8005908 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	f003 0203 	and.w	r2, r3, #3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	429a      	cmp	r2, r3
 800574c:	d10d      	bne.n	800576a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
       ||
 8005752:	2b00      	cmp	r3, #0
 8005754:	d009      	beq.n	800576a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005756:	4b6c      	ldr	r3, [pc, #432]	; (8005908 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	091b      	lsrs	r3, r3, #4
 800575c:	f003 0307 	and.w	r3, r3, #7
 8005760:	1c5a      	adds	r2, r3, #1
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	685b      	ldr	r3, [r3, #4]
       ||
 8005766:	429a      	cmp	r2, r3
 8005768:	d047      	beq.n	80057fa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	73fb      	strb	r3, [r7, #15]
 800576e:	e044      	b.n	80057fa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	2b03      	cmp	r3, #3
 8005776:	d018      	beq.n	80057aa <RCCEx_PLLSAI1_Config+0x86>
 8005778:	2b03      	cmp	r3, #3
 800577a:	d825      	bhi.n	80057c8 <RCCEx_PLLSAI1_Config+0xa4>
 800577c:	2b01      	cmp	r3, #1
 800577e:	d002      	beq.n	8005786 <RCCEx_PLLSAI1_Config+0x62>
 8005780:	2b02      	cmp	r3, #2
 8005782:	d009      	beq.n	8005798 <RCCEx_PLLSAI1_Config+0x74>
 8005784:	e020      	b.n	80057c8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005786:	4b60      	ldr	r3, [pc, #384]	; (8005908 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f003 0302 	and.w	r3, r3, #2
 800578e:	2b00      	cmp	r3, #0
 8005790:	d11d      	bne.n	80057ce <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005796:	e01a      	b.n	80057ce <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005798:	4b5b      	ldr	r3, [pc, #364]	; (8005908 <RCCEx_PLLSAI1_Config+0x1e4>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d116      	bne.n	80057d2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057a8:	e013      	b.n	80057d2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80057aa:	4b57      	ldr	r3, [pc, #348]	; (8005908 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d10f      	bne.n	80057d6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80057b6:	4b54      	ldr	r3, [pc, #336]	; (8005908 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d109      	bne.n	80057d6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80057c6:	e006      	b.n	80057d6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	73fb      	strb	r3, [r7, #15]
      break;
 80057cc:	e004      	b.n	80057d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80057ce:	bf00      	nop
 80057d0:	e002      	b.n	80057d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80057d2:	bf00      	nop
 80057d4:	e000      	b.n	80057d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80057d6:	bf00      	nop
    }

    if(status == HAL_OK)
 80057d8:	7bfb      	ldrb	r3, [r7, #15]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d10d      	bne.n	80057fa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80057de:	4b4a      	ldr	r3, [pc, #296]	; (8005908 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057e0:	68db      	ldr	r3, [r3, #12]
 80057e2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6819      	ldr	r1, [r3, #0]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	3b01      	subs	r3, #1
 80057f0:	011b      	lsls	r3, r3, #4
 80057f2:	430b      	orrs	r3, r1
 80057f4:	4944      	ldr	r1, [pc, #272]	; (8005908 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057f6:	4313      	orrs	r3, r2
 80057f8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80057fa:	7bfb      	ldrb	r3, [r7, #15]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d17d      	bne.n	80058fc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005800:	4b41      	ldr	r3, [pc, #260]	; (8005908 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a40      	ldr	r2, [pc, #256]	; (8005908 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005806:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800580a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800580c:	f7fc fa86 	bl	8001d1c <HAL_GetTick>
 8005810:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005812:	e009      	b.n	8005828 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005814:	f7fc fa82 	bl	8001d1c <HAL_GetTick>
 8005818:	4602      	mov	r2, r0
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	1ad3      	subs	r3, r2, r3
 800581e:	2b02      	cmp	r3, #2
 8005820:	d902      	bls.n	8005828 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005822:	2303      	movs	r3, #3
 8005824:	73fb      	strb	r3, [r7, #15]
        break;
 8005826:	e005      	b.n	8005834 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005828:	4b37      	ldr	r3, [pc, #220]	; (8005908 <RCCEx_PLLSAI1_Config+0x1e4>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005830:	2b00      	cmp	r3, #0
 8005832:	d1ef      	bne.n	8005814 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005834:	7bfb      	ldrb	r3, [r7, #15]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d160      	bne.n	80058fc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d111      	bne.n	8005864 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005840:	4b31      	ldr	r3, [pc, #196]	; (8005908 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005842:	691b      	ldr	r3, [r3, #16]
 8005844:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005848:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	6892      	ldr	r2, [r2, #8]
 8005850:	0211      	lsls	r1, r2, #8
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	68d2      	ldr	r2, [r2, #12]
 8005856:	0912      	lsrs	r2, r2, #4
 8005858:	0452      	lsls	r2, r2, #17
 800585a:	430a      	orrs	r2, r1
 800585c:	492a      	ldr	r1, [pc, #168]	; (8005908 <RCCEx_PLLSAI1_Config+0x1e4>)
 800585e:	4313      	orrs	r3, r2
 8005860:	610b      	str	r3, [r1, #16]
 8005862:	e027      	b.n	80058b4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	2b01      	cmp	r3, #1
 8005868:	d112      	bne.n	8005890 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800586a:	4b27      	ldr	r3, [pc, #156]	; (8005908 <RCCEx_PLLSAI1_Config+0x1e4>)
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005872:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	6892      	ldr	r2, [r2, #8]
 800587a:	0211      	lsls	r1, r2, #8
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	6912      	ldr	r2, [r2, #16]
 8005880:	0852      	lsrs	r2, r2, #1
 8005882:	3a01      	subs	r2, #1
 8005884:	0552      	lsls	r2, r2, #21
 8005886:	430a      	orrs	r2, r1
 8005888:	491f      	ldr	r1, [pc, #124]	; (8005908 <RCCEx_PLLSAI1_Config+0x1e4>)
 800588a:	4313      	orrs	r3, r2
 800588c:	610b      	str	r3, [r1, #16]
 800588e:	e011      	b.n	80058b4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005890:	4b1d      	ldr	r3, [pc, #116]	; (8005908 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005892:	691b      	ldr	r3, [r3, #16]
 8005894:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005898:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	6892      	ldr	r2, [r2, #8]
 80058a0:	0211      	lsls	r1, r2, #8
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	6952      	ldr	r2, [r2, #20]
 80058a6:	0852      	lsrs	r2, r2, #1
 80058a8:	3a01      	subs	r2, #1
 80058aa:	0652      	lsls	r2, r2, #25
 80058ac:	430a      	orrs	r2, r1
 80058ae:	4916      	ldr	r1, [pc, #88]	; (8005908 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058b0:	4313      	orrs	r3, r2
 80058b2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80058b4:	4b14      	ldr	r3, [pc, #80]	; (8005908 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a13      	ldr	r2, [pc, #76]	; (8005908 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80058be:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058c0:	f7fc fa2c 	bl	8001d1c <HAL_GetTick>
 80058c4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80058c6:	e009      	b.n	80058dc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80058c8:	f7fc fa28 	bl	8001d1c <HAL_GetTick>
 80058cc:	4602      	mov	r2, r0
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	1ad3      	subs	r3, r2, r3
 80058d2:	2b02      	cmp	r3, #2
 80058d4:	d902      	bls.n	80058dc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80058d6:	2303      	movs	r3, #3
 80058d8:	73fb      	strb	r3, [r7, #15]
          break;
 80058da:	e005      	b.n	80058e8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80058dc:	4b0a      	ldr	r3, [pc, #40]	; (8005908 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d0ef      	beq.n	80058c8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80058e8:	7bfb      	ldrb	r3, [r7, #15]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d106      	bne.n	80058fc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80058ee:	4b06      	ldr	r3, [pc, #24]	; (8005908 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058f0:	691a      	ldr	r2, [r3, #16]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	699b      	ldr	r3, [r3, #24]
 80058f6:	4904      	ldr	r1, [pc, #16]	; (8005908 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058f8:	4313      	orrs	r3, r2
 80058fa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80058fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3710      	adds	r7, #16
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
 8005906:	bf00      	nop
 8005908:	40021000 	.word	0x40021000

0800590c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005916:	2300      	movs	r3, #0
 8005918:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800591a:	4b6a      	ldr	r3, [pc, #424]	; (8005ac4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	f003 0303 	and.w	r3, r3, #3
 8005922:	2b00      	cmp	r3, #0
 8005924:	d018      	beq.n	8005958 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005926:	4b67      	ldr	r3, [pc, #412]	; (8005ac4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	f003 0203 	and.w	r2, r3, #3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	429a      	cmp	r2, r3
 8005934:	d10d      	bne.n	8005952 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
       ||
 800593a:	2b00      	cmp	r3, #0
 800593c:	d009      	beq.n	8005952 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800593e:	4b61      	ldr	r3, [pc, #388]	; (8005ac4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	091b      	lsrs	r3, r3, #4
 8005944:	f003 0307 	and.w	r3, r3, #7
 8005948:	1c5a      	adds	r2, r3, #1
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	685b      	ldr	r3, [r3, #4]
       ||
 800594e:	429a      	cmp	r2, r3
 8005950:	d047      	beq.n	80059e2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	73fb      	strb	r3, [r7, #15]
 8005956:	e044      	b.n	80059e2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2b03      	cmp	r3, #3
 800595e:	d018      	beq.n	8005992 <RCCEx_PLLSAI2_Config+0x86>
 8005960:	2b03      	cmp	r3, #3
 8005962:	d825      	bhi.n	80059b0 <RCCEx_PLLSAI2_Config+0xa4>
 8005964:	2b01      	cmp	r3, #1
 8005966:	d002      	beq.n	800596e <RCCEx_PLLSAI2_Config+0x62>
 8005968:	2b02      	cmp	r3, #2
 800596a:	d009      	beq.n	8005980 <RCCEx_PLLSAI2_Config+0x74>
 800596c:	e020      	b.n	80059b0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800596e:	4b55      	ldr	r3, [pc, #340]	; (8005ac4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f003 0302 	and.w	r3, r3, #2
 8005976:	2b00      	cmp	r3, #0
 8005978:	d11d      	bne.n	80059b6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800597e:	e01a      	b.n	80059b6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005980:	4b50      	ldr	r3, [pc, #320]	; (8005ac4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005988:	2b00      	cmp	r3, #0
 800598a:	d116      	bne.n	80059ba <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005990:	e013      	b.n	80059ba <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005992:	4b4c      	ldr	r3, [pc, #304]	; (8005ac4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800599a:	2b00      	cmp	r3, #0
 800599c:	d10f      	bne.n	80059be <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800599e:	4b49      	ldr	r3, [pc, #292]	; (8005ac4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d109      	bne.n	80059be <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80059ae:	e006      	b.n	80059be <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	73fb      	strb	r3, [r7, #15]
      break;
 80059b4:	e004      	b.n	80059c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80059b6:	bf00      	nop
 80059b8:	e002      	b.n	80059c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80059ba:	bf00      	nop
 80059bc:	e000      	b.n	80059c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80059be:	bf00      	nop
    }

    if(status == HAL_OK)
 80059c0:	7bfb      	ldrb	r3, [r7, #15]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d10d      	bne.n	80059e2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80059c6:	4b3f      	ldr	r3, [pc, #252]	; (8005ac4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6819      	ldr	r1, [r3, #0]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	3b01      	subs	r3, #1
 80059d8:	011b      	lsls	r3, r3, #4
 80059da:	430b      	orrs	r3, r1
 80059dc:	4939      	ldr	r1, [pc, #228]	; (8005ac4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059de:	4313      	orrs	r3, r2
 80059e0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80059e2:	7bfb      	ldrb	r3, [r7, #15]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d167      	bne.n	8005ab8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80059e8:	4b36      	ldr	r3, [pc, #216]	; (8005ac4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a35      	ldr	r2, [pc, #212]	; (8005ac4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059f4:	f7fc f992 	bl	8001d1c <HAL_GetTick>
 80059f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80059fa:	e009      	b.n	8005a10 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80059fc:	f7fc f98e 	bl	8001d1c <HAL_GetTick>
 8005a00:	4602      	mov	r2, r0
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	2b02      	cmp	r3, #2
 8005a08:	d902      	bls.n	8005a10 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005a0a:	2303      	movs	r3, #3
 8005a0c:	73fb      	strb	r3, [r7, #15]
        break;
 8005a0e:	e005      	b.n	8005a1c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005a10:	4b2c      	ldr	r3, [pc, #176]	; (8005ac4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d1ef      	bne.n	80059fc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005a1c:	7bfb      	ldrb	r3, [r7, #15]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d14a      	bne.n	8005ab8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d111      	bne.n	8005a4c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005a28:	4b26      	ldr	r3, [pc, #152]	; (8005ac4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a2a:	695b      	ldr	r3, [r3, #20]
 8005a2c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005a30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a34:	687a      	ldr	r2, [r7, #4]
 8005a36:	6892      	ldr	r2, [r2, #8]
 8005a38:	0211      	lsls	r1, r2, #8
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	68d2      	ldr	r2, [r2, #12]
 8005a3e:	0912      	lsrs	r2, r2, #4
 8005a40:	0452      	lsls	r2, r2, #17
 8005a42:	430a      	orrs	r2, r1
 8005a44:	491f      	ldr	r1, [pc, #124]	; (8005ac4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a46:	4313      	orrs	r3, r2
 8005a48:	614b      	str	r3, [r1, #20]
 8005a4a:	e011      	b.n	8005a70 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005a4c:	4b1d      	ldr	r3, [pc, #116]	; (8005ac4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a4e:	695b      	ldr	r3, [r3, #20]
 8005a50:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005a54:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	6892      	ldr	r2, [r2, #8]
 8005a5c:	0211      	lsls	r1, r2, #8
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	6912      	ldr	r2, [r2, #16]
 8005a62:	0852      	lsrs	r2, r2, #1
 8005a64:	3a01      	subs	r2, #1
 8005a66:	0652      	lsls	r2, r2, #25
 8005a68:	430a      	orrs	r2, r1
 8005a6a:	4916      	ldr	r1, [pc, #88]	; (8005ac4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005a70:	4b14      	ldr	r3, [pc, #80]	; (8005ac4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a13      	ldr	r2, [pc, #76]	; (8005ac4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a7a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a7c:	f7fc f94e 	bl	8001d1c <HAL_GetTick>
 8005a80:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005a82:	e009      	b.n	8005a98 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005a84:	f7fc f94a 	bl	8001d1c <HAL_GetTick>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	1ad3      	subs	r3, r2, r3
 8005a8e:	2b02      	cmp	r3, #2
 8005a90:	d902      	bls.n	8005a98 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005a92:	2303      	movs	r3, #3
 8005a94:	73fb      	strb	r3, [r7, #15]
          break;
 8005a96:	e005      	b.n	8005aa4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005a98:	4b0a      	ldr	r3, [pc, #40]	; (8005ac4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d0ef      	beq.n	8005a84 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005aa4:	7bfb      	ldrb	r3, [r7, #15]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d106      	bne.n	8005ab8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005aaa:	4b06      	ldr	r3, [pc, #24]	; (8005ac4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005aac:	695a      	ldr	r2, [r3, #20]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	695b      	ldr	r3, [r3, #20]
 8005ab2:	4904      	ldr	r1, [pc, #16]	; (8005ac4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3710      	adds	r7, #16
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}
 8005ac2:	bf00      	nop
 8005ac4:	40021000 	.word	0x40021000

08005ac8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b085      	sub	sp, #20
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ad6:	b2db      	uxtb	r3, r3
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d001      	beq.n	8005ae0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	e04f      	b.n	8005b80 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2202      	movs	r2, #2
 8005ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	68da      	ldr	r2, [r3, #12]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f042 0201 	orr.w	r2, r2, #1
 8005af6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a23      	ldr	r2, [pc, #140]	; (8005b8c <HAL_TIM_Base_Start_IT+0xc4>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d01d      	beq.n	8005b3e <HAL_TIM_Base_Start_IT+0x76>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b0a:	d018      	beq.n	8005b3e <HAL_TIM_Base_Start_IT+0x76>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a1f      	ldr	r2, [pc, #124]	; (8005b90 <HAL_TIM_Base_Start_IT+0xc8>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d013      	beq.n	8005b3e <HAL_TIM_Base_Start_IT+0x76>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a1e      	ldr	r2, [pc, #120]	; (8005b94 <HAL_TIM_Base_Start_IT+0xcc>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d00e      	beq.n	8005b3e <HAL_TIM_Base_Start_IT+0x76>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a1c      	ldr	r2, [pc, #112]	; (8005b98 <HAL_TIM_Base_Start_IT+0xd0>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d009      	beq.n	8005b3e <HAL_TIM_Base_Start_IT+0x76>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a1b      	ldr	r2, [pc, #108]	; (8005b9c <HAL_TIM_Base_Start_IT+0xd4>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d004      	beq.n	8005b3e <HAL_TIM_Base_Start_IT+0x76>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a19      	ldr	r2, [pc, #100]	; (8005ba0 <HAL_TIM_Base_Start_IT+0xd8>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d115      	bne.n	8005b6a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	689a      	ldr	r2, [r3, #8]
 8005b44:	4b17      	ldr	r3, [pc, #92]	; (8005ba4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005b46:	4013      	ands	r3, r2
 8005b48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2b06      	cmp	r3, #6
 8005b4e:	d015      	beq.n	8005b7c <HAL_TIM_Base_Start_IT+0xb4>
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b56:	d011      	beq.n	8005b7c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f042 0201 	orr.w	r2, r2, #1
 8005b66:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b68:	e008      	b.n	8005b7c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f042 0201 	orr.w	r2, r2, #1
 8005b78:	601a      	str	r2, [r3, #0]
 8005b7a:	e000      	b.n	8005b7e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b7c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005b7e:	2300      	movs	r3, #0
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3714      	adds	r7, #20
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr
 8005b8c:	40012c00 	.word	0x40012c00
 8005b90:	40000400 	.word	0x40000400
 8005b94:	40000800 	.word	0x40000800
 8005b98:	40000c00 	.word	0x40000c00
 8005b9c:	40013400 	.word	0x40013400
 8005ba0:	40014000 	.word	0x40014000
 8005ba4:	00010007 	.word	0x00010007

08005ba8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d101      	bne.n	8005bba <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e049      	b.n	8005c4e <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d106      	bne.n	8005bd4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f7fb fe1c 	bl	800180c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2202      	movs	r2, #2
 8005bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	3304      	adds	r3, #4
 8005be4:	4619      	mov	r1, r3
 8005be6:	4610      	mov	r0, r2
 8005be8:	f000 fb44 	bl	8006274 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3708      	adds	r7, #8
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}

08005c56 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005c56:	b580      	push	{r7, lr}
 8005c58:	b082      	sub	sp, #8
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d101      	bne.n	8005c68 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	e049      	b.n	8005cfc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d106      	bne.n	8005c82 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f7fb fda1 	bl	80017c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2202      	movs	r2, #2
 8005c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	3304      	adds	r3, #4
 8005c92:	4619      	mov	r1, r3
 8005c94:	4610      	mov	r0, r2
 8005c96:	f000 faed 	bl	8006274 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2201      	movs	r2, #1
 8005cae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2201      	movs	r2, #1
 8005cce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2201      	movs	r2, #1
 8005cde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2201      	movs	r2, #1
 8005cee:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005cfa:	2300      	movs	r3, #0
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3708      	adds	r7, #8
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}

08005d04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	691b      	ldr	r3, [r3, #16]
 8005d1a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	f003 0302 	and.w	r3, r3, #2
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d020      	beq.n	8005d68 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f003 0302 	and.w	r3, r3, #2
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d01b      	beq.n	8005d68 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f06f 0202 	mvn.w	r2, #2
 8005d38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	699b      	ldr	r3, [r3, #24]
 8005d46:	f003 0303 	and.w	r3, r3, #3
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d003      	beq.n	8005d56 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f000 fa72 	bl	8006238 <HAL_TIM_IC_CaptureCallback>
 8005d54:	e005      	b.n	8005d62 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f000 fa64 	bl	8006224 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f000 fa75 	bl	800624c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	f003 0304 	and.w	r3, r3, #4
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d020      	beq.n	8005db4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	f003 0304 	and.w	r3, r3, #4
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d01b      	beq.n	8005db4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f06f 0204 	mvn.w	r2, #4
 8005d84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2202      	movs	r2, #2
 8005d8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	699b      	ldr	r3, [r3, #24]
 8005d92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d003      	beq.n	8005da2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 fa4c 	bl	8006238 <HAL_TIM_IC_CaptureCallback>
 8005da0:	e005      	b.n	8005dae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f000 fa3e 	bl	8006224 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f000 fa4f 	bl	800624c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	f003 0308 	and.w	r3, r3, #8
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d020      	beq.n	8005e00 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f003 0308 	and.w	r3, r3, #8
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d01b      	beq.n	8005e00 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f06f 0208 	mvn.w	r2, #8
 8005dd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2204      	movs	r2, #4
 8005dd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	69db      	ldr	r3, [r3, #28]
 8005dde:	f003 0303 	and.w	r3, r3, #3
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d003      	beq.n	8005dee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f000 fa26 	bl	8006238 <HAL_TIM_IC_CaptureCallback>
 8005dec:	e005      	b.n	8005dfa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 fa18 	bl	8006224 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f000 fa29 	bl	800624c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	f003 0310 	and.w	r3, r3, #16
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d020      	beq.n	8005e4c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	f003 0310 	and.w	r3, r3, #16
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d01b      	beq.n	8005e4c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f06f 0210 	mvn.w	r2, #16
 8005e1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2208      	movs	r2, #8
 8005e22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	69db      	ldr	r3, [r3, #28]
 8005e2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d003      	beq.n	8005e3a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f000 fa00 	bl	8006238 <HAL_TIM_IC_CaptureCallback>
 8005e38:	e005      	b.n	8005e46 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 f9f2 	bl	8006224 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f000 fa03 	bl	800624c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	f003 0301 	and.w	r3, r3, #1
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d00c      	beq.n	8005e70 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	f003 0301 	and.w	r3, r3, #1
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d007      	beq.n	8005e70 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f06f 0201 	mvn.w	r2, #1
 8005e68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f7fb f8d4 	bl	8001018 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d00c      	beq.n	8005e94 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d007      	beq.n	8005e94 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005e8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f000 fdf2 	bl	8006a78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d00c      	beq.n	8005eb8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d007      	beq.n	8005eb8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005eb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f000 fdea 	bl	8006a8c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d00c      	beq.n	8005edc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d007      	beq.n	8005edc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ed4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 f9c2 	bl	8006260 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	f003 0320 	and.w	r3, r3, #32
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d00c      	beq.n	8005f00 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f003 0320 	and.w	r3, r3, #32
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d007      	beq.n	8005f00 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f06f 0220 	mvn.w	r2, #32
 8005ef8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 fdb2 	bl	8006a64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f00:	bf00      	nop
 8005f02:	3710      	adds	r7, #16
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}

08005f08 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b086      	sub	sp, #24
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	60f8      	str	r0, [r7, #12]
 8005f10:	60b9      	str	r1, [r7, #8]
 8005f12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f14:	2300      	movs	r3, #0
 8005f16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d101      	bne.n	8005f26 <HAL_TIM_OC_ConfigChannel+0x1e>
 8005f22:	2302      	movs	r3, #2
 8005f24:	e066      	b.n	8005ff4 <HAL_TIM_OC_ConfigChannel+0xec>
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2201      	movs	r2, #1
 8005f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2b14      	cmp	r3, #20
 8005f32:	d857      	bhi.n	8005fe4 <HAL_TIM_OC_ConfigChannel+0xdc>
 8005f34:	a201      	add	r2, pc, #4	; (adr r2, 8005f3c <HAL_TIM_OC_ConfigChannel+0x34>)
 8005f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f3a:	bf00      	nop
 8005f3c:	08005f91 	.word	0x08005f91
 8005f40:	08005fe5 	.word	0x08005fe5
 8005f44:	08005fe5 	.word	0x08005fe5
 8005f48:	08005fe5 	.word	0x08005fe5
 8005f4c:	08005f9f 	.word	0x08005f9f
 8005f50:	08005fe5 	.word	0x08005fe5
 8005f54:	08005fe5 	.word	0x08005fe5
 8005f58:	08005fe5 	.word	0x08005fe5
 8005f5c:	08005fad 	.word	0x08005fad
 8005f60:	08005fe5 	.word	0x08005fe5
 8005f64:	08005fe5 	.word	0x08005fe5
 8005f68:	08005fe5 	.word	0x08005fe5
 8005f6c:	08005fbb 	.word	0x08005fbb
 8005f70:	08005fe5 	.word	0x08005fe5
 8005f74:	08005fe5 	.word	0x08005fe5
 8005f78:	08005fe5 	.word	0x08005fe5
 8005f7c:	08005fc9 	.word	0x08005fc9
 8005f80:	08005fe5 	.word	0x08005fe5
 8005f84:	08005fe5 	.word	0x08005fe5
 8005f88:	08005fe5 	.word	0x08005fe5
 8005f8c:	08005fd7 	.word	0x08005fd7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	68b9      	ldr	r1, [r7, #8]
 8005f96:	4618      	mov	r0, r3
 8005f98:	f000 fa06 	bl	80063a8 <TIM_OC1_SetConfig>
      break;
 8005f9c:	e025      	b.n	8005fea <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	68b9      	ldr	r1, [r7, #8]
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f000 fa8f 	bl	80064c8 <TIM_OC2_SetConfig>
      break;
 8005faa:	e01e      	b.n	8005fea <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	68b9      	ldr	r1, [r7, #8]
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f000 fb12 	bl	80065dc <TIM_OC3_SetConfig>
      break;
 8005fb8:	e017      	b.n	8005fea <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	68b9      	ldr	r1, [r7, #8]
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f000 fb93 	bl	80066ec <TIM_OC4_SetConfig>
      break;
 8005fc6:	e010      	b.n	8005fea <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	68b9      	ldr	r1, [r7, #8]
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f000 fbf6 	bl	80067c0 <TIM_OC5_SetConfig>
      break;
 8005fd4:	e009      	b.n	8005fea <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	68b9      	ldr	r1, [r7, #8]
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f000 fc53 	bl	8006888 <TIM_OC6_SetConfig>
      break;
 8005fe2:	e002      	b.n	8005fea <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	75fb      	strb	r3, [r7, #23]
      break;
 8005fe8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ff2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3718      	adds	r7, #24
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}

08005ffc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b086      	sub	sp, #24
 8006000:	af00      	add	r7, sp, #0
 8006002:	60f8      	str	r0, [r7, #12]
 8006004:	60b9      	str	r1, [r7, #8]
 8006006:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006008:	2300      	movs	r3, #0
 800600a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006012:	2b01      	cmp	r3, #1
 8006014:	d101      	bne.n	800601a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006016:	2302      	movs	r3, #2
 8006018:	e0ff      	b.n	800621a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2201      	movs	r2, #1
 800601e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2b14      	cmp	r3, #20
 8006026:	f200 80f0 	bhi.w	800620a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800602a:	a201      	add	r2, pc, #4	; (adr r2, 8006030 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800602c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006030:	08006085 	.word	0x08006085
 8006034:	0800620b 	.word	0x0800620b
 8006038:	0800620b 	.word	0x0800620b
 800603c:	0800620b 	.word	0x0800620b
 8006040:	080060c5 	.word	0x080060c5
 8006044:	0800620b 	.word	0x0800620b
 8006048:	0800620b 	.word	0x0800620b
 800604c:	0800620b 	.word	0x0800620b
 8006050:	08006107 	.word	0x08006107
 8006054:	0800620b 	.word	0x0800620b
 8006058:	0800620b 	.word	0x0800620b
 800605c:	0800620b 	.word	0x0800620b
 8006060:	08006147 	.word	0x08006147
 8006064:	0800620b 	.word	0x0800620b
 8006068:	0800620b 	.word	0x0800620b
 800606c:	0800620b 	.word	0x0800620b
 8006070:	08006189 	.word	0x08006189
 8006074:	0800620b 	.word	0x0800620b
 8006078:	0800620b 	.word	0x0800620b
 800607c:	0800620b 	.word	0x0800620b
 8006080:	080061c9 	.word	0x080061c9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	68b9      	ldr	r1, [r7, #8]
 800608a:	4618      	mov	r0, r3
 800608c:	f000 f98c 	bl	80063a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	699a      	ldr	r2, [r3, #24]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f042 0208 	orr.w	r2, r2, #8
 800609e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	699a      	ldr	r2, [r3, #24]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f022 0204 	bic.w	r2, r2, #4
 80060ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	6999      	ldr	r1, [r3, #24]
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	691a      	ldr	r2, [r3, #16]
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	430a      	orrs	r2, r1
 80060c0:	619a      	str	r2, [r3, #24]
      break;
 80060c2:	e0a5      	b.n	8006210 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	68b9      	ldr	r1, [r7, #8]
 80060ca:	4618      	mov	r0, r3
 80060cc:	f000 f9fc 	bl	80064c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	699a      	ldr	r2, [r3, #24]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	699a      	ldr	r2, [r3, #24]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	6999      	ldr	r1, [r3, #24]
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	691b      	ldr	r3, [r3, #16]
 80060fa:	021a      	lsls	r2, r3, #8
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	430a      	orrs	r2, r1
 8006102:	619a      	str	r2, [r3, #24]
      break;
 8006104:	e084      	b.n	8006210 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	68b9      	ldr	r1, [r7, #8]
 800610c:	4618      	mov	r0, r3
 800610e:	f000 fa65 	bl	80065dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	69da      	ldr	r2, [r3, #28]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f042 0208 	orr.w	r2, r2, #8
 8006120:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	69da      	ldr	r2, [r3, #28]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f022 0204 	bic.w	r2, r2, #4
 8006130:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	69d9      	ldr	r1, [r3, #28]
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	691a      	ldr	r2, [r3, #16]
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	430a      	orrs	r2, r1
 8006142:	61da      	str	r2, [r3, #28]
      break;
 8006144:	e064      	b.n	8006210 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	68b9      	ldr	r1, [r7, #8]
 800614c:	4618      	mov	r0, r3
 800614e:	f000 facd 	bl	80066ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	69da      	ldr	r2, [r3, #28]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006160:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	69da      	ldr	r2, [r3, #28]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006170:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	69d9      	ldr	r1, [r3, #28]
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	691b      	ldr	r3, [r3, #16]
 800617c:	021a      	lsls	r2, r3, #8
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	430a      	orrs	r2, r1
 8006184:	61da      	str	r2, [r3, #28]
      break;
 8006186:	e043      	b.n	8006210 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	68b9      	ldr	r1, [r7, #8]
 800618e:	4618      	mov	r0, r3
 8006190:	f000 fb16 	bl	80067c0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f042 0208 	orr.w	r2, r2, #8
 80061a2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f022 0204 	bic.w	r2, r2, #4
 80061b2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	691a      	ldr	r2, [r3, #16]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	430a      	orrs	r2, r1
 80061c4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80061c6:	e023      	b.n	8006210 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	68b9      	ldr	r1, [r7, #8]
 80061ce:	4618      	mov	r0, r3
 80061d0:	f000 fb5a 	bl	8006888 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061e2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061f2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	691b      	ldr	r3, [r3, #16]
 80061fe:	021a      	lsls	r2, r3, #8
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	430a      	orrs	r2, r1
 8006206:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006208:	e002      	b.n	8006210 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	75fb      	strb	r3, [r7, #23]
      break;
 800620e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2200      	movs	r2, #0
 8006214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006218:	7dfb      	ldrb	r3, [r7, #23]
}
 800621a:	4618      	mov	r0, r3
 800621c:	3718      	adds	r7, #24
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}
 8006222:	bf00      	nop

08006224 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006224:	b480      	push	{r7}
 8006226:	b083      	sub	sp, #12
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800622c:	bf00      	nop
 800622e:	370c      	adds	r7, #12
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr

08006238 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006238:	b480      	push	{r7}
 800623a:	b083      	sub	sp, #12
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006240:	bf00      	nop
 8006242:	370c      	adds	r7, #12
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr

0800624c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800624c:	b480      	push	{r7}
 800624e:	b083      	sub	sp, #12
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006254:	bf00      	nop
 8006256:	370c      	adds	r7, #12
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr

08006260 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006260:	b480      	push	{r7}
 8006262:	b083      	sub	sp, #12
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006268:	bf00      	nop
 800626a:	370c      	adds	r7, #12
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr

08006274 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006274:	b480      	push	{r7}
 8006276:	b085      	sub	sp, #20
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	4a40      	ldr	r2, [pc, #256]	; (8006388 <TIM_Base_SetConfig+0x114>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d013      	beq.n	80062b4 <TIM_Base_SetConfig+0x40>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006292:	d00f      	beq.n	80062b4 <TIM_Base_SetConfig+0x40>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	4a3d      	ldr	r2, [pc, #244]	; (800638c <TIM_Base_SetConfig+0x118>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d00b      	beq.n	80062b4 <TIM_Base_SetConfig+0x40>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	4a3c      	ldr	r2, [pc, #240]	; (8006390 <TIM_Base_SetConfig+0x11c>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d007      	beq.n	80062b4 <TIM_Base_SetConfig+0x40>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	4a3b      	ldr	r2, [pc, #236]	; (8006394 <TIM_Base_SetConfig+0x120>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d003      	beq.n	80062b4 <TIM_Base_SetConfig+0x40>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	4a3a      	ldr	r2, [pc, #232]	; (8006398 <TIM_Base_SetConfig+0x124>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d108      	bne.n	80062c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	68fa      	ldr	r2, [r7, #12]
 80062c2:	4313      	orrs	r3, r2
 80062c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4a2f      	ldr	r2, [pc, #188]	; (8006388 <TIM_Base_SetConfig+0x114>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d01f      	beq.n	800630e <TIM_Base_SetConfig+0x9a>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062d4:	d01b      	beq.n	800630e <TIM_Base_SetConfig+0x9a>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4a2c      	ldr	r2, [pc, #176]	; (800638c <TIM_Base_SetConfig+0x118>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d017      	beq.n	800630e <TIM_Base_SetConfig+0x9a>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a2b      	ldr	r2, [pc, #172]	; (8006390 <TIM_Base_SetConfig+0x11c>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d013      	beq.n	800630e <TIM_Base_SetConfig+0x9a>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4a2a      	ldr	r2, [pc, #168]	; (8006394 <TIM_Base_SetConfig+0x120>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d00f      	beq.n	800630e <TIM_Base_SetConfig+0x9a>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a29      	ldr	r2, [pc, #164]	; (8006398 <TIM_Base_SetConfig+0x124>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d00b      	beq.n	800630e <TIM_Base_SetConfig+0x9a>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4a28      	ldr	r2, [pc, #160]	; (800639c <TIM_Base_SetConfig+0x128>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d007      	beq.n	800630e <TIM_Base_SetConfig+0x9a>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4a27      	ldr	r2, [pc, #156]	; (80063a0 <TIM_Base_SetConfig+0x12c>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d003      	beq.n	800630e <TIM_Base_SetConfig+0x9a>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4a26      	ldr	r2, [pc, #152]	; (80063a4 <TIM_Base_SetConfig+0x130>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d108      	bne.n	8006320 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006314:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	68db      	ldr	r3, [r3, #12]
 800631a:	68fa      	ldr	r2, [r7, #12]
 800631c:	4313      	orrs	r3, r2
 800631e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	695b      	ldr	r3, [r3, #20]
 800632a:	4313      	orrs	r3, r2
 800632c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	68fa      	ldr	r2, [r7, #12]
 8006332:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	689a      	ldr	r2, [r3, #8]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	681a      	ldr	r2, [r3, #0]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	4a10      	ldr	r2, [pc, #64]	; (8006388 <TIM_Base_SetConfig+0x114>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d00f      	beq.n	800636c <TIM_Base_SetConfig+0xf8>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	4a12      	ldr	r2, [pc, #72]	; (8006398 <TIM_Base_SetConfig+0x124>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d00b      	beq.n	800636c <TIM_Base_SetConfig+0xf8>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	4a11      	ldr	r2, [pc, #68]	; (800639c <TIM_Base_SetConfig+0x128>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d007      	beq.n	800636c <TIM_Base_SetConfig+0xf8>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	4a10      	ldr	r2, [pc, #64]	; (80063a0 <TIM_Base_SetConfig+0x12c>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d003      	beq.n	800636c <TIM_Base_SetConfig+0xf8>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	4a0f      	ldr	r2, [pc, #60]	; (80063a4 <TIM_Base_SetConfig+0x130>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d103      	bne.n	8006374 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	691a      	ldr	r2, [r3, #16]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	615a      	str	r2, [r3, #20]
}
 800637a:	bf00      	nop
 800637c:	3714      	adds	r7, #20
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr
 8006386:	bf00      	nop
 8006388:	40012c00 	.word	0x40012c00
 800638c:	40000400 	.word	0x40000400
 8006390:	40000800 	.word	0x40000800
 8006394:	40000c00 	.word	0x40000c00
 8006398:	40013400 	.word	0x40013400
 800639c:	40014000 	.word	0x40014000
 80063a0:	40014400 	.word	0x40014400
 80063a4:	40014800 	.word	0x40014800

080063a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b087      	sub	sp, #28
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6a1b      	ldr	r3, [r3, #32]
 80063b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6a1b      	ldr	r3, [r3, #32]
 80063bc:	f023 0201 	bic.w	r2, r3, #1
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	699b      	ldr	r3, [r3, #24]
 80063ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f023 0303 	bic.w	r3, r3, #3
 80063e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	68fa      	ldr	r2, [r7, #12]
 80063ea:	4313      	orrs	r3, r2
 80063ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	f023 0302 	bic.w	r3, r3, #2
 80063f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	697a      	ldr	r2, [r7, #20]
 80063fc:	4313      	orrs	r3, r2
 80063fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	4a2c      	ldr	r2, [pc, #176]	; (80064b4 <TIM_OC1_SetConfig+0x10c>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d00f      	beq.n	8006428 <TIM_OC1_SetConfig+0x80>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	4a2b      	ldr	r2, [pc, #172]	; (80064b8 <TIM_OC1_SetConfig+0x110>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d00b      	beq.n	8006428 <TIM_OC1_SetConfig+0x80>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	4a2a      	ldr	r2, [pc, #168]	; (80064bc <TIM_OC1_SetConfig+0x114>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d007      	beq.n	8006428 <TIM_OC1_SetConfig+0x80>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	4a29      	ldr	r2, [pc, #164]	; (80064c0 <TIM_OC1_SetConfig+0x118>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d003      	beq.n	8006428 <TIM_OC1_SetConfig+0x80>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	4a28      	ldr	r2, [pc, #160]	; (80064c4 <TIM_OC1_SetConfig+0x11c>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d10c      	bne.n	8006442 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	f023 0308 	bic.w	r3, r3, #8
 800642e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	697a      	ldr	r2, [r7, #20]
 8006436:	4313      	orrs	r3, r2
 8006438:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	f023 0304 	bic.w	r3, r3, #4
 8006440:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	4a1b      	ldr	r2, [pc, #108]	; (80064b4 <TIM_OC1_SetConfig+0x10c>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d00f      	beq.n	800646a <TIM_OC1_SetConfig+0xc2>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	4a1a      	ldr	r2, [pc, #104]	; (80064b8 <TIM_OC1_SetConfig+0x110>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d00b      	beq.n	800646a <TIM_OC1_SetConfig+0xc2>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	4a19      	ldr	r2, [pc, #100]	; (80064bc <TIM_OC1_SetConfig+0x114>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d007      	beq.n	800646a <TIM_OC1_SetConfig+0xc2>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	4a18      	ldr	r2, [pc, #96]	; (80064c0 <TIM_OC1_SetConfig+0x118>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d003      	beq.n	800646a <TIM_OC1_SetConfig+0xc2>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	4a17      	ldr	r2, [pc, #92]	; (80064c4 <TIM_OC1_SetConfig+0x11c>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d111      	bne.n	800648e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006470:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006478:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	695b      	ldr	r3, [r3, #20]
 800647e:	693a      	ldr	r2, [r7, #16]
 8006480:	4313      	orrs	r3, r2
 8006482:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	699b      	ldr	r3, [r3, #24]
 8006488:	693a      	ldr	r2, [r7, #16]
 800648a:	4313      	orrs	r3, r2
 800648c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	693a      	ldr	r2, [r7, #16]
 8006492:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	68fa      	ldr	r2, [r7, #12]
 8006498:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	685a      	ldr	r2, [r3, #4]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	697a      	ldr	r2, [r7, #20]
 80064a6:	621a      	str	r2, [r3, #32]
}
 80064a8:	bf00      	nop
 80064aa:	371c      	adds	r7, #28
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr
 80064b4:	40012c00 	.word	0x40012c00
 80064b8:	40013400 	.word	0x40013400
 80064bc:	40014000 	.word	0x40014000
 80064c0:	40014400 	.word	0x40014400
 80064c4:	40014800 	.word	0x40014800

080064c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b087      	sub	sp, #28
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6a1b      	ldr	r3, [r3, #32]
 80064d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6a1b      	ldr	r3, [r3, #32]
 80064dc:	f023 0210 	bic.w	r2, r3, #16
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	699b      	ldr	r3, [r3, #24]
 80064ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80064f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006502:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	021b      	lsls	r3, r3, #8
 800650a:	68fa      	ldr	r2, [r7, #12]
 800650c:	4313      	orrs	r3, r2
 800650e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	f023 0320 	bic.w	r3, r3, #32
 8006516:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	011b      	lsls	r3, r3, #4
 800651e:	697a      	ldr	r2, [r7, #20]
 8006520:	4313      	orrs	r3, r2
 8006522:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	4a28      	ldr	r2, [pc, #160]	; (80065c8 <TIM_OC2_SetConfig+0x100>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d003      	beq.n	8006534 <TIM_OC2_SetConfig+0x6c>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	4a27      	ldr	r2, [pc, #156]	; (80065cc <TIM_OC2_SetConfig+0x104>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d10d      	bne.n	8006550 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800653a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	011b      	lsls	r3, r3, #4
 8006542:	697a      	ldr	r2, [r7, #20]
 8006544:	4313      	orrs	r3, r2
 8006546:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800654e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	4a1d      	ldr	r2, [pc, #116]	; (80065c8 <TIM_OC2_SetConfig+0x100>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d00f      	beq.n	8006578 <TIM_OC2_SetConfig+0xb0>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	4a1c      	ldr	r2, [pc, #112]	; (80065cc <TIM_OC2_SetConfig+0x104>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d00b      	beq.n	8006578 <TIM_OC2_SetConfig+0xb0>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	4a1b      	ldr	r2, [pc, #108]	; (80065d0 <TIM_OC2_SetConfig+0x108>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d007      	beq.n	8006578 <TIM_OC2_SetConfig+0xb0>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	4a1a      	ldr	r2, [pc, #104]	; (80065d4 <TIM_OC2_SetConfig+0x10c>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d003      	beq.n	8006578 <TIM_OC2_SetConfig+0xb0>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	4a19      	ldr	r2, [pc, #100]	; (80065d8 <TIM_OC2_SetConfig+0x110>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d113      	bne.n	80065a0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800657e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006586:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	695b      	ldr	r3, [r3, #20]
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	693a      	ldr	r2, [r7, #16]
 8006590:	4313      	orrs	r3, r2
 8006592:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	699b      	ldr	r3, [r3, #24]
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	693a      	ldr	r2, [r7, #16]
 800659c:	4313      	orrs	r3, r2
 800659e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	693a      	ldr	r2, [r7, #16]
 80065a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	68fa      	ldr	r2, [r7, #12]
 80065aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	685a      	ldr	r2, [r3, #4]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	697a      	ldr	r2, [r7, #20]
 80065b8:	621a      	str	r2, [r3, #32]
}
 80065ba:	bf00      	nop
 80065bc:	371c      	adds	r7, #28
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr
 80065c6:	bf00      	nop
 80065c8:	40012c00 	.word	0x40012c00
 80065cc:	40013400 	.word	0x40013400
 80065d0:	40014000 	.word	0x40014000
 80065d4:	40014400 	.word	0x40014400
 80065d8:	40014800 	.word	0x40014800

080065dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065dc:	b480      	push	{r7}
 80065de:	b087      	sub	sp, #28
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6a1b      	ldr	r3, [r3, #32]
 80065ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6a1b      	ldr	r3, [r3, #32]
 80065f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	69db      	ldr	r3, [r3, #28]
 8006602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800660a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800660e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f023 0303 	bic.w	r3, r3, #3
 8006616:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	68fa      	ldr	r2, [r7, #12]
 800661e:	4313      	orrs	r3, r2
 8006620:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006628:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	021b      	lsls	r3, r3, #8
 8006630:	697a      	ldr	r2, [r7, #20]
 8006632:	4313      	orrs	r3, r2
 8006634:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	4a27      	ldr	r2, [pc, #156]	; (80066d8 <TIM_OC3_SetConfig+0xfc>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d003      	beq.n	8006646 <TIM_OC3_SetConfig+0x6a>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	4a26      	ldr	r2, [pc, #152]	; (80066dc <TIM_OC3_SetConfig+0x100>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d10d      	bne.n	8006662 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800664c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	68db      	ldr	r3, [r3, #12]
 8006652:	021b      	lsls	r3, r3, #8
 8006654:	697a      	ldr	r2, [r7, #20]
 8006656:	4313      	orrs	r3, r2
 8006658:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006660:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	4a1c      	ldr	r2, [pc, #112]	; (80066d8 <TIM_OC3_SetConfig+0xfc>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d00f      	beq.n	800668a <TIM_OC3_SetConfig+0xae>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	4a1b      	ldr	r2, [pc, #108]	; (80066dc <TIM_OC3_SetConfig+0x100>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d00b      	beq.n	800668a <TIM_OC3_SetConfig+0xae>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	4a1a      	ldr	r2, [pc, #104]	; (80066e0 <TIM_OC3_SetConfig+0x104>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d007      	beq.n	800668a <TIM_OC3_SetConfig+0xae>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	4a19      	ldr	r2, [pc, #100]	; (80066e4 <TIM_OC3_SetConfig+0x108>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d003      	beq.n	800668a <TIM_OC3_SetConfig+0xae>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	4a18      	ldr	r2, [pc, #96]	; (80066e8 <TIM_OC3_SetConfig+0x10c>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d113      	bne.n	80066b2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006690:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006698:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	695b      	ldr	r3, [r3, #20]
 800669e:	011b      	lsls	r3, r3, #4
 80066a0:	693a      	ldr	r2, [r7, #16]
 80066a2:	4313      	orrs	r3, r2
 80066a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	699b      	ldr	r3, [r3, #24]
 80066aa:	011b      	lsls	r3, r3, #4
 80066ac:	693a      	ldr	r2, [r7, #16]
 80066ae:	4313      	orrs	r3, r2
 80066b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	693a      	ldr	r2, [r7, #16]
 80066b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	68fa      	ldr	r2, [r7, #12]
 80066bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	685a      	ldr	r2, [r3, #4]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	697a      	ldr	r2, [r7, #20]
 80066ca:	621a      	str	r2, [r3, #32]
}
 80066cc:	bf00      	nop
 80066ce:	371c      	adds	r7, #28
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr
 80066d8:	40012c00 	.word	0x40012c00
 80066dc:	40013400 	.word	0x40013400
 80066e0:	40014000 	.word	0x40014000
 80066e4:	40014400 	.word	0x40014400
 80066e8:	40014800 	.word	0x40014800

080066ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b087      	sub	sp, #28
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
 80066f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6a1b      	ldr	r3, [r3, #32]
 80066fa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6a1b      	ldr	r3, [r3, #32]
 8006700:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	69db      	ldr	r3, [r3, #28]
 8006712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800671a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800671e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006726:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	021b      	lsls	r3, r3, #8
 800672e:	68fa      	ldr	r2, [r7, #12]
 8006730:	4313      	orrs	r3, r2
 8006732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800673a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	031b      	lsls	r3, r3, #12
 8006742:	693a      	ldr	r2, [r7, #16]
 8006744:	4313      	orrs	r3, r2
 8006746:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	4a18      	ldr	r2, [pc, #96]	; (80067ac <TIM_OC4_SetConfig+0xc0>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d00f      	beq.n	8006770 <TIM_OC4_SetConfig+0x84>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	4a17      	ldr	r2, [pc, #92]	; (80067b0 <TIM_OC4_SetConfig+0xc4>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d00b      	beq.n	8006770 <TIM_OC4_SetConfig+0x84>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	4a16      	ldr	r2, [pc, #88]	; (80067b4 <TIM_OC4_SetConfig+0xc8>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d007      	beq.n	8006770 <TIM_OC4_SetConfig+0x84>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	4a15      	ldr	r2, [pc, #84]	; (80067b8 <TIM_OC4_SetConfig+0xcc>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d003      	beq.n	8006770 <TIM_OC4_SetConfig+0x84>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	4a14      	ldr	r2, [pc, #80]	; (80067bc <TIM_OC4_SetConfig+0xd0>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d109      	bne.n	8006784 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006776:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	695b      	ldr	r3, [r3, #20]
 800677c:	019b      	lsls	r3, r3, #6
 800677e:	697a      	ldr	r2, [r7, #20]
 8006780:	4313      	orrs	r3, r2
 8006782:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	697a      	ldr	r2, [r7, #20]
 8006788:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	68fa      	ldr	r2, [r7, #12]
 800678e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	685a      	ldr	r2, [r3, #4]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	693a      	ldr	r2, [r7, #16]
 800679c:	621a      	str	r2, [r3, #32]
}
 800679e:	bf00      	nop
 80067a0:	371c      	adds	r7, #28
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr
 80067aa:	bf00      	nop
 80067ac:	40012c00 	.word	0x40012c00
 80067b0:	40013400 	.word	0x40013400
 80067b4:	40014000 	.word	0x40014000
 80067b8:	40014400 	.word	0x40014400
 80067bc:	40014800 	.word	0x40014800

080067c0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b087      	sub	sp, #28
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6a1b      	ldr	r3, [r3, #32]
 80067ce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6a1b      	ldr	r3, [r3, #32]
 80067d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	68fa      	ldr	r2, [r7, #12]
 80067fa:	4313      	orrs	r3, r2
 80067fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006804:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	041b      	lsls	r3, r3, #16
 800680c:	693a      	ldr	r2, [r7, #16]
 800680e:	4313      	orrs	r3, r2
 8006810:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	4a17      	ldr	r2, [pc, #92]	; (8006874 <TIM_OC5_SetConfig+0xb4>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d00f      	beq.n	800683a <TIM_OC5_SetConfig+0x7a>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	4a16      	ldr	r2, [pc, #88]	; (8006878 <TIM_OC5_SetConfig+0xb8>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d00b      	beq.n	800683a <TIM_OC5_SetConfig+0x7a>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4a15      	ldr	r2, [pc, #84]	; (800687c <TIM_OC5_SetConfig+0xbc>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d007      	beq.n	800683a <TIM_OC5_SetConfig+0x7a>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4a14      	ldr	r2, [pc, #80]	; (8006880 <TIM_OC5_SetConfig+0xc0>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d003      	beq.n	800683a <TIM_OC5_SetConfig+0x7a>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4a13      	ldr	r2, [pc, #76]	; (8006884 <TIM_OC5_SetConfig+0xc4>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d109      	bne.n	800684e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006840:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	695b      	ldr	r3, [r3, #20]
 8006846:	021b      	lsls	r3, r3, #8
 8006848:	697a      	ldr	r2, [r7, #20]
 800684a:	4313      	orrs	r3, r2
 800684c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	697a      	ldr	r2, [r7, #20]
 8006852:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	68fa      	ldr	r2, [r7, #12]
 8006858:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	685a      	ldr	r2, [r3, #4]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	693a      	ldr	r2, [r7, #16]
 8006866:	621a      	str	r2, [r3, #32]
}
 8006868:	bf00      	nop
 800686a:	371c      	adds	r7, #28
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr
 8006874:	40012c00 	.word	0x40012c00
 8006878:	40013400 	.word	0x40013400
 800687c:	40014000 	.word	0x40014000
 8006880:	40014400 	.word	0x40014400
 8006884:	40014800 	.word	0x40014800

08006888 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006888:	b480      	push	{r7}
 800688a:	b087      	sub	sp, #28
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6a1b      	ldr	r3, [r3, #32]
 8006896:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6a1b      	ldr	r3, [r3, #32]
 800689c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80068b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	021b      	lsls	r3, r3, #8
 80068c2:	68fa      	ldr	r2, [r7, #12]
 80068c4:	4313      	orrs	r3, r2
 80068c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80068ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	051b      	lsls	r3, r3, #20
 80068d6:	693a      	ldr	r2, [r7, #16]
 80068d8:	4313      	orrs	r3, r2
 80068da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	4a18      	ldr	r2, [pc, #96]	; (8006940 <TIM_OC6_SetConfig+0xb8>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d00f      	beq.n	8006904 <TIM_OC6_SetConfig+0x7c>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	4a17      	ldr	r2, [pc, #92]	; (8006944 <TIM_OC6_SetConfig+0xbc>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d00b      	beq.n	8006904 <TIM_OC6_SetConfig+0x7c>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	4a16      	ldr	r2, [pc, #88]	; (8006948 <TIM_OC6_SetConfig+0xc0>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d007      	beq.n	8006904 <TIM_OC6_SetConfig+0x7c>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	4a15      	ldr	r2, [pc, #84]	; (800694c <TIM_OC6_SetConfig+0xc4>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d003      	beq.n	8006904 <TIM_OC6_SetConfig+0x7c>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	4a14      	ldr	r2, [pc, #80]	; (8006950 <TIM_OC6_SetConfig+0xc8>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d109      	bne.n	8006918 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800690a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	695b      	ldr	r3, [r3, #20]
 8006910:	029b      	lsls	r3, r3, #10
 8006912:	697a      	ldr	r2, [r7, #20]
 8006914:	4313      	orrs	r3, r2
 8006916:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	697a      	ldr	r2, [r7, #20]
 800691c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	68fa      	ldr	r2, [r7, #12]
 8006922:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	685a      	ldr	r2, [r3, #4]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	693a      	ldr	r2, [r7, #16]
 8006930:	621a      	str	r2, [r3, #32]
}
 8006932:	bf00      	nop
 8006934:	371c      	adds	r7, #28
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr
 800693e:	bf00      	nop
 8006940:	40012c00 	.word	0x40012c00
 8006944:	40013400 	.word	0x40013400
 8006948:	40014000 	.word	0x40014000
 800694c:	40014400 	.word	0x40014400
 8006950:	40014800 	.word	0x40014800

08006954 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006954:	b480      	push	{r7}
 8006956:	b085      	sub	sp, #20
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006964:	2b01      	cmp	r3, #1
 8006966:	d101      	bne.n	800696c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006968:	2302      	movs	r3, #2
 800696a:	e068      	b.n	8006a3e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2201      	movs	r2, #1
 8006970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2202      	movs	r2, #2
 8006978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a2e      	ldr	r2, [pc, #184]	; (8006a4c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d004      	beq.n	80069a0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a2d      	ldr	r2, [pc, #180]	; (8006a50 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d108      	bne.n	80069b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80069a6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	68fa      	ldr	r2, [r7, #12]
 80069ae:	4313      	orrs	r3, r2
 80069b0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069b8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	68fa      	ldr	r2, [r7, #12]
 80069c0:	4313      	orrs	r3, r2
 80069c2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	68fa      	ldr	r2, [r7, #12]
 80069ca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a1e      	ldr	r2, [pc, #120]	; (8006a4c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d01d      	beq.n	8006a12 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069de:	d018      	beq.n	8006a12 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a1b      	ldr	r2, [pc, #108]	; (8006a54 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d013      	beq.n	8006a12 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a1a      	ldr	r2, [pc, #104]	; (8006a58 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d00e      	beq.n	8006a12 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a18      	ldr	r2, [pc, #96]	; (8006a5c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d009      	beq.n	8006a12 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a13      	ldr	r2, [pc, #76]	; (8006a50 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d004      	beq.n	8006a12 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a14      	ldr	r2, [pc, #80]	; (8006a60 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d10c      	bne.n	8006a2c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	68ba      	ldr	r2, [r7, #8]
 8006a20:	4313      	orrs	r3, r2
 8006a22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	68ba      	ldr	r2, [r7, #8]
 8006a2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2200      	movs	r2, #0
 8006a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a3c:	2300      	movs	r3, #0
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3714      	adds	r7, #20
 8006a42:	46bd      	mov	sp, r7
 8006a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a48:	4770      	bx	lr
 8006a4a:	bf00      	nop
 8006a4c:	40012c00 	.word	0x40012c00
 8006a50:	40013400 	.word	0x40013400
 8006a54:	40000400 	.word	0x40000400
 8006a58:	40000800 	.word	0x40000800
 8006a5c:	40000c00 	.word	0x40000c00
 8006a60:	40014000 	.word	0x40014000

08006a64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b083      	sub	sp, #12
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a6c:	bf00      	nop
 8006a6e:	370c      	adds	r7, #12
 8006a70:	46bd      	mov	sp, r7
 8006a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a76:	4770      	bx	lr

08006a78 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b083      	sub	sp, #12
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a80:	bf00      	nop
 8006a82:	370c      	adds	r7, #12
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr

08006a8c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b083      	sub	sp, #12
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006a94:	bf00      	nop
 8006a96:	370c      	adds	r7, #12
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr

08006aa0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b082      	sub	sp, #8
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d101      	bne.n	8006ab2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	e040      	b.n	8006b34 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d106      	bne.n	8006ac8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2200      	movs	r2, #0
 8006abe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f7fa fefc 	bl	80018c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2224      	movs	r2, #36	; 0x24
 8006acc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f022 0201 	bic.w	r2, r2, #1
 8006adc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d002      	beq.n	8006aec <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 fe48 	bl	800777c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f000 fb8d 	bl	800720c <UART_SetConfig>
 8006af2:	4603      	mov	r3, r0
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d101      	bne.n	8006afc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006af8:	2301      	movs	r3, #1
 8006afa:	e01b      	b.n	8006b34 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	685a      	ldr	r2, [r3, #4]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	689a      	ldr	r2, [r3, #8]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f042 0201 	orr.w	r2, r2, #1
 8006b2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f000 fec7 	bl	80078c0 <UART_CheckIdleState>
 8006b32:	4603      	mov	r3, r0
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3708      	adds	r7, #8
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}

08006b3c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b08b      	sub	sp, #44	; 0x2c
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	60f8      	str	r0, [r7, #12]
 8006b44:	60b9      	str	r1, [r7, #8]
 8006b46:	4613      	mov	r3, r2
 8006b48:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b4e:	2b20      	cmp	r3, #32
 8006b50:	d147      	bne.n	8006be2 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d002      	beq.n	8006b5e <HAL_UART_Transmit_IT+0x22>
 8006b58:	88fb      	ldrh	r3, [r7, #6]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d101      	bne.n	8006b62 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	e040      	b.n	8006be4 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	68ba      	ldr	r2, [r7, #8]
 8006b66:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	88fa      	ldrh	r2, [r7, #6]
 8006b6c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	88fa      	ldrh	r2, [r7, #6]
 8006b74:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2200      	movs	r2, #0
 8006b82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2221      	movs	r2, #33	; 0x21
 8006b8a:	67da      	str	r2, [r3, #124]	; 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b94:	d107      	bne.n	8006ba6 <HAL_UART_Transmit_IT+0x6a>
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	691b      	ldr	r3, [r3, #16]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d103      	bne.n	8006ba6 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	4a13      	ldr	r2, [pc, #76]	; (8006bf0 <HAL_UART_Transmit_IT+0xb4>)
 8006ba2:	66da      	str	r2, [r3, #108]	; 0x6c
 8006ba4:	e002      	b.n	8006bac <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	4a12      	ldr	r2, [pc, #72]	; (8006bf4 <HAL_UART_Transmit_IT+0xb8>)
 8006baa:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	e853 3f00 	ldrex	r3, [r3]
 8006bb8:	613b      	str	r3, [r7, #16]
   return(result);
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bc0:	627b      	str	r3, [r7, #36]	; 0x24
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	461a      	mov	r2, r3
 8006bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bca:	623b      	str	r3, [r7, #32]
 8006bcc:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bce:	69f9      	ldr	r1, [r7, #28]
 8006bd0:	6a3a      	ldr	r2, [r7, #32]
 8006bd2:	e841 2300 	strex	r3, r2, [r1]
 8006bd6:	61bb      	str	r3, [r7, #24]
   return(result);
 8006bd8:	69bb      	ldr	r3, [r7, #24]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d1e6      	bne.n	8006bac <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8006bde:	2300      	movs	r3, #0
 8006be0:	e000      	b.n	8006be4 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8006be2:	2302      	movs	r3, #2
  }
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	372c      	adds	r7, #44	; 0x2c
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr
 8006bf0:	08007c8b 	.word	0x08007c8b
 8006bf4:	08007bd3 	.word	0x08007bd3

08006bf8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b0ba      	sub	sp, #232	; 0xe8
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	69db      	ldr	r3, [r3, #28]
 8006c06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	689b      	ldr	r3, [r3, #8]
 8006c1a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006c1e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006c22:	f640 030f 	movw	r3, #2063	; 0x80f
 8006c26:	4013      	ands	r3, r2
 8006c28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006c2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d115      	bne.n	8006c60 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006c34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c38:	f003 0320 	and.w	r3, r3, #32
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d00f      	beq.n	8006c60 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006c40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c44:	f003 0320 	and.w	r3, r3, #32
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d009      	beq.n	8006c60 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	f000 82ae 	beq.w	80071b2 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	4798      	blx	r3
      }
      return;
 8006c5e:	e2a8      	b.n	80071b2 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006c60:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	f000 8117 	beq.w	8006e98 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006c6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c6e:	f003 0301 	and.w	r3, r3, #1
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d106      	bne.n	8006c84 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006c76:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006c7a:	4b85      	ldr	r3, [pc, #532]	; (8006e90 <HAL_UART_IRQHandler+0x298>)
 8006c7c:	4013      	ands	r3, r2
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	f000 810a 	beq.w	8006e98 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006c84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c88:	f003 0301 	and.w	r3, r3, #1
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d011      	beq.n	8006cb4 <HAL_UART_IRQHandler+0xbc>
 8006c90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d00b      	beq.n	8006cb4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006caa:	f043 0201 	orr.w	r2, r3, #1
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006cb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cb8:	f003 0302 	and.w	r3, r3, #2
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d011      	beq.n	8006ce4 <HAL_UART_IRQHandler+0xec>
 8006cc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cc4:	f003 0301 	and.w	r3, r3, #1
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d00b      	beq.n	8006ce4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	2202      	movs	r2, #2
 8006cd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006cda:	f043 0204 	orr.w	r2, r3, #4
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ce4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ce8:	f003 0304 	and.w	r3, r3, #4
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d011      	beq.n	8006d14 <HAL_UART_IRQHandler+0x11c>
 8006cf0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cf4:	f003 0301 	and.w	r3, r3, #1
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d00b      	beq.n	8006d14 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	2204      	movs	r2, #4
 8006d02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d0a:	f043 0202 	orr.w	r2, r3, #2
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006d14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d18:	f003 0308 	and.w	r3, r3, #8
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d017      	beq.n	8006d50 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006d20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d24:	f003 0320 	and.w	r3, r3, #32
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d105      	bne.n	8006d38 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006d2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d30:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d00b      	beq.n	8006d50 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	2208      	movs	r2, #8
 8006d3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d46:	f043 0208 	orr.w	r2, r3, #8
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006d50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d012      	beq.n	8006d82 <HAL_UART_IRQHandler+0x18a>
 8006d5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d60:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d00c      	beq.n	8006d82 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d70:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d78:	f043 0220 	orr.w	r2, r3, #32
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	f000 8214 	beq.w	80071b6 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006d8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d92:	f003 0320 	and.w	r3, r3, #32
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d00d      	beq.n	8006db6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006d9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d9e:	f003 0320 	and.w	r3, r3, #32
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d007      	beq.n	8006db6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d003      	beq.n	8006db6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006dbc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dca:	2b40      	cmp	r3, #64	; 0x40
 8006dcc:	d005      	beq.n	8006dda <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006dce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006dd2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d04f      	beq.n	8006e7a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 fe7f 	bl	8007ade <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dea:	2b40      	cmp	r3, #64	; 0x40
 8006dec:	d141      	bne.n	8006e72 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	3308      	adds	r3, #8
 8006df4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006dfc:	e853 3f00 	ldrex	r3, [r3]
 8006e00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006e04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	3308      	adds	r3, #8
 8006e16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006e1a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006e1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006e26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006e2a:	e841 2300 	strex	r3, r2, [r1]
 8006e2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006e32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d1d9      	bne.n	8006dee <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d013      	beq.n	8006e6a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e46:	4a13      	ldr	r2, [pc, #76]	; (8006e94 <HAL_UART_IRQHandler+0x29c>)
 8006e48:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f7fb f8bf 	bl	8001fd2 <HAL_DMA_Abort_IT>
 8006e54:	4603      	mov	r3, r0
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d017      	beq.n	8006e8a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e60:	687a      	ldr	r2, [r7, #4]
 8006e62:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006e64:	4610      	mov	r0, r2
 8006e66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e68:	e00f      	b.n	8006e8a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 f9b8 	bl	80071e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e70:	e00b      	b.n	8006e8a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f000 f9b4 	bl	80071e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e78:	e007      	b.n	8006e8a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f000 f9b0 	bl	80071e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2200      	movs	r2, #0
 8006e84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006e88:	e195      	b.n	80071b6 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e8a:	bf00      	nop
    return;
 8006e8c:	e193      	b.n	80071b6 <HAL_UART_IRQHandler+0x5be>
 8006e8e:	bf00      	nop
 8006e90:	04000120 	.word	0x04000120
 8006e94:	08007ba7 	.word	0x08007ba7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	f040 814e 	bne.w	800713e <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006ea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ea6:	f003 0310 	and.w	r3, r3, #16
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	f000 8147 	beq.w	800713e <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006eb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006eb4:	f003 0310 	and.w	r3, r3, #16
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	f000 8140 	beq.w	800713e <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	2210      	movs	r2, #16
 8006ec4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ed0:	2b40      	cmp	r3, #64	; 0x40
 8006ed2:	f040 80b8 	bne.w	8007046 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006ee2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	f000 8167 	beq.w	80071ba <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006ef2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	f080 815f 	bcs.w	80071ba <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006f02:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f003 0320 	and.w	r3, r3, #32
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	f040 8086 	bne.w	8007024 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f20:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006f24:	e853 3f00 	ldrex	r3, [r3]
 8006f28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006f2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006f42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006f46:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f4a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006f4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006f52:	e841 2300 	strex	r3, r2, [r1]
 8006f56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006f5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d1da      	bne.n	8006f18 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	3308      	adds	r3, #8
 8006f68:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f6c:	e853 3f00 	ldrex	r3, [r3]
 8006f70:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006f72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f74:	f023 0301 	bic.w	r3, r3, #1
 8006f78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	3308      	adds	r3, #8
 8006f82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006f86:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006f8a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f8c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006f8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006f92:	e841 2300 	strex	r3, r2, [r1]
 8006f96:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006f98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d1e1      	bne.n	8006f62 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	3308      	adds	r3, #8
 8006fa4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fa6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006fa8:	e853 3f00 	ldrex	r3, [r3]
 8006fac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006fae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006fb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fb4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	3308      	adds	r3, #8
 8006fbe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006fc2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006fc4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006fc8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006fca:	e841 2300 	strex	r3, r2, [r1]
 8006fce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006fd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d1e3      	bne.n	8006f9e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2220      	movs	r2, #32
 8006fda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fec:	e853 3f00 	ldrex	r3, [r3]
 8006ff0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006ff2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ff4:	f023 0310 	bic.w	r3, r3, #16
 8006ff8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	461a      	mov	r2, r3
 8007002:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007006:	65bb      	str	r3, [r7, #88]	; 0x58
 8007008:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800700a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800700c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800700e:	e841 2300 	strex	r3, r2, [r1]
 8007012:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007014:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007016:	2b00      	cmp	r3, #0
 8007018:	d1e4      	bne.n	8006fe4 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800701e:	4618      	mov	r0, r3
 8007020:	f7fa ff99 	bl	8001f56 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2202      	movs	r2, #2
 8007028:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007036:	b29b      	uxth	r3, r3
 8007038:	1ad3      	subs	r3, r2, r3
 800703a:	b29b      	uxth	r3, r3
 800703c:	4619      	mov	r1, r3
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 f8d8 	bl	80071f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007044:	e0b9      	b.n	80071ba <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007052:	b29b      	uxth	r3, r3
 8007054:	1ad3      	subs	r3, r2, r3
 8007056:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007060:	b29b      	uxth	r3, r3
 8007062:	2b00      	cmp	r3, #0
 8007064:	f000 80ab 	beq.w	80071be <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8007068:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800706c:	2b00      	cmp	r3, #0
 800706e:	f000 80a6 	beq.w	80071be <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800707a:	e853 3f00 	ldrex	r3, [r3]
 800707e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007082:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007086:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	461a      	mov	r2, r3
 8007090:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007094:	647b      	str	r3, [r7, #68]	; 0x44
 8007096:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007098:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800709a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800709c:	e841 2300 	strex	r3, r2, [r1]
 80070a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80070a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d1e4      	bne.n	8007072 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	3308      	adds	r3, #8
 80070ae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b2:	e853 3f00 	ldrex	r3, [r3]
 80070b6:	623b      	str	r3, [r7, #32]
   return(result);
 80070b8:	6a3b      	ldr	r3, [r7, #32]
 80070ba:	f023 0301 	bic.w	r3, r3, #1
 80070be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	3308      	adds	r3, #8
 80070c8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80070cc:	633a      	str	r2, [r7, #48]	; 0x30
 80070ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80070d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070d4:	e841 2300 	strex	r3, r2, [r1]
 80070d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80070da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d1e3      	bne.n	80070a8 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2220      	movs	r2, #32
 80070e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2200      	movs	r2, #0
 80070ec:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2200      	movs	r2, #0
 80070f2:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	e853 3f00 	ldrex	r3, [r3]
 8007100:	60fb      	str	r3, [r7, #12]
   return(result);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	f023 0310 	bic.w	r3, r3, #16
 8007108:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	461a      	mov	r2, r3
 8007112:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007116:	61fb      	str	r3, [r7, #28]
 8007118:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800711a:	69b9      	ldr	r1, [r7, #24]
 800711c:	69fa      	ldr	r2, [r7, #28]
 800711e:	e841 2300 	strex	r3, r2, [r1]
 8007122:	617b      	str	r3, [r7, #20]
   return(result);
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d1e4      	bne.n	80070f4 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2202      	movs	r2, #2
 800712e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007130:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007134:	4619      	mov	r1, r3
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f000 f85c 	bl	80071f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800713c:	e03f      	b.n	80071be <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800713e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007142:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007146:	2b00      	cmp	r3, #0
 8007148:	d00e      	beq.n	8007168 <HAL_UART_IRQHandler+0x570>
 800714a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800714e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007152:	2b00      	cmp	r3, #0
 8007154:	d008      	beq.n	8007168 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800715e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f000 fe1c 	bl	8007d9e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007166:	e02d      	b.n	80071c4 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007168:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800716c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007170:	2b00      	cmp	r3, #0
 8007172:	d00e      	beq.n	8007192 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007174:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800717c:	2b00      	cmp	r3, #0
 800717e:	d008      	beq.n	8007192 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007184:	2b00      	cmp	r3, #0
 8007186:	d01c      	beq.n	80071c2 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	4798      	blx	r3
    }
    return;
 8007190:	e017      	b.n	80071c2 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800719a:	2b00      	cmp	r3, #0
 800719c:	d012      	beq.n	80071c4 <HAL_UART_IRQHandler+0x5cc>
 800719e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d00c      	beq.n	80071c4 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f000 fdcd 	bl	8007d4a <UART_EndTransmit_IT>
    return;
 80071b0:	e008      	b.n	80071c4 <HAL_UART_IRQHandler+0x5cc>
      return;
 80071b2:	bf00      	nop
 80071b4:	e006      	b.n	80071c4 <HAL_UART_IRQHandler+0x5cc>
    return;
 80071b6:	bf00      	nop
 80071b8:	e004      	b.n	80071c4 <HAL_UART_IRQHandler+0x5cc>
      return;
 80071ba:	bf00      	nop
 80071bc:	e002      	b.n	80071c4 <HAL_UART_IRQHandler+0x5cc>
      return;
 80071be:	bf00      	nop
 80071c0:	e000      	b.n	80071c4 <HAL_UART_IRQHandler+0x5cc>
    return;
 80071c2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80071c4:	37e8      	adds	r7, #232	; 0xe8
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}
 80071ca:	bf00      	nop

080071cc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b083      	sub	sp, #12
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80071d4:	bf00      	nop
 80071d6:	370c      	adds	r7, #12
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr

080071e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b083      	sub	sp, #12
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80071e8:	bf00      	nop
 80071ea:	370c      	adds	r7, #12
 80071ec:	46bd      	mov	sp, r7
 80071ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f2:	4770      	bx	lr

080071f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b083      	sub	sp, #12
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	460b      	mov	r3, r1
 80071fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007200:	bf00      	nop
 8007202:	370c      	adds	r7, #12
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr

0800720c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800720c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007210:	b08a      	sub	sp, #40	; 0x28
 8007212:	af00      	add	r7, sp, #0
 8007214:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007216:	2300      	movs	r3, #0
 8007218:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	689a      	ldr	r2, [r3, #8]
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	691b      	ldr	r3, [r3, #16]
 8007224:	431a      	orrs	r2, r3
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	695b      	ldr	r3, [r3, #20]
 800722a:	431a      	orrs	r2, r3
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	69db      	ldr	r3, [r3, #28]
 8007230:	4313      	orrs	r3, r2
 8007232:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	4ba4      	ldr	r3, [pc, #656]	; (80074cc <UART_SetConfig+0x2c0>)
 800723c:	4013      	ands	r3, r2
 800723e:	68fa      	ldr	r2, [r7, #12]
 8007240:	6812      	ldr	r2, [r2, #0]
 8007242:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007244:	430b      	orrs	r3, r1
 8007246:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	68da      	ldr	r2, [r3, #12]
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	430a      	orrs	r2, r1
 800725c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	699b      	ldr	r3, [r3, #24]
 8007262:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a99      	ldr	r2, [pc, #612]	; (80074d0 <UART_SetConfig+0x2c4>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d004      	beq.n	8007278 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	6a1b      	ldr	r3, [r3, #32]
 8007272:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007274:	4313      	orrs	r3, r2
 8007276:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	689b      	ldr	r3, [r3, #8]
 800727e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007288:	430a      	orrs	r2, r1
 800728a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a90      	ldr	r2, [pc, #576]	; (80074d4 <UART_SetConfig+0x2c8>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d126      	bne.n	80072e4 <UART_SetConfig+0xd8>
 8007296:	4b90      	ldr	r3, [pc, #576]	; (80074d8 <UART_SetConfig+0x2cc>)
 8007298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800729c:	f003 0303 	and.w	r3, r3, #3
 80072a0:	2b03      	cmp	r3, #3
 80072a2:	d81b      	bhi.n	80072dc <UART_SetConfig+0xd0>
 80072a4:	a201      	add	r2, pc, #4	; (adr r2, 80072ac <UART_SetConfig+0xa0>)
 80072a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072aa:	bf00      	nop
 80072ac:	080072bd 	.word	0x080072bd
 80072b0:	080072cd 	.word	0x080072cd
 80072b4:	080072c5 	.word	0x080072c5
 80072b8:	080072d5 	.word	0x080072d5
 80072bc:	2301      	movs	r3, #1
 80072be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072c2:	e116      	b.n	80074f2 <UART_SetConfig+0x2e6>
 80072c4:	2302      	movs	r3, #2
 80072c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072ca:	e112      	b.n	80074f2 <UART_SetConfig+0x2e6>
 80072cc:	2304      	movs	r3, #4
 80072ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072d2:	e10e      	b.n	80074f2 <UART_SetConfig+0x2e6>
 80072d4:	2308      	movs	r3, #8
 80072d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072da:	e10a      	b.n	80074f2 <UART_SetConfig+0x2e6>
 80072dc:	2310      	movs	r3, #16
 80072de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072e2:	e106      	b.n	80074f2 <UART_SetConfig+0x2e6>
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a7c      	ldr	r2, [pc, #496]	; (80074dc <UART_SetConfig+0x2d0>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d138      	bne.n	8007360 <UART_SetConfig+0x154>
 80072ee:	4b7a      	ldr	r3, [pc, #488]	; (80074d8 <UART_SetConfig+0x2cc>)
 80072f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072f4:	f003 030c 	and.w	r3, r3, #12
 80072f8:	2b0c      	cmp	r3, #12
 80072fa:	d82d      	bhi.n	8007358 <UART_SetConfig+0x14c>
 80072fc:	a201      	add	r2, pc, #4	; (adr r2, 8007304 <UART_SetConfig+0xf8>)
 80072fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007302:	bf00      	nop
 8007304:	08007339 	.word	0x08007339
 8007308:	08007359 	.word	0x08007359
 800730c:	08007359 	.word	0x08007359
 8007310:	08007359 	.word	0x08007359
 8007314:	08007349 	.word	0x08007349
 8007318:	08007359 	.word	0x08007359
 800731c:	08007359 	.word	0x08007359
 8007320:	08007359 	.word	0x08007359
 8007324:	08007341 	.word	0x08007341
 8007328:	08007359 	.word	0x08007359
 800732c:	08007359 	.word	0x08007359
 8007330:	08007359 	.word	0x08007359
 8007334:	08007351 	.word	0x08007351
 8007338:	2300      	movs	r3, #0
 800733a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800733e:	e0d8      	b.n	80074f2 <UART_SetConfig+0x2e6>
 8007340:	2302      	movs	r3, #2
 8007342:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007346:	e0d4      	b.n	80074f2 <UART_SetConfig+0x2e6>
 8007348:	2304      	movs	r3, #4
 800734a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800734e:	e0d0      	b.n	80074f2 <UART_SetConfig+0x2e6>
 8007350:	2308      	movs	r3, #8
 8007352:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007356:	e0cc      	b.n	80074f2 <UART_SetConfig+0x2e6>
 8007358:	2310      	movs	r3, #16
 800735a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800735e:	e0c8      	b.n	80074f2 <UART_SetConfig+0x2e6>
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a5e      	ldr	r2, [pc, #376]	; (80074e0 <UART_SetConfig+0x2d4>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d125      	bne.n	80073b6 <UART_SetConfig+0x1aa>
 800736a:	4b5b      	ldr	r3, [pc, #364]	; (80074d8 <UART_SetConfig+0x2cc>)
 800736c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007370:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007374:	2b30      	cmp	r3, #48	; 0x30
 8007376:	d016      	beq.n	80073a6 <UART_SetConfig+0x19a>
 8007378:	2b30      	cmp	r3, #48	; 0x30
 800737a:	d818      	bhi.n	80073ae <UART_SetConfig+0x1a2>
 800737c:	2b20      	cmp	r3, #32
 800737e:	d00a      	beq.n	8007396 <UART_SetConfig+0x18a>
 8007380:	2b20      	cmp	r3, #32
 8007382:	d814      	bhi.n	80073ae <UART_SetConfig+0x1a2>
 8007384:	2b00      	cmp	r3, #0
 8007386:	d002      	beq.n	800738e <UART_SetConfig+0x182>
 8007388:	2b10      	cmp	r3, #16
 800738a:	d008      	beq.n	800739e <UART_SetConfig+0x192>
 800738c:	e00f      	b.n	80073ae <UART_SetConfig+0x1a2>
 800738e:	2300      	movs	r3, #0
 8007390:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007394:	e0ad      	b.n	80074f2 <UART_SetConfig+0x2e6>
 8007396:	2302      	movs	r3, #2
 8007398:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800739c:	e0a9      	b.n	80074f2 <UART_SetConfig+0x2e6>
 800739e:	2304      	movs	r3, #4
 80073a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073a4:	e0a5      	b.n	80074f2 <UART_SetConfig+0x2e6>
 80073a6:	2308      	movs	r3, #8
 80073a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073ac:	e0a1      	b.n	80074f2 <UART_SetConfig+0x2e6>
 80073ae:	2310      	movs	r3, #16
 80073b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073b4:	e09d      	b.n	80074f2 <UART_SetConfig+0x2e6>
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a4a      	ldr	r2, [pc, #296]	; (80074e4 <UART_SetConfig+0x2d8>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d125      	bne.n	800740c <UART_SetConfig+0x200>
 80073c0:	4b45      	ldr	r3, [pc, #276]	; (80074d8 <UART_SetConfig+0x2cc>)
 80073c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073c6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80073ca:	2bc0      	cmp	r3, #192	; 0xc0
 80073cc:	d016      	beq.n	80073fc <UART_SetConfig+0x1f0>
 80073ce:	2bc0      	cmp	r3, #192	; 0xc0
 80073d0:	d818      	bhi.n	8007404 <UART_SetConfig+0x1f8>
 80073d2:	2b80      	cmp	r3, #128	; 0x80
 80073d4:	d00a      	beq.n	80073ec <UART_SetConfig+0x1e0>
 80073d6:	2b80      	cmp	r3, #128	; 0x80
 80073d8:	d814      	bhi.n	8007404 <UART_SetConfig+0x1f8>
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d002      	beq.n	80073e4 <UART_SetConfig+0x1d8>
 80073de:	2b40      	cmp	r3, #64	; 0x40
 80073e0:	d008      	beq.n	80073f4 <UART_SetConfig+0x1e8>
 80073e2:	e00f      	b.n	8007404 <UART_SetConfig+0x1f8>
 80073e4:	2300      	movs	r3, #0
 80073e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073ea:	e082      	b.n	80074f2 <UART_SetConfig+0x2e6>
 80073ec:	2302      	movs	r3, #2
 80073ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073f2:	e07e      	b.n	80074f2 <UART_SetConfig+0x2e6>
 80073f4:	2304      	movs	r3, #4
 80073f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073fa:	e07a      	b.n	80074f2 <UART_SetConfig+0x2e6>
 80073fc:	2308      	movs	r3, #8
 80073fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007402:	e076      	b.n	80074f2 <UART_SetConfig+0x2e6>
 8007404:	2310      	movs	r3, #16
 8007406:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800740a:	e072      	b.n	80074f2 <UART_SetConfig+0x2e6>
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a35      	ldr	r2, [pc, #212]	; (80074e8 <UART_SetConfig+0x2dc>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d12a      	bne.n	800746c <UART_SetConfig+0x260>
 8007416:	4b30      	ldr	r3, [pc, #192]	; (80074d8 <UART_SetConfig+0x2cc>)
 8007418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800741c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007420:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007424:	d01a      	beq.n	800745c <UART_SetConfig+0x250>
 8007426:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800742a:	d81b      	bhi.n	8007464 <UART_SetConfig+0x258>
 800742c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007430:	d00c      	beq.n	800744c <UART_SetConfig+0x240>
 8007432:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007436:	d815      	bhi.n	8007464 <UART_SetConfig+0x258>
 8007438:	2b00      	cmp	r3, #0
 800743a:	d003      	beq.n	8007444 <UART_SetConfig+0x238>
 800743c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007440:	d008      	beq.n	8007454 <UART_SetConfig+0x248>
 8007442:	e00f      	b.n	8007464 <UART_SetConfig+0x258>
 8007444:	2300      	movs	r3, #0
 8007446:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800744a:	e052      	b.n	80074f2 <UART_SetConfig+0x2e6>
 800744c:	2302      	movs	r3, #2
 800744e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007452:	e04e      	b.n	80074f2 <UART_SetConfig+0x2e6>
 8007454:	2304      	movs	r3, #4
 8007456:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800745a:	e04a      	b.n	80074f2 <UART_SetConfig+0x2e6>
 800745c:	2308      	movs	r3, #8
 800745e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007462:	e046      	b.n	80074f2 <UART_SetConfig+0x2e6>
 8007464:	2310      	movs	r3, #16
 8007466:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800746a:	e042      	b.n	80074f2 <UART_SetConfig+0x2e6>
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a17      	ldr	r2, [pc, #92]	; (80074d0 <UART_SetConfig+0x2c4>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d13a      	bne.n	80074ec <UART_SetConfig+0x2e0>
 8007476:	4b18      	ldr	r3, [pc, #96]	; (80074d8 <UART_SetConfig+0x2cc>)
 8007478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800747c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007480:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007484:	d01a      	beq.n	80074bc <UART_SetConfig+0x2b0>
 8007486:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800748a:	d81b      	bhi.n	80074c4 <UART_SetConfig+0x2b8>
 800748c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007490:	d00c      	beq.n	80074ac <UART_SetConfig+0x2a0>
 8007492:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007496:	d815      	bhi.n	80074c4 <UART_SetConfig+0x2b8>
 8007498:	2b00      	cmp	r3, #0
 800749a:	d003      	beq.n	80074a4 <UART_SetConfig+0x298>
 800749c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074a0:	d008      	beq.n	80074b4 <UART_SetConfig+0x2a8>
 80074a2:	e00f      	b.n	80074c4 <UART_SetConfig+0x2b8>
 80074a4:	2300      	movs	r3, #0
 80074a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074aa:	e022      	b.n	80074f2 <UART_SetConfig+0x2e6>
 80074ac:	2302      	movs	r3, #2
 80074ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074b2:	e01e      	b.n	80074f2 <UART_SetConfig+0x2e6>
 80074b4:	2304      	movs	r3, #4
 80074b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074ba:	e01a      	b.n	80074f2 <UART_SetConfig+0x2e6>
 80074bc:	2308      	movs	r3, #8
 80074be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074c2:	e016      	b.n	80074f2 <UART_SetConfig+0x2e6>
 80074c4:	2310      	movs	r3, #16
 80074c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074ca:	e012      	b.n	80074f2 <UART_SetConfig+0x2e6>
 80074cc:	efff69f3 	.word	0xefff69f3
 80074d0:	40008000 	.word	0x40008000
 80074d4:	40013800 	.word	0x40013800
 80074d8:	40021000 	.word	0x40021000
 80074dc:	40004400 	.word	0x40004400
 80074e0:	40004800 	.word	0x40004800
 80074e4:	40004c00 	.word	0x40004c00
 80074e8:	40005000 	.word	0x40005000
 80074ec:	2310      	movs	r3, #16
 80074ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a9f      	ldr	r2, [pc, #636]	; (8007774 <UART_SetConfig+0x568>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d17a      	bne.n	80075f2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80074fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007500:	2b08      	cmp	r3, #8
 8007502:	d824      	bhi.n	800754e <UART_SetConfig+0x342>
 8007504:	a201      	add	r2, pc, #4	; (adr r2, 800750c <UART_SetConfig+0x300>)
 8007506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800750a:	bf00      	nop
 800750c:	08007531 	.word	0x08007531
 8007510:	0800754f 	.word	0x0800754f
 8007514:	08007539 	.word	0x08007539
 8007518:	0800754f 	.word	0x0800754f
 800751c:	0800753f 	.word	0x0800753f
 8007520:	0800754f 	.word	0x0800754f
 8007524:	0800754f 	.word	0x0800754f
 8007528:	0800754f 	.word	0x0800754f
 800752c:	08007547 	.word	0x08007547
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007530:	f7fd fd82 	bl	8005038 <HAL_RCC_GetPCLK1Freq>
 8007534:	61f8      	str	r0, [r7, #28]
        break;
 8007536:	e010      	b.n	800755a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007538:	4b8f      	ldr	r3, [pc, #572]	; (8007778 <UART_SetConfig+0x56c>)
 800753a:	61fb      	str	r3, [r7, #28]
        break;
 800753c:	e00d      	b.n	800755a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800753e:	f7fd fce3 	bl	8004f08 <HAL_RCC_GetSysClockFreq>
 8007542:	61f8      	str	r0, [r7, #28]
        break;
 8007544:	e009      	b.n	800755a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007546:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800754a:	61fb      	str	r3, [r7, #28]
        break;
 800754c:	e005      	b.n	800755a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800754e:	2300      	movs	r3, #0
 8007550:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007552:	2301      	movs	r3, #1
 8007554:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007558:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800755a:	69fb      	ldr	r3, [r7, #28]
 800755c:	2b00      	cmp	r3, #0
 800755e:	f000 80fb 	beq.w	8007758 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	685a      	ldr	r2, [r3, #4]
 8007566:	4613      	mov	r3, r2
 8007568:	005b      	lsls	r3, r3, #1
 800756a:	4413      	add	r3, r2
 800756c:	69fa      	ldr	r2, [r7, #28]
 800756e:	429a      	cmp	r2, r3
 8007570:	d305      	bcc.n	800757e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007578:	69fa      	ldr	r2, [r7, #28]
 800757a:	429a      	cmp	r2, r3
 800757c:	d903      	bls.n	8007586 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800757e:	2301      	movs	r3, #1
 8007580:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007584:	e0e8      	b.n	8007758 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007586:	69fb      	ldr	r3, [r7, #28]
 8007588:	2200      	movs	r2, #0
 800758a:	461c      	mov	r4, r3
 800758c:	4615      	mov	r5, r2
 800758e:	f04f 0200 	mov.w	r2, #0
 8007592:	f04f 0300 	mov.w	r3, #0
 8007596:	022b      	lsls	r3, r5, #8
 8007598:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800759c:	0222      	lsls	r2, r4, #8
 800759e:	68f9      	ldr	r1, [r7, #12]
 80075a0:	6849      	ldr	r1, [r1, #4]
 80075a2:	0849      	lsrs	r1, r1, #1
 80075a4:	2000      	movs	r0, #0
 80075a6:	4688      	mov	r8, r1
 80075a8:	4681      	mov	r9, r0
 80075aa:	eb12 0a08 	adds.w	sl, r2, r8
 80075ae:	eb43 0b09 	adc.w	fp, r3, r9
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	2200      	movs	r2, #0
 80075b8:	603b      	str	r3, [r7, #0]
 80075ba:	607a      	str	r2, [r7, #4]
 80075bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075c0:	4650      	mov	r0, sl
 80075c2:	4659      	mov	r1, fp
 80075c4:	f7f9 fb40 	bl	8000c48 <__aeabi_uldivmod>
 80075c8:	4602      	mov	r2, r0
 80075ca:	460b      	mov	r3, r1
 80075cc:	4613      	mov	r3, r2
 80075ce:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80075d0:	69bb      	ldr	r3, [r7, #24]
 80075d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075d6:	d308      	bcc.n	80075ea <UART_SetConfig+0x3de>
 80075d8:	69bb      	ldr	r3, [r7, #24]
 80075da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075de:	d204      	bcs.n	80075ea <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	69ba      	ldr	r2, [r7, #24]
 80075e6:	60da      	str	r2, [r3, #12]
 80075e8:	e0b6      	b.n	8007758 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80075ea:	2301      	movs	r3, #1
 80075ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80075f0:	e0b2      	b.n	8007758 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	69db      	ldr	r3, [r3, #28]
 80075f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075fa:	d15e      	bne.n	80076ba <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80075fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007600:	2b08      	cmp	r3, #8
 8007602:	d828      	bhi.n	8007656 <UART_SetConfig+0x44a>
 8007604:	a201      	add	r2, pc, #4	; (adr r2, 800760c <UART_SetConfig+0x400>)
 8007606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800760a:	bf00      	nop
 800760c:	08007631 	.word	0x08007631
 8007610:	08007639 	.word	0x08007639
 8007614:	08007641 	.word	0x08007641
 8007618:	08007657 	.word	0x08007657
 800761c:	08007647 	.word	0x08007647
 8007620:	08007657 	.word	0x08007657
 8007624:	08007657 	.word	0x08007657
 8007628:	08007657 	.word	0x08007657
 800762c:	0800764f 	.word	0x0800764f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007630:	f7fd fd02 	bl	8005038 <HAL_RCC_GetPCLK1Freq>
 8007634:	61f8      	str	r0, [r7, #28]
        break;
 8007636:	e014      	b.n	8007662 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007638:	f7fd fd14 	bl	8005064 <HAL_RCC_GetPCLK2Freq>
 800763c:	61f8      	str	r0, [r7, #28]
        break;
 800763e:	e010      	b.n	8007662 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007640:	4b4d      	ldr	r3, [pc, #308]	; (8007778 <UART_SetConfig+0x56c>)
 8007642:	61fb      	str	r3, [r7, #28]
        break;
 8007644:	e00d      	b.n	8007662 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007646:	f7fd fc5f 	bl	8004f08 <HAL_RCC_GetSysClockFreq>
 800764a:	61f8      	str	r0, [r7, #28]
        break;
 800764c:	e009      	b.n	8007662 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800764e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007652:	61fb      	str	r3, [r7, #28]
        break;
 8007654:	e005      	b.n	8007662 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007656:	2300      	movs	r3, #0
 8007658:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800765a:	2301      	movs	r3, #1
 800765c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007660:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007662:	69fb      	ldr	r3, [r7, #28]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d077      	beq.n	8007758 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007668:	69fb      	ldr	r3, [r7, #28]
 800766a:	005a      	lsls	r2, r3, #1
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	085b      	lsrs	r3, r3, #1
 8007672:	441a      	add	r2, r3
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	fbb2 f3f3 	udiv	r3, r2, r3
 800767c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800767e:	69bb      	ldr	r3, [r7, #24]
 8007680:	2b0f      	cmp	r3, #15
 8007682:	d916      	bls.n	80076b2 <UART_SetConfig+0x4a6>
 8007684:	69bb      	ldr	r3, [r7, #24]
 8007686:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800768a:	d212      	bcs.n	80076b2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800768c:	69bb      	ldr	r3, [r7, #24]
 800768e:	b29b      	uxth	r3, r3
 8007690:	f023 030f 	bic.w	r3, r3, #15
 8007694:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007696:	69bb      	ldr	r3, [r7, #24]
 8007698:	085b      	lsrs	r3, r3, #1
 800769a:	b29b      	uxth	r3, r3
 800769c:	f003 0307 	and.w	r3, r3, #7
 80076a0:	b29a      	uxth	r2, r3
 80076a2:	8afb      	ldrh	r3, [r7, #22]
 80076a4:	4313      	orrs	r3, r2
 80076a6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	8afa      	ldrh	r2, [r7, #22]
 80076ae:	60da      	str	r2, [r3, #12]
 80076b0:	e052      	b.n	8007758 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80076b2:	2301      	movs	r3, #1
 80076b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80076b8:	e04e      	b.n	8007758 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80076ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076be:	2b08      	cmp	r3, #8
 80076c0:	d827      	bhi.n	8007712 <UART_SetConfig+0x506>
 80076c2:	a201      	add	r2, pc, #4	; (adr r2, 80076c8 <UART_SetConfig+0x4bc>)
 80076c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076c8:	080076ed 	.word	0x080076ed
 80076cc:	080076f5 	.word	0x080076f5
 80076d0:	080076fd 	.word	0x080076fd
 80076d4:	08007713 	.word	0x08007713
 80076d8:	08007703 	.word	0x08007703
 80076dc:	08007713 	.word	0x08007713
 80076e0:	08007713 	.word	0x08007713
 80076e4:	08007713 	.word	0x08007713
 80076e8:	0800770b 	.word	0x0800770b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076ec:	f7fd fca4 	bl	8005038 <HAL_RCC_GetPCLK1Freq>
 80076f0:	61f8      	str	r0, [r7, #28]
        break;
 80076f2:	e014      	b.n	800771e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80076f4:	f7fd fcb6 	bl	8005064 <HAL_RCC_GetPCLK2Freq>
 80076f8:	61f8      	str	r0, [r7, #28]
        break;
 80076fa:	e010      	b.n	800771e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80076fc:	4b1e      	ldr	r3, [pc, #120]	; (8007778 <UART_SetConfig+0x56c>)
 80076fe:	61fb      	str	r3, [r7, #28]
        break;
 8007700:	e00d      	b.n	800771e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007702:	f7fd fc01 	bl	8004f08 <HAL_RCC_GetSysClockFreq>
 8007706:	61f8      	str	r0, [r7, #28]
        break;
 8007708:	e009      	b.n	800771e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800770a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800770e:	61fb      	str	r3, [r7, #28]
        break;
 8007710:	e005      	b.n	800771e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007712:	2300      	movs	r3, #0
 8007714:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007716:	2301      	movs	r3, #1
 8007718:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800771c:	bf00      	nop
    }

    if (pclk != 0U)
 800771e:	69fb      	ldr	r3, [r7, #28]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d019      	beq.n	8007758 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	085a      	lsrs	r2, r3, #1
 800772a:	69fb      	ldr	r3, [r7, #28]
 800772c:	441a      	add	r2, r3
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	fbb2 f3f3 	udiv	r3, r2, r3
 8007736:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007738:	69bb      	ldr	r3, [r7, #24]
 800773a:	2b0f      	cmp	r3, #15
 800773c:	d909      	bls.n	8007752 <UART_SetConfig+0x546>
 800773e:	69bb      	ldr	r3, [r7, #24]
 8007740:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007744:	d205      	bcs.n	8007752 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007746:	69bb      	ldr	r3, [r7, #24]
 8007748:	b29a      	uxth	r2, r3
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	60da      	str	r2, [r3, #12]
 8007750:	e002      	b.n	8007758 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007752:	2301      	movs	r3, #1
 8007754:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2200      	movs	r2, #0
 800775c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	2200      	movs	r2, #0
 8007762:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007764:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007768:	4618      	mov	r0, r3
 800776a:	3728      	adds	r7, #40	; 0x28
 800776c:	46bd      	mov	sp, r7
 800776e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007772:	bf00      	nop
 8007774:	40008000 	.word	0x40008000
 8007778:	00f42400 	.word	0x00f42400

0800777c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800777c:	b480      	push	{r7}
 800777e:	b083      	sub	sp, #12
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007788:	f003 0308 	and.w	r3, r3, #8
 800778c:	2b00      	cmp	r3, #0
 800778e:	d00a      	beq.n	80077a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	430a      	orrs	r2, r1
 80077a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077aa:	f003 0301 	and.w	r3, r3, #1
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d00a      	beq.n	80077c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	430a      	orrs	r2, r1
 80077c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077cc:	f003 0302 	and.w	r3, r3, #2
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d00a      	beq.n	80077ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	430a      	orrs	r2, r1
 80077e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ee:	f003 0304 	and.w	r3, r3, #4
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d00a      	beq.n	800780c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	430a      	orrs	r2, r1
 800780a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007810:	f003 0310 	and.w	r3, r3, #16
 8007814:	2b00      	cmp	r3, #0
 8007816:	d00a      	beq.n	800782e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	689b      	ldr	r3, [r3, #8]
 800781e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	430a      	orrs	r2, r1
 800782c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007832:	f003 0320 	and.w	r3, r3, #32
 8007836:	2b00      	cmp	r3, #0
 8007838:	d00a      	beq.n	8007850 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	430a      	orrs	r2, r1
 800784e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007858:	2b00      	cmp	r3, #0
 800785a:	d01a      	beq.n	8007892 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	430a      	orrs	r2, r1
 8007870:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007876:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800787a:	d10a      	bne.n	8007892 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	430a      	orrs	r2, r1
 8007890:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800789a:	2b00      	cmp	r3, #0
 800789c:	d00a      	beq.n	80078b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	430a      	orrs	r2, r1
 80078b2:	605a      	str	r2, [r3, #4]
  }
}
 80078b4:	bf00      	nop
 80078b6:	370c      	adds	r7, #12
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr

080078c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b098      	sub	sp, #96	; 0x60
 80078c4:	af02      	add	r7, sp, #8
 80078c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2200      	movs	r2, #0
 80078cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80078d0:	f7fa fa24 	bl	8001d1c <HAL_GetTick>
 80078d4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f003 0308 	and.w	r3, r3, #8
 80078e0:	2b08      	cmp	r3, #8
 80078e2:	d12e      	bne.n	8007942 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80078e8:	9300      	str	r3, [sp, #0]
 80078ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078ec:	2200      	movs	r2, #0
 80078ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f000 f88c 	bl	8007a10 <UART_WaitOnFlagUntilTimeout>
 80078f8:	4603      	mov	r3, r0
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d021      	beq.n	8007942 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007906:	e853 3f00 	ldrex	r3, [r3]
 800790a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800790c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800790e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007912:	653b      	str	r3, [r7, #80]	; 0x50
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	461a      	mov	r2, r3
 800791a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800791c:	647b      	str	r3, [r7, #68]	; 0x44
 800791e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007920:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007922:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007924:	e841 2300 	strex	r3, r2, [r1]
 8007928:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800792a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800792c:	2b00      	cmp	r3, #0
 800792e:	d1e6      	bne.n	80078fe <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2220      	movs	r2, #32
 8007934:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2200      	movs	r2, #0
 800793a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800793e:	2303      	movs	r3, #3
 8007940:	e062      	b.n	8007a08 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f003 0304 	and.w	r3, r3, #4
 800794c:	2b04      	cmp	r3, #4
 800794e:	d149      	bne.n	80079e4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007950:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007954:	9300      	str	r3, [sp, #0]
 8007956:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007958:	2200      	movs	r2, #0
 800795a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f000 f856 	bl	8007a10 <UART_WaitOnFlagUntilTimeout>
 8007964:	4603      	mov	r3, r0
 8007966:	2b00      	cmp	r3, #0
 8007968:	d03c      	beq.n	80079e4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007972:	e853 3f00 	ldrex	r3, [r3]
 8007976:	623b      	str	r3, [r7, #32]
   return(result);
 8007978:	6a3b      	ldr	r3, [r7, #32]
 800797a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800797e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	461a      	mov	r2, r3
 8007986:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007988:	633b      	str	r3, [r7, #48]	; 0x30
 800798a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800798c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800798e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007990:	e841 2300 	strex	r3, r2, [r1]
 8007994:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007998:	2b00      	cmp	r3, #0
 800799a:	d1e6      	bne.n	800796a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	3308      	adds	r3, #8
 80079a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	e853 3f00 	ldrex	r3, [r3]
 80079aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f023 0301 	bic.w	r3, r3, #1
 80079b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	3308      	adds	r3, #8
 80079ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079bc:	61fa      	str	r2, [r7, #28]
 80079be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c0:	69b9      	ldr	r1, [r7, #24]
 80079c2:	69fa      	ldr	r2, [r7, #28]
 80079c4:	e841 2300 	strex	r3, r2, [r1]
 80079c8:	617b      	str	r3, [r7, #20]
   return(result);
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d1e5      	bne.n	800799c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2220      	movs	r2, #32
 80079d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2200      	movs	r2, #0
 80079dc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80079e0:	2303      	movs	r3, #3
 80079e2:	e011      	b.n	8007a08 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2220      	movs	r2, #32
 80079e8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2220      	movs	r2, #32
 80079ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2200      	movs	r2, #0
 80079f6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2200      	movs	r2, #0
 80079fc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2200      	movs	r2, #0
 8007a02:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007a06:	2300      	movs	r3, #0
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3758      	adds	r7, #88	; 0x58
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}

08007a10 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b084      	sub	sp, #16
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	60f8      	str	r0, [r7, #12]
 8007a18:	60b9      	str	r1, [r7, #8]
 8007a1a:	603b      	str	r3, [r7, #0]
 8007a1c:	4613      	mov	r3, r2
 8007a1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a20:	e049      	b.n	8007ab6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a22:	69bb      	ldr	r3, [r7, #24]
 8007a24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a28:	d045      	beq.n	8007ab6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a2a:	f7fa f977 	bl	8001d1c <HAL_GetTick>
 8007a2e:	4602      	mov	r2, r0
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	1ad3      	subs	r3, r2, r3
 8007a34:	69ba      	ldr	r2, [r7, #24]
 8007a36:	429a      	cmp	r2, r3
 8007a38:	d302      	bcc.n	8007a40 <UART_WaitOnFlagUntilTimeout+0x30>
 8007a3a:	69bb      	ldr	r3, [r7, #24]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d101      	bne.n	8007a44 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007a40:	2303      	movs	r3, #3
 8007a42:	e048      	b.n	8007ad6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f003 0304 	and.w	r3, r3, #4
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d031      	beq.n	8007ab6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	69db      	ldr	r3, [r3, #28]
 8007a58:	f003 0308 	and.w	r3, r3, #8
 8007a5c:	2b08      	cmp	r3, #8
 8007a5e:	d110      	bne.n	8007a82 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	2208      	movs	r2, #8
 8007a66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007a68:	68f8      	ldr	r0, [r7, #12]
 8007a6a:	f000 f838 	bl	8007ade <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	2208      	movs	r2, #8
 8007a72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	e029      	b.n	8007ad6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	69db      	ldr	r3, [r3, #28]
 8007a88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a90:	d111      	bne.n	8007ab6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007a9c:	68f8      	ldr	r0, [r7, #12]
 8007a9e:	f000 f81e 	bl	8007ade <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2220      	movs	r2, #32
 8007aa6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2200      	movs	r2, #0
 8007aae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007ab2:	2303      	movs	r3, #3
 8007ab4:	e00f      	b.n	8007ad6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	69da      	ldr	r2, [r3, #28]
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	4013      	ands	r3, r2
 8007ac0:	68ba      	ldr	r2, [r7, #8]
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	bf0c      	ite	eq
 8007ac6:	2301      	moveq	r3, #1
 8007ac8:	2300      	movne	r3, #0
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	461a      	mov	r2, r3
 8007ace:	79fb      	ldrb	r3, [r7, #7]
 8007ad0:	429a      	cmp	r2, r3
 8007ad2:	d0a6      	beq.n	8007a22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ad4:	2300      	movs	r3, #0
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	3710      	adds	r7, #16
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}

08007ade <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ade:	b480      	push	{r7}
 8007ae0:	b095      	sub	sp, #84	; 0x54
 8007ae2:	af00      	add	r7, sp, #0
 8007ae4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aee:	e853 3f00 	ldrex	r3, [r3]
 8007af2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007afa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	461a      	mov	r2, r3
 8007b02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b04:	643b      	str	r3, [r7, #64]	; 0x40
 8007b06:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b08:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007b0a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007b0c:	e841 2300 	strex	r3, r2, [r1]
 8007b10:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d1e6      	bne.n	8007ae6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	3308      	adds	r3, #8
 8007b1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b20:	6a3b      	ldr	r3, [r7, #32]
 8007b22:	e853 3f00 	ldrex	r3, [r3]
 8007b26:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b28:	69fb      	ldr	r3, [r7, #28]
 8007b2a:	f023 0301 	bic.w	r3, r3, #1
 8007b2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	3308      	adds	r3, #8
 8007b36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b38:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007b3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b40:	e841 2300 	strex	r3, r2, [r1]
 8007b44:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d1e5      	bne.n	8007b18 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b50:	2b01      	cmp	r3, #1
 8007b52:	d118      	bne.n	8007b86 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	e853 3f00 	ldrex	r3, [r3]
 8007b60:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	f023 0310 	bic.w	r3, r3, #16
 8007b68:	647b      	str	r3, [r7, #68]	; 0x44
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	461a      	mov	r2, r3
 8007b70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b72:	61bb      	str	r3, [r7, #24]
 8007b74:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b76:	6979      	ldr	r1, [r7, #20]
 8007b78:	69ba      	ldr	r2, [r7, #24]
 8007b7a:	e841 2300 	strex	r3, r2, [r1]
 8007b7e:	613b      	str	r3, [r7, #16]
   return(result);
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d1e6      	bne.n	8007b54 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2220      	movs	r2, #32
 8007b8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2200      	movs	r2, #0
 8007b92:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2200      	movs	r2, #0
 8007b98:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007b9a:	bf00      	nop
 8007b9c:	3754      	adds	r7, #84	; 0x54
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba4:	4770      	bx	lr

08007ba6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007ba6:	b580      	push	{r7, lr}
 8007ba8:	b084      	sub	sp, #16
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bb2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007bc4:	68f8      	ldr	r0, [r7, #12]
 8007bc6:	f7ff fb0b 	bl	80071e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007bca:	bf00      	nop
 8007bcc:	3710      	adds	r7, #16
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}

08007bd2 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007bd2:	b480      	push	{r7}
 8007bd4:	b08f      	sub	sp, #60	; 0x3c
 8007bd6:	af00      	add	r7, sp, #0
 8007bd8:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bde:	2b21      	cmp	r3, #33	; 0x21
 8007be0:	d14d      	bne.n	8007c7e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007be8:	b29b      	uxth	r3, r3
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d132      	bne.n	8007c54 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bf4:	6a3b      	ldr	r3, [r7, #32]
 8007bf6:	e853 3f00 	ldrex	r3, [r3]
 8007bfa:	61fb      	str	r3, [r7, #28]
   return(result);
 8007bfc:	69fb      	ldr	r3, [r7, #28]
 8007bfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c02:	637b      	str	r3, [r7, #52]	; 0x34
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	461a      	mov	r2, r3
 8007c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c0e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c14:	e841 2300 	strex	r3, r2, [r1]
 8007c18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d1e6      	bne.n	8007bee <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	e853 3f00 	ldrex	r3, [r3]
 8007c2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c34:	633b      	str	r3, [r7, #48]	; 0x30
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	461a      	mov	r2, r3
 8007c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c3e:	61bb      	str	r3, [r7, #24]
 8007c40:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c42:	6979      	ldr	r1, [r7, #20]
 8007c44:	69ba      	ldr	r2, [r7, #24]
 8007c46:	e841 2300 	strex	r3, r2, [r1]
 8007c4a:	613b      	str	r3, [r7, #16]
   return(result);
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d1e6      	bne.n	8007c20 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007c52:	e014      	b.n	8007c7e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c58:	781a      	ldrb	r2, [r3, #0]
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	b292      	uxth	r2, r2
 8007c60:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c66:	1c5a      	adds	r2, r3, #1
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007c72:	b29b      	uxth	r3, r3
 8007c74:	3b01      	subs	r3, #1
 8007c76:	b29a      	uxth	r2, r3
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007c7e:	bf00      	nop
 8007c80:	373c      	adds	r7, #60	; 0x3c
 8007c82:	46bd      	mov	sp, r7
 8007c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c88:	4770      	bx	lr

08007c8a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007c8a:	b480      	push	{r7}
 8007c8c:	b091      	sub	sp, #68	; 0x44
 8007c8e:	af00      	add	r7, sp, #0
 8007c90:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c96:	2b21      	cmp	r3, #33	; 0x21
 8007c98:	d151      	bne.n	8007d3e <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007ca0:	b29b      	uxth	r3, r3
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d132      	bne.n	8007d0c <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cae:	e853 3f00 	ldrex	r3, [r3]
 8007cb2:	623b      	str	r3, [r7, #32]
   return(result);
 8007cb4:	6a3b      	ldr	r3, [r7, #32]
 8007cb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007cba:	63bb      	str	r3, [r7, #56]	; 0x38
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	461a      	mov	r2, r3
 8007cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cc4:	633b      	str	r3, [r7, #48]	; 0x30
 8007cc6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007cca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ccc:	e841 2300 	strex	r3, r2, [r1]
 8007cd0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d1e6      	bne.n	8007ca6 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	e853 3f00 	ldrex	r3, [r3]
 8007ce4:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cec:	637b      	str	r3, [r7, #52]	; 0x34
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	461a      	mov	r2, r3
 8007cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cf6:	61fb      	str	r3, [r7, #28]
 8007cf8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cfa:	69b9      	ldr	r1, [r7, #24]
 8007cfc:	69fa      	ldr	r2, [r7, #28]
 8007cfe:	e841 2300 	strex	r3, r2, [r1]
 8007d02:	617b      	str	r3, [r7, #20]
   return(result);
 8007d04:	697b      	ldr	r3, [r7, #20]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d1e6      	bne.n	8007cd8 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007d0a:	e018      	b.n	8007d3e <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d10:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007d12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d14:	881a      	ldrh	r2, [r3, #0]
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007d1e:	b292      	uxth	r2, r2
 8007d20:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d26:	1c9a      	adds	r2, r3, #2
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007d32:	b29b      	uxth	r3, r3
 8007d34:	3b01      	subs	r3, #1
 8007d36:	b29a      	uxth	r2, r3
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007d3e:	bf00      	nop
 8007d40:	3744      	adds	r7, #68	; 0x44
 8007d42:	46bd      	mov	sp, r7
 8007d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d48:	4770      	bx	lr

08007d4a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007d4a:	b580      	push	{r7, lr}
 8007d4c:	b088      	sub	sp, #32
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	e853 3f00 	ldrex	r3, [r3]
 8007d5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d66:	61fb      	str	r3, [r7, #28]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	461a      	mov	r2, r3
 8007d6e:	69fb      	ldr	r3, [r7, #28]
 8007d70:	61bb      	str	r3, [r7, #24]
 8007d72:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d74:	6979      	ldr	r1, [r7, #20]
 8007d76:	69ba      	ldr	r2, [r7, #24]
 8007d78:	e841 2300 	strex	r3, r2, [r1]
 8007d7c:	613b      	str	r3, [r7, #16]
   return(result);
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d1e6      	bne.n	8007d52 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2220      	movs	r2, #32
 8007d88:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f7ff fa1b 	bl	80071cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d96:	bf00      	nop
 8007d98:	3720      	adds	r7, #32
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}

08007d9e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007d9e:	b480      	push	{r7}
 8007da0:	b083      	sub	sp, #12
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007da6:	bf00      	nop
 8007da8:	370c      	adds	r7, #12
 8007daa:	46bd      	mov	sp, r7
 8007dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db0:	4770      	bx	lr

08007db2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007db2:	b480      	push	{r7}
 8007db4:	b085      	sub	sp, #20
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	4603      	mov	r3, r0
 8007dba:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007dc0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007dc4:	2b84      	cmp	r3, #132	; 0x84
 8007dc6:	d005      	beq.n	8007dd4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007dc8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	4413      	add	r3, r2
 8007dd0:	3303      	adds	r3, #3
 8007dd2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3714      	adds	r7, #20
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de0:	4770      	bx	lr

08007de2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007de2:	b580      	push	{r7, lr}
 8007de4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007de6:	f000 fadf 	bl	80083a8 <vTaskStartScheduler>
  
  return osOK;
 8007dea:	2300      	movs	r3, #0
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	bd80      	pop	{r7, pc}

08007df0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007df0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007df2:	b089      	sub	sp, #36	; 0x24
 8007df4:	af04      	add	r7, sp, #16
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	695b      	ldr	r3, [r3, #20]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d020      	beq.n	8007e44 <osThreadCreate+0x54>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	699b      	ldr	r3, [r3, #24]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d01c      	beq.n	8007e44 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	685c      	ldr	r4, [r3, #4]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	691e      	ldr	r6, [r3, #16]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	f7ff ffc8 	bl	8007db2 <makeFreeRtosPriority>
 8007e22:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	695b      	ldr	r3, [r3, #20]
 8007e28:	687a      	ldr	r2, [r7, #4]
 8007e2a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007e2c:	9202      	str	r2, [sp, #8]
 8007e2e:	9301      	str	r3, [sp, #4]
 8007e30:	9100      	str	r1, [sp, #0]
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	4632      	mov	r2, r6
 8007e36:	4629      	mov	r1, r5
 8007e38:	4620      	mov	r0, r4
 8007e3a:	f000 f8ed 	bl	8008018 <xTaskCreateStatic>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	60fb      	str	r3, [r7, #12]
 8007e42:	e01c      	b.n	8007e7e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	685c      	ldr	r4, [r3, #4]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007e50:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007e58:	4618      	mov	r0, r3
 8007e5a:	f7ff ffaa 	bl	8007db2 <makeFreeRtosPriority>
 8007e5e:	4602      	mov	r2, r0
 8007e60:	f107 030c 	add.w	r3, r7, #12
 8007e64:	9301      	str	r3, [sp, #4]
 8007e66:	9200      	str	r2, [sp, #0]
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	4632      	mov	r2, r6
 8007e6c:	4629      	mov	r1, r5
 8007e6e:	4620      	mov	r0, r4
 8007e70:	f000 f92f 	bl	80080d2 <xTaskCreate>
 8007e74:	4603      	mov	r3, r0
 8007e76:	2b01      	cmp	r3, #1
 8007e78:	d001      	beq.n	8007e7e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	e000      	b.n	8007e80 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3714      	adds	r7, #20
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007e88 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d001      	beq.n	8007e9e <osDelay+0x16>
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	e000      	b.n	8007ea0 <osDelay+0x18>
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f000 fa4d 	bl	8008340 <vTaskDelay>
  
  return osOK;
 8007ea6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3710      	adds	r7, #16
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}

08007eb0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b083      	sub	sp, #12
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f103 0208 	add.w	r2, r3, #8
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ec8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f103 0208 	add.w	r2, r3, #8
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f103 0208 	add.w	r2, r3, #8
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007ee4:	bf00      	nop
 8007ee6:	370c      	adds	r7, #12
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr

08007ef0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b083      	sub	sp, #12
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2200      	movs	r2, #0
 8007efc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007efe:	bf00      	nop
 8007f00:	370c      	adds	r7, #12
 8007f02:	46bd      	mov	sp, r7
 8007f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f08:	4770      	bx	lr

08007f0a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007f0a:	b480      	push	{r7}
 8007f0c:	b085      	sub	sp, #20
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	6078      	str	r0, [r7, #4]
 8007f12:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	685b      	ldr	r3, [r3, #4]
 8007f18:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	68fa      	ldr	r2, [r7, #12]
 8007f1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	689a      	ldr	r2, [r3, #8]
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	689b      	ldr	r3, [r3, #8]
 8007f2c:	683a      	ldr	r2, [r7, #0]
 8007f2e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	683a      	ldr	r2, [r7, #0]
 8007f34:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	687a      	ldr	r2, [r7, #4]
 8007f3a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	1c5a      	adds	r2, r3, #1
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	601a      	str	r2, [r3, #0]
}
 8007f46:	bf00      	nop
 8007f48:	3714      	adds	r7, #20
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f50:	4770      	bx	lr

08007f52 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007f52:	b480      	push	{r7}
 8007f54:	b085      	sub	sp, #20
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	6078      	str	r0, [r7, #4]
 8007f5a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f68:	d103      	bne.n	8007f72 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	691b      	ldr	r3, [r3, #16]
 8007f6e:	60fb      	str	r3, [r7, #12]
 8007f70:	e00c      	b.n	8007f8c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	3308      	adds	r3, #8
 8007f76:	60fb      	str	r3, [r7, #12]
 8007f78:	e002      	b.n	8007f80 <vListInsert+0x2e>
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	60fb      	str	r3, [r7, #12]
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	68ba      	ldr	r2, [r7, #8]
 8007f88:	429a      	cmp	r2, r3
 8007f8a:	d2f6      	bcs.n	8007f7a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	685a      	ldr	r2, [r3, #4]
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	683a      	ldr	r2, [r7, #0]
 8007f9a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	68fa      	ldr	r2, [r7, #12]
 8007fa0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	683a      	ldr	r2, [r7, #0]
 8007fa6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	687a      	ldr	r2, [r7, #4]
 8007fac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	1c5a      	adds	r2, r3, #1
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	601a      	str	r2, [r3, #0]
}
 8007fb8:	bf00      	nop
 8007fba:	3714      	adds	r7, #20
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc2:	4770      	bx	lr

08007fc4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b085      	sub	sp, #20
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	691b      	ldr	r3, [r3, #16]
 8007fd0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	685b      	ldr	r3, [r3, #4]
 8007fd6:	687a      	ldr	r2, [r7, #4]
 8007fd8:	6892      	ldr	r2, [r2, #8]
 8007fda:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	689b      	ldr	r3, [r3, #8]
 8007fe0:	687a      	ldr	r2, [r7, #4]
 8007fe2:	6852      	ldr	r2, [r2, #4]
 8007fe4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	685b      	ldr	r3, [r3, #4]
 8007fea:	687a      	ldr	r2, [r7, #4]
 8007fec:	429a      	cmp	r2, r3
 8007fee:	d103      	bne.n	8007ff8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	689a      	ldr	r2, [r3, #8]
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	1e5a      	subs	r2, r3, #1
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
}
 800800c:	4618      	mov	r0, r3
 800800e:	3714      	adds	r7, #20
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr

08008018 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008018:	b580      	push	{r7, lr}
 800801a:	b08e      	sub	sp, #56	; 0x38
 800801c:	af04      	add	r7, sp, #16
 800801e:	60f8      	str	r0, [r7, #12]
 8008020:	60b9      	str	r1, [r7, #8]
 8008022:	607a      	str	r2, [r7, #4]
 8008024:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008028:	2b00      	cmp	r3, #0
 800802a:	d10a      	bne.n	8008042 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800802c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008030:	f383 8811 	msr	BASEPRI, r3
 8008034:	f3bf 8f6f 	isb	sy
 8008038:	f3bf 8f4f 	dsb	sy
 800803c:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800803e:	bf00      	nop
 8008040:	e7fe      	b.n	8008040 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008044:	2b00      	cmp	r3, #0
 8008046:	d10a      	bne.n	800805e <xTaskCreateStatic+0x46>
	__asm volatile
 8008048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800804c:	f383 8811 	msr	BASEPRI, r3
 8008050:	f3bf 8f6f 	isb	sy
 8008054:	f3bf 8f4f 	dsb	sy
 8008058:	61fb      	str	r3, [r7, #28]
}
 800805a:	bf00      	nop
 800805c:	e7fe      	b.n	800805c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800805e:	2354      	movs	r3, #84	; 0x54
 8008060:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	2b54      	cmp	r3, #84	; 0x54
 8008066:	d00a      	beq.n	800807e <xTaskCreateStatic+0x66>
	__asm volatile
 8008068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800806c:	f383 8811 	msr	BASEPRI, r3
 8008070:	f3bf 8f6f 	isb	sy
 8008074:	f3bf 8f4f 	dsb	sy
 8008078:	61bb      	str	r3, [r7, #24]
}
 800807a:	bf00      	nop
 800807c:	e7fe      	b.n	800807c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800807e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008082:	2b00      	cmp	r3, #0
 8008084:	d01e      	beq.n	80080c4 <xTaskCreateStatic+0xac>
 8008086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008088:	2b00      	cmp	r3, #0
 800808a:	d01b      	beq.n	80080c4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800808c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800808e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008092:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008094:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008098:	2202      	movs	r2, #2
 800809a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800809e:	2300      	movs	r3, #0
 80080a0:	9303      	str	r3, [sp, #12]
 80080a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a4:	9302      	str	r3, [sp, #8]
 80080a6:	f107 0314 	add.w	r3, r7, #20
 80080aa:	9301      	str	r3, [sp, #4]
 80080ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ae:	9300      	str	r3, [sp, #0]
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	687a      	ldr	r2, [r7, #4]
 80080b4:	68b9      	ldr	r1, [r7, #8]
 80080b6:	68f8      	ldr	r0, [r7, #12]
 80080b8:	f000 f850 	bl	800815c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80080bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80080be:	f000 f8d5 	bl	800826c <prvAddNewTaskToReadyList>
 80080c2:	e001      	b.n	80080c8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80080c4:	2300      	movs	r3, #0
 80080c6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80080c8:	697b      	ldr	r3, [r7, #20]
	}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3728      	adds	r7, #40	; 0x28
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}

080080d2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80080d2:	b580      	push	{r7, lr}
 80080d4:	b08c      	sub	sp, #48	; 0x30
 80080d6:	af04      	add	r7, sp, #16
 80080d8:	60f8      	str	r0, [r7, #12]
 80080da:	60b9      	str	r1, [r7, #8]
 80080dc:	603b      	str	r3, [r7, #0]
 80080de:	4613      	mov	r3, r2
 80080e0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80080e2:	88fb      	ldrh	r3, [r7, #6]
 80080e4:	009b      	lsls	r3, r3, #2
 80080e6:	4618      	mov	r0, r3
 80080e8:	f000 fee6 	bl	8008eb8 <pvPortMalloc>
 80080ec:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d00e      	beq.n	8008112 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80080f4:	2054      	movs	r0, #84	; 0x54
 80080f6:	f000 fedf 	bl	8008eb8 <pvPortMalloc>
 80080fa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80080fc:	69fb      	ldr	r3, [r7, #28]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d003      	beq.n	800810a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008102:	69fb      	ldr	r3, [r7, #28]
 8008104:	697a      	ldr	r2, [r7, #20]
 8008106:	631a      	str	r2, [r3, #48]	; 0x30
 8008108:	e005      	b.n	8008116 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800810a:	6978      	ldr	r0, [r7, #20]
 800810c:	f000 ffa0 	bl	8009050 <vPortFree>
 8008110:	e001      	b.n	8008116 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008112:	2300      	movs	r3, #0
 8008114:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008116:	69fb      	ldr	r3, [r7, #28]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d017      	beq.n	800814c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800811c:	69fb      	ldr	r3, [r7, #28]
 800811e:	2200      	movs	r2, #0
 8008120:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008124:	88fa      	ldrh	r2, [r7, #6]
 8008126:	2300      	movs	r3, #0
 8008128:	9303      	str	r3, [sp, #12]
 800812a:	69fb      	ldr	r3, [r7, #28]
 800812c:	9302      	str	r3, [sp, #8]
 800812e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008130:	9301      	str	r3, [sp, #4]
 8008132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008134:	9300      	str	r3, [sp, #0]
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	68b9      	ldr	r1, [r7, #8]
 800813a:	68f8      	ldr	r0, [r7, #12]
 800813c:	f000 f80e 	bl	800815c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008140:	69f8      	ldr	r0, [r7, #28]
 8008142:	f000 f893 	bl	800826c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008146:	2301      	movs	r3, #1
 8008148:	61bb      	str	r3, [r7, #24]
 800814a:	e002      	b.n	8008152 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800814c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008150:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008152:	69bb      	ldr	r3, [r7, #24]
	}
 8008154:	4618      	mov	r0, r3
 8008156:	3720      	adds	r7, #32
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}

0800815c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b088      	sub	sp, #32
 8008160:	af00      	add	r7, sp, #0
 8008162:	60f8      	str	r0, [r7, #12]
 8008164:	60b9      	str	r1, [r7, #8]
 8008166:	607a      	str	r2, [r7, #4]
 8008168:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800816a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800816c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008174:	3b01      	subs	r3, #1
 8008176:	009b      	lsls	r3, r3, #2
 8008178:	4413      	add	r3, r2
 800817a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800817c:	69bb      	ldr	r3, [r7, #24]
 800817e:	f023 0307 	bic.w	r3, r3, #7
 8008182:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008184:	69bb      	ldr	r3, [r7, #24]
 8008186:	f003 0307 	and.w	r3, r3, #7
 800818a:	2b00      	cmp	r3, #0
 800818c:	d00a      	beq.n	80081a4 <prvInitialiseNewTask+0x48>
	__asm volatile
 800818e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008192:	f383 8811 	msr	BASEPRI, r3
 8008196:	f3bf 8f6f 	isb	sy
 800819a:	f3bf 8f4f 	dsb	sy
 800819e:	617b      	str	r3, [r7, #20]
}
 80081a0:	bf00      	nop
 80081a2:	e7fe      	b.n	80081a2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d01f      	beq.n	80081ea <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80081aa:	2300      	movs	r3, #0
 80081ac:	61fb      	str	r3, [r7, #28]
 80081ae:	e012      	b.n	80081d6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80081b0:	68ba      	ldr	r2, [r7, #8]
 80081b2:	69fb      	ldr	r3, [r7, #28]
 80081b4:	4413      	add	r3, r2
 80081b6:	7819      	ldrb	r1, [r3, #0]
 80081b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081ba:	69fb      	ldr	r3, [r7, #28]
 80081bc:	4413      	add	r3, r2
 80081be:	3334      	adds	r3, #52	; 0x34
 80081c0:	460a      	mov	r2, r1
 80081c2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80081c4:	68ba      	ldr	r2, [r7, #8]
 80081c6:	69fb      	ldr	r3, [r7, #28]
 80081c8:	4413      	add	r3, r2
 80081ca:	781b      	ldrb	r3, [r3, #0]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d006      	beq.n	80081de <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80081d0:	69fb      	ldr	r3, [r7, #28]
 80081d2:	3301      	adds	r3, #1
 80081d4:	61fb      	str	r3, [r7, #28]
 80081d6:	69fb      	ldr	r3, [r7, #28]
 80081d8:	2b0f      	cmp	r3, #15
 80081da:	d9e9      	bls.n	80081b0 <prvInitialiseNewTask+0x54>
 80081dc:	e000      	b.n	80081e0 <prvInitialiseNewTask+0x84>
			{
				break;
 80081de:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80081e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e2:	2200      	movs	r2, #0
 80081e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80081e8:	e003      	b.n	80081f2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80081ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ec:	2200      	movs	r2, #0
 80081ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80081f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f4:	2b06      	cmp	r3, #6
 80081f6:	d901      	bls.n	80081fc <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80081f8:	2306      	movs	r3, #6
 80081fa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80081fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008200:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008204:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008206:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800820a:	2200      	movs	r2, #0
 800820c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800820e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008210:	3304      	adds	r3, #4
 8008212:	4618      	mov	r0, r3
 8008214:	f7ff fe6c 	bl	8007ef0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800821a:	3318      	adds	r3, #24
 800821c:	4618      	mov	r0, r3
 800821e:	f7ff fe67 	bl	8007ef0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008224:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008226:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800822a:	f1c3 0207 	rsb	r2, r3, #7
 800822e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008230:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008234:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008236:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800823a:	2200      	movs	r2, #0
 800823c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800823e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008240:	2200      	movs	r2, #0
 8008242:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008246:	683a      	ldr	r2, [r7, #0]
 8008248:	68f9      	ldr	r1, [r7, #12]
 800824a:	69b8      	ldr	r0, [r7, #24]
 800824c:	f000 fc24 	bl	8008a98 <pxPortInitialiseStack>
 8008250:	4602      	mov	r2, r0
 8008252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008254:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008258:	2b00      	cmp	r3, #0
 800825a:	d002      	beq.n	8008262 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800825c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800825e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008260:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008262:	bf00      	nop
 8008264:	3720      	adds	r7, #32
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}
	...

0800826c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b082      	sub	sp, #8
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008274:	f000 fd3e 	bl	8008cf4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008278:	4b2a      	ldr	r3, [pc, #168]	; (8008324 <prvAddNewTaskToReadyList+0xb8>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	3301      	adds	r3, #1
 800827e:	4a29      	ldr	r2, [pc, #164]	; (8008324 <prvAddNewTaskToReadyList+0xb8>)
 8008280:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008282:	4b29      	ldr	r3, [pc, #164]	; (8008328 <prvAddNewTaskToReadyList+0xbc>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d109      	bne.n	800829e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800828a:	4a27      	ldr	r2, [pc, #156]	; (8008328 <prvAddNewTaskToReadyList+0xbc>)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008290:	4b24      	ldr	r3, [pc, #144]	; (8008324 <prvAddNewTaskToReadyList+0xb8>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	2b01      	cmp	r3, #1
 8008296:	d110      	bne.n	80082ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008298:	f000 fabc 	bl	8008814 <prvInitialiseTaskLists>
 800829c:	e00d      	b.n	80082ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800829e:	4b23      	ldr	r3, [pc, #140]	; (800832c <prvAddNewTaskToReadyList+0xc0>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d109      	bne.n	80082ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80082a6:	4b20      	ldr	r3, [pc, #128]	; (8008328 <prvAddNewTaskToReadyList+0xbc>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082b0:	429a      	cmp	r2, r3
 80082b2:	d802      	bhi.n	80082ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80082b4:	4a1c      	ldr	r2, [pc, #112]	; (8008328 <prvAddNewTaskToReadyList+0xbc>)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80082ba:	4b1d      	ldr	r3, [pc, #116]	; (8008330 <prvAddNewTaskToReadyList+0xc4>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	3301      	adds	r3, #1
 80082c0:	4a1b      	ldr	r2, [pc, #108]	; (8008330 <prvAddNewTaskToReadyList+0xc4>)
 80082c2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082c8:	2201      	movs	r2, #1
 80082ca:	409a      	lsls	r2, r3
 80082cc:	4b19      	ldr	r3, [pc, #100]	; (8008334 <prvAddNewTaskToReadyList+0xc8>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4313      	orrs	r3, r2
 80082d2:	4a18      	ldr	r2, [pc, #96]	; (8008334 <prvAddNewTaskToReadyList+0xc8>)
 80082d4:	6013      	str	r3, [r2, #0]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082da:	4613      	mov	r3, r2
 80082dc:	009b      	lsls	r3, r3, #2
 80082de:	4413      	add	r3, r2
 80082e0:	009b      	lsls	r3, r3, #2
 80082e2:	4a15      	ldr	r2, [pc, #84]	; (8008338 <prvAddNewTaskToReadyList+0xcc>)
 80082e4:	441a      	add	r2, r3
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	3304      	adds	r3, #4
 80082ea:	4619      	mov	r1, r3
 80082ec:	4610      	mov	r0, r2
 80082ee:	f7ff fe0c 	bl	8007f0a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80082f2:	f000 fd2f 	bl	8008d54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80082f6:	4b0d      	ldr	r3, [pc, #52]	; (800832c <prvAddNewTaskToReadyList+0xc0>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d00e      	beq.n	800831c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80082fe:	4b0a      	ldr	r3, [pc, #40]	; (8008328 <prvAddNewTaskToReadyList+0xbc>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008308:	429a      	cmp	r2, r3
 800830a:	d207      	bcs.n	800831c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800830c:	4b0b      	ldr	r3, [pc, #44]	; (800833c <prvAddNewTaskToReadyList+0xd0>)
 800830e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008312:	601a      	str	r2, [r3, #0]
 8008314:	f3bf 8f4f 	dsb	sy
 8008318:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800831c:	bf00      	nop
 800831e:	3708      	adds	r7, #8
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}
 8008324:	2000070c 	.word	0x2000070c
 8008328:	2000060c 	.word	0x2000060c
 800832c:	20000718 	.word	0x20000718
 8008330:	20000728 	.word	0x20000728
 8008334:	20000714 	.word	0x20000714
 8008338:	20000610 	.word	0x20000610
 800833c:	e000ed04 	.word	0xe000ed04

08008340 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008340:	b580      	push	{r7, lr}
 8008342:	b084      	sub	sp, #16
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008348:	2300      	movs	r3, #0
 800834a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d017      	beq.n	8008382 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008352:	4b13      	ldr	r3, [pc, #76]	; (80083a0 <vTaskDelay+0x60>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d00a      	beq.n	8008370 <vTaskDelay+0x30>
	__asm volatile
 800835a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800835e:	f383 8811 	msr	BASEPRI, r3
 8008362:	f3bf 8f6f 	isb	sy
 8008366:	f3bf 8f4f 	dsb	sy
 800836a:	60bb      	str	r3, [r7, #8]
}
 800836c:	bf00      	nop
 800836e:	e7fe      	b.n	800836e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008370:	f000 f87a 	bl	8008468 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008374:	2100      	movs	r1, #0
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f000 fb28 	bl	80089cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800837c:	f000 f882 	bl	8008484 <xTaskResumeAll>
 8008380:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d107      	bne.n	8008398 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008388:	4b06      	ldr	r3, [pc, #24]	; (80083a4 <vTaskDelay+0x64>)
 800838a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800838e:	601a      	str	r2, [r3, #0]
 8008390:	f3bf 8f4f 	dsb	sy
 8008394:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008398:	bf00      	nop
 800839a:	3710      	adds	r7, #16
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}
 80083a0:	20000734 	.word	0x20000734
 80083a4:	e000ed04 	.word	0xe000ed04

080083a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b08a      	sub	sp, #40	; 0x28
 80083ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80083ae:	2300      	movs	r3, #0
 80083b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80083b2:	2300      	movs	r3, #0
 80083b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80083b6:	463a      	mov	r2, r7
 80083b8:	1d39      	adds	r1, r7, #4
 80083ba:	f107 0308 	add.w	r3, r7, #8
 80083be:	4618      	mov	r0, r3
 80083c0:	f7f8 fdc0 	bl	8000f44 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80083c4:	6839      	ldr	r1, [r7, #0]
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	68ba      	ldr	r2, [r7, #8]
 80083ca:	9202      	str	r2, [sp, #8]
 80083cc:	9301      	str	r3, [sp, #4]
 80083ce:	2300      	movs	r3, #0
 80083d0:	9300      	str	r3, [sp, #0]
 80083d2:	2300      	movs	r3, #0
 80083d4:	460a      	mov	r2, r1
 80083d6:	491e      	ldr	r1, [pc, #120]	; (8008450 <vTaskStartScheduler+0xa8>)
 80083d8:	481e      	ldr	r0, [pc, #120]	; (8008454 <vTaskStartScheduler+0xac>)
 80083da:	f7ff fe1d 	bl	8008018 <xTaskCreateStatic>
 80083de:	4603      	mov	r3, r0
 80083e0:	4a1d      	ldr	r2, [pc, #116]	; (8008458 <vTaskStartScheduler+0xb0>)
 80083e2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80083e4:	4b1c      	ldr	r3, [pc, #112]	; (8008458 <vTaskStartScheduler+0xb0>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d002      	beq.n	80083f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80083ec:	2301      	movs	r3, #1
 80083ee:	617b      	str	r3, [r7, #20]
 80083f0:	e001      	b.n	80083f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80083f2:	2300      	movs	r3, #0
 80083f4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	2b01      	cmp	r3, #1
 80083fa:	d116      	bne.n	800842a <vTaskStartScheduler+0x82>
	__asm volatile
 80083fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008400:	f383 8811 	msr	BASEPRI, r3
 8008404:	f3bf 8f6f 	isb	sy
 8008408:	f3bf 8f4f 	dsb	sy
 800840c:	613b      	str	r3, [r7, #16]
}
 800840e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008410:	4b12      	ldr	r3, [pc, #72]	; (800845c <vTaskStartScheduler+0xb4>)
 8008412:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008416:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008418:	4b11      	ldr	r3, [pc, #68]	; (8008460 <vTaskStartScheduler+0xb8>)
 800841a:	2201      	movs	r2, #1
 800841c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800841e:	4b11      	ldr	r3, [pc, #68]	; (8008464 <vTaskStartScheduler+0xbc>)
 8008420:	2200      	movs	r2, #0
 8008422:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008424:	f000 fbc4 	bl	8008bb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008428:	e00e      	b.n	8008448 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008430:	d10a      	bne.n	8008448 <vTaskStartScheduler+0xa0>
	__asm volatile
 8008432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008436:	f383 8811 	msr	BASEPRI, r3
 800843a:	f3bf 8f6f 	isb	sy
 800843e:	f3bf 8f4f 	dsb	sy
 8008442:	60fb      	str	r3, [r7, #12]
}
 8008444:	bf00      	nop
 8008446:	e7fe      	b.n	8008446 <vTaskStartScheduler+0x9e>
}
 8008448:	bf00      	nop
 800844a:	3718      	adds	r7, #24
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}
 8008450:	0800c078 	.word	0x0800c078
 8008454:	080087e5 	.word	0x080087e5
 8008458:	20000730 	.word	0x20000730
 800845c:	2000072c 	.word	0x2000072c
 8008460:	20000718 	.word	0x20000718
 8008464:	20000710 	.word	0x20000710

08008468 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008468:	b480      	push	{r7}
 800846a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800846c:	4b04      	ldr	r3, [pc, #16]	; (8008480 <vTaskSuspendAll+0x18>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	3301      	adds	r3, #1
 8008472:	4a03      	ldr	r2, [pc, #12]	; (8008480 <vTaskSuspendAll+0x18>)
 8008474:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008476:	bf00      	nop
 8008478:	46bd      	mov	sp, r7
 800847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847e:	4770      	bx	lr
 8008480:	20000734 	.word	0x20000734

08008484 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b084      	sub	sp, #16
 8008488:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800848a:	2300      	movs	r3, #0
 800848c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800848e:	2300      	movs	r3, #0
 8008490:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008492:	4b41      	ldr	r3, [pc, #260]	; (8008598 <xTaskResumeAll+0x114>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d10a      	bne.n	80084b0 <xTaskResumeAll+0x2c>
	__asm volatile
 800849a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800849e:	f383 8811 	msr	BASEPRI, r3
 80084a2:	f3bf 8f6f 	isb	sy
 80084a6:	f3bf 8f4f 	dsb	sy
 80084aa:	603b      	str	r3, [r7, #0]
}
 80084ac:	bf00      	nop
 80084ae:	e7fe      	b.n	80084ae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80084b0:	f000 fc20 	bl	8008cf4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80084b4:	4b38      	ldr	r3, [pc, #224]	; (8008598 <xTaskResumeAll+0x114>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	3b01      	subs	r3, #1
 80084ba:	4a37      	ldr	r2, [pc, #220]	; (8008598 <xTaskResumeAll+0x114>)
 80084bc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80084be:	4b36      	ldr	r3, [pc, #216]	; (8008598 <xTaskResumeAll+0x114>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d161      	bne.n	800858a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80084c6:	4b35      	ldr	r3, [pc, #212]	; (800859c <xTaskResumeAll+0x118>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d05d      	beq.n	800858a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80084ce:	e02e      	b.n	800852e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084d0:	4b33      	ldr	r3, [pc, #204]	; (80085a0 <xTaskResumeAll+0x11c>)
 80084d2:	68db      	ldr	r3, [r3, #12]
 80084d4:	68db      	ldr	r3, [r3, #12]
 80084d6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	3318      	adds	r3, #24
 80084dc:	4618      	mov	r0, r3
 80084de:	f7ff fd71 	bl	8007fc4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	3304      	adds	r3, #4
 80084e6:	4618      	mov	r0, r3
 80084e8:	f7ff fd6c 	bl	8007fc4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084f0:	2201      	movs	r2, #1
 80084f2:	409a      	lsls	r2, r3
 80084f4:	4b2b      	ldr	r3, [pc, #172]	; (80085a4 <xTaskResumeAll+0x120>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4313      	orrs	r3, r2
 80084fa:	4a2a      	ldr	r2, [pc, #168]	; (80085a4 <xTaskResumeAll+0x120>)
 80084fc:	6013      	str	r3, [r2, #0]
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008502:	4613      	mov	r3, r2
 8008504:	009b      	lsls	r3, r3, #2
 8008506:	4413      	add	r3, r2
 8008508:	009b      	lsls	r3, r3, #2
 800850a:	4a27      	ldr	r2, [pc, #156]	; (80085a8 <xTaskResumeAll+0x124>)
 800850c:	441a      	add	r2, r3
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	3304      	adds	r3, #4
 8008512:	4619      	mov	r1, r3
 8008514:	4610      	mov	r0, r2
 8008516:	f7ff fcf8 	bl	8007f0a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800851e:	4b23      	ldr	r3, [pc, #140]	; (80085ac <xTaskResumeAll+0x128>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008524:	429a      	cmp	r2, r3
 8008526:	d302      	bcc.n	800852e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008528:	4b21      	ldr	r3, [pc, #132]	; (80085b0 <xTaskResumeAll+0x12c>)
 800852a:	2201      	movs	r2, #1
 800852c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800852e:	4b1c      	ldr	r3, [pc, #112]	; (80085a0 <xTaskResumeAll+0x11c>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d1cc      	bne.n	80084d0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d001      	beq.n	8008540 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800853c:	f000 fa08 	bl	8008950 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008540:	4b1c      	ldr	r3, [pc, #112]	; (80085b4 <xTaskResumeAll+0x130>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d010      	beq.n	800856e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800854c:	f000 f836 	bl	80085bc <xTaskIncrementTick>
 8008550:	4603      	mov	r3, r0
 8008552:	2b00      	cmp	r3, #0
 8008554:	d002      	beq.n	800855c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8008556:	4b16      	ldr	r3, [pc, #88]	; (80085b0 <xTaskResumeAll+0x12c>)
 8008558:	2201      	movs	r2, #1
 800855a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	3b01      	subs	r3, #1
 8008560:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d1f1      	bne.n	800854c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8008568:	4b12      	ldr	r3, [pc, #72]	; (80085b4 <xTaskResumeAll+0x130>)
 800856a:	2200      	movs	r2, #0
 800856c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800856e:	4b10      	ldr	r3, [pc, #64]	; (80085b0 <xTaskResumeAll+0x12c>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d009      	beq.n	800858a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008576:	2301      	movs	r3, #1
 8008578:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800857a:	4b0f      	ldr	r3, [pc, #60]	; (80085b8 <xTaskResumeAll+0x134>)
 800857c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008580:	601a      	str	r2, [r3, #0]
 8008582:	f3bf 8f4f 	dsb	sy
 8008586:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800858a:	f000 fbe3 	bl	8008d54 <vPortExitCritical>

	return xAlreadyYielded;
 800858e:	68bb      	ldr	r3, [r7, #8]
}
 8008590:	4618      	mov	r0, r3
 8008592:	3710      	adds	r7, #16
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}
 8008598:	20000734 	.word	0x20000734
 800859c:	2000070c 	.word	0x2000070c
 80085a0:	200006cc 	.word	0x200006cc
 80085a4:	20000714 	.word	0x20000714
 80085a8:	20000610 	.word	0x20000610
 80085ac:	2000060c 	.word	0x2000060c
 80085b0:	20000720 	.word	0x20000720
 80085b4:	2000071c 	.word	0x2000071c
 80085b8:	e000ed04 	.word	0xe000ed04

080085bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b086      	sub	sp, #24
 80085c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80085c2:	2300      	movs	r3, #0
 80085c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085c6:	4b4e      	ldr	r3, [pc, #312]	; (8008700 <xTaskIncrementTick+0x144>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	f040 808e 	bne.w	80086ec <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80085d0:	4b4c      	ldr	r3, [pc, #304]	; (8008704 <xTaskIncrementTick+0x148>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	3301      	adds	r3, #1
 80085d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80085d8:	4a4a      	ldr	r2, [pc, #296]	; (8008704 <xTaskIncrementTick+0x148>)
 80085da:	693b      	ldr	r3, [r7, #16]
 80085dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d120      	bne.n	8008626 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80085e4:	4b48      	ldr	r3, [pc, #288]	; (8008708 <xTaskIncrementTick+0x14c>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d00a      	beq.n	8008604 <xTaskIncrementTick+0x48>
	__asm volatile
 80085ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f2:	f383 8811 	msr	BASEPRI, r3
 80085f6:	f3bf 8f6f 	isb	sy
 80085fa:	f3bf 8f4f 	dsb	sy
 80085fe:	603b      	str	r3, [r7, #0]
}
 8008600:	bf00      	nop
 8008602:	e7fe      	b.n	8008602 <xTaskIncrementTick+0x46>
 8008604:	4b40      	ldr	r3, [pc, #256]	; (8008708 <xTaskIncrementTick+0x14c>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	60fb      	str	r3, [r7, #12]
 800860a:	4b40      	ldr	r3, [pc, #256]	; (800870c <xTaskIncrementTick+0x150>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4a3e      	ldr	r2, [pc, #248]	; (8008708 <xTaskIncrementTick+0x14c>)
 8008610:	6013      	str	r3, [r2, #0]
 8008612:	4a3e      	ldr	r2, [pc, #248]	; (800870c <xTaskIncrementTick+0x150>)
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	6013      	str	r3, [r2, #0]
 8008618:	4b3d      	ldr	r3, [pc, #244]	; (8008710 <xTaskIncrementTick+0x154>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	3301      	adds	r3, #1
 800861e:	4a3c      	ldr	r2, [pc, #240]	; (8008710 <xTaskIncrementTick+0x154>)
 8008620:	6013      	str	r3, [r2, #0]
 8008622:	f000 f995 	bl	8008950 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008626:	4b3b      	ldr	r3, [pc, #236]	; (8008714 <xTaskIncrementTick+0x158>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	693a      	ldr	r2, [r7, #16]
 800862c:	429a      	cmp	r2, r3
 800862e:	d348      	bcc.n	80086c2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008630:	4b35      	ldr	r3, [pc, #212]	; (8008708 <xTaskIncrementTick+0x14c>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d104      	bne.n	8008644 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800863a:	4b36      	ldr	r3, [pc, #216]	; (8008714 <xTaskIncrementTick+0x158>)
 800863c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008640:	601a      	str	r2, [r3, #0]
					break;
 8008642:	e03e      	b.n	80086c2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008644:	4b30      	ldr	r3, [pc, #192]	; (8008708 <xTaskIncrementTick+0x14c>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	68db      	ldr	r3, [r3, #12]
 800864a:	68db      	ldr	r3, [r3, #12]
 800864c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	685b      	ldr	r3, [r3, #4]
 8008652:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008654:	693a      	ldr	r2, [r7, #16]
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	429a      	cmp	r2, r3
 800865a:	d203      	bcs.n	8008664 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800865c:	4a2d      	ldr	r2, [pc, #180]	; (8008714 <xTaskIncrementTick+0x158>)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008662:	e02e      	b.n	80086c2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	3304      	adds	r3, #4
 8008668:	4618      	mov	r0, r3
 800866a:	f7ff fcab 	bl	8007fc4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008672:	2b00      	cmp	r3, #0
 8008674:	d004      	beq.n	8008680 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	3318      	adds	r3, #24
 800867a:	4618      	mov	r0, r3
 800867c:	f7ff fca2 	bl	8007fc4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008684:	2201      	movs	r2, #1
 8008686:	409a      	lsls	r2, r3
 8008688:	4b23      	ldr	r3, [pc, #140]	; (8008718 <xTaskIncrementTick+0x15c>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4313      	orrs	r3, r2
 800868e:	4a22      	ldr	r2, [pc, #136]	; (8008718 <xTaskIncrementTick+0x15c>)
 8008690:	6013      	str	r3, [r2, #0]
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008696:	4613      	mov	r3, r2
 8008698:	009b      	lsls	r3, r3, #2
 800869a:	4413      	add	r3, r2
 800869c:	009b      	lsls	r3, r3, #2
 800869e:	4a1f      	ldr	r2, [pc, #124]	; (800871c <xTaskIncrementTick+0x160>)
 80086a0:	441a      	add	r2, r3
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	3304      	adds	r3, #4
 80086a6:	4619      	mov	r1, r3
 80086a8:	4610      	mov	r0, r2
 80086aa:	f7ff fc2e 	bl	8007f0a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086b2:	4b1b      	ldr	r3, [pc, #108]	; (8008720 <xTaskIncrementTick+0x164>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086b8:	429a      	cmp	r2, r3
 80086ba:	d3b9      	bcc.n	8008630 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80086bc:	2301      	movs	r3, #1
 80086be:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80086c0:	e7b6      	b.n	8008630 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80086c2:	4b17      	ldr	r3, [pc, #92]	; (8008720 <xTaskIncrementTick+0x164>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086c8:	4914      	ldr	r1, [pc, #80]	; (800871c <xTaskIncrementTick+0x160>)
 80086ca:	4613      	mov	r3, r2
 80086cc:	009b      	lsls	r3, r3, #2
 80086ce:	4413      	add	r3, r2
 80086d0:	009b      	lsls	r3, r3, #2
 80086d2:	440b      	add	r3, r1
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	2b01      	cmp	r3, #1
 80086d8:	d901      	bls.n	80086de <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80086da:	2301      	movs	r3, #1
 80086dc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80086de:	4b11      	ldr	r3, [pc, #68]	; (8008724 <xTaskIncrementTick+0x168>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d007      	beq.n	80086f6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80086e6:	2301      	movs	r3, #1
 80086e8:	617b      	str	r3, [r7, #20]
 80086ea:	e004      	b.n	80086f6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80086ec:	4b0e      	ldr	r3, [pc, #56]	; (8008728 <xTaskIncrementTick+0x16c>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	3301      	adds	r3, #1
 80086f2:	4a0d      	ldr	r2, [pc, #52]	; (8008728 <xTaskIncrementTick+0x16c>)
 80086f4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80086f6:	697b      	ldr	r3, [r7, #20]
}
 80086f8:	4618      	mov	r0, r3
 80086fa:	3718      	adds	r7, #24
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}
 8008700:	20000734 	.word	0x20000734
 8008704:	20000710 	.word	0x20000710
 8008708:	200006c4 	.word	0x200006c4
 800870c:	200006c8 	.word	0x200006c8
 8008710:	20000724 	.word	0x20000724
 8008714:	2000072c 	.word	0x2000072c
 8008718:	20000714 	.word	0x20000714
 800871c:	20000610 	.word	0x20000610
 8008720:	2000060c 	.word	0x2000060c
 8008724:	20000720 	.word	0x20000720
 8008728:	2000071c 	.word	0x2000071c

0800872c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800872c:	b480      	push	{r7}
 800872e:	b087      	sub	sp, #28
 8008730:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008732:	4b27      	ldr	r3, [pc, #156]	; (80087d0 <vTaskSwitchContext+0xa4>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d003      	beq.n	8008742 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800873a:	4b26      	ldr	r3, [pc, #152]	; (80087d4 <vTaskSwitchContext+0xa8>)
 800873c:	2201      	movs	r2, #1
 800873e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008740:	e03f      	b.n	80087c2 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8008742:	4b24      	ldr	r3, [pc, #144]	; (80087d4 <vTaskSwitchContext+0xa8>)
 8008744:	2200      	movs	r2, #0
 8008746:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008748:	4b23      	ldr	r3, [pc, #140]	; (80087d8 <vTaskSwitchContext+0xac>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	fab3 f383 	clz	r3, r3
 8008754:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008756:	7afb      	ldrb	r3, [r7, #11]
 8008758:	f1c3 031f 	rsb	r3, r3, #31
 800875c:	617b      	str	r3, [r7, #20]
 800875e:	491f      	ldr	r1, [pc, #124]	; (80087dc <vTaskSwitchContext+0xb0>)
 8008760:	697a      	ldr	r2, [r7, #20]
 8008762:	4613      	mov	r3, r2
 8008764:	009b      	lsls	r3, r3, #2
 8008766:	4413      	add	r3, r2
 8008768:	009b      	lsls	r3, r3, #2
 800876a:	440b      	add	r3, r1
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d10a      	bne.n	8008788 <vTaskSwitchContext+0x5c>
	__asm volatile
 8008772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008776:	f383 8811 	msr	BASEPRI, r3
 800877a:	f3bf 8f6f 	isb	sy
 800877e:	f3bf 8f4f 	dsb	sy
 8008782:	607b      	str	r3, [r7, #4]
}
 8008784:	bf00      	nop
 8008786:	e7fe      	b.n	8008786 <vTaskSwitchContext+0x5a>
 8008788:	697a      	ldr	r2, [r7, #20]
 800878a:	4613      	mov	r3, r2
 800878c:	009b      	lsls	r3, r3, #2
 800878e:	4413      	add	r3, r2
 8008790:	009b      	lsls	r3, r3, #2
 8008792:	4a12      	ldr	r2, [pc, #72]	; (80087dc <vTaskSwitchContext+0xb0>)
 8008794:	4413      	add	r3, r2
 8008796:	613b      	str	r3, [r7, #16]
 8008798:	693b      	ldr	r3, [r7, #16]
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	685a      	ldr	r2, [r3, #4]
 800879e:	693b      	ldr	r3, [r7, #16]
 80087a0:	605a      	str	r2, [r3, #4]
 80087a2:	693b      	ldr	r3, [r7, #16]
 80087a4:	685a      	ldr	r2, [r3, #4]
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	3308      	adds	r3, #8
 80087aa:	429a      	cmp	r2, r3
 80087ac:	d104      	bne.n	80087b8 <vTaskSwitchContext+0x8c>
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	685b      	ldr	r3, [r3, #4]
 80087b2:	685a      	ldr	r2, [r3, #4]
 80087b4:	693b      	ldr	r3, [r7, #16]
 80087b6:	605a      	str	r2, [r3, #4]
 80087b8:	693b      	ldr	r3, [r7, #16]
 80087ba:	685b      	ldr	r3, [r3, #4]
 80087bc:	68db      	ldr	r3, [r3, #12]
 80087be:	4a08      	ldr	r2, [pc, #32]	; (80087e0 <vTaskSwitchContext+0xb4>)
 80087c0:	6013      	str	r3, [r2, #0]
}
 80087c2:	bf00      	nop
 80087c4:	371c      	adds	r7, #28
 80087c6:	46bd      	mov	sp, r7
 80087c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087cc:	4770      	bx	lr
 80087ce:	bf00      	nop
 80087d0:	20000734 	.word	0x20000734
 80087d4:	20000720 	.word	0x20000720
 80087d8:	20000714 	.word	0x20000714
 80087dc:	20000610 	.word	0x20000610
 80087e0:	2000060c 	.word	0x2000060c

080087e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b082      	sub	sp, #8
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80087ec:	f000 f852 	bl	8008894 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80087f0:	4b06      	ldr	r3, [pc, #24]	; (800880c <prvIdleTask+0x28>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	2b01      	cmp	r3, #1
 80087f6:	d9f9      	bls.n	80087ec <prvIdleTask+0x8>
			{
				taskYIELD();
 80087f8:	4b05      	ldr	r3, [pc, #20]	; (8008810 <prvIdleTask+0x2c>)
 80087fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087fe:	601a      	str	r2, [r3, #0]
 8008800:	f3bf 8f4f 	dsb	sy
 8008804:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008808:	e7f0      	b.n	80087ec <prvIdleTask+0x8>
 800880a:	bf00      	nop
 800880c:	20000610 	.word	0x20000610
 8008810:	e000ed04 	.word	0xe000ed04

08008814 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b082      	sub	sp, #8
 8008818:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800881a:	2300      	movs	r3, #0
 800881c:	607b      	str	r3, [r7, #4]
 800881e:	e00c      	b.n	800883a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008820:	687a      	ldr	r2, [r7, #4]
 8008822:	4613      	mov	r3, r2
 8008824:	009b      	lsls	r3, r3, #2
 8008826:	4413      	add	r3, r2
 8008828:	009b      	lsls	r3, r3, #2
 800882a:	4a12      	ldr	r2, [pc, #72]	; (8008874 <prvInitialiseTaskLists+0x60>)
 800882c:	4413      	add	r3, r2
 800882e:	4618      	mov	r0, r3
 8008830:	f7ff fb3e 	bl	8007eb0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	3301      	adds	r3, #1
 8008838:	607b      	str	r3, [r7, #4]
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2b06      	cmp	r3, #6
 800883e:	d9ef      	bls.n	8008820 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008840:	480d      	ldr	r0, [pc, #52]	; (8008878 <prvInitialiseTaskLists+0x64>)
 8008842:	f7ff fb35 	bl	8007eb0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008846:	480d      	ldr	r0, [pc, #52]	; (800887c <prvInitialiseTaskLists+0x68>)
 8008848:	f7ff fb32 	bl	8007eb0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800884c:	480c      	ldr	r0, [pc, #48]	; (8008880 <prvInitialiseTaskLists+0x6c>)
 800884e:	f7ff fb2f 	bl	8007eb0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008852:	480c      	ldr	r0, [pc, #48]	; (8008884 <prvInitialiseTaskLists+0x70>)
 8008854:	f7ff fb2c 	bl	8007eb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008858:	480b      	ldr	r0, [pc, #44]	; (8008888 <prvInitialiseTaskLists+0x74>)
 800885a:	f7ff fb29 	bl	8007eb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800885e:	4b0b      	ldr	r3, [pc, #44]	; (800888c <prvInitialiseTaskLists+0x78>)
 8008860:	4a05      	ldr	r2, [pc, #20]	; (8008878 <prvInitialiseTaskLists+0x64>)
 8008862:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008864:	4b0a      	ldr	r3, [pc, #40]	; (8008890 <prvInitialiseTaskLists+0x7c>)
 8008866:	4a05      	ldr	r2, [pc, #20]	; (800887c <prvInitialiseTaskLists+0x68>)
 8008868:	601a      	str	r2, [r3, #0]
}
 800886a:	bf00      	nop
 800886c:	3708      	adds	r7, #8
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}
 8008872:	bf00      	nop
 8008874:	20000610 	.word	0x20000610
 8008878:	2000069c 	.word	0x2000069c
 800887c:	200006b0 	.word	0x200006b0
 8008880:	200006cc 	.word	0x200006cc
 8008884:	200006e0 	.word	0x200006e0
 8008888:	200006f8 	.word	0x200006f8
 800888c:	200006c4 	.word	0x200006c4
 8008890:	200006c8 	.word	0x200006c8

08008894 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b082      	sub	sp, #8
 8008898:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800889a:	e019      	b.n	80088d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800889c:	f000 fa2a 	bl	8008cf4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088a0:	4b10      	ldr	r3, [pc, #64]	; (80088e4 <prvCheckTasksWaitingTermination+0x50>)
 80088a2:	68db      	ldr	r3, [r3, #12]
 80088a4:	68db      	ldr	r3, [r3, #12]
 80088a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	3304      	adds	r3, #4
 80088ac:	4618      	mov	r0, r3
 80088ae:	f7ff fb89 	bl	8007fc4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80088b2:	4b0d      	ldr	r3, [pc, #52]	; (80088e8 <prvCheckTasksWaitingTermination+0x54>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	3b01      	subs	r3, #1
 80088b8:	4a0b      	ldr	r2, [pc, #44]	; (80088e8 <prvCheckTasksWaitingTermination+0x54>)
 80088ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80088bc:	4b0b      	ldr	r3, [pc, #44]	; (80088ec <prvCheckTasksWaitingTermination+0x58>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	3b01      	subs	r3, #1
 80088c2:	4a0a      	ldr	r2, [pc, #40]	; (80088ec <prvCheckTasksWaitingTermination+0x58>)
 80088c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80088c6:	f000 fa45 	bl	8008d54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f000 f810 	bl	80088f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80088d0:	4b06      	ldr	r3, [pc, #24]	; (80088ec <prvCheckTasksWaitingTermination+0x58>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d1e1      	bne.n	800889c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80088d8:	bf00      	nop
 80088da:	bf00      	nop
 80088dc:	3708      	adds	r7, #8
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}
 80088e2:	bf00      	nop
 80088e4:	200006e0 	.word	0x200006e0
 80088e8:	2000070c 	.word	0x2000070c
 80088ec:	200006f4 	.word	0x200006f4

080088f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b084      	sub	sp, #16
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d108      	bne.n	8008914 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008906:	4618      	mov	r0, r3
 8008908:	f000 fba2 	bl	8009050 <vPortFree>
				vPortFree( pxTCB );
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f000 fb9f 	bl	8009050 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008912:	e018      	b.n	8008946 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800891a:	2b01      	cmp	r3, #1
 800891c:	d103      	bne.n	8008926 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f000 fb96 	bl	8009050 <vPortFree>
	}
 8008924:	e00f      	b.n	8008946 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800892c:	2b02      	cmp	r3, #2
 800892e:	d00a      	beq.n	8008946 <prvDeleteTCB+0x56>
	__asm volatile
 8008930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008934:	f383 8811 	msr	BASEPRI, r3
 8008938:	f3bf 8f6f 	isb	sy
 800893c:	f3bf 8f4f 	dsb	sy
 8008940:	60fb      	str	r3, [r7, #12]
}
 8008942:	bf00      	nop
 8008944:	e7fe      	b.n	8008944 <prvDeleteTCB+0x54>
	}
 8008946:	bf00      	nop
 8008948:	3710      	adds	r7, #16
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}
	...

08008950 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008950:	b480      	push	{r7}
 8008952:	b083      	sub	sp, #12
 8008954:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008956:	4b0c      	ldr	r3, [pc, #48]	; (8008988 <prvResetNextTaskUnblockTime+0x38>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d104      	bne.n	800896a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008960:	4b0a      	ldr	r3, [pc, #40]	; (800898c <prvResetNextTaskUnblockTime+0x3c>)
 8008962:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008966:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008968:	e008      	b.n	800897c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800896a:	4b07      	ldr	r3, [pc, #28]	; (8008988 <prvResetNextTaskUnblockTime+0x38>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	68db      	ldr	r3, [r3, #12]
 8008970:	68db      	ldr	r3, [r3, #12]
 8008972:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	685b      	ldr	r3, [r3, #4]
 8008978:	4a04      	ldr	r2, [pc, #16]	; (800898c <prvResetNextTaskUnblockTime+0x3c>)
 800897a:	6013      	str	r3, [r2, #0]
}
 800897c:	bf00      	nop
 800897e:	370c      	adds	r7, #12
 8008980:	46bd      	mov	sp, r7
 8008982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008986:	4770      	bx	lr
 8008988:	200006c4 	.word	0x200006c4
 800898c:	2000072c 	.word	0x2000072c

08008990 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008990:	b480      	push	{r7}
 8008992:	b083      	sub	sp, #12
 8008994:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008996:	4b0b      	ldr	r3, [pc, #44]	; (80089c4 <xTaskGetSchedulerState+0x34>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d102      	bne.n	80089a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800899e:	2301      	movs	r3, #1
 80089a0:	607b      	str	r3, [r7, #4]
 80089a2:	e008      	b.n	80089b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80089a4:	4b08      	ldr	r3, [pc, #32]	; (80089c8 <xTaskGetSchedulerState+0x38>)
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d102      	bne.n	80089b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80089ac:	2302      	movs	r3, #2
 80089ae:	607b      	str	r3, [r7, #4]
 80089b0:	e001      	b.n	80089b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80089b2:	2300      	movs	r3, #0
 80089b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80089b6:	687b      	ldr	r3, [r7, #4]
	}
 80089b8:	4618      	mov	r0, r3
 80089ba:	370c      	adds	r7, #12
 80089bc:	46bd      	mov	sp, r7
 80089be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c2:	4770      	bx	lr
 80089c4:	20000718 	.word	0x20000718
 80089c8:	20000734 	.word	0x20000734

080089cc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b084      	sub	sp, #16
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
 80089d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80089d6:	4b29      	ldr	r3, [pc, #164]	; (8008a7c <prvAddCurrentTaskToDelayedList+0xb0>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80089dc:	4b28      	ldr	r3, [pc, #160]	; (8008a80 <prvAddCurrentTaskToDelayedList+0xb4>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	3304      	adds	r3, #4
 80089e2:	4618      	mov	r0, r3
 80089e4:	f7ff faee 	bl	8007fc4 <uxListRemove>
 80089e8:	4603      	mov	r3, r0
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d10b      	bne.n	8008a06 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80089ee:	4b24      	ldr	r3, [pc, #144]	; (8008a80 <prvAddCurrentTaskToDelayedList+0xb4>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089f4:	2201      	movs	r2, #1
 80089f6:	fa02 f303 	lsl.w	r3, r2, r3
 80089fa:	43da      	mvns	r2, r3
 80089fc:	4b21      	ldr	r3, [pc, #132]	; (8008a84 <prvAddCurrentTaskToDelayedList+0xb8>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4013      	ands	r3, r2
 8008a02:	4a20      	ldr	r2, [pc, #128]	; (8008a84 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008a04:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a0c:	d10a      	bne.n	8008a24 <prvAddCurrentTaskToDelayedList+0x58>
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d007      	beq.n	8008a24 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a14:	4b1a      	ldr	r3, [pc, #104]	; (8008a80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	3304      	adds	r3, #4
 8008a1a:	4619      	mov	r1, r3
 8008a1c:	481a      	ldr	r0, [pc, #104]	; (8008a88 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008a1e:	f7ff fa74 	bl	8007f0a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008a22:	e026      	b.n	8008a72 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008a24:	68fa      	ldr	r2, [r7, #12]
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	4413      	add	r3, r2
 8008a2a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008a2c:	4b14      	ldr	r3, [pc, #80]	; (8008a80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	68ba      	ldr	r2, [r7, #8]
 8008a32:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008a34:	68ba      	ldr	r2, [r7, #8]
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	429a      	cmp	r2, r3
 8008a3a:	d209      	bcs.n	8008a50 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a3c:	4b13      	ldr	r3, [pc, #76]	; (8008a8c <prvAddCurrentTaskToDelayedList+0xc0>)
 8008a3e:	681a      	ldr	r2, [r3, #0]
 8008a40:	4b0f      	ldr	r3, [pc, #60]	; (8008a80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	3304      	adds	r3, #4
 8008a46:	4619      	mov	r1, r3
 8008a48:	4610      	mov	r0, r2
 8008a4a:	f7ff fa82 	bl	8007f52 <vListInsert>
}
 8008a4e:	e010      	b.n	8008a72 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a50:	4b0f      	ldr	r3, [pc, #60]	; (8008a90 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008a52:	681a      	ldr	r2, [r3, #0]
 8008a54:	4b0a      	ldr	r3, [pc, #40]	; (8008a80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	3304      	adds	r3, #4
 8008a5a:	4619      	mov	r1, r3
 8008a5c:	4610      	mov	r0, r2
 8008a5e:	f7ff fa78 	bl	8007f52 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008a62:	4b0c      	ldr	r3, [pc, #48]	; (8008a94 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	68ba      	ldr	r2, [r7, #8]
 8008a68:	429a      	cmp	r2, r3
 8008a6a:	d202      	bcs.n	8008a72 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008a6c:	4a09      	ldr	r2, [pc, #36]	; (8008a94 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	6013      	str	r3, [r2, #0]
}
 8008a72:	bf00      	nop
 8008a74:	3710      	adds	r7, #16
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}
 8008a7a:	bf00      	nop
 8008a7c:	20000710 	.word	0x20000710
 8008a80:	2000060c 	.word	0x2000060c
 8008a84:	20000714 	.word	0x20000714
 8008a88:	200006f8 	.word	0x200006f8
 8008a8c:	200006c8 	.word	0x200006c8
 8008a90:	200006c4 	.word	0x200006c4
 8008a94:	2000072c 	.word	0x2000072c

08008a98 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b085      	sub	sp, #20
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	60f8      	str	r0, [r7, #12]
 8008aa0:	60b9      	str	r1, [r7, #8]
 8008aa2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	3b04      	subs	r3, #4
 8008aa8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008ab0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	3b04      	subs	r3, #4
 8008ab6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	f023 0201 	bic.w	r2, r3, #1
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	3b04      	subs	r3, #4
 8008ac6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008ac8:	4a0c      	ldr	r2, [pc, #48]	; (8008afc <pxPortInitialiseStack+0x64>)
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	3b14      	subs	r3, #20
 8008ad2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008ad4:	687a      	ldr	r2, [r7, #4]
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	3b04      	subs	r3, #4
 8008ade:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	f06f 0202 	mvn.w	r2, #2
 8008ae6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	3b20      	subs	r3, #32
 8008aec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008aee:	68fb      	ldr	r3, [r7, #12]
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	3714      	adds	r7, #20
 8008af4:	46bd      	mov	sp, r7
 8008af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afa:	4770      	bx	lr
 8008afc:	08008b01 	.word	0x08008b01

08008b00 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008b00:	b480      	push	{r7}
 8008b02:	b085      	sub	sp, #20
 8008b04:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008b06:	2300      	movs	r3, #0
 8008b08:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008b0a:	4b12      	ldr	r3, [pc, #72]	; (8008b54 <prvTaskExitError+0x54>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b12:	d00a      	beq.n	8008b2a <prvTaskExitError+0x2a>
	__asm volatile
 8008b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b18:	f383 8811 	msr	BASEPRI, r3
 8008b1c:	f3bf 8f6f 	isb	sy
 8008b20:	f3bf 8f4f 	dsb	sy
 8008b24:	60fb      	str	r3, [r7, #12]
}
 8008b26:	bf00      	nop
 8008b28:	e7fe      	b.n	8008b28 <prvTaskExitError+0x28>
	__asm volatile
 8008b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b2e:	f383 8811 	msr	BASEPRI, r3
 8008b32:	f3bf 8f6f 	isb	sy
 8008b36:	f3bf 8f4f 	dsb	sy
 8008b3a:	60bb      	str	r3, [r7, #8]
}
 8008b3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008b3e:	bf00      	nop
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d0fc      	beq.n	8008b40 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008b46:	bf00      	nop
 8008b48:	bf00      	nop
 8008b4a:	3714      	adds	r7, #20
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b52:	4770      	bx	lr
 8008b54:	2000000c 	.word	0x2000000c
	...

08008b60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008b60:	4b07      	ldr	r3, [pc, #28]	; (8008b80 <pxCurrentTCBConst2>)
 8008b62:	6819      	ldr	r1, [r3, #0]
 8008b64:	6808      	ldr	r0, [r1, #0]
 8008b66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b6a:	f380 8809 	msr	PSP, r0
 8008b6e:	f3bf 8f6f 	isb	sy
 8008b72:	f04f 0000 	mov.w	r0, #0
 8008b76:	f380 8811 	msr	BASEPRI, r0
 8008b7a:	4770      	bx	lr
 8008b7c:	f3af 8000 	nop.w

08008b80 <pxCurrentTCBConst2>:
 8008b80:	2000060c 	.word	0x2000060c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008b84:	bf00      	nop
 8008b86:	bf00      	nop

08008b88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008b88:	4808      	ldr	r0, [pc, #32]	; (8008bac <prvPortStartFirstTask+0x24>)
 8008b8a:	6800      	ldr	r0, [r0, #0]
 8008b8c:	6800      	ldr	r0, [r0, #0]
 8008b8e:	f380 8808 	msr	MSP, r0
 8008b92:	f04f 0000 	mov.w	r0, #0
 8008b96:	f380 8814 	msr	CONTROL, r0
 8008b9a:	b662      	cpsie	i
 8008b9c:	b661      	cpsie	f
 8008b9e:	f3bf 8f4f 	dsb	sy
 8008ba2:	f3bf 8f6f 	isb	sy
 8008ba6:	df00      	svc	0
 8008ba8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008baa:	bf00      	nop
 8008bac:	e000ed08 	.word	0xe000ed08

08008bb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b086      	sub	sp, #24
 8008bb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008bb6:	4b46      	ldr	r3, [pc, #280]	; (8008cd0 <xPortStartScheduler+0x120>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	4a46      	ldr	r2, [pc, #280]	; (8008cd4 <xPortStartScheduler+0x124>)
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d10a      	bne.n	8008bd6 <xPortStartScheduler+0x26>
	__asm volatile
 8008bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bc4:	f383 8811 	msr	BASEPRI, r3
 8008bc8:	f3bf 8f6f 	isb	sy
 8008bcc:	f3bf 8f4f 	dsb	sy
 8008bd0:	613b      	str	r3, [r7, #16]
}
 8008bd2:	bf00      	nop
 8008bd4:	e7fe      	b.n	8008bd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008bd6:	4b3e      	ldr	r3, [pc, #248]	; (8008cd0 <xPortStartScheduler+0x120>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	4a3f      	ldr	r2, [pc, #252]	; (8008cd8 <xPortStartScheduler+0x128>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d10a      	bne.n	8008bf6 <xPortStartScheduler+0x46>
	__asm volatile
 8008be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008be4:	f383 8811 	msr	BASEPRI, r3
 8008be8:	f3bf 8f6f 	isb	sy
 8008bec:	f3bf 8f4f 	dsb	sy
 8008bf0:	60fb      	str	r3, [r7, #12]
}
 8008bf2:	bf00      	nop
 8008bf4:	e7fe      	b.n	8008bf4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008bf6:	4b39      	ldr	r3, [pc, #228]	; (8008cdc <xPortStartScheduler+0x12c>)
 8008bf8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008bfa:	697b      	ldr	r3, [r7, #20]
 8008bfc:	781b      	ldrb	r3, [r3, #0]
 8008bfe:	b2db      	uxtb	r3, r3
 8008c00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	22ff      	movs	r2, #255	; 0xff
 8008c06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	781b      	ldrb	r3, [r3, #0]
 8008c0c:	b2db      	uxtb	r3, r3
 8008c0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008c10:	78fb      	ldrb	r3, [r7, #3]
 8008c12:	b2db      	uxtb	r3, r3
 8008c14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008c18:	b2da      	uxtb	r2, r3
 8008c1a:	4b31      	ldr	r3, [pc, #196]	; (8008ce0 <xPortStartScheduler+0x130>)
 8008c1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008c1e:	4b31      	ldr	r3, [pc, #196]	; (8008ce4 <xPortStartScheduler+0x134>)
 8008c20:	2207      	movs	r2, #7
 8008c22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008c24:	e009      	b.n	8008c3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008c26:	4b2f      	ldr	r3, [pc, #188]	; (8008ce4 <xPortStartScheduler+0x134>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	3b01      	subs	r3, #1
 8008c2c:	4a2d      	ldr	r2, [pc, #180]	; (8008ce4 <xPortStartScheduler+0x134>)
 8008c2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008c30:	78fb      	ldrb	r3, [r7, #3]
 8008c32:	b2db      	uxtb	r3, r3
 8008c34:	005b      	lsls	r3, r3, #1
 8008c36:	b2db      	uxtb	r3, r3
 8008c38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008c3a:	78fb      	ldrb	r3, [r7, #3]
 8008c3c:	b2db      	uxtb	r3, r3
 8008c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c42:	2b80      	cmp	r3, #128	; 0x80
 8008c44:	d0ef      	beq.n	8008c26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008c46:	4b27      	ldr	r3, [pc, #156]	; (8008ce4 <xPortStartScheduler+0x134>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f1c3 0307 	rsb	r3, r3, #7
 8008c4e:	2b04      	cmp	r3, #4
 8008c50:	d00a      	beq.n	8008c68 <xPortStartScheduler+0xb8>
	__asm volatile
 8008c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c56:	f383 8811 	msr	BASEPRI, r3
 8008c5a:	f3bf 8f6f 	isb	sy
 8008c5e:	f3bf 8f4f 	dsb	sy
 8008c62:	60bb      	str	r3, [r7, #8]
}
 8008c64:	bf00      	nop
 8008c66:	e7fe      	b.n	8008c66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008c68:	4b1e      	ldr	r3, [pc, #120]	; (8008ce4 <xPortStartScheduler+0x134>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	021b      	lsls	r3, r3, #8
 8008c6e:	4a1d      	ldr	r2, [pc, #116]	; (8008ce4 <xPortStartScheduler+0x134>)
 8008c70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008c72:	4b1c      	ldr	r3, [pc, #112]	; (8008ce4 <xPortStartScheduler+0x134>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008c7a:	4a1a      	ldr	r2, [pc, #104]	; (8008ce4 <xPortStartScheduler+0x134>)
 8008c7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	b2da      	uxtb	r2, r3
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008c86:	4b18      	ldr	r3, [pc, #96]	; (8008ce8 <xPortStartScheduler+0x138>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	4a17      	ldr	r2, [pc, #92]	; (8008ce8 <xPortStartScheduler+0x138>)
 8008c8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008c90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008c92:	4b15      	ldr	r3, [pc, #84]	; (8008ce8 <xPortStartScheduler+0x138>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	4a14      	ldr	r2, [pc, #80]	; (8008ce8 <xPortStartScheduler+0x138>)
 8008c98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008c9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008c9e:	f000 f8dd 	bl	8008e5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008ca2:	4b12      	ldr	r3, [pc, #72]	; (8008cec <xPortStartScheduler+0x13c>)
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008ca8:	f000 f8fc 	bl	8008ea4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008cac:	4b10      	ldr	r3, [pc, #64]	; (8008cf0 <xPortStartScheduler+0x140>)
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4a0f      	ldr	r2, [pc, #60]	; (8008cf0 <xPortStartScheduler+0x140>)
 8008cb2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008cb6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008cb8:	f7ff ff66 	bl	8008b88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008cbc:	f7ff fd36 	bl	800872c <vTaskSwitchContext>
	prvTaskExitError();
 8008cc0:	f7ff ff1e 	bl	8008b00 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008cc4:	2300      	movs	r3, #0
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3718      	adds	r7, #24
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}
 8008cce:	bf00      	nop
 8008cd0:	e000ed00 	.word	0xe000ed00
 8008cd4:	410fc271 	.word	0x410fc271
 8008cd8:	410fc270 	.word	0x410fc270
 8008cdc:	e000e400 	.word	0xe000e400
 8008ce0:	20000738 	.word	0x20000738
 8008ce4:	2000073c 	.word	0x2000073c
 8008ce8:	e000ed20 	.word	0xe000ed20
 8008cec:	2000000c 	.word	0x2000000c
 8008cf0:	e000ef34 	.word	0xe000ef34

08008cf4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b083      	sub	sp, #12
 8008cf8:	af00      	add	r7, sp, #0
	__asm volatile
 8008cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cfe:	f383 8811 	msr	BASEPRI, r3
 8008d02:	f3bf 8f6f 	isb	sy
 8008d06:	f3bf 8f4f 	dsb	sy
 8008d0a:	607b      	str	r3, [r7, #4]
}
 8008d0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008d0e:	4b0f      	ldr	r3, [pc, #60]	; (8008d4c <vPortEnterCritical+0x58>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	3301      	adds	r3, #1
 8008d14:	4a0d      	ldr	r2, [pc, #52]	; (8008d4c <vPortEnterCritical+0x58>)
 8008d16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008d18:	4b0c      	ldr	r3, [pc, #48]	; (8008d4c <vPortEnterCritical+0x58>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	2b01      	cmp	r3, #1
 8008d1e:	d10f      	bne.n	8008d40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008d20:	4b0b      	ldr	r3, [pc, #44]	; (8008d50 <vPortEnterCritical+0x5c>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	b2db      	uxtb	r3, r3
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d00a      	beq.n	8008d40 <vPortEnterCritical+0x4c>
	__asm volatile
 8008d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d2e:	f383 8811 	msr	BASEPRI, r3
 8008d32:	f3bf 8f6f 	isb	sy
 8008d36:	f3bf 8f4f 	dsb	sy
 8008d3a:	603b      	str	r3, [r7, #0]
}
 8008d3c:	bf00      	nop
 8008d3e:	e7fe      	b.n	8008d3e <vPortEnterCritical+0x4a>
	}
}
 8008d40:	bf00      	nop
 8008d42:	370c      	adds	r7, #12
 8008d44:	46bd      	mov	sp, r7
 8008d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4a:	4770      	bx	lr
 8008d4c:	2000000c 	.word	0x2000000c
 8008d50:	e000ed04 	.word	0xe000ed04

08008d54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008d54:	b480      	push	{r7}
 8008d56:	b083      	sub	sp, #12
 8008d58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008d5a:	4b12      	ldr	r3, [pc, #72]	; (8008da4 <vPortExitCritical+0x50>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d10a      	bne.n	8008d78 <vPortExitCritical+0x24>
	__asm volatile
 8008d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d66:	f383 8811 	msr	BASEPRI, r3
 8008d6a:	f3bf 8f6f 	isb	sy
 8008d6e:	f3bf 8f4f 	dsb	sy
 8008d72:	607b      	str	r3, [r7, #4]
}
 8008d74:	bf00      	nop
 8008d76:	e7fe      	b.n	8008d76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008d78:	4b0a      	ldr	r3, [pc, #40]	; (8008da4 <vPortExitCritical+0x50>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	3b01      	subs	r3, #1
 8008d7e:	4a09      	ldr	r2, [pc, #36]	; (8008da4 <vPortExitCritical+0x50>)
 8008d80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008d82:	4b08      	ldr	r3, [pc, #32]	; (8008da4 <vPortExitCritical+0x50>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d105      	bne.n	8008d96 <vPortExitCritical+0x42>
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008d94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008d96:	bf00      	nop
 8008d98:	370c      	adds	r7, #12
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da0:	4770      	bx	lr
 8008da2:	bf00      	nop
 8008da4:	2000000c 	.word	0x2000000c
	...

08008db0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008db0:	f3ef 8009 	mrs	r0, PSP
 8008db4:	f3bf 8f6f 	isb	sy
 8008db8:	4b15      	ldr	r3, [pc, #84]	; (8008e10 <pxCurrentTCBConst>)
 8008dba:	681a      	ldr	r2, [r3, #0]
 8008dbc:	f01e 0f10 	tst.w	lr, #16
 8008dc0:	bf08      	it	eq
 8008dc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008dc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dca:	6010      	str	r0, [r2, #0]
 8008dcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008dd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008dd4:	f380 8811 	msr	BASEPRI, r0
 8008dd8:	f3bf 8f4f 	dsb	sy
 8008ddc:	f3bf 8f6f 	isb	sy
 8008de0:	f7ff fca4 	bl	800872c <vTaskSwitchContext>
 8008de4:	f04f 0000 	mov.w	r0, #0
 8008de8:	f380 8811 	msr	BASEPRI, r0
 8008dec:	bc09      	pop	{r0, r3}
 8008dee:	6819      	ldr	r1, [r3, #0]
 8008df0:	6808      	ldr	r0, [r1, #0]
 8008df2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008df6:	f01e 0f10 	tst.w	lr, #16
 8008dfa:	bf08      	it	eq
 8008dfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008e00:	f380 8809 	msr	PSP, r0
 8008e04:	f3bf 8f6f 	isb	sy
 8008e08:	4770      	bx	lr
 8008e0a:	bf00      	nop
 8008e0c:	f3af 8000 	nop.w

08008e10 <pxCurrentTCBConst>:
 8008e10:	2000060c 	.word	0x2000060c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008e14:	bf00      	nop
 8008e16:	bf00      	nop

08008e18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b082      	sub	sp, #8
 8008e1c:	af00      	add	r7, sp, #0
	__asm volatile
 8008e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e22:	f383 8811 	msr	BASEPRI, r3
 8008e26:	f3bf 8f6f 	isb	sy
 8008e2a:	f3bf 8f4f 	dsb	sy
 8008e2e:	607b      	str	r3, [r7, #4]
}
 8008e30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008e32:	f7ff fbc3 	bl	80085bc <xTaskIncrementTick>
 8008e36:	4603      	mov	r3, r0
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d003      	beq.n	8008e44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008e3c:	4b06      	ldr	r3, [pc, #24]	; (8008e58 <xPortSysTickHandler+0x40>)
 8008e3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e42:	601a      	str	r2, [r3, #0]
 8008e44:	2300      	movs	r3, #0
 8008e46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	f383 8811 	msr	BASEPRI, r3
}
 8008e4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008e50:	bf00      	nop
 8008e52:	3708      	adds	r7, #8
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}
 8008e58:	e000ed04 	.word	0xe000ed04

08008e5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008e60:	4b0b      	ldr	r3, [pc, #44]	; (8008e90 <vPortSetupTimerInterrupt+0x34>)
 8008e62:	2200      	movs	r2, #0
 8008e64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008e66:	4b0b      	ldr	r3, [pc, #44]	; (8008e94 <vPortSetupTimerInterrupt+0x38>)
 8008e68:	2200      	movs	r2, #0
 8008e6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008e6c:	4b0a      	ldr	r3, [pc, #40]	; (8008e98 <vPortSetupTimerInterrupt+0x3c>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4a0a      	ldr	r2, [pc, #40]	; (8008e9c <vPortSetupTimerInterrupt+0x40>)
 8008e72:	fba2 2303 	umull	r2, r3, r2, r3
 8008e76:	099b      	lsrs	r3, r3, #6
 8008e78:	4a09      	ldr	r2, [pc, #36]	; (8008ea0 <vPortSetupTimerInterrupt+0x44>)
 8008e7a:	3b01      	subs	r3, #1
 8008e7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008e7e:	4b04      	ldr	r3, [pc, #16]	; (8008e90 <vPortSetupTimerInterrupt+0x34>)
 8008e80:	2207      	movs	r2, #7
 8008e82:	601a      	str	r2, [r3, #0]
}
 8008e84:	bf00      	nop
 8008e86:	46bd      	mov	sp, r7
 8008e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8c:	4770      	bx	lr
 8008e8e:	bf00      	nop
 8008e90:	e000e010 	.word	0xe000e010
 8008e94:	e000e018 	.word	0xe000e018
 8008e98:	20000000 	.word	0x20000000
 8008e9c:	10624dd3 	.word	0x10624dd3
 8008ea0:	e000e014 	.word	0xe000e014

08008ea4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008ea4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008eb4 <vPortEnableVFP+0x10>
 8008ea8:	6801      	ldr	r1, [r0, #0]
 8008eaa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008eae:	6001      	str	r1, [r0, #0]
 8008eb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008eb2:	bf00      	nop
 8008eb4:	e000ed88 	.word	0xe000ed88

08008eb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b08a      	sub	sp, #40	; 0x28
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008ec4:	f7ff fad0 	bl	8008468 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008ec8:	4b5b      	ldr	r3, [pc, #364]	; (8009038 <pvPortMalloc+0x180>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d101      	bne.n	8008ed4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008ed0:	f000 f920 	bl	8009114 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008ed4:	4b59      	ldr	r3, [pc, #356]	; (800903c <pvPortMalloc+0x184>)
 8008ed6:	681a      	ldr	r2, [r3, #0]
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	4013      	ands	r3, r2
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	f040 8093 	bne.w	8009008 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d01d      	beq.n	8008f24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008ee8:	2208      	movs	r2, #8
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	4413      	add	r3, r2
 8008eee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f003 0307 	and.w	r3, r3, #7
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d014      	beq.n	8008f24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f023 0307 	bic.w	r3, r3, #7
 8008f00:	3308      	adds	r3, #8
 8008f02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f003 0307 	and.w	r3, r3, #7
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d00a      	beq.n	8008f24 <pvPortMalloc+0x6c>
	__asm volatile
 8008f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f12:	f383 8811 	msr	BASEPRI, r3
 8008f16:	f3bf 8f6f 	isb	sy
 8008f1a:	f3bf 8f4f 	dsb	sy
 8008f1e:	617b      	str	r3, [r7, #20]
}
 8008f20:	bf00      	nop
 8008f22:	e7fe      	b.n	8008f22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d06e      	beq.n	8009008 <pvPortMalloc+0x150>
 8008f2a:	4b45      	ldr	r3, [pc, #276]	; (8009040 <pvPortMalloc+0x188>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	687a      	ldr	r2, [r7, #4]
 8008f30:	429a      	cmp	r2, r3
 8008f32:	d869      	bhi.n	8009008 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008f34:	4b43      	ldr	r3, [pc, #268]	; (8009044 <pvPortMalloc+0x18c>)
 8008f36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008f38:	4b42      	ldr	r3, [pc, #264]	; (8009044 <pvPortMalloc+0x18c>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008f3e:	e004      	b.n	8008f4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f4c:	685b      	ldr	r3, [r3, #4]
 8008f4e:	687a      	ldr	r2, [r7, #4]
 8008f50:	429a      	cmp	r2, r3
 8008f52:	d903      	bls.n	8008f5c <pvPortMalloc+0xa4>
 8008f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d1f1      	bne.n	8008f40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008f5c:	4b36      	ldr	r3, [pc, #216]	; (8009038 <pvPortMalloc+0x180>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f62:	429a      	cmp	r2, r3
 8008f64:	d050      	beq.n	8009008 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008f66:	6a3b      	ldr	r3, [r7, #32]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	2208      	movs	r2, #8
 8008f6c:	4413      	add	r3, r2
 8008f6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f72:	681a      	ldr	r2, [r3, #0]
 8008f74:	6a3b      	ldr	r3, [r7, #32]
 8008f76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f7a:	685a      	ldr	r2, [r3, #4]
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	1ad2      	subs	r2, r2, r3
 8008f80:	2308      	movs	r3, #8
 8008f82:	005b      	lsls	r3, r3, #1
 8008f84:	429a      	cmp	r2, r3
 8008f86:	d91f      	bls.n	8008fc8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008f88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	4413      	add	r3, r2
 8008f8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f90:	69bb      	ldr	r3, [r7, #24]
 8008f92:	f003 0307 	and.w	r3, r3, #7
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d00a      	beq.n	8008fb0 <pvPortMalloc+0xf8>
	__asm volatile
 8008f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f9e:	f383 8811 	msr	BASEPRI, r3
 8008fa2:	f3bf 8f6f 	isb	sy
 8008fa6:	f3bf 8f4f 	dsb	sy
 8008faa:	613b      	str	r3, [r7, #16]
}
 8008fac:	bf00      	nop
 8008fae:	e7fe      	b.n	8008fae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb2:	685a      	ldr	r2, [r3, #4]
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	1ad2      	subs	r2, r2, r3
 8008fb8:	69bb      	ldr	r3, [r7, #24]
 8008fba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fbe:	687a      	ldr	r2, [r7, #4]
 8008fc0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008fc2:	69b8      	ldr	r0, [r7, #24]
 8008fc4:	f000 f908 	bl	80091d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008fc8:	4b1d      	ldr	r3, [pc, #116]	; (8009040 <pvPortMalloc+0x188>)
 8008fca:	681a      	ldr	r2, [r3, #0]
 8008fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fce:	685b      	ldr	r3, [r3, #4]
 8008fd0:	1ad3      	subs	r3, r2, r3
 8008fd2:	4a1b      	ldr	r2, [pc, #108]	; (8009040 <pvPortMalloc+0x188>)
 8008fd4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008fd6:	4b1a      	ldr	r3, [pc, #104]	; (8009040 <pvPortMalloc+0x188>)
 8008fd8:	681a      	ldr	r2, [r3, #0]
 8008fda:	4b1b      	ldr	r3, [pc, #108]	; (8009048 <pvPortMalloc+0x190>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	429a      	cmp	r2, r3
 8008fe0:	d203      	bcs.n	8008fea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008fe2:	4b17      	ldr	r3, [pc, #92]	; (8009040 <pvPortMalloc+0x188>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	4a18      	ldr	r2, [pc, #96]	; (8009048 <pvPortMalloc+0x190>)
 8008fe8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fec:	685a      	ldr	r2, [r3, #4]
 8008fee:	4b13      	ldr	r3, [pc, #76]	; (800903c <pvPortMalloc+0x184>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	431a      	orrs	r2, r3
 8008ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008ffe:	4b13      	ldr	r3, [pc, #76]	; (800904c <pvPortMalloc+0x194>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	3301      	adds	r3, #1
 8009004:	4a11      	ldr	r2, [pc, #68]	; (800904c <pvPortMalloc+0x194>)
 8009006:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009008:	f7ff fa3c 	bl	8008484 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800900c:	69fb      	ldr	r3, [r7, #28]
 800900e:	f003 0307 	and.w	r3, r3, #7
 8009012:	2b00      	cmp	r3, #0
 8009014:	d00a      	beq.n	800902c <pvPortMalloc+0x174>
	__asm volatile
 8009016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800901a:	f383 8811 	msr	BASEPRI, r3
 800901e:	f3bf 8f6f 	isb	sy
 8009022:	f3bf 8f4f 	dsb	sy
 8009026:	60fb      	str	r3, [r7, #12]
}
 8009028:	bf00      	nop
 800902a:	e7fe      	b.n	800902a <pvPortMalloc+0x172>
	return pvReturn;
 800902c:	69fb      	ldr	r3, [r7, #28]
}
 800902e:	4618      	mov	r0, r3
 8009030:	3728      	adds	r7, #40	; 0x28
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}
 8009036:	bf00      	nop
 8009038:	20002e58 	.word	0x20002e58
 800903c:	20002e6c 	.word	0x20002e6c
 8009040:	20002e5c 	.word	0x20002e5c
 8009044:	20002e50 	.word	0x20002e50
 8009048:	20002e60 	.word	0x20002e60
 800904c:	20002e64 	.word	0x20002e64

08009050 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b086      	sub	sp, #24
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d04d      	beq.n	80090fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009062:	2308      	movs	r3, #8
 8009064:	425b      	negs	r3, r3
 8009066:	697a      	ldr	r2, [r7, #20]
 8009068:	4413      	add	r3, r2
 800906a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800906c:	697b      	ldr	r3, [r7, #20]
 800906e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009070:	693b      	ldr	r3, [r7, #16]
 8009072:	685a      	ldr	r2, [r3, #4]
 8009074:	4b24      	ldr	r3, [pc, #144]	; (8009108 <vPortFree+0xb8>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	4013      	ands	r3, r2
 800907a:	2b00      	cmp	r3, #0
 800907c:	d10a      	bne.n	8009094 <vPortFree+0x44>
	__asm volatile
 800907e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009082:	f383 8811 	msr	BASEPRI, r3
 8009086:	f3bf 8f6f 	isb	sy
 800908a:	f3bf 8f4f 	dsb	sy
 800908e:	60fb      	str	r3, [r7, #12]
}
 8009090:	bf00      	nop
 8009092:	e7fe      	b.n	8009092 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009094:	693b      	ldr	r3, [r7, #16]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d00a      	beq.n	80090b2 <vPortFree+0x62>
	__asm volatile
 800909c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a0:	f383 8811 	msr	BASEPRI, r3
 80090a4:	f3bf 8f6f 	isb	sy
 80090a8:	f3bf 8f4f 	dsb	sy
 80090ac:	60bb      	str	r3, [r7, #8]
}
 80090ae:	bf00      	nop
 80090b0:	e7fe      	b.n	80090b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80090b2:	693b      	ldr	r3, [r7, #16]
 80090b4:	685a      	ldr	r2, [r3, #4]
 80090b6:	4b14      	ldr	r3, [pc, #80]	; (8009108 <vPortFree+0xb8>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	4013      	ands	r3, r2
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d01e      	beq.n	80090fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80090c0:	693b      	ldr	r3, [r7, #16]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d11a      	bne.n	80090fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80090c8:	693b      	ldr	r3, [r7, #16]
 80090ca:	685a      	ldr	r2, [r3, #4]
 80090cc:	4b0e      	ldr	r3, [pc, #56]	; (8009108 <vPortFree+0xb8>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	43db      	mvns	r3, r3
 80090d2:	401a      	ands	r2, r3
 80090d4:	693b      	ldr	r3, [r7, #16]
 80090d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80090d8:	f7ff f9c6 	bl	8008468 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80090dc:	693b      	ldr	r3, [r7, #16]
 80090de:	685a      	ldr	r2, [r3, #4]
 80090e0:	4b0a      	ldr	r3, [pc, #40]	; (800910c <vPortFree+0xbc>)
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	4413      	add	r3, r2
 80090e6:	4a09      	ldr	r2, [pc, #36]	; (800910c <vPortFree+0xbc>)
 80090e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80090ea:	6938      	ldr	r0, [r7, #16]
 80090ec:	f000 f874 	bl	80091d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80090f0:	4b07      	ldr	r3, [pc, #28]	; (8009110 <vPortFree+0xc0>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	3301      	adds	r3, #1
 80090f6:	4a06      	ldr	r2, [pc, #24]	; (8009110 <vPortFree+0xc0>)
 80090f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80090fa:	f7ff f9c3 	bl	8008484 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80090fe:	bf00      	nop
 8009100:	3718      	adds	r7, #24
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}
 8009106:	bf00      	nop
 8009108:	20002e6c 	.word	0x20002e6c
 800910c:	20002e5c 	.word	0x20002e5c
 8009110:	20002e68 	.word	0x20002e68

08009114 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009114:	b480      	push	{r7}
 8009116:	b085      	sub	sp, #20
 8009118:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800911a:	f242 7310 	movw	r3, #10000	; 0x2710
 800911e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009120:	4b27      	ldr	r3, [pc, #156]	; (80091c0 <prvHeapInit+0xac>)
 8009122:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	f003 0307 	and.w	r3, r3, #7
 800912a:	2b00      	cmp	r3, #0
 800912c:	d00c      	beq.n	8009148 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	3307      	adds	r3, #7
 8009132:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	f023 0307 	bic.w	r3, r3, #7
 800913a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800913c:	68ba      	ldr	r2, [r7, #8]
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	1ad3      	subs	r3, r2, r3
 8009142:	4a1f      	ldr	r2, [pc, #124]	; (80091c0 <prvHeapInit+0xac>)
 8009144:	4413      	add	r3, r2
 8009146:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800914c:	4a1d      	ldr	r2, [pc, #116]	; (80091c4 <prvHeapInit+0xb0>)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009152:	4b1c      	ldr	r3, [pc, #112]	; (80091c4 <prvHeapInit+0xb0>)
 8009154:	2200      	movs	r2, #0
 8009156:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	68ba      	ldr	r2, [r7, #8]
 800915c:	4413      	add	r3, r2
 800915e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009160:	2208      	movs	r2, #8
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	1a9b      	subs	r3, r3, r2
 8009166:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	f023 0307 	bic.w	r3, r3, #7
 800916e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	4a15      	ldr	r2, [pc, #84]	; (80091c8 <prvHeapInit+0xb4>)
 8009174:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009176:	4b14      	ldr	r3, [pc, #80]	; (80091c8 <prvHeapInit+0xb4>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	2200      	movs	r2, #0
 800917c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800917e:	4b12      	ldr	r3, [pc, #72]	; (80091c8 <prvHeapInit+0xb4>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	2200      	movs	r2, #0
 8009184:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	68fa      	ldr	r2, [r7, #12]
 800918e:	1ad2      	subs	r2, r2, r3
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009194:	4b0c      	ldr	r3, [pc, #48]	; (80091c8 <prvHeapInit+0xb4>)
 8009196:	681a      	ldr	r2, [r3, #0]
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	685b      	ldr	r3, [r3, #4]
 80091a0:	4a0a      	ldr	r2, [pc, #40]	; (80091cc <prvHeapInit+0xb8>)
 80091a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	685b      	ldr	r3, [r3, #4]
 80091a8:	4a09      	ldr	r2, [pc, #36]	; (80091d0 <prvHeapInit+0xbc>)
 80091aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80091ac:	4b09      	ldr	r3, [pc, #36]	; (80091d4 <prvHeapInit+0xc0>)
 80091ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80091b2:	601a      	str	r2, [r3, #0]
}
 80091b4:	bf00      	nop
 80091b6:	3714      	adds	r7, #20
 80091b8:	46bd      	mov	sp, r7
 80091ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091be:	4770      	bx	lr
 80091c0:	20000740 	.word	0x20000740
 80091c4:	20002e50 	.word	0x20002e50
 80091c8:	20002e58 	.word	0x20002e58
 80091cc:	20002e60 	.word	0x20002e60
 80091d0:	20002e5c 	.word	0x20002e5c
 80091d4:	20002e6c 	.word	0x20002e6c

080091d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80091d8:	b480      	push	{r7}
 80091da:	b085      	sub	sp, #20
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80091e0:	4b28      	ldr	r3, [pc, #160]	; (8009284 <prvInsertBlockIntoFreeList+0xac>)
 80091e2:	60fb      	str	r3, [r7, #12]
 80091e4:	e002      	b.n	80091ec <prvInsertBlockIntoFreeList+0x14>
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	60fb      	str	r3, [r7, #12]
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	687a      	ldr	r2, [r7, #4]
 80091f2:	429a      	cmp	r2, r3
 80091f4:	d8f7      	bhi.n	80091e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	685b      	ldr	r3, [r3, #4]
 80091fe:	68ba      	ldr	r2, [r7, #8]
 8009200:	4413      	add	r3, r2
 8009202:	687a      	ldr	r2, [r7, #4]
 8009204:	429a      	cmp	r2, r3
 8009206:	d108      	bne.n	800921a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	685a      	ldr	r2, [r3, #4]
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	685b      	ldr	r3, [r3, #4]
 8009210:	441a      	add	r2, r3
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	685b      	ldr	r3, [r3, #4]
 8009222:	68ba      	ldr	r2, [r7, #8]
 8009224:	441a      	add	r2, r3
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	429a      	cmp	r2, r3
 800922c:	d118      	bne.n	8009260 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681a      	ldr	r2, [r3, #0]
 8009232:	4b15      	ldr	r3, [pc, #84]	; (8009288 <prvInsertBlockIntoFreeList+0xb0>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	429a      	cmp	r2, r3
 8009238:	d00d      	beq.n	8009256 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	685a      	ldr	r2, [r3, #4]
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	685b      	ldr	r3, [r3, #4]
 8009244:	441a      	add	r2, r3
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	681a      	ldr	r2, [r3, #0]
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	601a      	str	r2, [r3, #0]
 8009254:	e008      	b.n	8009268 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009256:	4b0c      	ldr	r3, [pc, #48]	; (8009288 <prvInsertBlockIntoFreeList+0xb0>)
 8009258:	681a      	ldr	r2, [r3, #0]
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	601a      	str	r2, [r3, #0]
 800925e:	e003      	b.n	8009268 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681a      	ldr	r2, [r3, #0]
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009268:	68fa      	ldr	r2, [r7, #12]
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	429a      	cmp	r2, r3
 800926e:	d002      	beq.n	8009276 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	687a      	ldr	r2, [r7, #4]
 8009274:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009276:	bf00      	nop
 8009278:	3714      	adds	r7, #20
 800927a:	46bd      	mov	sp, r7
 800927c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009280:	4770      	bx	lr
 8009282:	bf00      	nop
 8009284:	20002e50 	.word	0x20002e50
 8009288:	20002e58 	.word	0x20002e58

0800928c <__cvt>:
 800928c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009290:	ec55 4b10 	vmov	r4, r5, d0
 8009294:	2d00      	cmp	r5, #0
 8009296:	460e      	mov	r6, r1
 8009298:	4619      	mov	r1, r3
 800929a:	462b      	mov	r3, r5
 800929c:	bfbb      	ittet	lt
 800929e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80092a2:	461d      	movlt	r5, r3
 80092a4:	2300      	movge	r3, #0
 80092a6:	232d      	movlt	r3, #45	; 0x2d
 80092a8:	700b      	strb	r3, [r1, #0]
 80092aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80092ac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80092b0:	4691      	mov	r9, r2
 80092b2:	f023 0820 	bic.w	r8, r3, #32
 80092b6:	bfbc      	itt	lt
 80092b8:	4622      	movlt	r2, r4
 80092ba:	4614      	movlt	r4, r2
 80092bc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80092c0:	d005      	beq.n	80092ce <__cvt+0x42>
 80092c2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80092c6:	d100      	bne.n	80092ca <__cvt+0x3e>
 80092c8:	3601      	adds	r6, #1
 80092ca:	2102      	movs	r1, #2
 80092cc:	e000      	b.n	80092d0 <__cvt+0x44>
 80092ce:	2103      	movs	r1, #3
 80092d0:	ab03      	add	r3, sp, #12
 80092d2:	9301      	str	r3, [sp, #4]
 80092d4:	ab02      	add	r3, sp, #8
 80092d6:	9300      	str	r3, [sp, #0]
 80092d8:	ec45 4b10 	vmov	d0, r4, r5
 80092dc:	4653      	mov	r3, sl
 80092de:	4632      	mov	r2, r6
 80092e0:	f000 feaa 	bl	800a038 <_dtoa_r>
 80092e4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80092e8:	4607      	mov	r7, r0
 80092ea:	d102      	bne.n	80092f2 <__cvt+0x66>
 80092ec:	f019 0f01 	tst.w	r9, #1
 80092f0:	d022      	beq.n	8009338 <__cvt+0xac>
 80092f2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80092f6:	eb07 0906 	add.w	r9, r7, r6
 80092fa:	d110      	bne.n	800931e <__cvt+0x92>
 80092fc:	783b      	ldrb	r3, [r7, #0]
 80092fe:	2b30      	cmp	r3, #48	; 0x30
 8009300:	d10a      	bne.n	8009318 <__cvt+0x8c>
 8009302:	2200      	movs	r2, #0
 8009304:	2300      	movs	r3, #0
 8009306:	4620      	mov	r0, r4
 8009308:	4629      	mov	r1, r5
 800930a:	f7f7 fbdd 	bl	8000ac8 <__aeabi_dcmpeq>
 800930e:	b918      	cbnz	r0, 8009318 <__cvt+0x8c>
 8009310:	f1c6 0601 	rsb	r6, r6, #1
 8009314:	f8ca 6000 	str.w	r6, [sl]
 8009318:	f8da 3000 	ldr.w	r3, [sl]
 800931c:	4499      	add	r9, r3
 800931e:	2200      	movs	r2, #0
 8009320:	2300      	movs	r3, #0
 8009322:	4620      	mov	r0, r4
 8009324:	4629      	mov	r1, r5
 8009326:	f7f7 fbcf 	bl	8000ac8 <__aeabi_dcmpeq>
 800932a:	b108      	cbz	r0, 8009330 <__cvt+0xa4>
 800932c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009330:	2230      	movs	r2, #48	; 0x30
 8009332:	9b03      	ldr	r3, [sp, #12]
 8009334:	454b      	cmp	r3, r9
 8009336:	d307      	bcc.n	8009348 <__cvt+0xbc>
 8009338:	9b03      	ldr	r3, [sp, #12]
 800933a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800933c:	1bdb      	subs	r3, r3, r7
 800933e:	4638      	mov	r0, r7
 8009340:	6013      	str	r3, [r2, #0]
 8009342:	b004      	add	sp, #16
 8009344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009348:	1c59      	adds	r1, r3, #1
 800934a:	9103      	str	r1, [sp, #12]
 800934c:	701a      	strb	r2, [r3, #0]
 800934e:	e7f0      	b.n	8009332 <__cvt+0xa6>

08009350 <__exponent>:
 8009350:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009352:	4603      	mov	r3, r0
 8009354:	2900      	cmp	r1, #0
 8009356:	bfb8      	it	lt
 8009358:	4249      	neglt	r1, r1
 800935a:	f803 2b02 	strb.w	r2, [r3], #2
 800935e:	bfb4      	ite	lt
 8009360:	222d      	movlt	r2, #45	; 0x2d
 8009362:	222b      	movge	r2, #43	; 0x2b
 8009364:	2909      	cmp	r1, #9
 8009366:	7042      	strb	r2, [r0, #1]
 8009368:	dd2a      	ble.n	80093c0 <__exponent+0x70>
 800936a:	f10d 0207 	add.w	r2, sp, #7
 800936e:	4617      	mov	r7, r2
 8009370:	260a      	movs	r6, #10
 8009372:	4694      	mov	ip, r2
 8009374:	fb91 f5f6 	sdiv	r5, r1, r6
 8009378:	fb06 1415 	mls	r4, r6, r5, r1
 800937c:	3430      	adds	r4, #48	; 0x30
 800937e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009382:	460c      	mov	r4, r1
 8009384:	2c63      	cmp	r4, #99	; 0x63
 8009386:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800938a:	4629      	mov	r1, r5
 800938c:	dcf1      	bgt.n	8009372 <__exponent+0x22>
 800938e:	3130      	adds	r1, #48	; 0x30
 8009390:	f1ac 0402 	sub.w	r4, ip, #2
 8009394:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009398:	1c41      	adds	r1, r0, #1
 800939a:	4622      	mov	r2, r4
 800939c:	42ba      	cmp	r2, r7
 800939e:	d30a      	bcc.n	80093b6 <__exponent+0x66>
 80093a0:	f10d 0209 	add.w	r2, sp, #9
 80093a4:	eba2 020c 	sub.w	r2, r2, ip
 80093a8:	42bc      	cmp	r4, r7
 80093aa:	bf88      	it	hi
 80093ac:	2200      	movhi	r2, #0
 80093ae:	4413      	add	r3, r2
 80093b0:	1a18      	subs	r0, r3, r0
 80093b2:	b003      	add	sp, #12
 80093b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093b6:	f812 5b01 	ldrb.w	r5, [r2], #1
 80093ba:	f801 5f01 	strb.w	r5, [r1, #1]!
 80093be:	e7ed      	b.n	800939c <__exponent+0x4c>
 80093c0:	2330      	movs	r3, #48	; 0x30
 80093c2:	3130      	adds	r1, #48	; 0x30
 80093c4:	7083      	strb	r3, [r0, #2]
 80093c6:	70c1      	strb	r1, [r0, #3]
 80093c8:	1d03      	adds	r3, r0, #4
 80093ca:	e7f1      	b.n	80093b0 <__exponent+0x60>

080093cc <_printf_float>:
 80093cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093d0:	ed2d 8b02 	vpush	{d8}
 80093d4:	b08d      	sub	sp, #52	; 0x34
 80093d6:	460c      	mov	r4, r1
 80093d8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80093dc:	4616      	mov	r6, r2
 80093de:	461f      	mov	r7, r3
 80093e0:	4605      	mov	r5, r0
 80093e2:	f000 fd1b 	bl	8009e1c <_localeconv_r>
 80093e6:	f8d0 a000 	ldr.w	sl, [r0]
 80093ea:	4650      	mov	r0, sl
 80093ec:	f7f6 ff40 	bl	8000270 <strlen>
 80093f0:	2300      	movs	r3, #0
 80093f2:	930a      	str	r3, [sp, #40]	; 0x28
 80093f4:	6823      	ldr	r3, [r4, #0]
 80093f6:	9305      	str	r3, [sp, #20]
 80093f8:	f8d8 3000 	ldr.w	r3, [r8]
 80093fc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009400:	3307      	adds	r3, #7
 8009402:	f023 0307 	bic.w	r3, r3, #7
 8009406:	f103 0208 	add.w	r2, r3, #8
 800940a:	f8c8 2000 	str.w	r2, [r8]
 800940e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009412:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009416:	9307      	str	r3, [sp, #28]
 8009418:	f8cd 8018 	str.w	r8, [sp, #24]
 800941c:	ee08 0a10 	vmov	s16, r0
 8009420:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8009424:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009428:	4b9e      	ldr	r3, [pc, #632]	; (80096a4 <_printf_float+0x2d8>)
 800942a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800942e:	f7f7 fb7d 	bl	8000b2c <__aeabi_dcmpun>
 8009432:	bb88      	cbnz	r0, 8009498 <_printf_float+0xcc>
 8009434:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009438:	4b9a      	ldr	r3, [pc, #616]	; (80096a4 <_printf_float+0x2d8>)
 800943a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800943e:	f7f7 fb57 	bl	8000af0 <__aeabi_dcmple>
 8009442:	bb48      	cbnz	r0, 8009498 <_printf_float+0xcc>
 8009444:	2200      	movs	r2, #0
 8009446:	2300      	movs	r3, #0
 8009448:	4640      	mov	r0, r8
 800944a:	4649      	mov	r1, r9
 800944c:	f7f7 fb46 	bl	8000adc <__aeabi_dcmplt>
 8009450:	b110      	cbz	r0, 8009458 <_printf_float+0x8c>
 8009452:	232d      	movs	r3, #45	; 0x2d
 8009454:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009458:	4a93      	ldr	r2, [pc, #588]	; (80096a8 <_printf_float+0x2dc>)
 800945a:	4b94      	ldr	r3, [pc, #592]	; (80096ac <_printf_float+0x2e0>)
 800945c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009460:	bf94      	ite	ls
 8009462:	4690      	movls	r8, r2
 8009464:	4698      	movhi	r8, r3
 8009466:	2303      	movs	r3, #3
 8009468:	6123      	str	r3, [r4, #16]
 800946a:	9b05      	ldr	r3, [sp, #20]
 800946c:	f023 0304 	bic.w	r3, r3, #4
 8009470:	6023      	str	r3, [r4, #0]
 8009472:	f04f 0900 	mov.w	r9, #0
 8009476:	9700      	str	r7, [sp, #0]
 8009478:	4633      	mov	r3, r6
 800947a:	aa0b      	add	r2, sp, #44	; 0x2c
 800947c:	4621      	mov	r1, r4
 800947e:	4628      	mov	r0, r5
 8009480:	f000 f9da 	bl	8009838 <_printf_common>
 8009484:	3001      	adds	r0, #1
 8009486:	f040 8090 	bne.w	80095aa <_printf_float+0x1de>
 800948a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800948e:	b00d      	add	sp, #52	; 0x34
 8009490:	ecbd 8b02 	vpop	{d8}
 8009494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009498:	4642      	mov	r2, r8
 800949a:	464b      	mov	r3, r9
 800949c:	4640      	mov	r0, r8
 800949e:	4649      	mov	r1, r9
 80094a0:	f7f7 fb44 	bl	8000b2c <__aeabi_dcmpun>
 80094a4:	b140      	cbz	r0, 80094b8 <_printf_float+0xec>
 80094a6:	464b      	mov	r3, r9
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	bfbc      	itt	lt
 80094ac:	232d      	movlt	r3, #45	; 0x2d
 80094ae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80094b2:	4a7f      	ldr	r2, [pc, #508]	; (80096b0 <_printf_float+0x2e4>)
 80094b4:	4b7f      	ldr	r3, [pc, #508]	; (80096b4 <_printf_float+0x2e8>)
 80094b6:	e7d1      	b.n	800945c <_printf_float+0x90>
 80094b8:	6863      	ldr	r3, [r4, #4]
 80094ba:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80094be:	9206      	str	r2, [sp, #24]
 80094c0:	1c5a      	adds	r2, r3, #1
 80094c2:	d13f      	bne.n	8009544 <_printf_float+0x178>
 80094c4:	2306      	movs	r3, #6
 80094c6:	6063      	str	r3, [r4, #4]
 80094c8:	9b05      	ldr	r3, [sp, #20]
 80094ca:	6861      	ldr	r1, [r4, #4]
 80094cc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80094d0:	2300      	movs	r3, #0
 80094d2:	9303      	str	r3, [sp, #12]
 80094d4:	ab0a      	add	r3, sp, #40	; 0x28
 80094d6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80094da:	ab09      	add	r3, sp, #36	; 0x24
 80094dc:	ec49 8b10 	vmov	d0, r8, r9
 80094e0:	9300      	str	r3, [sp, #0]
 80094e2:	6022      	str	r2, [r4, #0]
 80094e4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80094e8:	4628      	mov	r0, r5
 80094ea:	f7ff fecf 	bl	800928c <__cvt>
 80094ee:	9b06      	ldr	r3, [sp, #24]
 80094f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80094f2:	2b47      	cmp	r3, #71	; 0x47
 80094f4:	4680      	mov	r8, r0
 80094f6:	d108      	bne.n	800950a <_printf_float+0x13e>
 80094f8:	1cc8      	adds	r0, r1, #3
 80094fa:	db02      	blt.n	8009502 <_printf_float+0x136>
 80094fc:	6863      	ldr	r3, [r4, #4]
 80094fe:	4299      	cmp	r1, r3
 8009500:	dd41      	ble.n	8009586 <_printf_float+0x1ba>
 8009502:	f1ab 0302 	sub.w	r3, fp, #2
 8009506:	fa5f fb83 	uxtb.w	fp, r3
 800950a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800950e:	d820      	bhi.n	8009552 <_printf_float+0x186>
 8009510:	3901      	subs	r1, #1
 8009512:	465a      	mov	r2, fp
 8009514:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009518:	9109      	str	r1, [sp, #36]	; 0x24
 800951a:	f7ff ff19 	bl	8009350 <__exponent>
 800951e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009520:	1813      	adds	r3, r2, r0
 8009522:	2a01      	cmp	r2, #1
 8009524:	4681      	mov	r9, r0
 8009526:	6123      	str	r3, [r4, #16]
 8009528:	dc02      	bgt.n	8009530 <_printf_float+0x164>
 800952a:	6822      	ldr	r2, [r4, #0]
 800952c:	07d2      	lsls	r2, r2, #31
 800952e:	d501      	bpl.n	8009534 <_printf_float+0x168>
 8009530:	3301      	adds	r3, #1
 8009532:	6123      	str	r3, [r4, #16]
 8009534:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009538:	2b00      	cmp	r3, #0
 800953a:	d09c      	beq.n	8009476 <_printf_float+0xaa>
 800953c:	232d      	movs	r3, #45	; 0x2d
 800953e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009542:	e798      	b.n	8009476 <_printf_float+0xaa>
 8009544:	9a06      	ldr	r2, [sp, #24]
 8009546:	2a47      	cmp	r2, #71	; 0x47
 8009548:	d1be      	bne.n	80094c8 <_printf_float+0xfc>
 800954a:	2b00      	cmp	r3, #0
 800954c:	d1bc      	bne.n	80094c8 <_printf_float+0xfc>
 800954e:	2301      	movs	r3, #1
 8009550:	e7b9      	b.n	80094c6 <_printf_float+0xfa>
 8009552:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009556:	d118      	bne.n	800958a <_printf_float+0x1be>
 8009558:	2900      	cmp	r1, #0
 800955a:	6863      	ldr	r3, [r4, #4]
 800955c:	dd0b      	ble.n	8009576 <_printf_float+0x1aa>
 800955e:	6121      	str	r1, [r4, #16]
 8009560:	b913      	cbnz	r3, 8009568 <_printf_float+0x19c>
 8009562:	6822      	ldr	r2, [r4, #0]
 8009564:	07d0      	lsls	r0, r2, #31
 8009566:	d502      	bpl.n	800956e <_printf_float+0x1a2>
 8009568:	3301      	adds	r3, #1
 800956a:	440b      	add	r3, r1
 800956c:	6123      	str	r3, [r4, #16]
 800956e:	65a1      	str	r1, [r4, #88]	; 0x58
 8009570:	f04f 0900 	mov.w	r9, #0
 8009574:	e7de      	b.n	8009534 <_printf_float+0x168>
 8009576:	b913      	cbnz	r3, 800957e <_printf_float+0x1b2>
 8009578:	6822      	ldr	r2, [r4, #0]
 800957a:	07d2      	lsls	r2, r2, #31
 800957c:	d501      	bpl.n	8009582 <_printf_float+0x1b6>
 800957e:	3302      	adds	r3, #2
 8009580:	e7f4      	b.n	800956c <_printf_float+0x1a0>
 8009582:	2301      	movs	r3, #1
 8009584:	e7f2      	b.n	800956c <_printf_float+0x1a0>
 8009586:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800958a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800958c:	4299      	cmp	r1, r3
 800958e:	db05      	blt.n	800959c <_printf_float+0x1d0>
 8009590:	6823      	ldr	r3, [r4, #0]
 8009592:	6121      	str	r1, [r4, #16]
 8009594:	07d8      	lsls	r0, r3, #31
 8009596:	d5ea      	bpl.n	800956e <_printf_float+0x1a2>
 8009598:	1c4b      	adds	r3, r1, #1
 800959a:	e7e7      	b.n	800956c <_printf_float+0x1a0>
 800959c:	2900      	cmp	r1, #0
 800959e:	bfd4      	ite	le
 80095a0:	f1c1 0202 	rsble	r2, r1, #2
 80095a4:	2201      	movgt	r2, #1
 80095a6:	4413      	add	r3, r2
 80095a8:	e7e0      	b.n	800956c <_printf_float+0x1a0>
 80095aa:	6823      	ldr	r3, [r4, #0]
 80095ac:	055a      	lsls	r2, r3, #21
 80095ae:	d407      	bmi.n	80095c0 <_printf_float+0x1f4>
 80095b0:	6923      	ldr	r3, [r4, #16]
 80095b2:	4642      	mov	r2, r8
 80095b4:	4631      	mov	r1, r6
 80095b6:	4628      	mov	r0, r5
 80095b8:	47b8      	blx	r7
 80095ba:	3001      	adds	r0, #1
 80095bc:	d12c      	bne.n	8009618 <_printf_float+0x24c>
 80095be:	e764      	b.n	800948a <_printf_float+0xbe>
 80095c0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80095c4:	f240 80e0 	bls.w	8009788 <_printf_float+0x3bc>
 80095c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80095cc:	2200      	movs	r2, #0
 80095ce:	2300      	movs	r3, #0
 80095d0:	f7f7 fa7a 	bl	8000ac8 <__aeabi_dcmpeq>
 80095d4:	2800      	cmp	r0, #0
 80095d6:	d034      	beq.n	8009642 <_printf_float+0x276>
 80095d8:	4a37      	ldr	r2, [pc, #220]	; (80096b8 <_printf_float+0x2ec>)
 80095da:	2301      	movs	r3, #1
 80095dc:	4631      	mov	r1, r6
 80095de:	4628      	mov	r0, r5
 80095e0:	47b8      	blx	r7
 80095e2:	3001      	adds	r0, #1
 80095e4:	f43f af51 	beq.w	800948a <_printf_float+0xbe>
 80095e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80095ec:	429a      	cmp	r2, r3
 80095ee:	db02      	blt.n	80095f6 <_printf_float+0x22a>
 80095f0:	6823      	ldr	r3, [r4, #0]
 80095f2:	07d8      	lsls	r0, r3, #31
 80095f4:	d510      	bpl.n	8009618 <_printf_float+0x24c>
 80095f6:	ee18 3a10 	vmov	r3, s16
 80095fa:	4652      	mov	r2, sl
 80095fc:	4631      	mov	r1, r6
 80095fe:	4628      	mov	r0, r5
 8009600:	47b8      	blx	r7
 8009602:	3001      	adds	r0, #1
 8009604:	f43f af41 	beq.w	800948a <_printf_float+0xbe>
 8009608:	f04f 0800 	mov.w	r8, #0
 800960c:	f104 091a 	add.w	r9, r4, #26
 8009610:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009612:	3b01      	subs	r3, #1
 8009614:	4543      	cmp	r3, r8
 8009616:	dc09      	bgt.n	800962c <_printf_float+0x260>
 8009618:	6823      	ldr	r3, [r4, #0]
 800961a:	079b      	lsls	r3, r3, #30
 800961c:	f100 8107 	bmi.w	800982e <_printf_float+0x462>
 8009620:	68e0      	ldr	r0, [r4, #12]
 8009622:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009624:	4298      	cmp	r0, r3
 8009626:	bfb8      	it	lt
 8009628:	4618      	movlt	r0, r3
 800962a:	e730      	b.n	800948e <_printf_float+0xc2>
 800962c:	2301      	movs	r3, #1
 800962e:	464a      	mov	r2, r9
 8009630:	4631      	mov	r1, r6
 8009632:	4628      	mov	r0, r5
 8009634:	47b8      	blx	r7
 8009636:	3001      	adds	r0, #1
 8009638:	f43f af27 	beq.w	800948a <_printf_float+0xbe>
 800963c:	f108 0801 	add.w	r8, r8, #1
 8009640:	e7e6      	b.n	8009610 <_printf_float+0x244>
 8009642:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009644:	2b00      	cmp	r3, #0
 8009646:	dc39      	bgt.n	80096bc <_printf_float+0x2f0>
 8009648:	4a1b      	ldr	r2, [pc, #108]	; (80096b8 <_printf_float+0x2ec>)
 800964a:	2301      	movs	r3, #1
 800964c:	4631      	mov	r1, r6
 800964e:	4628      	mov	r0, r5
 8009650:	47b8      	blx	r7
 8009652:	3001      	adds	r0, #1
 8009654:	f43f af19 	beq.w	800948a <_printf_float+0xbe>
 8009658:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800965c:	4313      	orrs	r3, r2
 800965e:	d102      	bne.n	8009666 <_printf_float+0x29a>
 8009660:	6823      	ldr	r3, [r4, #0]
 8009662:	07d9      	lsls	r1, r3, #31
 8009664:	d5d8      	bpl.n	8009618 <_printf_float+0x24c>
 8009666:	ee18 3a10 	vmov	r3, s16
 800966a:	4652      	mov	r2, sl
 800966c:	4631      	mov	r1, r6
 800966e:	4628      	mov	r0, r5
 8009670:	47b8      	blx	r7
 8009672:	3001      	adds	r0, #1
 8009674:	f43f af09 	beq.w	800948a <_printf_float+0xbe>
 8009678:	f04f 0900 	mov.w	r9, #0
 800967c:	f104 0a1a 	add.w	sl, r4, #26
 8009680:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009682:	425b      	negs	r3, r3
 8009684:	454b      	cmp	r3, r9
 8009686:	dc01      	bgt.n	800968c <_printf_float+0x2c0>
 8009688:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800968a:	e792      	b.n	80095b2 <_printf_float+0x1e6>
 800968c:	2301      	movs	r3, #1
 800968e:	4652      	mov	r2, sl
 8009690:	4631      	mov	r1, r6
 8009692:	4628      	mov	r0, r5
 8009694:	47b8      	blx	r7
 8009696:	3001      	adds	r0, #1
 8009698:	f43f aef7 	beq.w	800948a <_printf_float+0xbe>
 800969c:	f109 0901 	add.w	r9, r9, #1
 80096a0:	e7ee      	b.n	8009680 <_printf_float+0x2b4>
 80096a2:	bf00      	nop
 80096a4:	7fefffff 	.word	0x7fefffff
 80096a8:	0800c0c8 	.word	0x0800c0c8
 80096ac:	0800c0cc 	.word	0x0800c0cc
 80096b0:	0800c0d0 	.word	0x0800c0d0
 80096b4:	0800c0d4 	.word	0x0800c0d4
 80096b8:	0800c0d8 	.word	0x0800c0d8
 80096bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80096be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80096c0:	429a      	cmp	r2, r3
 80096c2:	bfa8      	it	ge
 80096c4:	461a      	movge	r2, r3
 80096c6:	2a00      	cmp	r2, #0
 80096c8:	4691      	mov	r9, r2
 80096ca:	dc37      	bgt.n	800973c <_printf_float+0x370>
 80096cc:	f04f 0b00 	mov.w	fp, #0
 80096d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80096d4:	f104 021a 	add.w	r2, r4, #26
 80096d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80096da:	9305      	str	r3, [sp, #20]
 80096dc:	eba3 0309 	sub.w	r3, r3, r9
 80096e0:	455b      	cmp	r3, fp
 80096e2:	dc33      	bgt.n	800974c <_printf_float+0x380>
 80096e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80096e8:	429a      	cmp	r2, r3
 80096ea:	db3b      	blt.n	8009764 <_printf_float+0x398>
 80096ec:	6823      	ldr	r3, [r4, #0]
 80096ee:	07da      	lsls	r2, r3, #31
 80096f0:	d438      	bmi.n	8009764 <_printf_float+0x398>
 80096f2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80096f6:	eba2 0903 	sub.w	r9, r2, r3
 80096fa:	9b05      	ldr	r3, [sp, #20]
 80096fc:	1ad2      	subs	r2, r2, r3
 80096fe:	4591      	cmp	r9, r2
 8009700:	bfa8      	it	ge
 8009702:	4691      	movge	r9, r2
 8009704:	f1b9 0f00 	cmp.w	r9, #0
 8009708:	dc35      	bgt.n	8009776 <_printf_float+0x3aa>
 800970a:	f04f 0800 	mov.w	r8, #0
 800970e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009712:	f104 0a1a 	add.w	sl, r4, #26
 8009716:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800971a:	1a9b      	subs	r3, r3, r2
 800971c:	eba3 0309 	sub.w	r3, r3, r9
 8009720:	4543      	cmp	r3, r8
 8009722:	f77f af79 	ble.w	8009618 <_printf_float+0x24c>
 8009726:	2301      	movs	r3, #1
 8009728:	4652      	mov	r2, sl
 800972a:	4631      	mov	r1, r6
 800972c:	4628      	mov	r0, r5
 800972e:	47b8      	blx	r7
 8009730:	3001      	adds	r0, #1
 8009732:	f43f aeaa 	beq.w	800948a <_printf_float+0xbe>
 8009736:	f108 0801 	add.w	r8, r8, #1
 800973a:	e7ec      	b.n	8009716 <_printf_float+0x34a>
 800973c:	4613      	mov	r3, r2
 800973e:	4631      	mov	r1, r6
 8009740:	4642      	mov	r2, r8
 8009742:	4628      	mov	r0, r5
 8009744:	47b8      	blx	r7
 8009746:	3001      	adds	r0, #1
 8009748:	d1c0      	bne.n	80096cc <_printf_float+0x300>
 800974a:	e69e      	b.n	800948a <_printf_float+0xbe>
 800974c:	2301      	movs	r3, #1
 800974e:	4631      	mov	r1, r6
 8009750:	4628      	mov	r0, r5
 8009752:	9205      	str	r2, [sp, #20]
 8009754:	47b8      	blx	r7
 8009756:	3001      	adds	r0, #1
 8009758:	f43f ae97 	beq.w	800948a <_printf_float+0xbe>
 800975c:	9a05      	ldr	r2, [sp, #20]
 800975e:	f10b 0b01 	add.w	fp, fp, #1
 8009762:	e7b9      	b.n	80096d8 <_printf_float+0x30c>
 8009764:	ee18 3a10 	vmov	r3, s16
 8009768:	4652      	mov	r2, sl
 800976a:	4631      	mov	r1, r6
 800976c:	4628      	mov	r0, r5
 800976e:	47b8      	blx	r7
 8009770:	3001      	adds	r0, #1
 8009772:	d1be      	bne.n	80096f2 <_printf_float+0x326>
 8009774:	e689      	b.n	800948a <_printf_float+0xbe>
 8009776:	9a05      	ldr	r2, [sp, #20]
 8009778:	464b      	mov	r3, r9
 800977a:	4442      	add	r2, r8
 800977c:	4631      	mov	r1, r6
 800977e:	4628      	mov	r0, r5
 8009780:	47b8      	blx	r7
 8009782:	3001      	adds	r0, #1
 8009784:	d1c1      	bne.n	800970a <_printf_float+0x33e>
 8009786:	e680      	b.n	800948a <_printf_float+0xbe>
 8009788:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800978a:	2a01      	cmp	r2, #1
 800978c:	dc01      	bgt.n	8009792 <_printf_float+0x3c6>
 800978e:	07db      	lsls	r3, r3, #31
 8009790:	d53a      	bpl.n	8009808 <_printf_float+0x43c>
 8009792:	2301      	movs	r3, #1
 8009794:	4642      	mov	r2, r8
 8009796:	4631      	mov	r1, r6
 8009798:	4628      	mov	r0, r5
 800979a:	47b8      	blx	r7
 800979c:	3001      	adds	r0, #1
 800979e:	f43f ae74 	beq.w	800948a <_printf_float+0xbe>
 80097a2:	ee18 3a10 	vmov	r3, s16
 80097a6:	4652      	mov	r2, sl
 80097a8:	4631      	mov	r1, r6
 80097aa:	4628      	mov	r0, r5
 80097ac:	47b8      	blx	r7
 80097ae:	3001      	adds	r0, #1
 80097b0:	f43f ae6b 	beq.w	800948a <_printf_float+0xbe>
 80097b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80097b8:	2200      	movs	r2, #0
 80097ba:	2300      	movs	r3, #0
 80097bc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80097c0:	f7f7 f982 	bl	8000ac8 <__aeabi_dcmpeq>
 80097c4:	b9d8      	cbnz	r0, 80097fe <_printf_float+0x432>
 80097c6:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80097ca:	f108 0201 	add.w	r2, r8, #1
 80097ce:	4631      	mov	r1, r6
 80097d0:	4628      	mov	r0, r5
 80097d2:	47b8      	blx	r7
 80097d4:	3001      	adds	r0, #1
 80097d6:	d10e      	bne.n	80097f6 <_printf_float+0x42a>
 80097d8:	e657      	b.n	800948a <_printf_float+0xbe>
 80097da:	2301      	movs	r3, #1
 80097dc:	4652      	mov	r2, sl
 80097de:	4631      	mov	r1, r6
 80097e0:	4628      	mov	r0, r5
 80097e2:	47b8      	blx	r7
 80097e4:	3001      	adds	r0, #1
 80097e6:	f43f ae50 	beq.w	800948a <_printf_float+0xbe>
 80097ea:	f108 0801 	add.w	r8, r8, #1
 80097ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097f0:	3b01      	subs	r3, #1
 80097f2:	4543      	cmp	r3, r8
 80097f4:	dcf1      	bgt.n	80097da <_printf_float+0x40e>
 80097f6:	464b      	mov	r3, r9
 80097f8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80097fc:	e6da      	b.n	80095b4 <_printf_float+0x1e8>
 80097fe:	f04f 0800 	mov.w	r8, #0
 8009802:	f104 0a1a 	add.w	sl, r4, #26
 8009806:	e7f2      	b.n	80097ee <_printf_float+0x422>
 8009808:	2301      	movs	r3, #1
 800980a:	4642      	mov	r2, r8
 800980c:	e7df      	b.n	80097ce <_printf_float+0x402>
 800980e:	2301      	movs	r3, #1
 8009810:	464a      	mov	r2, r9
 8009812:	4631      	mov	r1, r6
 8009814:	4628      	mov	r0, r5
 8009816:	47b8      	blx	r7
 8009818:	3001      	adds	r0, #1
 800981a:	f43f ae36 	beq.w	800948a <_printf_float+0xbe>
 800981e:	f108 0801 	add.w	r8, r8, #1
 8009822:	68e3      	ldr	r3, [r4, #12]
 8009824:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009826:	1a5b      	subs	r3, r3, r1
 8009828:	4543      	cmp	r3, r8
 800982a:	dcf0      	bgt.n	800980e <_printf_float+0x442>
 800982c:	e6f8      	b.n	8009620 <_printf_float+0x254>
 800982e:	f04f 0800 	mov.w	r8, #0
 8009832:	f104 0919 	add.w	r9, r4, #25
 8009836:	e7f4      	b.n	8009822 <_printf_float+0x456>

08009838 <_printf_common>:
 8009838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800983c:	4616      	mov	r6, r2
 800983e:	4699      	mov	r9, r3
 8009840:	688a      	ldr	r2, [r1, #8]
 8009842:	690b      	ldr	r3, [r1, #16]
 8009844:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009848:	4293      	cmp	r3, r2
 800984a:	bfb8      	it	lt
 800984c:	4613      	movlt	r3, r2
 800984e:	6033      	str	r3, [r6, #0]
 8009850:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009854:	4607      	mov	r7, r0
 8009856:	460c      	mov	r4, r1
 8009858:	b10a      	cbz	r2, 800985e <_printf_common+0x26>
 800985a:	3301      	adds	r3, #1
 800985c:	6033      	str	r3, [r6, #0]
 800985e:	6823      	ldr	r3, [r4, #0]
 8009860:	0699      	lsls	r1, r3, #26
 8009862:	bf42      	ittt	mi
 8009864:	6833      	ldrmi	r3, [r6, #0]
 8009866:	3302      	addmi	r3, #2
 8009868:	6033      	strmi	r3, [r6, #0]
 800986a:	6825      	ldr	r5, [r4, #0]
 800986c:	f015 0506 	ands.w	r5, r5, #6
 8009870:	d106      	bne.n	8009880 <_printf_common+0x48>
 8009872:	f104 0a19 	add.w	sl, r4, #25
 8009876:	68e3      	ldr	r3, [r4, #12]
 8009878:	6832      	ldr	r2, [r6, #0]
 800987a:	1a9b      	subs	r3, r3, r2
 800987c:	42ab      	cmp	r3, r5
 800987e:	dc26      	bgt.n	80098ce <_printf_common+0x96>
 8009880:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009884:	1e13      	subs	r3, r2, #0
 8009886:	6822      	ldr	r2, [r4, #0]
 8009888:	bf18      	it	ne
 800988a:	2301      	movne	r3, #1
 800988c:	0692      	lsls	r2, r2, #26
 800988e:	d42b      	bmi.n	80098e8 <_printf_common+0xb0>
 8009890:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009894:	4649      	mov	r1, r9
 8009896:	4638      	mov	r0, r7
 8009898:	47c0      	blx	r8
 800989a:	3001      	adds	r0, #1
 800989c:	d01e      	beq.n	80098dc <_printf_common+0xa4>
 800989e:	6823      	ldr	r3, [r4, #0]
 80098a0:	6922      	ldr	r2, [r4, #16]
 80098a2:	f003 0306 	and.w	r3, r3, #6
 80098a6:	2b04      	cmp	r3, #4
 80098a8:	bf02      	ittt	eq
 80098aa:	68e5      	ldreq	r5, [r4, #12]
 80098ac:	6833      	ldreq	r3, [r6, #0]
 80098ae:	1aed      	subeq	r5, r5, r3
 80098b0:	68a3      	ldr	r3, [r4, #8]
 80098b2:	bf0c      	ite	eq
 80098b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80098b8:	2500      	movne	r5, #0
 80098ba:	4293      	cmp	r3, r2
 80098bc:	bfc4      	itt	gt
 80098be:	1a9b      	subgt	r3, r3, r2
 80098c0:	18ed      	addgt	r5, r5, r3
 80098c2:	2600      	movs	r6, #0
 80098c4:	341a      	adds	r4, #26
 80098c6:	42b5      	cmp	r5, r6
 80098c8:	d11a      	bne.n	8009900 <_printf_common+0xc8>
 80098ca:	2000      	movs	r0, #0
 80098cc:	e008      	b.n	80098e0 <_printf_common+0xa8>
 80098ce:	2301      	movs	r3, #1
 80098d0:	4652      	mov	r2, sl
 80098d2:	4649      	mov	r1, r9
 80098d4:	4638      	mov	r0, r7
 80098d6:	47c0      	blx	r8
 80098d8:	3001      	adds	r0, #1
 80098da:	d103      	bne.n	80098e4 <_printf_common+0xac>
 80098dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80098e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098e4:	3501      	adds	r5, #1
 80098e6:	e7c6      	b.n	8009876 <_printf_common+0x3e>
 80098e8:	18e1      	adds	r1, r4, r3
 80098ea:	1c5a      	adds	r2, r3, #1
 80098ec:	2030      	movs	r0, #48	; 0x30
 80098ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80098f2:	4422      	add	r2, r4
 80098f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80098f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80098fc:	3302      	adds	r3, #2
 80098fe:	e7c7      	b.n	8009890 <_printf_common+0x58>
 8009900:	2301      	movs	r3, #1
 8009902:	4622      	mov	r2, r4
 8009904:	4649      	mov	r1, r9
 8009906:	4638      	mov	r0, r7
 8009908:	47c0      	blx	r8
 800990a:	3001      	adds	r0, #1
 800990c:	d0e6      	beq.n	80098dc <_printf_common+0xa4>
 800990e:	3601      	adds	r6, #1
 8009910:	e7d9      	b.n	80098c6 <_printf_common+0x8e>
	...

08009914 <_printf_i>:
 8009914:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009918:	7e0f      	ldrb	r7, [r1, #24]
 800991a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800991c:	2f78      	cmp	r7, #120	; 0x78
 800991e:	4691      	mov	r9, r2
 8009920:	4680      	mov	r8, r0
 8009922:	460c      	mov	r4, r1
 8009924:	469a      	mov	sl, r3
 8009926:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800992a:	d807      	bhi.n	800993c <_printf_i+0x28>
 800992c:	2f62      	cmp	r7, #98	; 0x62
 800992e:	d80a      	bhi.n	8009946 <_printf_i+0x32>
 8009930:	2f00      	cmp	r7, #0
 8009932:	f000 80d4 	beq.w	8009ade <_printf_i+0x1ca>
 8009936:	2f58      	cmp	r7, #88	; 0x58
 8009938:	f000 80c0 	beq.w	8009abc <_printf_i+0x1a8>
 800993c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009940:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009944:	e03a      	b.n	80099bc <_printf_i+0xa8>
 8009946:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800994a:	2b15      	cmp	r3, #21
 800994c:	d8f6      	bhi.n	800993c <_printf_i+0x28>
 800994e:	a101      	add	r1, pc, #4	; (adr r1, 8009954 <_printf_i+0x40>)
 8009950:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009954:	080099ad 	.word	0x080099ad
 8009958:	080099c1 	.word	0x080099c1
 800995c:	0800993d 	.word	0x0800993d
 8009960:	0800993d 	.word	0x0800993d
 8009964:	0800993d 	.word	0x0800993d
 8009968:	0800993d 	.word	0x0800993d
 800996c:	080099c1 	.word	0x080099c1
 8009970:	0800993d 	.word	0x0800993d
 8009974:	0800993d 	.word	0x0800993d
 8009978:	0800993d 	.word	0x0800993d
 800997c:	0800993d 	.word	0x0800993d
 8009980:	08009ac5 	.word	0x08009ac5
 8009984:	080099ed 	.word	0x080099ed
 8009988:	08009a7f 	.word	0x08009a7f
 800998c:	0800993d 	.word	0x0800993d
 8009990:	0800993d 	.word	0x0800993d
 8009994:	08009ae7 	.word	0x08009ae7
 8009998:	0800993d 	.word	0x0800993d
 800999c:	080099ed 	.word	0x080099ed
 80099a0:	0800993d 	.word	0x0800993d
 80099a4:	0800993d 	.word	0x0800993d
 80099a8:	08009a87 	.word	0x08009a87
 80099ac:	682b      	ldr	r3, [r5, #0]
 80099ae:	1d1a      	adds	r2, r3, #4
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	602a      	str	r2, [r5, #0]
 80099b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80099b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80099bc:	2301      	movs	r3, #1
 80099be:	e09f      	b.n	8009b00 <_printf_i+0x1ec>
 80099c0:	6820      	ldr	r0, [r4, #0]
 80099c2:	682b      	ldr	r3, [r5, #0]
 80099c4:	0607      	lsls	r7, r0, #24
 80099c6:	f103 0104 	add.w	r1, r3, #4
 80099ca:	6029      	str	r1, [r5, #0]
 80099cc:	d501      	bpl.n	80099d2 <_printf_i+0xbe>
 80099ce:	681e      	ldr	r6, [r3, #0]
 80099d0:	e003      	b.n	80099da <_printf_i+0xc6>
 80099d2:	0646      	lsls	r6, r0, #25
 80099d4:	d5fb      	bpl.n	80099ce <_printf_i+0xba>
 80099d6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80099da:	2e00      	cmp	r6, #0
 80099dc:	da03      	bge.n	80099e6 <_printf_i+0xd2>
 80099de:	232d      	movs	r3, #45	; 0x2d
 80099e0:	4276      	negs	r6, r6
 80099e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80099e6:	485a      	ldr	r0, [pc, #360]	; (8009b50 <_printf_i+0x23c>)
 80099e8:	230a      	movs	r3, #10
 80099ea:	e012      	b.n	8009a12 <_printf_i+0xfe>
 80099ec:	682b      	ldr	r3, [r5, #0]
 80099ee:	6820      	ldr	r0, [r4, #0]
 80099f0:	1d19      	adds	r1, r3, #4
 80099f2:	6029      	str	r1, [r5, #0]
 80099f4:	0605      	lsls	r5, r0, #24
 80099f6:	d501      	bpl.n	80099fc <_printf_i+0xe8>
 80099f8:	681e      	ldr	r6, [r3, #0]
 80099fa:	e002      	b.n	8009a02 <_printf_i+0xee>
 80099fc:	0641      	lsls	r1, r0, #25
 80099fe:	d5fb      	bpl.n	80099f8 <_printf_i+0xe4>
 8009a00:	881e      	ldrh	r6, [r3, #0]
 8009a02:	4853      	ldr	r0, [pc, #332]	; (8009b50 <_printf_i+0x23c>)
 8009a04:	2f6f      	cmp	r7, #111	; 0x6f
 8009a06:	bf0c      	ite	eq
 8009a08:	2308      	moveq	r3, #8
 8009a0a:	230a      	movne	r3, #10
 8009a0c:	2100      	movs	r1, #0
 8009a0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009a12:	6865      	ldr	r5, [r4, #4]
 8009a14:	60a5      	str	r5, [r4, #8]
 8009a16:	2d00      	cmp	r5, #0
 8009a18:	bfa2      	ittt	ge
 8009a1a:	6821      	ldrge	r1, [r4, #0]
 8009a1c:	f021 0104 	bicge.w	r1, r1, #4
 8009a20:	6021      	strge	r1, [r4, #0]
 8009a22:	b90e      	cbnz	r6, 8009a28 <_printf_i+0x114>
 8009a24:	2d00      	cmp	r5, #0
 8009a26:	d04b      	beq.n	8009ac0 <_printf_i+0x1ac>
 8009a28:	4615      	mov	r5, r2
 8009a2a:	fbb6 f1f3 	udiv	r1, r6, r3
 8009a2e:	fb03 6711 	mls	r7, r3, r1, r6
 8009a32:	5dc7      	ldrb	r7, [r0, r7]
 8009a34:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009a38:	4637      	mov	r7, r6
 8009a3a:	42bb      	cmp	r3, r7
 8009a3c:	460e      	mov	r6, r1
 8009a3e:	d9f4      	bls.n	8009a2a <_printf_i+0x116>
 8009a40:	2b08      	cmp	r3, #8
 8009a42:	d10b      	bne.n	8009a5c <_printf_i+0x148>
 8009a44:	6823      	ldr	r3, [r4, #0]
 8009a46:	07de      	lsls	r6, r3, #31
 8009a48:	d508      	bpl.n	8009a5c <_printf_i+0x148>
 8009a4a:	6923      	ldr	r3, [r4, #16]
 8009a4c:	6861      	ldr	r1, [r4, #4]
 8009a4e:	4299      	cmp	r1, r3
 8009a50:	bfde      	ittt	le
 8009a52:	2330      	movle	r3, #48	; 0x30
 8009a54:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009a58:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009a5c:	1b52      	subs	r2, r2, r5
 8009a5e:	6122      	str	r2, [r4, #16]
 8009a60:	f8cd a000 	str.w	sl, [sp]
 8009a64:	464b      	mov	r3, r9
 8009a66:	aa03      	add	r2, sp, #12
 8009a68:	4621      	mov	r1, r4
 8009a6a:	4640      	mov	r0, r8
 8009a6c:	f7ff fee4 	bl	8009838 <_printf_common>
 8009a70:	3001      	adds	r0, #1
 8009a72:	d14a      	bne.n	8009b0a <_printf_i+0x1f6>
 8009a74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009a78:	b004      	add	sp, #16
 8009a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a7e:	6823      	ldr	r3, [r4, #0]
 8009a80:	f043 0320 	orr.w	r3, r3, #32
 8009a84:	6023      	str	r3, [r4, #0]
 8009a86:	4833      	ldr	r0, [pc, #204]	; (8009b54 <_printf_i+0x240>)
 8009a88:	2778      	movs	r7, #120	; 0x78
 8009a8a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009a8e:	6823      	ldr	r3, [r4, #0]
 8009a90:	6829      	ldr	r1, [r5, #0]
 8009a92:	061f      	lsls	r7, r3, #24
 8009a94:	f851 6b04 	ldr.w	r6, [r1], #4
 8009a98:	d402      	bmi.n	8009aa0 <_printf_i+0x18c>
 8009a9a:	065f      	lsls	r7, r3, #25
 8009a9c:	bf48      	it	mi
 8009a9e:	b2b6      	uxthmi	r6, r6
 8009aa0:	07df      	lsls	r7, r3, #31
 8009aa2:	bf48      	it	mi
 8009aa4:	f043 0320 	orrmi.w	r3, r3, #32
 8009aa8:	6029      	str	r1, [r5, #0]
 8009aaa:	bf48      	it	mi
 8009aac:	6023      	strmi	r3, [r4, #0]
 8009aae:	b91e      	cbnz	r6, 8009ab8 <_printf_i+0x1a4>
 8009ab0:	6823      	ldr	r3, [r4, #0]
 8009ab2:	f023 0320 	bic.w	r3, r3, #32
 8009ab6:	6023      	str	r3, [r4, #0]
 8009ab8:	2310      	movs	r3, #16
 8009aba:	e7a7      	b.n	8009a0c <_printf_i+0xf8>
 8009abc:	4824      	ldr	r0, [pc, #144]	; (8009b50 <_printf_i+0x23c>)
 8009abe:	e7e4      	b.n	8009a8a <_printf_i+0x176>
 8009ac0:	4615      	mov	r5, r2
 8009ac2:	e7bd      	b.n	8009a40 <_printf_i+0x12c>
 8009ac4:	682b      	ldr	r3, [r5, #0]
 8009ac6:	6826      	ldr	r6, [r4, #0]
 8009ac8:	6961      	ldr	r1, [r4, #20]
 8009aca:	1d18      	adds	r0, r3, #4
 8009acc:	6028      	str	r0, [r5, #0]
 8009ace:	0635      	lsls	r5, r6, #24
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	d501      	bpl.n	8009ad8 <_printf_i+0x1c4>
 8009ad4:	6019      	str	r1, [r3, #0]
 8009ad6:	e002      	b.n	8009ade <_printf_i+0x1ca>
 8009ad8:	0670      	lsls	r0, r6, #25
 8009ada:	d5fb      	bpl.n	8009ad4 <_printf_i+0x1c0>
 8009adc:	8019      	strh	r1, [r3, #0]
 8009ade:	2300      	movs	r3, #0
 8009ae0:	6123      	str	r3, [r4, #16]
 8009ae2:	4615      	mov	r5, r2
 8009ae4:	e7bc      	b.n	8009a60 <_printf_i+0x14c>
 8009ae6:	682b      	ldr	r3, [r5, #0]
 8009ae8:	1d1a      	adds	r2, r3, #4
 8009aea:	602a      	str	r2, [r5, #0]
 8009aec:	681d      	ldr	r5, [r3, #0]
 8009aee:	6862      	ldr	r2, [r4, #4]
 8009af0:	2100      	movs	r1, #0
 8009af2:	4628      	mov	r0, r5
 8009af4:	f7f6 fb6c 	bl	80001d0 <memchr>
 8009af8:	b108      	cbz	r0, 8009afe <_printf_i+0x1ea>
 8009afa:	1b40      	subs	r0, r0, r5
 8009afc:	6060      	str	r0, [r4, #4]
 8009afe:	6863      	ldr	r3, [r4, #4]
 8009b00:	6123      	str	r3, [r4, #16]
 8009b02:	2300      	movs	r3, #0
 8009b04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b08:	e7aa      	b.n	8009a60 <_printf_i+0x14c>
 8009b0a:	6923      	ldr	r3, [r4, #16]
 8009b0c:	462a      	mov	r2, r5
 8009b0e:	4649      	mov	r1, r9
 8009b10:	4640      	mov	r0, r8
 8009b12:	47d0      	blx	sl
 8009b14:	3001      	adds	r0, #1
 8009b16:	d0ad      	beq.n	8009a74 <_printf_i+0x160>
 8009b18:	6823      	ldr	r3, [r4, #0]
 8009b1a:	079b      	lsls	r3, r3, #30
 8009b1c:	d413      	bmi.n	8009b46 <_printf_i+0x232>
 8009b1e:	68e0      	ldr	r0, [r4, #12]
 8009b20:	9b03      	ldr	r3, [sp, #12]
 8009b22:	4298      	cmp	r0, r3
 8009b24:	bfb8      	it	lt
 8009b26:	4618      	movlt	r0, r3
 8009b28:	e7a6      	b.n	8009a78 <_printf_i+0x164>
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	4632      	mov	r2, r6
 8009b2e:	4649      	mov	r1, r9
 8009b30:	4640      	mov	r0, r8
 8009b32:	47d0      	blx	sl
 8009b34:	3001      	adds	r0, #1
 8009b36:	d09d      	beq.n	8009a74 <_printf_i+0x160>
 8009b38:	3501      	adds	r5, #1
 8009b3a:	68e3      	ldr	r3, [r4, #12]
 8009b3c:	9903      	ldr	r1, [sp, #12]
 8009b3e:	1a5b      	subs	r3, r3, r1
 8009b40:	42ab      	cmp	r3, r5
 8009b42:	dcf2      	bgt.n	8009b2a <_printf_i+0x216>
 8009b44:	e7eb      	b.n	8009b1e <_printf_i+0x20a>
 8009b46:	2500      	movs	r5, #0
 8009b48:	f104 0619 	add.w	r6, r4, #25
 8009b4c:	e7f5      	b.n	8009b3a <_printf_i+0x226>
 8009b4e:	bf00      	nop
 8009b50:	0800c0da 	.word	0x0800c0da
 8009b54:	0800c0eb 	.word	0x0800c0eb

08009b58 <std>:
 8009b58:	2300      	movs	r3, #0
 8009b5a:	b510      	push	{r4, lr}
 8009b5c:	4604      	mov	r4, r0
 8009b5e:	e9c0 3300 	strd	r3, r3, [r0]
 8009b62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009b66:	6083      	str	r3, [r0, #8]
 8009b68:	8181      	strh	r1, [r0, #12]
 8009b6a:	6643      	str	r3, [r0, #100]	; 0x64
 8009b6c:	81c2      	strh	r2, [r0, #14]
 8009b6e:	6183      	str	r3, [r0, #24]
 8009b70:	4619      	mov	r1, r3
 8009b72:	2208      	movs	r2, #8
 8009b74:	305c      	adds	r0, #92	; 0x5c
 8009b76:	f000 f948 	bl	8009e0a <memset>
 8009b7a:	4b0d      	ldr	r3, [pc, #52]	; (8009bb0 <std+0x58>)
 8009b7c:	6263      	str	r3, [r4, #36]	; 0x24
 8009b7e:	4b0d      	ldr	r3, [pc, #52]	; (8009bb4 <std+0x5c>)
 8009b80:	62a3      	str	r3, [r4, #40]	; 0x28
 8009b82:	4b0d      	ldr	r3, [pc, #52]	; (8009bb8 <std+0x60>)
 8009b84:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009b86:	4b0d      	ldr	r3, [pc, #52]	; (8009bbc <std+0x64>)
 8009b88:	6323      	str	r3, [r4, #48]	; 0x30
 8009b8a:	4b0d      	ldr	r3, [pc, #52]	; (8009bc0 <std+0x68>)
 8009b8c:	6224      	str	r4, [r4, #32]
 8009b8e:	429c      	cmp	r4, r3
 8009b90:	d006      	beq.n	8009ba0 <std+0x48>
 8009b92:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009b96:	4294      	cmp	r4, r2
 8009b98:	d002      	beq.n	8009ba0 <std+0x48>
 8009b9a:	33d0      	adds	r3, #208	; 0xd0
 8009b9c:	429c      	cmp	r4, r3
 8009b9e:	d105      	bne.n	8009bac <std+0x54>
 8009ba0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009ba4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ba8:	f000 b9ac 	b.w	8009f04 <__retarget_lock_init_recursive>
 8009bac:	bd10      	pop	{r4, pc}
 8009bae:	bf00      	nop
 8009bb0:	08009d85 	.word	0x08009d85
 8009bb4:	08009da7 	.word	0x08009da7
 8009bb8:	08009ddf 	.word	0x08009ddf
 8009bbc:	08009e03 	.word	0x08009e03
 8009bc0:	20002e70 	.word	0x20002e70

08009bc4 <stdio_exit_handler>:
 8009bc4:	4a02      	ldr	r2, [pc, #8]	; (8009bd0 <stdio_exit_handler+0xc>)
 8009bc6:	4903      	ldr	r1, [pc, #12]	; (8009bd4 <stdio_exit_handler+0x10>)
 8009bc8:	4803      	ldr	r0, [pc, #12]	; (8009bd8 <stdio_exit_handler+0x14>)
 8009bca:	f000 b869 	b.w	8009ca0 <_fwalk_sglue>
 8009bce:	bf00      	nop
 8009bd0:	20000010 	.word	0x20000010
 8009bd4:	0800b8d1 	.word	0x0800b8d1
 8009bd8:	2000001c 	.word	0x2000001c

08009bdc <cleanup_stdio>:
 8009bdc:	6841      	ldr	r1, [r0, #4]
 8009bde:	4b0c      	ldr	r3, [pc, #48]	; (8009c10 <cleanup_stdio+0x34>)
 8009be0:	4299      	cmp	r1, r3
 8009be2:	b510      	push	{r4, lr}
 8009be4:	4604      	mov	r4, r0
 8009be6:	d001      	beq.n	8009bec <cleanup_stdio+0x10>
 8009be8:	f001 fe72 	bl	800b8d0 <_fflush_r>
 8009bec:	68a1      	ldr	r1, [r4, #8]
 8009bee:	4b09      	ldr	r3, [pc, #36]	; (8009c14 <cleanup_stdio+0x38>)
 8009bf0:	4299      	cmp	r1, r3
 8009bf2:	d002      	beq.n	8009bfa <cleanup_stdio+0x1e>
 8009bf4:	4620      	mov	r0, r4
 8009bf6:	f001 fe6b 	bl	800b8d0 <_fflush_r>
 8009bfa:	68e1      	ldr	r1, [r4, #12]
 8009bfc:	4b06      	ldr	r3, [pc, #24]	; (8009c18 <cleanup_stdio+0x3c>)
 8009bfe:	4299      	cmp	r1, r3
 8009c00:	d004      	beq.n	8009c0c <cleanup_stdio+0x30>
 8009c02:	4620      	mov	r0, r4
 8009c04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c08:	f001 be62 	b.w	800b8d0 <_fflush_r>
 8009c0c:	bd10      	pop	{r4, pc}
 8009c0e:	bf00      	nop
 8009c10:	20002e70 	.word	0x20002e70
 8009c14:	20002ed8 	.word	0x20002ed8
 8009c18:	20002f40 	.word	0x20002f40

08009c1c <global_stdio_init.part.0>:
 8009c1c:	b510      	push	{r4, lr}
 8009c1e:	4b0b      	ldr	r3, [pc, #44]	; (8009c4c <global_stdio_init.part.0+0x30>)
 8009c20:	4c0b      	ldr	r4, [pc, #44]	; (8009c50 <global_stdio_init.part.0+0x34>)
 8009c22:	4a0c      	ldr	r2, [pc, #48]	; (8009c54 <global_stdio_init.part.0+0x38>)
 8009c24:	601a      	str	r2, [r3, #0]
 8009c26:	4620      	mov	r0, r4
 8009c28:	2200      	movs	r2, #0
 8009c2a:	2104      	movs	r1, #4
 8009c2c:	f7ff ff94 	bl	8009b58 <std>
 8009c30:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009c34:	2201      	movs	r2, #1
 8009c36:	2109      	movs	r1, #9
 8009c38:	f7ff ff8e 	bl	8009b58 <std>
 8009c3c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009c40:	2202      	movs	r2, #2
 8009c42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c46:	2112      	movs	r1, #18
 8009c48:	f7ff bf86 	b.w	8009b58 <std>
 8009c4c:	20002fa8 	.word	0x20002fa8
 8009c50:	20002e70 	.word	0x20002e70
 8009c54:	08009bc5 	.word	0x08009bc5

08009c58 <__sfp_lock_acquire>:
 8009c58:	4801      	ldr	r0, [pc, #4]	; (8009c60 <__sfp_lock_acquire+0x8>)
 8009c5a:	f000 b954 	b.w	8009f06 <__retarget_lock_acquire_recursive>
 8009c5e:	bf00      	nop
 8009c60:	20002fb1 	.word	0x20002fb1

08009c64 <__sfp_lock_release>:
 8009c64:	4801      	ldr	r0, [pc, #4]	; (8009c6c <__sfp_lock_release+0x8>)
 8009c66:	f000 b94f 	b.w	8009f08 <__retarget_lock_release_recursive>
 8009c6a:	bf00      	nop
 8009c6c:	20002fb1 	.word	0x20002fb1

08009c70 <__sinit>:
 8009c70:	b510      	push	{r4, lr}
 8009c72:	4604      	mov	r4, r0
 8009c74:	f7ff fff0 	bl	8009c58 <__sfp_lock_acquire>
 8009c78:	6a23      	ldr	r3, [r4, #32]
 8009c7a:	b11b      	cbz	r3, 8009c84 <__sinit+0x14>
 8009c7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c80:	f7ff bff0 	b.w	8009c64 <__sfp_lock_release>
 8009c84:	4b04      	ldr	r3, [pc, #16]	; (8009c98 <__sinit+0x28>)
 8009c86:	6223      	str	r3, [r4, #32]
 8009c88:	4b04      	ldr	r3, [pc, #16]	; (8009c9c <__sinit+0x2c>)
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d1f5      	bne.n	8009c7c <__sinit+0xc>
 8009c90:	f7ff ffc4 	bl	8009c1c <global_stdio_init.part.0>
 8009c94:	e7f2      	b.n	8009c7c <__sinit+0xc>
 8009c96:	bf00      	nop
 8009c98:	08009bdd 	.word	0x08009bdd
 8009c9c:	20002fa8 	.word	0x20002fa8

08009ca0 <_fwalk_sglue>:
 8009ca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ca4:	4607      	mov	r7, r0
 8009ca6:	4688      	mov	r8, r1
 8009ca8:	4614      	mov	r4, r2
 8009caa:	2600      	movs	r6, #0
 8009cac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009cb0:	f1b9 0901 	subs.w	r9, r9, #1
 8009cb4:	d505      	bpl.n	8009cc2 <_fwalk_sglue+0x22>
 8009cb6:	6824      	ldr	r4, [r4, #0]
 8009cb8:	2c00      	cmp	r4, #0
 8009cba:	d1f7      	bne.n	8009cac <_fwalk_sglue+0xc>
 8009cbc:	4630      	mov	r0, r6
 8009cbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009cc2:	89ab      	ldrh	r3, [r5, #12]
 8009cc4:	2b01      	cmp	r3, #1
 8009cc6:	d907      	bls.n	8009cd8 <_fwalk_sglue+0x38>
 8009cc8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009ccc:	3301      	adds	r3, #1
 8009cce:	d003      	beq.n	8009cd8 <_fwalk_sglue+0x38>
 8009cd0:	4629      	mov	r1, r5
 8009cd2:	4638      	mov	r0, r7
 8009cd4:	47c0      	blx	r8
 8009cd6:	4306      	orrs	r6, r0
 8009cd8:	3568      	adds	r5, #104	; 0x68
 8009cda:	e7e9      	b.n	8009cb0 <_fwalk_sglue+0x10>

08009cdc <sniprintf>:
 8009cdc:	b40c      	push	{r2, r3}
 8009cde:	b530      	push	{r4, r5, lr}
 8009ce0:	4b17      	ldr	r3, [pc, #92]	; (8009d40 <sniprintf+0x64>)
 8009ce2:	1e0c      	subs	r4, r1, #0
 8009ce4:	681d      	ldr	r5, [r3, #0]
 8009ce6:	b09d      	sub	sp, #116	; 0x74
 8009ce8:	da08      	bge.n	8009cfc <sniprintf+0x20>
 8009cea:	238b      	movs	r3, #139	; 0x8b
 8009cec:	602b      	str	r3, [r5, #0]
 8009cee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009cf2:	b01d      	add	sp, #116	; 0x74
 8009cf4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009cf8:	b002      	add	sp, #8
 8009cfa:	4770      	bx	lr
 8009cfc:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009d00:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009d04:	bf14      	ite	ne
 8009d06:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8009d0a:	4623      	moveq	r3, r4
 8009d0c:	9304      	str	r3, [sp, #16]
 8009d0e:	9307      	str	r3, [sp, #28]
 8009d10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009d14:	9002      	str	r0, [sp, #8]
 8009d16:	9006      	str	r0, [sp, #24]
 8009d18:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009d1c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009d1e:	ab21      	add	r3, sp, #132	; 0x84
 8009d20:	a902      	add	r1, sp, #8
 8009d22:	4628      	mov	r0, r5
 8009d24:	9301      	str	r3, [sp, #4]
 8009d26:	f001 fc4f 	bl	800b5c8 <_svfiprintf_r>
 8009d2a:	1c43      	adds	r3, r0, #1
 8009d2c:	bfbc      	itt	lt
 8009d2e:	238b      	movlt	r3, #139	; 0x8b
 8009d30:	602b      	strlt	r3, [r5, #0]
 8009d32:	2c00      	cmp	r4, #0
 8009d34:	d0dd      	beq.n	8009cf2 <sniprintf+0x16>
 8009d36:	9b02      	ldr	r3, [sp, #8]
 8009d38:	2200      	movs	r2, #0
 8009d3a:	701a      	strb	r2, [r3, #0]
 8009d3c:	e7d9      	b.n	8009cf2 <sniprintf+0x16>
 8009d3e:	bf00      	nop
 8009d40:	20000068 	.word	0x20000068

08009d44 <siprintf>:
 8009d44:	b40e      	push	{r1, r2, r3}
 8009d46:	b500      	push	{lr}
 8009d48:	b09c      	sub	sp, #112	; 0x70
 8009d4a:	ab1d      	add	r3, sp, #116	; 0x74
 8009d4c:	9002      	str	r0, [sp, #8]
 8009d4e:	9006      	str	r0, [sp, #24]
 8009d50:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009d54:	4809      	ldr	r0, [pc, #36]	; (8009d7c <siprintf+0x38>)
 8009d56:	9107      	str	r1, [sp, #28]
 8009d58:	9104      	str	r1, [sp, #16]
 8009d5a:	4909      	ldr	r1, [pc, #36]	; (8009d80 <siprintf+0x3c>)
 8009d5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d60:	9105      	str	r1, [sp, #20]
 8009d62:	6800      	ldr	r0, [r0, #0]
 8009d64:	9301      	str	r3, [sp, #4]
 8009d66:	a902      	add	r1, sp, #8
 8009d68:	f001 fc2e 	bl	800b5c8 <_svfiprintf_r>
 8009d6c:	9b02      	ldr	r3, [sp, #8]
 8009d6e:	2200      	movs	r2, #0
 8009d70:	701a      	strb	r2, [r3, #0]
 8009d72:	b01c      	add	sp, #112	; 0x70
 8009d74:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d78:	b003      	add	sp, #12
 8009d7a:	4770      	bx	lr
 8009d7c:	20000068 	.word	0x20000068
 8009d80:	ffff0208 	.word	0xffff0208

08009d84 <__sread>:
 8009d84:	b510      	push	{r4, lr}
 8009d86:	460c      	mov	r4, r1
 8009d88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d8c:	f000 f86c 	bl	8009e68 <_read_r>
 8009d90:	2800      	cmp	r0, #0
 8009d92:	bfab      	itete	ge
 8009d94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009d96:	89a3      	ldrhlt	r3, [r4, #12]
 8009d98:	181b      	addge	r3, r3, r0
 8009d9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009d9e:	bfac      	ite	ge
 8009da0:	6563      	strge	r3, [r4, #84]	; 0x54
 8009da2:	81a3      	strhlt	r3, [r4, #12]
 8009da4:	bd10      	pop	{r4, pc}

08009da6 <__swrite>:
 8009da6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009daa:	461f      	mov	r7, r3
 8009dac:	898b      	ldrh	r3, [r1, #12]
 8009dae:	05db      	lsls	r3, r3, #23
 8009db0:	4605      	mov	r5, r0
 8009db2:	460c      	mov	r4, r1
 8009db4:	4616      	mov	r6, r2
 8009db6:	d505      	bpl.n	8009dc4 <__swrite+0x1e>
 8009db8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dbc:	2302      	movs	r3, #2
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	f000 f840 	bl	8009e44 <_lseek_r>
 8009dc4:	89a3      	ldrh	r3, [r4, #12]
 8009dc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009dca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009dce:	81a3      	strh	r3, [r4, #12]
 8009dd0:	4632      	mov	r2, r6
 8009dd2:	463b      	mov	r3, r7
 8009dd4:	4628      	mov	r0, r5
 8009dd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009dda:	f000 b857 	b.w	8009e8c <_write_r>

08009dde <__sseek>:
 8009dde:	b510      	push	{r4, lr}
 8009de0:	460c      	mov	r4, r1
 8009de2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009de6:	f000 f82d 	bl	8009e44 <_lseek_r>
 8009dea:	1c43      	adds	r3, r0, #1
 8009dec:	89a3      	ldrh	r3, [r4, #12]
 8009dee:	bf15      	itete	ne
 8009df0:	6560      	strne	r0, [r4, #84]	; 0x54
 8009df2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009df6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009dfa:	81a3      	strheq	r3, [r4, #12]
 8009dfc:	bf18      	it	ne
 8009dfe:	81a3      	strhne	r3, [r4, #12]
 8009e00:	bd10      	pop	{r4, pc}

08009e02 <__sclose>:
 8009e02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e06:	f000 b80d 	b.w	8009e24 <_close_r>

08009e0a <memset>:
 8009e0a:	4402      	add	r2, r0
 8009e0c:	4603      	mov	r3, r0
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	d100      	bne.n	8009e14 <memset+0xa>
 8009e12:	4770      	bx	lr
 8009e14:	f803 1b01 	strb.w	r1, [r3], #1
 8009e18:	e7f9      	b.n	8009e0e <memset+0x4>
	...

08009e1c <_localeconv_r>:
 8009e1c:	4800      	ldr	r0, [pc, #0]	; (8009e20 <_localeconv_r+0x4>)
 8009e1e:	4770      	bx	lr
 8009e20:	2000015c 	.word	0x2000015c

08009e24 <_close_r>:
 8009e24:	b538      	push	{r3, r4, r5, lr}
 8009e26:	4d06      	ldr	r5, [pc, #24]	; (8009e40 <_close_r+0x1c>)
 8009e28:	2300      	movs	r3, #0
 8009e2a:	4604      	mov	r4, r0
 8009e2c:	4608      	mov	r0, r1
 8009e2e:	602b      	str	r3, [r5, #0]
 8009e30:	f7f7 fe5d 	bl	8001aee <_close>
 8009e34:	1c43      	adds	r3, r0, #1
 8009e36:	d102      	bne.n	8009e3e <_close_r+0x1a>
 8009e38:	682b      	ldr	r3, [r5, #0]
 8009e3a:	b103      	cbz	r3, 8009e3e <_close_r+0x1a>
 8009e3c:	6023      	str	r3, [r4, #0]
 8009e3e:	bd38      	pop	{r3, r4, r5, pc}
 8009e40:	20002fac 	.word	0x20002fac

08009e44 <_lseek_r>:
 8009e44:	b538      	push	{r3, r4, r5, lr}
 8009e46:	4d07      	ldr	r5, [pc, #28]	; (8009e64 <_lseek_r+0x20>)
 8009e48:	4604      	mov	r4, r0
 8009e4a:	4608      	mov	r0, r1
 8009e4c:	4611      	mov	r1, r2
 8009e4e:	2200      	movs	r2, #0
 8009e50:	602a      	str	r2, [r5, #0]
 8009e52:	461a      	mov	r2, r3
 8009e54:	f7f7 fe72 	bl	8001b3c <_lseek>
 8009e58:	1c43      	adds	r3, r0, #1
 8009e5a:	d102      	bne.n	8009e62 <_lseek_r+0x1e>
 8009e5c:	682b      	ldr	r3, [r5, #0]
 8009e5e:	b103      	cbz	r3, 8009e62 <_lseek_r+0x1e>
 8009e60:	6023      	str	r3, [r4, #0]
 8009e62:	bd38      	pop	{r3, r4, r5, pc}
 8009e64:	20002fac 	.word	0x20002fac

08009e68 <_read_r>:
 8009e68:	b538      	push	{r3, r4, r5, lr}
 8009e6a:	4d07      	ldr	r5, [pc, #28]	; (8009e88 <_read_r+0x20>)
 8009e6c:	4604      	mov	r4, r0
 8009e6e:	4608      	mov	r0, r1
 8009e70:	4611      	mov	r1, r2
 8009e72:	2200      	movs	r2, #0
 8009e74:	602a      	str	r2, [r5, #0]
 8009e76:	461a      	mov	r2, r3
 8009e78:	f7f7 fe00 	bl	8001a7c <_read>
 8009e7c:	1c43      	adds	r3, r0, #1
 8009e7e:	d102      	bne.n	8009e86 <_read_r+0x1e>
 8009e80:	682b      	ldr	r3, [r5, #0]
 8009e82:	b103      	cbz	r3, 8009e86 <_read_r+0x1e>
 8009e84:	6023      	str	r3, [r4, #0]
 8009e86:	bd38      	pop	{r3, r4, r5, pc}
 8009e88:	20002fac 	.word	0x20002fac

08009e8c <_write_r>:
 8009e8c:	b538      	push	{r3, r4, r5, lr}
 8009e8e:	4d07      	ldr	r5, [pc, #28]	; (8009eac <_write_r+0x20>)
 8009e90:	4604      	mov	r4, r0
 8009e92:	4608      	mov	r0, r1
 8009e94:	4611      	mov	r1, r2
 8009e96:	2200      	movs	r2, #0
 8009e98:	602a      	str	r2, [r5, #0]
 8009e9a:	461a      	mov	r2, r3
 8009e9c:	f7f7 fe0b 	bl	8001ab6 <_write>
 8009ea0:	1c43      	adds	r3, r0, #1
 8009ea2:	d102      	bne.n	8009eaa <_write_r+0x1e>
 8009ea4:	682b      	ldr	r3, [r5, #0]
 8009ea6:	b103      	cbz	r3, 8009eaa <_write_r+0x1e>
 8009ea8:	6023      	str	r3, [r4, #0]
 8009eaa:	bd38      	pop	{r3, r4, r5, pc}
 8009eac:	20002fac 	.word	0x20002fac

08009eb0 <__errno>:
 8009eb0:	4b01      	ldr	r3, [pc, #4]	; (8009eb8 <__errno+0x8>)
 8009eb2:	6818      	ldr	r0, [r3, #0]
 8009eb4:	4770      	bx	lr
 8009eb6:	bf00      	nop
 8009eb8:	20000068 	.word	0x20000068

08009ebc <__libc_init_array>:
 8009ebc:	b570      	push	{r4, r5, r6, lr}
 8009ebe:	4d0d      	ldr	r5, [pc, #52]	; (8009ef4 <__libc_init_array+0x38>)
 8009ec0:	4c0d      	ldr	r4, [pc, #52]	; (8009ef8 <__libc_init_array+0x3c>)
 8009ec2:	1b64      	subs	r4, r4, r5
 8009ec4:	10a4      	asrs	r4, r4, #2
 8009ec6:	2600      	movs	r6, #0
 8009ec8:	42a6      	cmp	r6, r4
 8009eca:	d109      	bne.n	8009ee0 <__libc_init_array+0x24>
 8009ecc:	4d0b      	ldr	r5, [pc, #44]	; (8009efc <__libc_init_array+0x40>)
 8009ece:	4c0c      	ldr	r4, [pc, #48]	; (8009f00 <__libc_init_array+0x44>)
 8009ed0:	f002 f894 	bl	800bffc <_init>
 8009ed4:	1b64      	subs	r4, r4, r5
 8009ed6:	10a4      	asrs	r4, r4, #2
 8009ed8:	2600      	movs	r6, #0
 8009eda:	42a6      	cmp	r6, r4
 8009edc:	d105      	bne.n	8009eea <__libc_init_array+0x2e>
 8009ede:	bd70      	pop	{r4, r5, r6, pc}
 8009ee0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ee4:	4798      	blx	r3
 8009ee6:	3601      	adds	r6, #1
 8009ee8:	e7ee      	b.n	8009ec8 <__libc_init_array+0xc>
 8009eea:	f855 3b04 	ldr.w	r3, [r5], #4
 8009eee:	4798      	blx	r3
 8009ef0:	3601      	adds	r6, #1
 8009ef2:	e7f2      	b.n	8009eda <__libc_init_array+0x1e>
 8009ef4:	0800c444 	.word	0x0800c444
 8009ef8:	0800c444 	.word	0x0800c444
 8009efc:	0800c444 	.word	0x0800c444
 8009f00:	0800c448 	.word	0x0800c448

08009f04 <__retarget_lock_init_recursive>:
 8009f04:	4770      	bx	lr

08009f06 <__retarget_lock_acquire_recursive>:
 8009f06:	4770      	bx	lr

08009f08 <__retarget_lock_release_recursive>:
 8009f08:	4770      	bx	lr

08009f0a <memcpy>:
 8009f0a:	440a      	add	r2, r1
 8009f0c:	4291      	cmp	r1, r2
 8009f0e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009f12:	d100      	bne.n	8009f16 <memcpy+0xc>
 8009f14:	4770      	bx	lr
 8009f16:	b510      	push	{r4, lr}
 8009f18:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009f20:	4291      	cmp	r1, r2
 8009f22:	d1f9      	bne.n	8009f18 <memcpy+0xe>
 8009f24:	bd10      	pop	{r4, pc}

08009f26 <quorem>:
 8009f26:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f2a:	6903      	ldr	r3, [r0, #16]
 8009f2c:	690c      	ldr	r4, [r1, #16]
 8009f2e:	42a3      	cmp	r3, r4
 8009f30:	4607      	mov	r7, r0
 8009f32:	db7e      	blt.n	800a032 <quorem+0x10c>
 8009f34:	3c01      	subs	r4, #1
 8009f36:	f101 0814 	add.w	r8, r1, #20
 8009f3a:	f100 0514 	add.w	r5, r0, #20
 8009f3e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009f42:	9301      	str	r3, [sp, #4]
 8009f44:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009f48:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009f4c:	3301      	adds	r3, #1
 8009f4e:	429a      	cmp	r2, r3
 8009f50:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009f54:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009f58:	fbb2 f6f3 	udiv	r6, r2, r3
 8009f5c:	d331      	bcc.n	8009fc2 <quorem+0x9c>
 8009f5e:	f04f 0e00 	mov.w	lr, #0
 8009f62:	4640      	mov	r0, r8
 8009f64:	46ac      	mov	ip, r5
 8009f66:	46f2      	mov	sl, lr
 8009f68:	f850 2b04 	ldr.w	r2, [r0], #4
 8009f6c:	b293      	uxth	r3, r2
 8009f6e:	fb06 e303 	mla	r3, r6, r3, lr
 8009f72:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009f76:	0c1a      	lsrs	r2, r3, #16
 8009f78:	b29b      	uxth	r3, r3
 8009f7a:	ebaa 0303 	sub.w	r3, sl, r3
 8009f7e:	f8dc a000 	ldr.w	sl, [ip]
 8009f82:	fa13 f38a 	uxtah	r3, r3, sl
 8009f86:	fb06 220e 	mla	r2, r6, lr, r2
 8009f8a:	9300      	str	r3, [sp, #0]
 8009f8c:	9b00      	ldr	r3, [sp, #0]
 8009f8e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009f92:	b292      	uxth	r2, r2
 8009f94:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009f98:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009f9c:	f8bd 3000 	ldrh.w	r3, [sp]
 8009fa0:	4581      	cmp	r9, r0
 8009fa2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009fa6:	f84c 3b04 	str.w	r3, [ip], #4
 8009faa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009fae:	d2db      	bcs.n	8009f68 <quorem+0x42>
 8009fb0:	f855 300b 	ldr.w	r3, [r5, fp]
 8009fb4:	b92b      	cbnz	r3, 8009fc2 <quorem+0x9c>
 8009fb6:	9b01      	ldr	r3, [sp, #4]
 8009fb8:	3b04      	subs	r3, #4
 8009fba:	429d      	cmp	r5, r3
 8009fbc:	461a      	mov	r2, r3
 8009fbe:	d32c      	bcc.n	800a01a <quorem+0xf4>
 8009fc0:	613c      	str	r4, [r7, #16]
 8009fc2:	4638      	mov	r0, r7
 8009fc4:	f001 f9a6 	bl	800b314 <__mcmp>
 8009fc8:	2800      	cmp	r0, #0
 8009fca:	db22      	blt.n	800a012 <quorem+0xec>
 8009fcc:	3601      	adds	r6, #1
 8009fce:	4629      	mov	r1, r5
 8009fd0:	2000      	movs	r0, #0
 8009fd2:	f858 2b04 	ldr.w	r2, [r8], #4
 8009fd6:	f8d1 c000 	ldr.w	ip, [r1]
 8009fda:	b293      	uxth	r3, r2
 8009fdc:	1ac3      	subs	r3, r0, r3
 8009fde:	0c12      	lsrs	r2, r2, #16
 8009fe0:	fa13 f38c 	uxtah	r3, r3, ip
 8009fe4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009fe8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009fec:	b29b      	uxth	r3, r3
 8009fee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009ff2:	45c1      	cmp	r9, r8
 8009ff4:	f841 3b04 	str.w	r3, [r1], #4
 8009ff8:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009ffc:	d2e9      	bcs.n	8009fd2 <quorem+0xac>
 8009ffe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a002:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a006:	b922      	cbnz	r2, 800a012 <quorem+0xec>
 800a008:	3b04      	subs	r3, #4
 800a00a:	429d      	cmp	r5, r3
 800a00c:	461a      	mov	r2, r3
 800a00e:	d30a      	bcc.n	800a026 <quorem+0x100>
 800a010:	613c      	str	r4, [r7, #16]
 800a012:	4630      	mov	r0, r6
 800a014:	b003      	add	sp, #12
 800a016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a01a:	6812      	ldr	r2, [r2, #0]
 800a01c:	3b04      	subs	r3, #4
 800a01e:	2a00      	cmp	r2, #0
 800a020:	d1ce      	bne.n	8009fc0 <quorem+0x9a>
 800a022:	3c01      	subs	r4, #1
 800a024:	e7c9      	b.n	8009fba <quorem+0x94>
 800a026:	6812      	ldr	r2, [r2, #0]
 800a028:	3b04      	subs	r3, #4
 800a02a:	2a00      	cmp	r2, #0
 800a02c:	d1f0      	bne.n	800a010 <quorem+0xea>
 800a02e:	3c01      	subs	r4, #1
 800a030:	e7eb      	b.n	800a00a <quorem+0xe4>
 800a032:	2000      	movs	r0, #0
 800a034:	e7ee      	b.n	800a014 <quorem+0xee>
	...

0800a038 <_dtoa_r>:
 800a038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a03c:	ed2d 8b04 	vpush	{d8-d9}
 800a040:	69c5      	ldr	r5, [r0, #28]
 800a042:	b093      	sub	sp, #76	; 0x4c
 800a044:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a048:	ec57 6b10 	vmov	r6, r7, d0
 800a04c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a050:	9107      	str	r1, [sp, #28]
 800a052:	4604      	mov	r4, r0
 800a054:	920a      	str	r2, [sp, #40]	; 0x28
 800a056:	930d      	str	r3, [sp, #52]	; 0x34
 800a058:	b975      	cbnz	r5, 800a078 <_dtoa_r+0x40>
 800a05a:	2010      	movs	r0, #16
 800a05c:	f000 fe2a 	bl	800acb4 <malloc>
 800a060:	4602      	mov	r2, r0
 800a062:	61e0      	str	r0, [r4, #28]
 800a064:	b920      	cbnz	r0, 800a070 <_dtoa_r+0x38>
 800a066:	4bae      	ldr	r3, [pc, #696]	; (800a320 <_dtoa_r+0x2e8>)
 800a068:	21ef      	movs	r1, #239	; 0xef
 800a06a:	48ae      	ldr	r0, [pc, #696]	; (800a324 <_dtoa_r+0x2ec>)
 800a06c:	f001 fc82 	bl	800b974 <__assert_func>
 800a070:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a074:	6005      	str	r5, [r0, #0]
 800a076:	60c5      	str	r5, [r0, #12]
 800a078:	69e3      	ldr	r3, [r4, #28]
 800a07a:	6819      	ldr	r1, [r3, #0]
 800a07c:	b151      	cbz	r1, 800a094 <_dtoa_r+0x5c>
 800a07e:	685a      	ldr	r2, [r3, #4]
 800a080:	604a      	str	r2, [r1, #4]
 800a082:	2301      	movs	r3, #1
 800a084:	4093      	lsls	r3, r2
 800a086:	608b      	str	r3, [r1, #8]
 800a088:	4620      	mov	r0, r4
 800a08a:	f000 ff07 	bl	800ae9c <_Bfree>
 800a08e:	69e3      	ldr	r3, [r4, #28]
 800a090:	2200      	movs	r2, #0
 800a092:	601a      	str	r2, [r3, #0]
 800a094:	1e3b      	subs	r3, r7, #0
 800a096:	bfbb      	ittet	lt
 800a098:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a09c:	9303      	strlt	r3, [sp, #12]
 800a09e:	2300      	movge	r3, #0
 800a0a0:	2201      	movlt	r2, #1
 800a0a2:	bfac      	ite	ge
 800a0a4:	f8c8 3000 	strge.w	r3, [r8]
 800a0a8:	f8c8 2000 	strlt.w	r2, [r8]
 800a0ac:	4b9e      	ldr	r3, [pc, #632]	; (800a328 <_dtoa_r+0x2f0>)
 800a0ae:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a0b2:	ea33 0308 	bics.w	r3, r3, r8
 800a0b6:	d11b      	bne.n	800a0f0 <_dtoa_r+0xb8>
 800a0b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a0ba:	f242 730f 	movw	r3, #9999	; 0x270f
 800a0be:	6013      	str	r3, [r2, #0]
 800a0c0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a0c4:	4333      	orrs	r3, r6
 800a0c6:	f000 8593 	beq.w	800abf0 <_dtoa_r+0xbb8>
 800a0ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a0cc:	b963      	cbnz	r3, 800a0e8 <_dtoa_r+0xb0>
 800a0ce:	4b97      	ldr	r3, [pc, #604]	; (800a32c <_dtoa_r+0x2f4>)
 800a0d0:	e027      	b.n	800a122 <_dtoa_r+0xea>
 800a0d2:	4b97      	ldr	r3, [pc, #604]	; (800a330 <_dtoa_r+0x2f8>)
 800a0d4:	9300      	str	r3, [sp, #0]
 800a0d6:	3308      	adds	r3, #8
 800a0d8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a0da:	6013      	str	r3, [r2, #0]
 800a0dc:	9800      	ldr	r0, [sp, #0]
 800a0de:	b013      	add	sp, #76	; 0x4c
 800a0e0:	ecbd 8b04 	vpop	{d8-d9}
 800a0e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0e8:	4b90      	ldr	r3, [pc, #576]	; (800a32c <_dtoa_r+0x2f4>)
 800a0ea:	9300      	str	r3, [sp, #0]
 800a0ec:	3303      	adds	r3, #3
 800a0ee:	e7f3      	b.n	800a0d8 <_dtoa_r+0xa0>
 800a0f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	ec51 0b17 	vmov	r0, r1, d7
 800a0fa:	eeb0 8a47 	vmov.f32	s16, s14
 800a0fe:	eef0 8a67 	vmov.f32	s17, s15
 800a102:	2300      	movs	r3, #0
 800a104:	f7f6 fce0 	bl	8000ac8 <__aeabi_dcmpeq>
 800a108:	4681      	mov	r9, r0
 800a10a:	b160      	cbz	r0, 800a126 <_dtoa_r+0xee>
 800a10c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a10e:	2301      	movs	r3, #1
 800a110:	6013      	str	r3, [r2, #0]
 800a112:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a114:	2b00      	cmp	r3, #0
 800a116:	f000 8568 	beq.w	800abea <_dtoa_r+0xbb2>
 800a11a:	4b86      	ldr	r3, [pc, #536]	; (800a334 <_dtoa_r+0x2fc>)
 800a11c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a11e:	6013      	str	r3, [r2, #0]
 800a120:	3b01      	subs	r3, #1
 800a122:	9300      	str	r3, [sp, #0]
 800a124:	e7da      	b.n	800a0dc <_dtoa_r+0xa4>
 800a126:	aa10      	add	r2, sp, #64	; 0x40
 800a128:	a911      	add	r1, sp, #68	; 0x44
 800a12a:	4620      	mov	r0, r4
 800a12c:	eeb0 0a48 	vmov.f32	s0, s16
 800a130:	eef0 0a68 	vmov.f32	s1, s17
 800a134:	f001 f994 	bl	800b460 <__d2b>
 800a138:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a13c:	4682      	mov	sl, r0
 800a13e:	2d00      	cmp	r5, #0
 800a140:	d07f      	beq.n	800a242 <_dtoa_r+0x20a>
 800a142:	ee18 3a90 	vmov	r3, s17
 800a146:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a14a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a14e:	ec51 0b18 	vmov	r0, r1, d8
 800a152:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a156:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a15a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a15e:	4619      	mov	r1, r3
 800a160:	2200      	movs	r2, #0
 800a162:	4b75      	ldr	r3, [pc, #468]	; (800a338 <_dtoa_r+0x300>)
 800a164:	f7f6 f890 	bl	8000288 <__aeabi_dsub>
 800a168:	a367      	add	r3, pc, #412	; (adr r3, 800a308 <_dtoa_r+0x2d0>)
 800a16a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a16e:	f7f6 fa43 	bl	80005f8 <__aeabi_dmul>
 800a172:	a367      	add	r3, pc, #412	; (adr r3, 800a310 <_dtoa_r+0x2d8>)
 800a174:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a178:	f7f6 f888 	bl	800028c <__adddf3>
 800a17c:	4606      	mov	r6, r0
 800a17e:	4628      	mov	r0, r5
 800a180:	460f      	mov	r7, r1
 800a182:	f7f6 f9cf 	bl	8000524 <__aeabi_i2d>
 800a186:	a364      	add	r3, pc, #400	; (adr r3, 800a318 <_dtoa_r+0x2e0>)
 800a188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a18c:	f7f6 fa34 	bl	80005f8 <__aeabi_dmul>
 800a190:	4602      	mov	r2, r0
 800a192:	460b      	mov	r3, r1
 800a194:	4630      	mov	r0, r6
 800a196:	4639      	mov	r1, r7
 800a198:	f7f6 f878 	bl	800028c <__adddf3>
 800a19c:	4606      	mov	r6, r0
 800a19e:	460f      	mov	r7, r1
 800a1a0:	f7f6 fcda 	bl	8000b58 <__aeabi_d2iz>
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	4683      	mov	fp, r0
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	4630      	mov	r0, r6
 800a1ac:	4639      	mov	r1, r7
 800a1ae:	f7f6 fc95 	bl	8000adc <__aeabi_dcmplt>
 800a1b2:	b148      	cbz	r0, 800a1c8 <_dtoa_r+0x190>
 800a1b4:	4658      	mov	r0, fp
 800a1b6:	f7f6 f9b5 	bl	8000524 <__aeabi_i2d>
 800a1ba:	4632      	mov	r2, r6
 800a1bc:	463b      	mov	r3, r7
 800a1be:	f7f6 fc83 	bl	8000ac8 <__aeabi_dcmpeq>
 800a1c2:	b908      	cbnz	r0, 800a1c8 <_dtoa_r+0x190>
 800a1c4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a1c8:	f1bb 0f16 	cmp.w	fp, #22
 800a1cc:	d857      	bhi.n	800a27e <_dtoa_r+0x246>
 800a1ce:	4b5b      	ldr	r3, [pc, #364]	; (800a33c <_dtoa_r+0x304>)
 800a1d0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1d8:	ec51 0b18 	vmov	r0, r1, d8
 800a1dc:	f7f6 fc7e 	bl	8000adc <__aeabi_dcmplt>
 800a1e0:	2800      	cmp	r0, #0
 800a1e2:	d04e      	beq.n	800a282 <_dtoa_r+0x24a>
 800a1e4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	930c      	str	r3, [sp, #48]	; 0x30
 800a1ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a1ee:	1b5b      	subs	r3, r3, r5
 800a1f0:	1e5a      	subs	r2, r3, #1
 800a1f2:	bf45      	ittet	mi
 800a1f4:	f1c3 0301 	rsbmi	r3, r3, #1
 800a1f8:	9305      	strmi	r3, [sp, #20]
 800a1fa:	2300      	movpl	r3, #0
 800a1fc:	2300      	movmi	r3, #0
 800a1fe:	9206      	str	r2, [sp, #24]
 800a200:	bf54      	ite	pl
 800a202:	9305      	strpl	r3, [sp, #20]
 800a204:	9306      	strmi	r3, [sp, #24]
 800a206:	f1bb 0f00 	cmp.w	fp, #0
 800a20a:	db3c      	blt.n	800a286 <_dtoa_r+0x24e>
 800a20c:	9b06      	ldr	r3, [sp, #24]
 800a20e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a212:	445b      	add	r3, fp
 800a214:	9306      	str	r3, [sp, #24]
 800a216:	2300      	movs	r3, #0
 800a218:	9308      	str	r3, [sp, #32]
 800a21a:	9b07      	ldr	r3, [sp, #28]
 800a21c:	2b09      	cmp	r3, #9
 800a21e:	d868      	bhi.n	800a2f2 <_dtoa_r+0x2ba>
 800a220:	2b05      	cmp	r3, #5
 800a222:	bfc4      	itt	gt
 800a224:	3b04      	subgt	r3, #4
 800a226:	9307      	strgt	r3, [sp, #28]
 800a228:	9b07      	ldr	r3, [sp, #28]
 800a22a:	f1a3 0302 	sub.w	r3, r3, #2
 800a22e:	bfcc      	ite	gt
 800a230:	2500      	movgt	r5, #0
 800a232:	2501      	movle	r5, #1
 800a234:	2b03      	cmp	r3, #3
 800a236:	f200 8085 	bhi.w	800a344 <_dtoa_r+0x30c>
 800a23a:	e8df f003 	tbb	[pc, r3]
 800a23e:	3b2e      	.short	0x3b2e
 800a240:	5839      	.short	0x5839
 800a242:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a246:	441d      	add	r5, r3
 800a248:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a24c:	2b20      	cmp	r3, #32
 800a24e:	bfc1      	itttt	gt
 800a250:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a254:	fa08 f803 	lslgt.w	r8, r8, r3
 800a258:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800a25c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a260:	bfd6      	itet	le
 800a262:	f1c3 0320 	rsble	r3, r3, #32
 800a266:	ea48 0003 	orrgt.w	r0, r8, r3
 800a26a:	fa06 f003 	lslle.w	r0, r6, r3
 800a26e:	f7f6 f949 	bl	8000504 <__aeabi_ui2d>
 800a272:	2201      	movs	r2, #1
 800a274:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a278:	3d01      	subs	r5, #1
 800a27a:	920e      	str	r2, [sp, #56]	; 0x38
 800a27c:	e76f      	b.n	800a15e <_dtoa_r+0x126>
 800a27e:	2301      	movs	r3, #1
 800a280:	e7b3      	b.n	800a1ea <_dtoa_r+0x1b2>
 800a282:	900c      	str	r0, [sp, #48]	; 0x30
 800a284:	e7b2      	b.n	800a1ec <_dtoa_r+0x1b4>
 800a286:	9b05      	ldr	r3, [sp, #20]
 800a288:	eba3 030b 	sub.w	r3, r3, fp
 800a28c:	9305      	str	r3, [sp, #20]
 800a28e:	f1cb 0300 	rsb	r3, fp, #0
 800a292:	9308      	str	r3, [sp, #32]
 800a294:	2300      	movs	r3, #0
 800a296:	930b      	str	r3, [sp, #44]	; 0x2c
 800a298:	e7bf      	b.n	800a21a <_dtoa_r+0x1e2>
 800a29a:	2300      	movs	r3, #0
 800a29c:	9309      	str	r3, [sp, #36]	; 0x24
 800a29e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	dc52      	bgt.n	800a34a <_dtoa_r+0x312>
 800a2a4:	2301      	movs	r3, #1
 800a2a6:	9301      	str	r3, [sp, #4]
 800a2a8:	9304      	str	r3, [sp, #16]
 800a2aa:	461a      	mov	r2, r3
 800a2ac:	920a      	str	r2, [sp, #40]	; 0x28
 800a2ae:	e00b      	b.n	800a2c8 <_dtoa_r+0x290>
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	e7f3      	b.n	800a29c <_dtoa_r+0x264>
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	9309      	str	r3, [sp, #36]	; 0x24
 800a2b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2ba:	445b      	add	r3, fp
 800a2bc:	9301      	str	r3, [sp, #4]
 800a2be:	3301      	adds	r3, #1
 800a2c0:	2b01      	cmp	r3, #1
 800a2c2:	9304      	str	r3, [sp, #16]
 800a2c4:	bfb8      	it	lt
 800a2c6:	2301      	movlt	r3, #1
 800a2c8:	69e0      	ldr	r0, [r4, #28]
 800a2ca:	2100      	movs	r1, #0
 800a2cc:	2204      	movs	r2, #4
 800a2ce:	f102 0614 	add.w	r6, r2, #20
 800a2d2:	429e      	cmp	r6, r3
 800a2d4:	d93d      	bls.n	800a352 <_dtoa_r+0x31a>
 800a2d6:	6041      	str	r1, [r0, #4]
 800a2d8:	4620      	mov	r0, r4
 800a2da:	f000 fd9f 	bl	800ae1c <_Balloc>
 800a2de:	9000      	str	r0, [sp, #0]
 800a2e0:	2800      	cmp	r0, #0
 800a2e2:	d139      	bne.n	800a358 <_dtoa_r+0x320>
 800a2e4:	4b16      	ldr	r3, [pc, #88]	; (800a340 <_dtoa_r+0x308>)
 800a2e6:	4602      	mov	r2, r0
 800a2e8:	f240 11af 	movw	r1, #431	; 0x1af
 800a2ec:	e6bd      	b.n	800a06a <_dtoa_r+0x32>
 800a2ee:	2301      	movs	r3, #1
 800a2f0:	e7e1      	b.n	800a2b6 <_dtoa_r+0x27e>
 800a2f2:	2501      	movs	r5, #1
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	9307      	str	r3, [sp, #28]
 800a2f8:	9509      	str	r5, [sp, #36]	; 0x24
 800a2fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a2fe:	9301      	str	r3, [sp, #4]
 800a300:	9304      	str	r3, [sp, #16]
 800a302:	2200      	movs	r2, #0
 800a304:	2312      	movs	r3, #18
 800a306:	e7d1      	b.n	800a2ac <_dtoa_r+0x274>
 800a308:	636f4361 	.word	0x636f4361
 800a30c:	3fd287a7 	.word	0x3fd287a7
 800a310:	8b60c8b3 	.word	0x8b60c8b3
 800a314:	3fc68a28 	.word	0x3fc68a28
 800a318:	509f79fb 	.word	0x509f79fb
 800a31c:	3fd34413 	.word	0x3fd34413
 800a320:	0800c109 	.word	0x0800c109
 800a324:	0800c120 	.word	0x0800c120
 800a328:	7ff00000 	.word	0x7ff00000
 800a32c:	0800c105 	.word	0x0800c105
 800a330:	0800c0fc 	.word	0x0800c0fc
 800a334:	0800c0d9 	.word	0x0800c0d9
 800a338:	3ff80000 	.word	0x3ff80000
 800a33c:	0800c210 	.word	0x0800c210
 800a340:	0800c178 	.word	0x0800c178
 800a344:	2301      	movs	r3, #1
 800a346:	9309      	str	r3, [sp, #36]	; 0x24
 800a348:	e7d7      	b.n	800a2fa <_dtoa_r+0x2c2>
 800a34a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a34c:	9301      	str	r3, [sp, #4]
 800a34e:	9304      	str	r3, [sp, #16]
 800a350:	e7ba      	b.n	800a2c8 <_dtoa_r+0x290>
 800a352:	3101      	adds	r1, #1
 800a354:	0052      	lsls	r2, r2, #1
 800a356:	e7ba      	b.n	800a2ce <_dtoa_r+0x296>
 800a358:	69e3      	ldr	r3, [r4, #28]
 800a35a:	9a00      	ldr	r2, [sp, #0]
 800a35c:	601a      	str	r2, [r3, #0]
 800a35e:	9b04      	ldr	r3, [sp, #16]
 800a360:	2b0e      	cmp	r3, #14
 800a362:	f200 80a8 	bhi.w	800a4b6 <_dtoa_r+0x47e>
 800a366:	2d00      	cmp	r5, #0
 800a368:	f000 80a5 	beq.w	800a4b6 <_dtoa_r+0x47e>
 800a36c:	f1bb 0f00 	cmp.w	fp, #0
 800a370:	dd38      	ble.n	800a3e4 <_dtoa_r+0x3ac>
 800a372:	4bc0      	ldr	r3, [pc, #768]	; (800a674 <_dtoa_r+0x63c>)
 800a374:	f00b 020f 	and.w	r2, fp, #15
 800a378:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a37c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a380:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a384:	ea4f 182b 	mov.w	r8, fp, asr #4
 800a388:	d019      	beq.n	800a3be <_dtoa_r+0x386>
 800a38a:	4bbb      	ldr	r3, [pc, #748]	; (800a678 <_dtoa_r+0x640>)
 800a38c:	ec51 0b18 	vmov	r0, r1, d8
 800a390:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a394:	f7f6 fa5a 	bl	800084c <__aeabi_ddiv>
 800a398:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a39c:	f008 080f 	and.w	r8, r8, #15
 800a3a0:	2503      	movs	r5, #3
 800a3a2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800a678 <_dtoa_r+0x640>
 800a3a6:	f1b8 0f00 	cmp.w	r8, #0
 800a3aa:	d10a      	bne.n	800a3c2 <_dtoa_r+0x38a>
 800a3ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a3b0:	4632      	mov	r2, r6
 800a3b2:	463b      	mov	r3, r7
 800a3b4:	f7f6 fa4a 	bl	800084c <__aeabi_ddiv>
 800a3b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a3bc:	e02b      	b.n	800a416 <_dtoa_r+0x3de>
 800a3be:	2502      	movs	r5, #2
 800a3c0:	e7ef      	b.n	800a3a2 <_dtoa_r+0x36a>
 800a3c2:	f018 0f01 	tst.w	r8, #1
 800a3c6:	d008      	beq.n	800a3da <_dtoa_r+0x3a2>
 800a3c8:	4630      	mov	r0, r6
 800a3ca:	4639      	mov	r1, r7
 800a3cc:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a3d0:	f7f6 f912 	bl	80005f8 <__aeabi_dmul>
 800a3d4:	3501      	adds	r5, #1
 800a3d6:	4606      	mov	r6, r0
 800a3d8:	460f      	mov	r7, r1
 800a3da:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a3de:	f109 0908 	add.w	r9, r9, #8
 800a3e2:	e7e0      	b.n	800a3a6 <_dtoa_r+0x36e>
 800a3e4:	f000 809f 	beq.w	800a526 <_dtoa_r+0x4ee>
 800a3e8:	f1cb 0600 	rsb	r6, fp, #0
 800a3ec:	4ba1      	ldr	r3, [pc, #644]	; (800a674 <_dtoa_r+0x63c>)
 800a3ee:	4fa2      	ldr	r7, [pc, #648]	; (800a678 <_dtoa_r+0x640>)
 800a3f0:	f006 020f 	and.w	r2, r6, #15
 800a3f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a3f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3fc:	ec51 0b18 	vmov	r0, r1, d8
 800a400:	f7f6 f8fa 	bl	80005f8 <__aeabi_dmul>
 800a404:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a408:	1136      	asrs	r6, r6, #4
 800a40a:	2300      	movs	r3, #0
 800a40c:	2502      	movs	r5, #2
 800a40e:	2e00      	cmp	r6, #0
 800a410:	d17e      	bne.n	800a510 <_dtoa_r+0x4d8>
 800a412:	2b00      	cmp	r3, #0
 800a414:	d1d0      	bne.n	800a3b8 <_dtoa_r+0x380>
 800a416:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a418:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	f000 8084 	beq.w	800a52a <_dtoa_r+0x4f2>
 800a422:	4b96      	ldr	r3, [pc, #600]	; (800a67c <_dtoa_r+0x644>)
 800a424:	2200      	movs	r2, #0
 800a426:	4640      	mov	r0, r8
 800a428:	4649      	mov	r1, r9
 800a42a:	f7f6 fb57 	bl	8000adc <__aeabi_dcmplt>
 800a42e:	2800      	cmp	r0, #0
 800a430:	d07b      	beq.n	800a52a <_dtoa_r+0x4f2>
 800a432:	9b04      	ldr	r3, [sp, #16]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d078      	beq.n	800a52a <_dtoa_r+0x4f2>
 800a438:	9b01      	ldr	r3, [sp, #4]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	dd39      	ble.n	800a4b2 <_dtoa_r+0x47a>
 800a43e:	4b90      	ldr	r3, [pc, #576]	; (800a680 <_dtoa_r+0x648>)
 800a440:	2200      	movs	r2, #0
 800a442:	4640      	mov	r0, r8
 800a444:	4649      	mov	r1, r9
 800a446:	f7f6 f8d7 	bl	80005f8 <__aeabi_dmul>
 800a44a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a44e:	9e01      	ldr	r6, [sp, #4]
 800a450:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800a454:	3501      	adds	r5, #1
 800a456:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a45a:	4628      	mov	r0, r5
 800a45c:	f7f6 f862 	bl	8000524 <__aeabi_i2d>
 800a460:	4642      	mov	r2, r8
 800a462:	464b      	mov	r3, r9
 800a464:	f7f6 f8c8 	bl	80005f8 <__aeabi_dmul>
 800a468:	4b86      	ldr	r3, [pc, #536]	; (800a684 <_dtoa_r+0x64c>)
 800a46a:	2200      	movs	r2, #0
 800a46c:	f7f5 ff0e 	bl	800028c <__adddf3>
 800a470:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a474:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a478:	9303      	str	r3, [sp, #12]
 800a47a:	2e00      	cmp	r6, #0
 800a47c:	d158      	bne.n	800a530 <_dtoa_r+0x4f8>
 800a47e:	4b82      	ldr	r3, [pc, #520]	; (800a688 <_dtoa_r+0x650>)
 800a480:	2200      	movs	r2, #0
 800a482:	4640      	mov	r0, r8
 800a484:	4649      	mov	r1, r9
 800a486:	f7f5 feff 	bl	8000288 <__aeabi_dsub>
 800a48a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a48e:	4680      	mov	r8, r0
 800a490:	4689      	mov	r9, r1
 800a492:	f7f6 fb41 	bl	8000b18 <__aeabi_dcmpgt>
 800a496:	2800      	cmp	r0, #0
 800a498:	f040 8296 	bne.w	800a9c8 <_dtoa_r+0x990>
 800a49c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a4a0:	4640      	mov	r0, r8
 800a4a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a4a6:	4649      	mov	r1, r9
 800a4a8:	f7f6 fb18 	bl	8000adc <__aeabi_dcmplt>
 800a4ac:	2800      	cmp	r0, #0
 800a4ae:	f040 8289 	bne.w	800a9c4 <_dtoa_r+0x98c>
 800a4b2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a4b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	f2c0 814e 	blt.w	800a75a <_dtoa_r+0x722>
 800a4be:	f1bb 0f0e 	cmp.w	fp, #14
 800a4c2:	f300 814a 	bgt.w	800a75a <_dtoa_r+0x722>
 800a4c6:	4b6b      	ldr	r3, [pc, #428]	; (800a674 <_dtoa_r+0x63c>)
 800a4c8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a4cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a4d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	f280 80dc 	bge.w	800a690 <_dtoa_r+0x658>
 800a4d8:	9b04      	ldr	r3, [sp, #16]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	f300 80d8 	bgt.w	800a690 <_dtoa_r+0x658>
 800a4e0:	f040 826f 	bne.w	800a9c2 <_dtoa_r+0x98a>
 800a4e4:	4b68      	ldr	r3, [pc, #416]	; (800a688 <_dtoa_r+0x650>)
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	4640      	mov	r0, r8
 800a4ea:	4649      	mov	r1, r9
 800a4ec:	f7f6 f884 	bl	80005f8 <__aeabi_dmul>
 800a4f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a4f4:	f7f6 fb06 	bl	8000b04 <__aeabi_dcmpge>
 800a4f8:	9e04      	ldr	r6, [sp, #16]
 800a4fa:	4637      	mov	r7, r6
 800a4fc:	2800      	cmp	r0, #0
 800a4fe:	f040 8245 	bne.w	800a98c <_dtoa_r+0x954>
 800a502:	9d00      	ldr	r5, [sp, #0]
 800a504:	2331      	movs	r3, #49	; 0x31
 800a506:	f805 3b01 	strb.w	r3, [r5], #1
 800a50a:	f10b 0b01 	add.w	fp, fp, #1
 800a50e:	e241      	b.n	800a994 <_dtoa_r+0x95c>
 800a510:	07f2      	lsls	r2, r6, #31
 800a512:	d505      	bpl.n	800a520 <_dtoa_r+0x4e8>
 800a514:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a518:	f7f6 f86e 	bl	80005f8 <__aeabi_dmul>
 800a51c:	3501      	adds	r5, #1
 800a51e:	2301      	movs	r3, #1
 800a520:	1076      	asrs	r6, r6, #1
 800a522:	3708      	adds	r7, #8
 800a524:	e773      	b.n	800a40e <_dtoa_r+0x3d6>
 800a526:	2502      	movs	r5, #2
 800a528:	e775      	b.n	800a416 <_dtoa_r+0x3de>
 800a52a:	9e04      	ldr	r6, [sp, #16]
 800a52c:	465f      	mov	r7, fp
 800a52e:	e792      	b.n	800a456 <_dtoa_r+0x41e>
 800a530:	9900      	ldr	r1, [sp, #0]
 800a532:	4b50      	ldr	r3, [pc, #320]	; (800a674 <_dtoa_r+0x63c>)
 800a534:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a538:	4431      	add	r1, r6
 800a53a:	9102      	str	r1, [sp, #8]
 800a53c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a53e:	eeb0 9a47 	vmov.f32	s18, s14
 800a542:	eef0 9a67 	vmov.f32	s19, s15
 800a546:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a54a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a54e:	2900      	cmp	r1, #0
 800a550:	d044      	beq.n	800a5dc <_dtoa_r+0x5a4>
 800a552:	494e      	ldr	r1, [pc, #312]	; (800a68c <_dtoa_r+0x654>)
 800a554:	2000      	movs	r0, #0
 800a556:	f7f6 f979 	bl	800084c <__aeabi_ddiv>
 800a55a:	ec53 2b19 	vmov	r2, r3, d9
 800a55e:	f7f5 fe93 	bl	8000288 <__aeabi_dsub>
 800a562:	9d00      	ldr	r5, [sp, #0]
 800a564:	ec41 0b19 	vmov	d9, r0, r1
 800a568:	4649      	mov	r1, r9
 800a56a:	4640      	mov	r0, r8
 800a56c:	f7f6 faf4 	bl	8000b58 <__aeabi_d2iz>
 800a570:	4606      	mov	r6, r0
 800a572:	f7f5 ffd7 	bl	8000524 <__aeabi_i2d>
 800a576:	4602      	mov	r2, r0
 800a578:	460b      	mov	r3, r1
 800a57a:	4640      	mov	r0, r8
 800a57c:	4649      	mov	r1, r9
 800a57e:	f7f5 fe83 	bl	8000288 <__aeabi_dsub>
 800a582:	3630      	adds	r6, #48	; 0x30
 800a584:	f805 6b01 	strb.w	r6, [r5], #1
 800a588:	ec53 2b19 	vmov	r2, r3, d9
 800a58c:	4680      	mov	r8, r0
 800a58e:	4689      	mov	r9, r1
 800a590:	f7f6 faa4 	bl	8000adc <__aeabi_dcmplt>
 800a594:	2800      	cmp	r0, #0
 800a596:	d164      	bne.n	800a662 <_dtoa_r+0x62a>
 800a598:	4642      	mov	r2, r8
 800a59a:	464b      	mov	r3, r9
 800a59c:	4937      	ldr	r1, [pc, #220]	; (800a67c <_dtoa_r+0x644>)
 800a59e:	2000      	movs	r0, #0
 800a5a0:	f7f5 fe72 	bl	8000288 <__aeabi_dsub>
 800a5a4:	ec53 2b19 	vmov	r2, r3, d9
 800a5a8:	f7f6 fa98 	bl	8000adc <__aeabi_dcmplt>
 800a5ac:	2800      	cmp	r0, #0
 800a5ae:	f040 80b6 	bne.w	800a71e <_dtoa_r+0x6e6>
 800a5b2:	9b02      	ldr	r3, [sp, #8]
 800a5b4:	429d      	cmp	r5, r3
 800a5b6:	f43f af7c 	beq.w	800a4b2 <_dtoa_r+0x47a>
 800a5ba:	4b31      	ldr	r3, [pc, #196]	; (800a680 <_dtoa_r+0x648>)
 800a5bc:	ec51 0b19 	vmov	r0, r1, d9
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	f7f6 f819 	bl	80005f8 <__aeabi_dmul>
 800a5c6:	4b2e      	ldr	r3, [pc, #184]	; (800a680 <_dtoa_r+0x648>)
 800a5c8:	ec41 0b19 	vmov	d9, r0, r1
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	4640      	mov	r0, r8
 800a5d0:	4649      	mov	r1, r9
 800a5d2:	f7f6 f811 	bl	80005f8 <__aeabi_dmul>
 800a5d6:	4680      	mov	r8, r0
 800a5d8:	4689      	mov	r9, r1
 800a5da:	e7c5      	b.n	800a568 <_dtoa_r+0x530>
 800a5dc:	ec51 0b17 	vmov	r0, r1, d7
 800a5e0:	f7f6 f80a 	bl	80005f8 <__aeabi_dmul>
 800a5e4:	9b02      	ldr	r3, [sp, #8]
 800a5e6:	9d00      	ldr	r5, [sp, #0]
 800a5e8:	930f      	str	r3, [sp, #60]	; 0x3c
 800a5ea:	ec41 0b19 	vmov	d9, r0, r1
 800a5ee:	4649      	mov	r1, r9
 800a5f0:	4640      	mov	r0, r8
 800a5f2:	f7f6 fab1 	bl	8000b58 <__aeabi_d2iz>
 800a5f6:	4606      	mov	r6, r0
 800a5f8:	f7f5 ff94 	bl	8000524 <__aeabi_i2d>
 800a5fc:	3630      	adds	r6, #48	; 0x30
 800a5fe:	4602      	mov	r2, r0
 800a600:	460b      	mov	r3, r1
 800a602:	4640      	mov	r0, r8
 800a604:	4649      	mov	r1, r9
 800a606:	f7f5 fe3f 	bl	8000288 <__aeabi_dsub>
 800a60a:	f805 6b01 	strb.w	r6, [r5], #1
 800a60e:	9b02      	ldr	r3, [sp, #8]
 800a610:	429d      	cmp	r5, r3
 800a612:	4680      	mov	r8, r0
 800a614:	4689      	mov	r9, r1
 800a616:	f04f 0200 	mov.w	r2, #0
 800a61a:	d124      	bne.n	800a666 <_dtoa_r+0x62e>
 800a61c:	4b1b      	ldr	r3, [pc, #108]	; (800a68c <_dtoa_r+0x654>)
 800a61e:	ec51 0b19 	vmov	r0, r1, d9
 800a622:	f7f5 fe33 	bl	800028c <__adddf3>
 800a626:	4602      	mov	r2, r0
 800a628:	460b      	mov	r3, r1
 800a62a:	4640      	mov	r0, r8
 800a62c:	4649      	mov	r1, r9
 800a62e:	f7f6 fa73 	bl	8000b18 <__aeabi_dcmpgt>
 800a632:	2800      	cmp	r0, #0
 800a634:	d173      	bne.n	800a71e <_dtoa_r+0x6e6>
 800a636:	ec53 2b19 	vmov	r2, r3, d9
 800a63a:	4914      	ldr	r1, [pc, #80]	; (800a68c <_dtoa_r+0x654>)
 800a63c:	2000      	movs	r0, #0
 800a63e:	f7f5 fe23 	bl	8000288 <__aeabi_dsub>
 800a642:	4602      	mov	r2, r0
 800a644:	460b      	mov	r3, r1
 800a646:	4640      	mov	r0, r8
 800a648:	4649      	mov	r1, r9
 800a64a:	f7f6 fa47 	bl	8000adc <__aeabi_dcmplt>
 800a64e:	2800      	cmp	r0, #0
 800a650:	f43f af2f 	beq.w	800a4b2 <_dtoa_r+0x47a>
 800a654:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a656:	1e6b      	subs	r3, r5, #1
 800a658:	930f      	str	r3, [sp, #60]	; 0x3c
 800a65a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a65e:	2b30      	cmp	r3, #48	; 0x30
 800a660:	d0f8      	beq.n	800a654 <_dtoa_r+0x61c>
 800a662:	46bb      	mov	fp, r7
 800a664:	e04a      	b.n	800a6fc <_dtoa_r+0x6c4>
 800a666:	4b06      	ldr	r3, [pc, #24]	; (800a680 <_dtoa_r+0x648>)
 800a668:	f7f5 ffc6 	bl	80005f8 <__aeabi_dmul>
 800a66c:	4680      	mov	r8, r0
 800a66e:	4689      	mov	r9, r1
 800a670:	e7bd      	b.n	800a5ee <_dtoa_r+0x5b6>
 800a672:	bf00      	nop
 800a674:	0800c210 	.word	0x0800c210
 800a678:	0800c1e8 	.word	0x0800c1e8
 800a67c:	3ff00000 	.word	0x3ff00000
 800a680:	40240000 	.word	0x40240000
 800a684:	401c0000 	.word	0x401c0000
 800a688:	40140000 	.word	0x40140000
 800a68c:	3fe00000 	.word	0x3fe00000
 800a690:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a694:	9d00      	ldr	r5, [sp, #0]
 800a696:	4642      	mov	r2, r8
 800a698:	464b      	mov	r3, r9
 800a69a:	4630      	mov	r0, r6
 800a69c:	4639      	mov	r1, r7
 800a69e:	f7f6 f8d5 	bl	800084c <__aeabi_ddiv>
 800a6a2:	f7f6 fa59 	bl	8000b58 <__aeabi_d2iz>
 800a6a6:	9001      	str	r0, [sp, #4]
 800a6a8:	f7f5 ff3c 	bl	8000524 <__aeabi_i2d>
 800a6ac:	4642      	mov	r2, r8
 800a6ae:	464b      	mov	r3, r9
 800a6b0:	f7f5 ffa2 	bl	80005f8 <__aeabi_dmul>
 800a6b4:	4602      	mov	r2, r0
 800a6b6:	460b      	mov	r3, r1
 800a6b8:	4630      	mov	r0, r6
 800a6ba:	4639      	mov	r1, r7
 800a6bc:	f7f5 fde4 	bl	8000288 <__aeabi_dsub>
 800a6c0:	9e01      	ldr	r6, [sp, #4]
 800a6c2:	9f04      	ldr	r7, [sp, #16]
 800a6c4:	3630      	adds	r6, #48	; 0x30
 800a6c6:	f805 6b01 	strb.w	r6, [r5], #1
 800a6ca:	9e00      	ldr	r6, [sp, #0]
 800a6cc:	1bae      	subs	r6, r5, r6
 800a6ce:	42b7      	cmp	r7, r6
 800a6d0:	4602      	mov	r2, r0
 800a6d2:	460b      	mov	r3, r1
 800a6d4:	d134      	bne.n	800a740 <_dtoa_r+0x708>
 800a6d6:	f7f5 fdd9 	bl	800028c <__adddf3>
 800a6da:	4642      	mov	r2, r8
 800a6dc:	464b      	mov	r3, r9
 800a6de:	4606      	mov	r6, r0
 800a6e0:	460f      	mov	r7, r1
 800a6e2:	f7f6 fa19 	bl	8000b18 <__aeabi_dcmpgt>
 800a6e6:	b9c8      	cbnz	r0, 800a71c <_dtoa_r+0x6e4>
 800a6e8:	4642      	mov	r2, r8
 800a6ea:	464b      	mov	r3, r9
 800a6ec:	4630      	mov	r0, r6
 800a6ee:	4639      	mov	r1, r7
 800a6f0:	f7f6 f9ea 	bl	8000ac8 <__aeabi_dcmpeq>
 800a6f4:	b110      	cbz	r0, 800a6fc <_dtoa_r+0x6c4>
 800a6f6:	9b01      	ldr	r3, [sp, #4]
 800a6f8:	07db      	lsls	r3, r3, #31
 800a6fa:	d40f      	bmi.n	800a71c <_dtoa_r+0x6e4>
 800a6fc:	4651      	mov	r1, sl
 800a6fe:	4620      	mov	r0, r4
 800a700:	f000 fbcc 	bl	800ae9c <_Bfree>
 800a704:	2300      	movs	r3, #0
 800a706:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a708:	702b      	strb	r3, [r5, #0]
 800a70a:	f10b 0301 	add.w	r3, fp, #1
 800a70e:	6013      	str	r3, [r2, #0]
 800a710:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a712:	2b00      	cmp	r3, #0
 800a714:	f43f ace2 	beq.w	800a0dc <_dtoa_r+0xa4>
 800a718:	601d      	str	r5, [r3, #0]
 800a71a:	e4df      	b.n	800a0dc <_dtoa_r+0xa4>
 800a71c:	465f      	mov	r7, fp
 800a71e:	462b      	mov	r3, r5
 800a720:	461d      	mov	r5, r3
 800a722:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a726:	2a39      	cmp	r2, #57	; 0x39
 800a728:	d106      	bne.n	800a738 <_dtoa_r+0x700>
 800a72a:	9a00      	ldr	r2, [sp, #0]
 800a72c:	429a      	cmp	r2, r3
 800a72e:	d1f7      	bne.n	800a720 <_dtoa_r+0x6e8>
 800a730:	9900      	ldr	r1, [sp, #0]
 800a732:	2230      	movs	r2, #48	; 0x30
 800a734:	3701      	adds	r7, #1
 800a736:	700a      	strb	r2, [r1, #0]
 800a738:	781a      	ldrb	r2, [r3, #0]
 800a73a:	3201      	adds	r2, #1
 800a73c:	701a      	strb	r2, [r3, #0]
 800a73e:	e790      	b.n	800a662 <_dtoa_r+0x62a>
 800a740:	4ba3      	ldr	r3, [pc, #652]	; (800a9d0 <_dtoa_r+0x998>)
 800a742:	2200      	movs	r2, #0
 800a744:	f7f5 ff58 	bl	80005f8 <__aeabi_dmul>
 800a748:	2200      	movs	r2, #0
 800a74a:	2300      	movs	r3, #0
 800a74c:	4606      	mov	r6, r0
 800a74e:	460f      	mov	r7, r1
 800a750:	f7f6 f9ba 	bl	8000ac8 <__aeabi_dcmpeq>
 800a754:	2800      	cmp	r0, #0
 800a756:	d09e      	beq.n	800a696 <_dtoa_r+0x65e>
 800a758:	e7d0      	b.n	800a6fc <_dtoa_r+0x6c4>
 800a75a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a75c:	2a00      	cmp	r2, #0
 800a75e:	f000 80ca 	beq.w	800a8f6 <_dtoa_r+0x8be>
 800a762:	9a07      	ldr	r2, [sp, #28]
 800a764:	2a01      	cmp	r2, #1
 800a766:	f300 80ad 	bgt.w	800a8c4 <_dtoa_r+0x88c>
 800a76a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a76c:	2a00      	cmp	r2, #0
 800a76e:	f000 80a5 	beq.w	800a8bc <_dtoa_r+0x884>
 800a772:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a776:	9e08      	ldr	r6, [sp, #32]
 800a778:	9d05      	ldr	r5, [sp, #20]
 800a77a:	9a05      	ldr	r2, [sp, #20]
 800a77c:	441a      	add	r2, r3
 800a77e:	9205      	str	r2, [sp, #20]
 800a780:	9a06      	ldr	r2, [sp, #24]
 800a782:	2101      	movs	r1, #1
 800a784:	441a      	add	r2, r3
 800a786:	4620      	mov	r0, r4
 800a788:	9206      	str	r2, [sp, #24]
 800a78a:	f000 fc3d 	bl	800b008 <__i2b>
 800a78e:	4607      	mov	r7, r0
 800a790:	b165      	cbz	r5, 800a7ac <_dtoa_r+0x774>
 800a792:	9b06      	ldr	r3, [sp, #24]
 800a794:	2b00      	cmp	r3, #0
 800a796:	dd09      	ble.n	800a7ac <_dtoa_r+0x774>
 800a798:	42ab      	cmp	r3, r5
 800a79a:	9a05      	ldr	r2, [sp, #20]
 800a79c:	bfa8      	it	ge
 800a79e:	462b      	movge	r3, r5
 800a7a0:	1ad2      	subs	r2, r2, r3
 800a7a2:	9205      	str	r2, [sp, #20]
 800a7a4:	9a06      	ldr	r2, [sp, #24]
 800a7a6:	1aed      	subs	r5, r5, r3
 800a7a8:	1ad3      	subs	r3, r2, r3
 800a7aa:	9306      	str	r3, [sp, #24]
 800a7ac:	9b08      	ldr	r3, [sp, #32]
 800a7ae:	b1f3      	cbz	r3, 800a7ee <_dtoa_r+0x7b6>
 800a7b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	f000 80a3 	beq.w	800a8fe <_dtoa_r+0x8c6>
 800a7b8:	2e00      	cmp	r6, #0
 800a7ba:	dd10      	ble.n	800a7de <_dtoa_r+0x7a6>
 800a7bc:	4639      	mov	r1, r7
 800a7be:	4632      	mov	r2, r6
 800a7c0:	4620      	mov	r0, r4
 800a7c2:	f000 fce1 	bl	800b188 <__pow5mult>
 800a7c6:	4652      	mov	r2, sl
 800a7c8:	4601      	mov	r1, r0
 800a7ca:	4607      	mov	r7, r0
 800a7cc:	4620      	mov	r0, r4
 800a7ce:	f000 fc31 	bl	800b034 <__multiply>
 800a7d2:	4651      	mov	r1, sl
 800a7d4:	4680      	mov	r8, r0
 800a7d6:	4620      	mov	r0, r4
 800a7d8:	f000 fb60 	bl	800ae9c <_Bfree>
 800a7dc:	46c2      	mov	sl, r8
 800a7de:	9b08      	ldr	r3, [sp, #32]
 800a7e0:	1b9a      	subs	r2, r3, r6
 800a7e2:	d004      	beq.n	800a7ee <_dtoa_r+0x7b6>
 800a7e4:	4651      	mov	r1, sl
 800a7e6:	4620      	mov	r0, r4
 800a7e8:	f000 fcce 	bl	800b188 <__pow5mult>
 800a7ec:	4682      	mov	sl, r0
 800a7ee:	2101      	movs	r1, #1
 800a7f0:	4620      	mov	r0, r4
 800a7f2:	f000 fc09 	bl	800b008 <__i2b>
 800a7f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	4606      	mov	r6, r0
 800a7fc:	f340 8081 	ble.w	800a902 <_dtoa_r+0x8ca>
 800a800:	461a      	mov	r2, r3
 800a802:	4601      	mov	r1, r0
 800a804:	4620      	mov	r0, r4
 800a806:	f000 fcbf 	bl	800b188 <__pow5mult>
 800a80a:	9b07      	ldr	r3, [sp, #28]
 800a80c:	2b01      	cmp	r3, #1
 800a80e:	4606      	mov	r6, r0
 800a810:	dd7a      	ble.n	800a908 <_dtoa_r+0x8d0>
 800a812:	f04f 0800 	mov.w	r8, #0
 800a816:	6933      	ldr	r3, [r6, #16]
 800a818:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a81c:	6918      	ldr	r0, [r3, #16]
 800a81e:	f000 fba5 	bl	800af6c <__hi0bits>
 800a822:	f1c0 0020 	rsb	r0, r0, #32
 800a826:	9b06      	ldr	r3, [sp, #24]
 800a828:	4418      	add	r0, r3
 800a82a:	f010 001f 	ands.w	r0, r0, #31
 800a82e:	f000 8094 	beq.w	800a95a <_dtoa_r+0x922>
 800a832:	f1c0 0320 	rsb	r3, r0, #32
 800a836:	2b04      	cmp	r3, #4
 800a838:	f340 8085 	ble.w	800a946 <_dtoa_r+0x90e>
 800a83c:	9b05      	ldr	r3, [sp, #20]
 800a83e:	f1c0 001c 	rsb	r0, r0, #28
 800a842:	4403      	add	r3, r0
 800a844:	9305      	str	r3, [sp, #20]
 800a846:	9b06      	ldr	r3, [sp, #24]
 800a848:	4403      	add	r3, r0
 800a84a:	4405      	add	r5, r0
 800a84c:	9306      	str	r3, [sp, #24]
 800a84e:	9b05      	ldr	r3, [sp, #20]
 800a850:	2b00      	cmp	r3, #0
 800a852:	dd05      	ble.n	800a860 <_dtoa_r+0x828>
 800a854:	4651      	mov	r1, sl
 800a856:	461a      	mov	r2, r3
 800a858:	4620      	mov	r0, r4
 800a85a:	f000 fcef 	bl	800b23c <__lshift>
 800a85e:	4682      	mov	sl, r0
 800a860:	9b06      	ldr	r3, [sp, #24]
 800a862:	2b00      	cmp	r3, #0
 800a864:	dd05      	ble.n	800a872 <_dtoa_r+0x83a>
 800a866:	4631      	mov	r1, r6
 800a868:	461a      	mov	r2, r3
 800a86a:	4620      	mov	r0, r4
 800a86c:	f000 fce6 	bl	800b23c <__lshift>
 800a870:	4606      	mov	r6, r0
 800a872:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a874:	2b00      	cmp	r3, #0
 800a876:	d072      	beq.n	800a95e <_dtoa_r+0x926>
 800a878:	4631      	mov	r1, r6
 800a87a:	4650      	mov	r0, sl
 800a87c:	f000 fd4a 	bl	800b314 <__mcmp>
 800a880:	2800      	cmp	r0, #0
 800a882:	da6c      	bge.n	800a95e <_dtoa_r+0x926>
 800a884:	2300      	movs	r3, #0
 800a886:	4651      	mov	r1, sl
 800a888:	220a      	movs	r2, #10
 800a88a:	4620      	mov	r0, r4
 800a88c:	f000 fb28 	bl	800aee0 <__multadd>
 800a890:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a892:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a896:	4682      	mov	sl, r0
 800a898:	2b00      	cmp	r3, #0
 800a89a:	f000 81b0 	beq.w	800abfe <_dtoa_r+0xbc6>
 800a89e:	2300      	movs	r3, #0
 800a8a0:	4639      	mov	r1, r7
 800a8a2:	220a      	movs	r2, #10
 800a8a4:	4620      	mov	r0, r4
 800a8a6:	f000 fb1b 	bl	800aee0 <__multadd>
 800a8aa:	9b01      	ldr	r3, [sp, #4]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	4607      	mov	r7, r0
 800a8b0:	f300 8096 	bgt.w	800a9e0 <_dtoa_r+0x9a8>
 800a8b4:	9b07      	ldr	r3, [sp, #28]
 800a8b6:	2b02      	cmp	r3, #2
 800a8b8:	dc59      	bgt.n	800a96e <_dtoa_r+0x936>
 800a8ba:	e091      	b.n	800a9e0 <_dtoa_r+0x9a8>
 800a8bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a8be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a8c2:	e758      	b.n	800a776 <_dtoa_r+0x73e>
 800a8c4:	9b04      	ldr	r3, [sp, #16]
 800a8c6:	1e5e      	subs	r6, r3, #1
 800a8c8:	9b08      	ldr	r3, [sp, #32]
 800a8ca:	42b3      	cmp	r3, r6
 800a8cc:	bfbf      	itttt	lt
 800a8ce:	9b08      	ldrlt	r3, [sp, #32]
 800a8d0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800a8d2:	9608      	strlt	r6, [sp, #32]
 800a8d4:	1af3      	sublt	r3, r6, r3
 800a8d6:	bfb4      	ite	lt
 800a8d8:	18d2      	addlt	r2, r2, r3
 800a8da:	1b9e      	subge	r6, r3, r6
 800a8dc:	9b04      	ldr	r3, [sp, #16]
 800a8de:	bfbc      	itt	lt
 800a8e0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800a8e2:	2600      	movlt	r6, #0
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	bfb7      	itett	lt
 800a8e8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800a8ec:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800a8f0:	1a9d      	sublt	r5, r3, r2
 800a8f2:	2300      	movlt	r3, #0
 800a8f4:	e741      	b.n	800a77a <_dtoa_r+0x742>
 800a8f6:	9e08      	ldr	r6, [sp, #32]
 800a8f8:	9d05      	ldr	r5, [sp, #20]
 800a8fa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a8fc:	e748      	b.n	800a790 <_dtoa_r+0x758>
 800a8fe:	9a08      	ldr	r2, [sp, #32]
 800a900:	e770      	b.n	800a7e4 <_dtoa_r+0x7ac>
 800a902:	9b07      	ldr	r3, [sp, #28]
 800a904:	2b01      	cmp	r3, #1
 800a906:	dc19      	bgt.n	800a93c <_dtoa_r+0x904>
 800a908:	9b02      	ldr	r3, [sp, #8]
 800a90a:	b9bb      	cbnz	r3, 800a93c <_dtoa_r+0x904>
 800a90c:	9b03      	ldr	r3, [sp, #12]
 800a90e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a912:	b99b      	cbnz	r3, 800a93c <_dtoa_r+0x904>
 800a914:	9b03      	ldr	r3, [sp, #12]
 800a916:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a91a:	0d1b      	lsrs	r3, r3, #20
 800a91c:	051b      	lsls	r3, r3, #20
 800a91e:	b183      	cbz	r3, 800a942 <_dtoa_r+0x90a>
 800a920:	9b05      	ldr	r3, [sp, #20]
 800a922:	3301      	adds	r3, #1
 800a924:	9305      	str	r3, [sp, #20]
 800a926:	9b06      	ldr	r3, [sp, #24]
 800a928:	3301      	adds	r3, #1
 800a92a:	9306      	str	r3, [sp, #24]
 800a92c:	f04f 0801 	mov.w	r8, #1
 800a930:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a932:	2b00      	cmp	r3, #0
 800a934:	f47f af6f 	bne.w	800a816 <_dtoa_r+0x7de>
 800a938:	2001      	movs	r0, #1
 800a93a:	e774      	b.n	800a826 <_dtoa_r+0x7ee>
 800a93c:	f04f 0800 	mov.w	r8, #0
 800a940:	e7f6      	b.n	800a930 <_dtoa_r+0x8f8>
 800a942:	4698      	mov	r8, r3
 800a944:	e7f4      	b.n	800a930 <_dtoa_r+0x8f8>
 800a946:	d082      	beq.n	800a84e <_dtoa_r+0x816>
 800a948:	9a05      	ldr	r2, [sp, #20]
 800a94a:	331c      	adds	r3, #28
 800a94c:	441a      	add	r2, r3
 800a94e:	9205      	str	r2, [sp, #20]
 800a950:	9a06      	ldr	r2, [sp, #24]
 800a952:	441a      	add	r2, r3
 800a954:	441d      	add	r5, r3
 800a956:	9206      	str	r2, [sp, #24]
 800a958:	e779      	b.n	800a84e <_dtoa_r+0x816>
 800a95a:	4603      	mov	r3, r0
 800a95c:	e7f4      	b.n	800a948 <_dtoa_r+0x910>
 800a95e:	9b04      	ldr	r3, [sp, #16]
 800a960:	2b00      	cmp	r3, #0
 800a962:	dc37      	bgt.n	800a9d4 <_dtoa_r+0x99c>
 800a964:	9b07      	ldr	r3, [sp, #28]
 800a966:	2b02      	cmp	r3, #2
 800a968:	dd34      	ble.n	800a9d4 <_dtoa_r+0x99c>
 800a96a:	9b04      	ldr	r3, [sp, #16]
 800a96c:	9301      	str	r3, [sp, #4]
 800a96e:	9b01      	ldr	r3, [sp, #4]
 800a970:	b963      	cbnz	r3, 800a98c <_dtoa_r+0x954>
 800a972:	4631      	mov	r1, r6
 800a974:	2205      	movs	r2, #5
 800a976:	4620      	mov	r0, r4
 800a978:	f000 fab2 	bl	800aee0 <__multadd>
 800a97c:	4601      	mov	r1, r0
 800a97e:	4606      	mov	r6, r0
 800a980:	4650      	mov	r0, sl
 800a982:	f000 fcc7 	bl	800b314 <__mcmp>
 800a986:	2800      	cmp	r0, #0
 800a988:	f73f adbb 	bgt.w	800a502 <_dtoa_r+0x4ca>
 800a98c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a98e:	9d00      	ldr	r5, [sp, #0]
 800a990:	ea6f 0b03 	mvn.w	fp, r3
 800a994:	f04f 0800 	mov.w	r8, #0
 800a998:	4631      	mov	r1, r6
 800a99a:	4620      	mov	r0, r4
 800a99c:	f000 fa7e 	bl	800ae9c <_Bfree>
 800a9a0:	2f00      	cmp	r7, #0
 800a9a2:	f43f aeab 	beq.w	800a6fc <_dtoa_r+0x6c4>
 800a9a6:	f1b8 0f00 	cmp.w	r8, #0
 800a9aa:	d005      	beq.n	800a9b8 <_dtoa_r+0x980>
 800a9ac:	45b8      	cmp	r8, r7
 800a9ae:	d003      	beq.n	800a9b8 <_dtoa_r+0x980>
 800a9b0:	4641      	mov	r1, r8
 800a9b2:	4620      	mov	r0, r4
 800a9b4:	f000 fa72 	bl	800ae9c <_Bfree>
 800a9b8:	4639      	mov	r1, r7
 800a9ba:	4620      	mov	r0, r4
 800a9bc:	f000 fa6e 	bl	800ae9c <_Bfree>
 800a9c0:	e69c      	b.n	800a6fc <_dtoa_r+0x6c4>
 800a9c2:	2600      	movs	r6, #0
 800a9c4:	4637      	mov	r7, r6
 800a9c6:	e7e1      	b.n	800a98c <_dtoa_r+0x954>
 800a9c8:	46bb      	mov	fp, r7
 800a9ca:	4637      	mov	r7, r6
 800a9cc:	e599      	b.n	800a502 <_dtoa_r+0x4ca>
 800a9ce:	bf00      	nop
 800a9d0:	40240000 	.word	0x40240000
 800a9d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	f000 80c8 	beq.w	800ab6c <_dtoa_r+0xb34>
 800a9dc:	9b04      	ldr	r3, [sp, #16]
 800a9de:	9301      	str	r3, [sp, #4]
 800a9e0:	2d00      	cmp	r5, #0
 800a9e2:	dd05      	ble.n	800a9f0 <_dtoa_r+0x9b8>
 800a9e4:	4639      	mov	r1, r7
 800a9e6:	462a      	mov	r2, r5
 800a9e8:	4620      	mov	r0, r4
 800a9ea:	f000 fc27 	bl	800b23c <__lshift>
 800a9ee:	4607      	mov	r7, r0
 800a9f0:	f1b8 0f00 	cmp.w	r8, #0
 800a9f4:	d05b      	beq.n	800aaae <_dtoa_r+0xa76>
 800a9f6:	6879      	ldr	r1, [r7, #4]
 800a9f8:	4620      	mov	r0, r4
 800a9fa:	f000 fa0f 	bl	800ae1c <_Balloc>
 800a9fe:	4605      	mov	r5, r0
 800aa00:	b928      	cbnz	r0, 800aa0e <_dtoa_r+0x9d6>
 800aa02:	4b83      	ldr	r3, [pc, #524]	; (800ac10 <_dtoa_r+0xbd8>)
 800aa04:	4602      	mov	r2, r0
 800aa06:	f240 21ef 	movw	r1, #751	; 0x2ef
 800aa0a:	f7ff bb2e 	b.w	800a06a <_dtoa_r+0x32>
 800aa0e:	693a      	ldr	r2, [r7, #16]
 800aa10:	3202      	adds	r2, #2
 800aa12:	0092      	lsls	r2, r2, #2
 800aa14:	f107 010c 	add.w	r1, r7, #12
 800aa18:	300c      	adds	r0, #12
 800aa1a:	f7ff fa76 	bl	8009f0a <memcpy>
 800aa1e:	2201      	movs	r2, #1
 800aa20:	4629      	mov	r1, r5
 800aa22:	4620      	mov	r0, r4
 800aa24:	f000 fc0a 	bl	800b23c <__lshift>
 800aa28:	9b00      	ldr	r3, [sp, #0]
 800aa2a:	3301      	adds	r3, #1
 800aa2c:	9304      	str	r3, [sp, #16]
 800aa2e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aa32:	4413      	add	r3, r2
 800aa34:	9308      	str	r3, [sp, #32]
 800aa36:	9b02      	ldr	r3, [sp, #8]
 800aa38:	f003 0301 	and.w	r3, r3, #1
 800aa3c:	46b8      	mov	r8, r7
 800aa3e:	9306      	str	r3, [sp, #24]
 800aa40:	4607      	mov	r7, r0
 800aa42:	9b04      	ldr	r3, [sp, #16]
 800aa44:	4631      	mov	r1, r6
 800aa46:	3b01      	subs	r3, #1
 800aa48:	4650      	mov	r0, sl
 800aa4a:	9301      	str	r3, [sp, #4]
 800aa4c:	f7ff fa6b 	bl	8009f26 <quorem>
 800aa50:	4641      	mov	r1, r8
 800aa52:	9002      	str	r0, [sp, #8]
 800aa54:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800aa58:	4650      	mov	r0, sl
 800aa5a:	f000 fc5b 	bl	800b314 <__mcmp>
 800aa5e:	463a      	mov	r2, r7
 800aa60:	9005      	str	r0, [sp, #20]
 800aa62:	4631      	mov	r1, r6
 800aa64:	4620      	mov	r0, r4
 800aa66:	f000 fc71 	bl	800b34c <__mdiff>
 800aa6a:	68c2      	ldr	r2, [r0, #12]
 800aa6c:	4605      	mov	r5, r0
 800aa6e:	bb02      	cbnz	r2, 800aab2 <_dtoa_r+0xa7a>
 800aa70:	4601      	mov	r1, r0
 800aa72:	4650      	mov	r0, sl
 800aa74:	f000 fc4e 	bl	800b314 <__mcmp>
 800aa78:	4602      	mov	r2, r0
 800aa7a:	4629      	mov	r1, r5
 800aa7c:	4620      	mov	r0, r4
 800aa7e:	9209      	str	r2, [sp, #36]	; 0x24
 800aa80:	f000 fa0c 	bl	800ae9c <_Bfree>
 800aa84:	9b07      	ldr	r3, [sp, #28]
 800aa86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa88:	9d04      	ldr	r5, [sp, #16]
 800aa8a:	ea43 0102 	orr.w	r1, r3, r2
 800aa8e:	9b06      	ldr	r3, [sp, #24]
 800aa90:	4319      	orrs	r1, r3
 800aa92:	d110      	bne.n	800aab6 <_dtoa_r+0xa7e>
 800aa94:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800aa98:	d029      	beq.n	800aaee <_dtoa_r+0xab6>
 800aa9a:	9b05      	ldr	r3, [sp, #20]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	dd02      	ble.n	800aaa6 <_dtoa_r+0xa6e>
 800aaa0:	9b02      	ldr	r3, [sp, #8]
 800aaa2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800aaa6:	9b01      	ldr	r3, [sp, #4]
 800aaa8:	f883 9000 	strb.w	r9, [r3]
 800aaac:	e774      	b.n	800a998 <_dtoa_r+0x960>
 800aaae:	4638      	mov	r0, r7
 800aab0:	e7ba      	b.n	800aa28 <_dtoa_r+0x9f0>
 800aab2:	2201      	movs	r2, #1
 800aab4:	e7e1      	b.n	800aa7a <_dtoa_r+0xa42>
 800aab6:	9b05      	ldr	r3, [sp, #20]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	db04      	blt.n	800aac6 <_dtoa_r+0xa8e>
 800aabc:	9907      	ldr	r1, [sp, #28]
 800aabe:	430b      	orrs	r3, r1
 800aac0:	9906      	ldr	r1, [sp, #24]
 800aac2:	430b      	orrs	r3, r1
 800aac4:	d120      	bne.n	800ab08 <_dtoa_r+0xad0>
 800aac6:	2a00      	cmp	r2, #0
 800aac8:	dded      	ble.n	800aaa6 <_dtoa_r+0xa6e>
 800aaca:	4651      	mov	r1, sl
 800aacc:	2201      	movs	r2, #1
 800aace:	4620      	mov	r0, r4
 800aad0:	f000 fbb4 	bl	800b23c <__lshift>
 800aad4:	4631      	mov	r1, r6
 800aad6:	4682      	mov	sl, r0
 800aad8:	f000 fc1c 	bl	800b314 <__mcmp>
 800aadc:	2800      	cmp	r0, #0
 800aade:	dc03      	bgt.n	800aae8 <_dtoa_r+0xab0>
 800aae0:	d1e1      	bne.n	800aaa6 <_dtoa_r+0xa6e>
 800aae2:	f019 0f01 	tst.w	r9, #1
 800aae6:	d0de      	beq.n	800aaa6 <_dtoa_r+0xa6e>
 800aae8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800aaec:	d1d8      	bne.n	800aaa0 <_dtoa_r+0xa68>
 800aaee:	9a01      	ldr	r2, [sp, #4]
 800aaf0:	2339      	movs	r3, #57	; 0x39
 800aaf2:	7013      	strb	r3, [r2, #0]
 800aaf4:	462b      	mov	r3, r5
 800aaf6:	461d      	mov	r5, r3
 800aaf8:	3b01      	subs	r3, #1
 800aafa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800aafe:	2a39      	cmp	r2, #57	; 0x39
 800ab00:	d06c      	beq.n	800abdc <_dtoa_r+0xba4>
 800ab02:	3201      	adds	r2, #1
 800ab04:	701a      	strb	r2, [r3, #0]
 800ab06:	e747      	b.n	800a998 <_dtoa_r+0x960>
 800ab08:	2a00      	cmp	r2, #0
 800ab0a:	dd07      	ble.n	800ab1c <_dtoa_r+0xae4>
 800ab0c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ab10:	d0ed      	beq.n	800aaee <_dtoa_r+0xab6>
 800ab12:	9a01      	ldr	r2, [sp, #4]
 800ab14:	f109 0301 	add.w	r3, r9, #1
 800ab18:	7013      	strb	r3, [r2, #0]
 800ab1a:	e73d      	b.n	800a998 <_dtoa_r+0x960>
 800ab1c:	9b04      	ldr	r3, [sp, #16]
 800ab1e:	9a08      	ldr	r2, [sp, #32]
 800ab20:	f803 9c01 	strb.w	r9, [r3, #-1]
 800ab24:	4293      	cmp	r3, r2
 800ab26:	d043      	beq.n	800abb0 <_dtoa_r+0xb78>
 800ab28:	4651      	mov	r1, sl
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	220a      	movs	r2, #10
 800ab2e:	4620      	mov	r0, r4
 800ab30:	f000 f9d6 	bl	800aee0 <__multadd>
 800ab34:	45b8      	cmp	r8, r7
 800ab36:	4682      	mov	sl, r0
 800ab38:	f04f 0300 	mov.w	r3, #0
 800ab3c:	f04f 020a 	mov.w	r2, #10
 800ab40:	4641      	mov	r1, r8
 800ab42:	4620      	mov	r0, r4
 800ab44:	d107      	bne.n	800ab56 <_dtoa_r+0xb1e>
 800ab46:	f000 f9cb 	bl	800aee0 <__multadd>
 800ab4a:	4680      	mov	r8, r0
 800ab4c:	4607      	mov	r7, r0
 800ab4e:	9b04      	ldr	r3, [sp, #16]
 800ab50:	3301      	adds	r3, #1
 800ab52:	9304      	str	r3, [sp, #16]
 800ab54:	e775      	b.n	800aa42 <_dtoa_r+0xa0a>
 800ab56:	f000 f9c3 	bl	800aee0 <__multadd>
 800ab5a:	4639      	mov	r1, r7
 800ab5c:	4680      	mov	r8, r0
 800ab5e:	2300      	movs	r3, #0
 800ab60:	220a      	movs	r2, #10
 800ab62:	4620      	mov	r0, r4
 800ab64:	f000 f9bc 	bl	800aee0 <__multadd>
 800ab68:	4607      	mov	r7, r0
 800ab6a:	e7f0      	b.n	800ab4e <_dtoa_r+0xb16>
 800ab6c:	9b04      	ldr	r3, [sp, #16]
 800ab6e:	9301      	str	r3, [sp, #4]
 800ab70:	9d00      	ldr	r5, [sp, #0]
 800ab72:	4631      	mov	r1, r6
 800ab74:	4650      	mov	r0, sl
 800ab76:	f7ff f9d6 	bl	8009f26 <quorem>
 800ab7a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ab7e:	9b00      	ldr	r3, [sp, #0]
 800ab80:	f805 9b01 	strb.w	r9, [r5], #1
 800ab84:	1aea      	subs	r2, r5, r3
 800ab86:	9b01      	ldr	r3, [sp, #4]
 800ab88:	4293      	cmp	r3, r2
 800ab8a:	dd07      	ble.n	800ab9c <_dtoa_r+0xb64>
 800ab8c:	4651      	mov	r1, sl
 800ab8e:	2300      	movs	r3, #0
 800ab90:	220a      	movs	r2, #10
 800ab92:	4620      	mov	r0, r4
 800ab94:	f000 f9a4 	bl	800aee0 <__multadd>
 800ab98:	4682      	mov	sl, r0
 800ab9a:	e7ea      	b.n	800ab72 <_dtoa_r+0xb3a>
 800ab9c:	9b01      	ldr	r3, [sp, #4]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	bfc8      	it	gt
 800aba2:	461d      	movgt	r5, r3
 800aba4:	9b00      	ldr	r3, [sp, #0]
 800aba6:	bfd8      	it	le
 800aba8:	2501      	movle	r5, #1
 800abaa:	441d      	add	r5, r3
 800abac:	f04f 0800 	mov.w	r8, #0
 800abb0:	4651      	mov	r1, sl
 800abb2:	2201      	movs	r2, #1
 800abb4:	4620      	mov	r0, r4
 800abb6:	f000 fb41 	bl	800b23c <__lshift>
 800abba:	4631      	mov	r1, r6
 800abbc:	4682      	mov	sl, r0
 800abbe:	f000 fba9 	bl	800b314 <__mcmp>
 800abc2:	2800      	cmp	r0, #0
 800abc4:	dc96      	bgt.n	800aaf4 <_dtoa_r+0xabc>
 800abc6:	d102      	bne.n	800abce <_dtoa_r+0xb96>
 800abc8:	f019 0f01 	tst.w	r9, #1
 800abcc:	d192      	bne.n	800aaf4 <_dtoa_r+0xabc>
 800abce:	462b      	mov	r3, r5
 800abd0:	461d      	mov	r5, r3
 800abd2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800abd6:	2a30      	cmp	r2, #48	; 0x30
 800abd8:	d0fa      	beq.n	800abd0 <_dtoa_r+0xb98>
 800abda:	e6dd      	b.n	800a998 <_dtoa_r+0x960>
 800abdc:	9a00      	ldr	r2, [sp, #0]
 800abde:	429a      	cmp	r2, r3
 800abe0:	d189      	bne.n	800aaf6 <_dtoa_r+0xabe>
 800abe2:	f10b 0b01 	add.w	fp, fp, #1
 800abe6:	2331      	movs	r3, #49	; 0x31
 800abe8:	e796      	b.n	800ab18 <_dtoa_r+0xae0>
 800abea:	4b0a      	ldr	r3, [pc, #40]	; (800ac14 <_dtoa_r+0xbdc>)
 800abec:	f7ff ba99 	b.w	800a122 <_dtoa_r+0xea>
 800abf0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	f47f aa6d 	bne.w	800a0d2 <_dtoa_r+0x9a>
 800abf8:	4b07      	ldr	r3, [pc, #28]	; (800ac18 <_dtoa_r+0xbe0>)
 800abfa:	f7ff ba92 	b.w	800a122 <_dtoa_r+0xea>
 800abfe:	9b01      	ldr	r3, [sp, #4]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	dcb5      	bgt.n	800ab70 <_dtoa_r+0xb38>
 800ac04:	9b07      	ldr	r3, [sp, #28]
 800ac06:	2b02      	cmp	r3, #2
 800ac08:	f73f aeb1 	bgt.w	800a96e <_dtoa_r+0x936>
 800ac0c:	e7b0      	b.n	800ab70 <_dtoa_r+0xb38>
 800ac0e:	bf00      	nop
 800ac10:	0800c178 	.word	0x0800c178
 800ac14:	0800c0d8 	.word	0x0800c0d8
 800ac18:	0800c0fc 	.word	0x0800c0fc

0800ac1c <_free_r>:
 800ac1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ac1e:	2900      	cmp	r1, #0
 800ac20:	d044      	beq.n	800acac <_free_r+0x90>
 800ac22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac26:	9001      	str	r0, [sp, #4]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	f1a1 0404 	sub.w	r4, r1, #4
 800ac2e:	bfb8      	it	lt
 800ac30:	18e4      	addlt	r4, r4, r3
 800ac32:	f000 f8e7 	bl	800ae04 <__malloc_lock>
 800ac36:	4a1e      	ldr	r2, [pc, #120]	; (800acb0 <_free_r+0x94>)
 800ac38:	9801      	ldr	r0, [sp, #4]
 800ac3a:	6813      	ldr	r3, [r2, #0]
 800ac3c:	b933      	cbnz	r3, 800ac4c <_free_r+0x30>
 800ac3e:	6063      	str	r3, [r4, #4]
 800ac40:	6014      	str	r4, [r2, #0]
 800ac42:	b003      	add	sp, #12
 800ac44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ac48:	f000 b8e2 	b.w	800ae10 <__malloc_unlock>
 800ac4c:	42a3      	cmp	r3, r4
 800ac4e:	d908      	bls.n	800ac62 <_free_r+0x46>
 800ac50:	6825      	ldr	r5, [r4, #0]
 800ac52:	1961      	adds	r1, r4, r5
 800ac54:	428b      	cmp	r3, r1
 800ac56:	bf01      	itttt	eq
 800ac58:	6819      	ldreq	r1, [r3, #0]
 800ac5a:	685b      	ldreq	r3, [r3, #4]
 800ac5c:	1949      	addeq	r1, r1, r5
 800ac5e:	6021      	streq	r1, [r4, #0]
 800ac60:	e7ed      	b.n	800ac3e <_free_r+0x22>
 800ac62:	461a      	mov	r2, r3
 800ac64:	685b      	ldr	r3, [r3, #4]
 800ac66:	b10b      	cbz	r3, 800ac6c <_free_r+0x50>
 800ac68:	42a3      	cmp	r3, r4
 800ac6a:	d9fa      	bls.n	800ac62 <_free_r+0x46>
 800ac6c:	6811      	ldr	r1, [r2, #0]
 800ac6e:	1855      	adds	r5, r2, r1
 800ac70:	42a5      	cmp	r5, r4
 800ac72:	d10b      	bne.n	800ac8c <_free_r+0x70>
 800ac74:	6824      	ldr	r4, [r4, #0]
 800ac76:	4421      	add	r1, r4
 800ac78:	1854      	adds	r4, r2, r1
 800ac7a:	42a3      	cmp	r3, r4
 800ac7c:	6011      	str	r1, [r2, #0]
 800ac7e:	d1e0      	bne.n	800ac42 <_free_r+0x26>
 800ac80:	681c      	ldr	r4, [r3, #0]
 800ac82:	685b      	ldr	r3, [r3, #4]
 800ac84:	6053      	str	r3, [r2, #4]
 800ac86:	440c      	add	r4, r1
 800ac88:	6014      	str	r4, [r2, #0]
 800ac8a:	e7da      	b.n	800ac42 <_free_r+0x26>
 800ac8c:	d902      	bls.n	800ac94 <_free_r+0x78>
 800ac8e:	230c      	movs	r3, #12
 800ac90:	6003      	str	r3, [r0, #0]
 800ac92:	e7d6      	b.n	800ac42 <_free_r+0x26>
 800ac94:	6825      	ldr	r5, [r4, #0]
 800ac96:	1961      	adds	r1, r4, r5
 800ac98:	428b      	cmp	r3, r1
 800ac9a:	bf04      	itt	eq
 800ac9c:	6819      	ldreq	r1, [r3, #0]
 800ac9e:	685b      	ldreq	r3, [r3, #4]
 800aca0:	6063      	str	r3, [r4, #4]
 800aca2:	bf04      	itt	eq
 800aca4:	1949      	addeq	r1, r1, r5
 800aca6:	6021      	streq	r1, [r4, #0]
 800aca8:	6054      	str	r4, [r2, #4]
 800acaa:	e7ca      	b.n	800ac42 <_free_r+0x26>
 800acac:	b003      	add	sp, #12
 800acae:	bd30      	pop	{r4, r5, pc}
 800acb0:	20002fb4 	.word	0x20002fb4

0800acb4 <malloc>:
 800acb4:	4b02      	ldr	r3, [pc, #8]	; (800acc0 <malloc+0xc>)
 800acb6:	4601      	mov	r1, r0
 800acb8:	6818      	ldr	r0, [r3, #0]
 800acba:	f000 b823 	b.w	800ad04 <_malloc_r>
 800acbe:	bf00      	nop
 800acc0:	20000068 	.word	0x20000068

0800acc4 <sbrk_aligned>:
 800acc4:	b570      	push	{r4, r5, r6, lr}
 800acc6:	4e0e      	ldr	r6, [pc, #56]	; (800ad00 <sbrk_aligned+0x3c>)
 800acc8:	460c      	mov	r4, r1
 800acca:	6831      	ldr	r1, [r6, #0]
 800accc:	4605      	mov	r5, r0
 800acce:	b911      	cbnz	r1, 800acd6 <sbrk_aligned+0x12>
 800acd0:	f000 fe40 	bl	800b954 <_sbrk_r>
 800acd4:	6030      	str	r0, [r6, #0]
 800acd6:	4621      	mov	r1, r4
 800acd8:	4628      	mov	r0, r5
 800acda:	f000 fe3b 	bl	800b954 <_sbrk_r>
 800acde:	1c43      	adds	r3, r0, #1
 800ace0:	d00a      	beq.n	800acf8 <sbrk_aligned+0x34>
 800ace2:	1cc4      	adds	r4, r0, #3
 800ace4:	f024 0403 	bic.w	r4, r4, #3
 800ace8:	42a0      	cmp	r0, r4
 800acea:	d007      	beq.n	800acfc <sbrk_aligned+0x38>
 800acec:	1a21      	subs	r1, r4, r0
 800acee:	4628      	mov	r0, r5
 800acf0:	f000 fe30 	bl	800b954 <_sbrk_r>
 800acf4:	3001      	adds	r0, #1
 800acf6:	d101      	bne.n	800acfc <sbrk_aligned+0x38>
 800acf8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800acfc:	4620      	mov	r0, r4
 800acfe:	bd70      	pop	{r4, r5, r6, pc}
 800ad00:	20002fb8 	.word	0x20002fb8

0800ad04 <_malloc_r>:
 800ad04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad08:	1ccd      	adds	r5, r1, #3
 800ad0a:	f025 0503 	bic.w	r5, r5, #3
 800ad0e:	3508      	adds	r5, #8
 800ad10:	2d0c      	cmp	r5, #12
 800ad12:	bf38      	it	cc
 800ad14:	250c      	movcc	r5, #12
 800ad16:	2d00      	cmp	r5, #0
 800ad18:	4607      	mov	r7, r0
 800ad1a:	db01      	blt.n	800ad20 <_malloc_r+0x1c>
 800ad1c:	42a9      	cmp	r1, r5
 800ad1e:	d905      	bls.n	800ad2c <_malloc_r+0x28>
 800ad20:	230c      	movs	r3, #12
 800ad22:	603b      	str	r3, [r7, #0]
 800ad24:	2600      	movs	r6, #0
 800ad26:	4630      	mov	r0, r6
 800ad28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad2c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ae00 <_malloc_r+0xfc>
 800ad30:	f000 f868 	bl	800ae04 <__malloc_lock>
 800ad34:	f8d8 3000 	ldr.w	r3, [r8]
 800ad38:	461c      	mov	r4, r3
 800ad3a:	bb5c      	cbnz	r4, 800ad94 <_malloc_r+0x90>
 800ad3c:	4629      	mov	r1, r5
 800ad3e:	4638      	mov	r0, r7
 800ad40:	f7ff ffc0 	bl	800acc4 <sbrk_aligned>
 800ad44:	1c43      	adds	r3, r0, #1
 800ad46:	4604      	mov	r4, r0
 800ad48:	d155      	bne.n	800adf6 <_malloc_r+0xf2>
 800ad4a:	f8d8 4000 	ldr.w	r4, [r8]
 800ad4e:	4626      	mov	r6, r4
 800ad50:	2e00      	cmp	r6, #0
 800ad52:	d145      	bne.n	800ade0 <_malloc_r+0xdc>
 800ad54:	2c00      	cmp	r4, #0
 800ad56:	d048      	beq.n	800adea <_malloc_r+0xe6>
 800ad58:	6823      	ldr	r3, [r4, #0]
 800ad5a:	4631      	mov	r1, r6
 800ad5c:	4638      	mov	r0, r7
 800ad5e:	eb04 0903 	add.w	r9, r4, r3
 800ad62:	f000 fdf7 	bl	800b954 <_sbrk_r>
 800ad66:	4581      	cmp	r9, r0
 800ad68:	d13f      	bne.n	800adea <_malloc_r+0xe6>
 800ad6a:	6821      	ldr	r1, [r4, #0]
 800ad6c:	1a6d      	subs	r5, r5, r1
 800ad6e:	4629      	mov	r1, r5
 800ad70:	4638      	mov	r0, r7
 800ad72:	f7ff ffa7 	bl	800acc4 <sbrk_aligned>
 800ad76:	3001      	adds	r0, #1
 800ad78:	d037      	beq.n	800adea <_malloc_r+0xe6>
 800ad7a:	6823      	ldr	r3, [r4, #0]
 800ad7c:	442b      	add	r3, r5
 800ad7e:	6023      	str	r3, [r4, #0]
 800ad80:	f8d8 3000 	ldr.w	r3, [r8]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d038      	beq.n	800adfa <_malloc_r+0xf6>
 800ad88:	685a      	ldr	r2, [r3, #4]
 800ad8a:	42a2      	cmp	r2, r4
 800ad8c:	d12b      	bne.n	800ade6 <_malloc_r+0xe2>
 800ad8e:	2200      	movs	r2, #0
 800ad90:	605a      	str	r2, [r3, #4]
 800ad92:	e00f      	b.n	800adb4 <_malloc_r+0xb0>
 800ad94:	6822      	ldr	r2, [r4, #0]
 800ad96:	1b52      	subs	r2, r2, r5
 800ad98:	d41f      	bmi.n	800adda <_malloc_r+0xd6>
 800ad9a:	2a0b      	cmp	r2, #11
 800ad9c:	d917      	bls.n	800adce <_malloc_r+0xca>
 800ad9e:	1961      	adds	r1, r4, r5
 800ada0:	42a3      	cmp	r3, r4
 800ada2:	6025      	str	r5, [r4, #0]
 800ada4:	bf18      	it	ne
 800ada6:	6059      	strne	r1, [r3, #4]
 800ada8:	6863      	ldr	r3, [r4, #4]
 800adaa:	bf08      	it	eq
 800adac:	f8c8 1000 	streq.w	r1, [r8]
 800adb0:	5162      	str	r2, [r4, r5]
 800adb2:	604b      	str	r3, [r1, #4]
 800adb4:	4638      	mov	r0, r7
 800adb6:	f104 060b 	add.w	r6, r4, #11
 800adba:	f000 f829 	bl	800ae10 <__malloc_unlock>
 800adbe:	f026 0607 	bic.w	r6, r6, #7
 800adc2:	1d23      	adds	r3, r4, #4
 800adc4:	1af2      	subs	r2, r6, r3
 800adc6:	d0ae      	beq.n	800ad26 <_malloc_r+0x22>
 800adc8:	1b9b      	subs	r3, r3, r6
 800adca:	50a3      	str	r3, [r4, r2]
 800adcc:	e7ab      	b.n	800ad26 <_malloc_r+0x22>
 800adce:	42a3      	cmp	r3, r4
 800add0:	6862      	ldr	r2, [r4, #4]
 800add2:	d1dd      	bne.n	800ad90 <_malloc_r+0x8c>
 800add4:	f8c8 2000 	str.w	r2, [r8]
 800add8:	e7ec      	b.n	800adb4 <_malloc_r+0xb0>
 800adda:	4623      	mov	r3, r4
 800addc:	6864      	ldr	r4, [r4, #4]
 800adde:	e7ac      	b.n	800ad3a <_malloc_r+0x36>
 800ade0:	4634      	mov	r4, r6
 800ade2:	6876      	ldr	r6, [r6, #4]
 800ade4:	e7b4      	b.n	800ad50 <_malloc_r+0x4c>
 800ade6:	4613      	mov	r3, r2
 800ade8:	e7cc      	b.n	800ad84 <_malloc_r+0x80>
 800adea:	230c      	movs	r3, #12
 800adec:	603b      	str	r3, [r7, #0]
 800adee:	4638      	mov	r0, r7
 800adf0:	f000 f80e 	bl	800ae10 <__malloc_unlock>
 800adf4:	e797      	b.n	800ad26 <_malloc_r+0x22>
 800adf6:	6025      	str	r5, [r4, #0]
 800adf8:	e7dc      	b.n	800adb4 <_malloc_r+0xb0>
 800adfa:	605b      	str	r3, [r3, #4]
 800adfc:	deff      	udf	#255	; 0xff
 800adfe:	bf00      	nop
 800ae00:	20002fb4 	.word	0x20002fb4

0800ae04 <__malloc_lock>:
 800ae04:	4801      	ldr	r0, [pc, #4]	; (800ae0c <__malloc_lock+0x8>)
 800ae06:	f7ff b87e 	b.w	8009f06 <__retarget_lock_acquire_recursive>
 800ae0a:	bf00      	nop
 800ae0c:	20002fb0 	.word	0x20002fb0

0800ae10 <__malloc_unlock>:
 800ae10:	4801      	ldr	r0, [pc, #4]	; (800ae18 <__malloc_unlock+0x8>)
 800ae12:	f7ff b879 	b.w	8009f08 <__retarget_lock_release_recursive>
 800ae16:	bf00      	nop
 800ae18:	20002fb0 	.word	0x20002fb0

0800ae1c <_Balloc>:
 800ae1c:	b570      	push	{r4, r5, r6, lr}
 800ae1e:	69c6      	ldr	r6, [r0, #28]
 800ae20:	4604      	mov	r4, r0
 800ae22:	460d      	mov	r5, r1
 800ae24:	b976      	cbnz	r6, 800ae44 <_Balloc+0x28>
 800ae26:	2010      	movs	r0, #16
 800ae28:	f7ff ff44 	bl	800acb4 <malloc>
 800ae2c:	4602      	mov	r2, r0
 800ae2e:	61e0      	str	r0, [r4, #28]
 800ae30:	b920      	cbnz	r0, 800ae3c <_Balloc+0x20>
 800ae32:	4b18      	ldr	r3, [pc, #96]	; (800ae94 <_Balloc+0x78>)
 800ae34:	4818      	ldr	r0, [pc, #96]	; (800ae98 <_Balloc+0x7c>)
 800ae36:	216b      	movs	r1, #107	; 0x6b
 800ae38:	f000 fd9c 	bl	800b974 <__assert_func>
 800ae3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ae40:	6006      	str	r6, [r0, #0]
 800ae42:	60c6      	str	r6, [r0, #12]
 800ae44:	69e6      	ldr	r6, [r4, #28]
 800ae46:	68f3      	ldr	r3, [r6, #12]
 800ae48:	b183      	cbz	r3, 800ae6c <_Balloc+0x50>
 800ae4a:	69e3      	ldr	r3, [r4, #28]
 800ae4c:	68db      	ldr	r3, [r3, #12]
 800ae4e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ae52:	b9b8      	cbnz	r0, 800ae84 <_Balloc+0x68>
 800ae54:	2101      	movs	r1, #1
 800ae56:	fa01 f605 	lsl.w	r6, r1, r5
 800ae5a:	1d72      	adds	r2, r6, #5
 800ae5c:	0092      	lsls	r2, r2, #2
 800ae5e:	4620      	mov	r0, r4
 800ae60:	f000 fda6 	bl	800b9b0 <_calloc_r>
 800ae64:	b160      	cbz	r0, 800ae80 <_Balloc+0x64>
 800ae66:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ae6a:	e00e      	b.n	800ae8a <_Balloc+0x6e>
 800ae6c:	2221      	movs	r2, #33	; 0x21
 800ae6e:	2104      	movs	r1, #4
 800ae70:	4620      	mov	r0, r4
 800ae72:	f000 fd9d 	bl	800b9b0 <_calloc_r>
 800ae76:	69e3      	ldr	r3, [r4, #28]
 800ae78:	60f0      	str	r0, [r6, #12]
 800ae7a:	68db      	ldr	r3, [r3, #12]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d1e4      	bne.n	800ae4a <_Balloc+0x2e>
 800ae80:	2000      	movs	r0, #0
 800ae82:	bd70      	pop	{r4, r5, r6, pc}
 800ae84:	6802      	ldr	r2, [r0, #0]
 800ae86:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ae90:	e7f7      	b.n	800ae82 <_Balloc+0x66>
 800ae92:	bf00      	nop
 800ae94:	0800c109 	.word	0x0800c109
 800ae98:	0800c189 	.word	0x0800c189

0800ae9c <_Bfree>:
 800ae9c:	b570      	push	{r4, r5, r6, lr}
 800ae9e:	69c6      	ldr	r6, [r0, #28]
 800aea0:	4605      	mov	r5, r0
 800aea2:	460c      	mov	r4, r1
 800aea4:	b976      	cbnz	r6, 800aec4 <_Bfree+0x28>
 800aea6:	2010      	movs	r0, #16
 800aea8:	f7ff ff04 	bl	800acb4 <malloc>
 800aeac:	4602      	mov	r2, r0
 800aeae:	61e8      	str	r0, [r5, #28]
 800aeb0:	b920      	cbnz	r0, 800aebc <_Bfree+0x20>
 800aeb2:	4b09      	ldr	r3, [pc, #36]	; (800aed8 <_Bfree+0x3c>)
 800aeb4:	4809      	ldr	r0, [pc, #36]	; (800aedc <_Bfree+0x40>)
 800aeb6:	218f      	movs	r1, #143	; 0x8f
 800aeb8:	f000 fd5c 	bl	800b974 <__assert_func>
 800aebc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aec0:	6006      	str	r6, [r0, #0]
 800aec2:	60c6      	str	r6, [r0, #12]
 800aec4:	b13c      	cbz	r4, 800aed6 <_Bfree+0x3a>
 800aec6:	69eb      	ldr	r3, [r5, #28]
 800aec8:	6862      	ldr	r2, [r4, #4]
 800aeca:	68db      	ldr	r3, [r3, #12]
 800aecc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aed0:	6021      	str	r1, [r4, #0]
 800aed2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800aed6:	bd70      	pop	{r4, r5, r6, pc}
 800aed8:	0800c109 	.word	0x0800c109
 800aedc:	0800c189 	.word	0x0800c189

0800aee0 <__multadd>:
 800aee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aee4:	690d      	ldr	r5, [r1, #16]
 800aee6:	4607      	mov	r7, r0
 800aee8:	460c      	mov	r4, r1
 800aeea:	461e      	mov	r6, r3
 800aeec:	f101 0c14 	add.w	ip, r1, #20
 800aef0:	2000      	movs	r0, #0
 800aef2:	f8dc 3000 	ldr.w	r3, [ip]
 800aef6:	b299      	uxth	r1, r3
 800aef8:	fb02 6101 	mla	r1, r2, r1, r6
 800aefc:	0c1e      	lsrs	r6, r3, #16
 800aefe:	0c0b      	lsrs	r3, r1, #16
 800af00:	fb02 3306 	mla	r3, r2, r6, r3
 800af04:	b289      	uxth	r1, r1
 800af06:	3001      	adds	r0, #1
 800af08:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800af0c:	4285      	cmp	r5, r0
 800af0e:	f84c 1b04 	str.w	r1, [ip], #4
 800af12:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800af16:	dcec      	bgt.n	800aef2 <__multadd+0x12>
 800af18:	b30e      	cbz	r6, 800af5e <__multadd+0x7e>
 800af1a:	68a3      	ldr	r3, [r4, #8]
 800af1c:	42ab      	cmp	r3, r5
 800af1e:	dc19      	bgt.n	800af54 <__multadd+0x74>
 800af20:	6861      	ldr	r1, [r4, #4]
 800af22:	4638      	mov	r0, r7
 800af24:	3101      	adds	r1, #1
 800af26:	f7ff ff79 	bl	800ae1c <_Balloc>
 800af2a:	4680      	mov	r8, r0
 800af2c:	b928      	cbnz	r0, 800af3a <__multadd+0x5a>
 800af2e:	4602      	mov	r2, r0
 800af30:	4b0c      	ldr	r3, [pc, #48]	; (800af64 <__multadd+0x84>)
 800af32:	480d      	ldr	r0, [pc, #52]	; (800af68 <__multadd+0x88>)
 800af34:	21ba      	movs	r1, #186	; 0xba
 800af36:	f000 fd1d 	bl	800b974 <__assert_func>
 800af3a:	6922      	ldr	r2, [r4, #16]
 800af3c:	3202      	adds	r2, #2
 800af3e:	f104 010c 	add.w	r1, r4, #12
 800af42:	0092      	lsls	r2, r2, #2
 800af44:	300c      	adds	r0, #12
 800af46:	f7fe ffe0 	bl	8009f0a <memcpy>
 800af4a:	4621      	mov	r1, r4
 800af4c:	4638      	mov	r0, r7
 800af4e:	f7ff ffa5 	bl	800ae9c <_Bfree>
 800af52:	4644      	mov	r4, r8
 800af54:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800af58:	3501      	adds	r5, #1
 800af5a:	615e      	str	r6, [r3, #20]
 800af5c:	6125      	str	r5, [r4, #16]
 800af5e:	4620      	mov	r0, r4
 800af60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af64:	0800c178 	.word	0x0800c178
 800af68:	0800c189 	.word	0x0800c189

0800af6c <__hi0bits>:
 800af6c:	0c03      	lsrs	r3, r0, #16
 800af6e:	041b      	lsls	r3, r3, #16
 800af70:	b9d3      	cbnz	r3, 800afa8 <__hi0bits+0x3c>
 800af72:	0400      	lsls	r0, r0, #16
 800af74:	2310      	movs	r3, #16
 800af76:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800af7a:	bf04      	itt	eq
 800af7c:	0200      	lsleq	r0, r0, #8
 800af7e:	3308      	addeq	r3, #8
 800af80:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800af84:	bf04      	itt	eq
 800af86:	0100      	lsleq	r0, r0, #4
 800af88:	3304      	addeq	r3, #4
 800af8a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800af8e:	bf04      	itt	eq
 800af90:	0080      	lsleq	r0, r0, #2
 800af92:	3302      	addeq	r3, #2
 800af94:	2800      	cmp	r0, #0
 800af96:	db05      	blt.n	800afa4 <__hi0bits+0x38>
 800af98:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800af9c:	f103 0301 	add.w	r3, r3, #1
 800afa0:	bf08      	it	eq
 800afa2:	2320      	moveq	r3, #32
 800afa4:	4618      	mov	r0, r3
 800afa6:	4770      	bx	lr
 800afa8:	2300      	movs	r3, #0
 800afaa:	e7e4      	b.n	800af76 <__hi0bits+0xa>

0800afac <__lo0bits>:
 800afac:	6803      	ldr	r3, [r0, #0]
 800afae:	f013 0207 	ands.w	r2, r3, #7
 800afb2:	d00c      	beq.n	800afce <__lo0bits+0x22>
 800afb4:	07d9      	lsls	r1, r3, #31
 800afb6:	d422      	bmi.n	800affe <__lo0bits+0x52>
 800afb8:	079a      	lsls	r2, r3, #30
 800afba:	bf49      	itett	mi
 800afbc:	085b      	lsrmi	r3, r3, #1
 800afbe:	089b      	lsrpl	r3, r3, #2
 800afc0:	6003      	strmi	r3, [r0, #0]
 800afc2:	2201      	movmi	r2, #1
 800afc4:	bf5c      	itt	pl
 800afc6:	6003      	strpl	r3, [r0, #0]
 800afc8:	2202      	movpl	r2, #2
 800afca:	4610      	mov	r0, r2
 800afcc:	4770      	bx	lr
 800afce:	b299      	uxth	r1, r3
 800afd0:	b909      	cbnz	r1, 800afd6 <__lo0bits+0x2a>
 800afd2:	0c1b      	lsrs	r3, r3, #16
 800afd4:	2210      	movs	r2, #16
 800afd6:	b2d9      	uxtb	r1, r3
 800afd8:	b909      	cbnz	r1, 800afde <__lo0bits+0x32>
 800afda:	3208      	adds	r2, #8
 800afdc:	0a1b      	lsrs	r3, r3, #8
 800afde:	0719      	lsls	r1, r3, #28
 800afe0:	bf04      	itt	eq
 800afe2:	091b      	lsreq	r3, r3, #4
 800afe4:	3204      	addeq	r2, #4
 800afe6:	0799      	lsls	r1, r3, #30
 800afe8:	bf04      	itt	eq
 800afea:	089b      	lsreq	r3, r3, #2
 800afec:	3202      	addeq	r2, #2
 800afee:	07d9      	lsls	r1, r3, #31
 800aff0:	d403      	bmi.n	800affa <__lo0bits+0x4e>
 800aff2:	085b      	lsrs	r3, r3, #1
 800aff4:	f102 0201 	add.w	r2, r2, #1
 800aff8:	d003      	beq.n	800b002 <__lo0bits+0x56>
 800affa:	6003      	str	r3, [r0, #0]
 800affc:	e7e5      	b.n	800afca <__lo0bits+0x1e>
 800affe:	2200      	movs	r2, #0
 800b000:	e7e3      	b.n	800afca <__lo0bits+0x1e>
 800b002:	2220      	movs	r2, #32
 800b004:	e7e1      	b.n	800afca <__lo0bits+0x1e>
	...

0800b008 <__i2b>:
 800b008:	b510      	push	{r4, lr}
 800b00a:	460c      	mov	r4, r1
 800b00c:	2101      	movs	r1, #1
 800b00e:	f7ff ff05 	bl	800ae1c <_Balloc>
 800b012:	4602      	mov	r2, r0
 800b014:	b928      	cbnz	r0, 800b022 <__i2b+0x1a>
 800b016:	4b05      	ldr	r3, [pc, #20]	; (800b02c <__i2b+0x24>)
 800b018:	4805      	ldr	r0, [pc, #20]	; (800b030 <__i2b+0x28>)
 800b01a:	f240 1145 	movw	r1, #325	; 0x145
 800b01e:	f000 fca9 	bl	800b974 <__assert_func>
 800b022:	2301      	movs	r3, #1
 800b024:	6144      	str	r4, [r0, #20]
 800b026:	6103      	str	r3, [r0, #16]
 800b028:	bd10      	pop	{r4, pc}
 800b02a:	bf00      	nop
 800b02c:	0800c178 	.word	0x0800c178
 800b030:	0800c189 	.word	0x0800c189

0800b034 <__multiply>:
 800b034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b038:	4691      	mov	r9, r2
 800b03a:	690a      	ldr	r2, [r1, #16]
 800b03c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b040:	429a      	cmp	r2, r3
 800b042:	bfb8      	it	lt
 800b044:	460b      	movlt	r3, r1
 800b046:	460c      	mov	r4, r1
 800b048:	bfbc      	itt	lt
 800b04a:	464c      	movlt	r4, r9
 800b04c:	4699      	movlt	r9, r3
 800b04e:	6927      	ldr	r7, [r4, #16]
 800b050:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b054:	68a3      	ldr	r3, [r4, #8]
 800b056:	6861      	ldr	r1, [r4, #4]
 800b058:	eb07 060a 	add.w	r6, r7, sl
 800b05c:	42b3      	cmp	r3, r6
 800b05e:	b085      	sub	sp, #20
 800b060:	bfb8      	it	lt
 800b062:	3101      	addlt	r1, #1
 800b064:	f7ff feda 	bl	800ae1c <_Balloc>
 800b068:	b930      	cbnz	r0, 800b078 <__multiply+0x44>
 800b06a:	4602      	mov	r2, r0
 800b06c:	4b44      	ldr	r3, [pc, #272]	; (800b180 <__multiply+0x14c>)
 800b06e:	4845      	ldr	r0, [pc, #276]	; (800b184 <__multiply+0x150>)
 800b070:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b074:	f000 fc7e 	bl	800b974 <__assert_func>
 800b078:	f100 0514 	add.w	r5, r0, #20
 800b07c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b080:	462b      	mov	r3, r5
 800b082:	2200      	movs	r2, #0
 800b084:	4543      	cmp	r3, r8
 800b086:	d321      	bcc.n	800b0cc <__multiply+0x98>
 800b088:	f104 0314 	add.w	r3, r4, #20
 800b08c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b090:	f109 0314 	add.w	r3, r9, #20
 800b094:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b098:	9202      	str	r2, [sp, #8]
 800b09a:	1b3a      	subs	r2, r7, r4
 800b09c:	3a15      	subs	r2, #21
 800b09e:	f022 0203 	bic.w	r2, r2, #3
 800b0a2:	3204      	adds	r2, #4
 800b0a4:	f104 0115 	add.w	r1, r4, #21
 800b0a8:	428f      	cmp	r7, r1
 800b0aa:	bf38      	it	cc
 800b0ac:	2204      	movcc	r2, #4
 800b0ae:	9201      	str	r2, [sp, #4]
 800b0b0:	9a02      	ldr	r2, [sp, #8]
 800b0b2:	9303      	str	r3, [sp, #12]
 800b0b4:	429a      	cmp	r2, r3
 800b0b6:	d80c      	bhi.n	800b0d2 <__multiply+0x9e>
 800b0b8:	2e00      	cmp	r6, #0
 800b0ba:	dd03      	ble.n	800b0c4 <__multiply+0x90>
 800b0bc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d05b      	beq.n	800b17c <__multiply+0x148>
 800b0c4:	6106      	str	r6, [r0, #16]
 800b0c6:	b005      	add	sp, #20
 800b0c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0cc:	f843 2b04 	str.w	r2, [r3], #4
 800b0d0:	e7d8      	b.n	800b084 <__multiply+0x50>
 800b0d2:	f8b3 a000 	ldrh.w	sl, [r3]
 800b0d6:	f1ba 0f00 	cmp.w	sl, #0
 800b0da:	d024      	beq.n	800b126 <__multiply+0xf2>
 800b0dc:	f104 0e14 	add.w	lr, r4, #20
 800b0e0:	46a9      	mov	r9, r5
 800b0e2:	f04f 0c00 	mov.w	ip, #0
 800b0e6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b0ea:	f8d9 1000 	ldr.w	r1, [r9]
 800b0ee:	fa1f fb82 	uxth.w	fp, r2
 800b0f2:	b289      	uxth	r1, r1
 800b0f4:	fb0a 110b 	mla	r1, sl, fp, r1
 800b0f8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b0fc:	f8d9 2000 	ldr.w	r2, [r9]
 800b100:	4461      	add	r1, ip
 800b102:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b106:	fb0a c20b 	mla	r2, sl, fp, ip
 800b10a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b10e:	b289      	uxth	r1, r1
 800b110:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b114:	4577      	cmp	r7, lr
 800b116:	f849 1b04 	str.w	r1, [r9], #4
 800b11a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b11e:	d8e2      	bhi.n	800b0e6 <__multiply+0xb2>
 800b120:	9a01      	ldr	r2, [sp, #4]
 800b122:	f845 c002 	str.w	ip, [r5, r2]
 800b126:	9a03      	ldr	r2, [sp, #12]
 800b128:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b12c:	3304      	adds	r3, #4
 800b12e:	f1b9 0f00 	cmp.w	r9, #0
 800b132:	d021      	beq.n	800b178 <__multiply+0x144>
 800b134:	6829      	ldr	r1, [r5, #0]
 800b136:	f104 0c14 	add.w	ip, r4, #20
 800b13a:	46ae      	mov	lr, r5
 800b13c:	f04f 0a00 	mov.w	sl, #0
 800b140:	f8bc b000 	ldrh.w	fp, [ip]
 800b144:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b148:	fb09 220b 	mla	r2, r9, fp, r2
 800b14c:	4452      	add	r2, sl
 800b14e:	b289      	uxth	r1, r1
 800b150:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b154:	f84e 1b04 	str.w	r1, [lr], #4
 800b158:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b15c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b160:	f8be 1000 	ldrh.w	r1, [lr]
 800b164:	fb09 110a 	mla	r1, r9, sl, r1
 800b168:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b16c:	4567      	cmp	r7, ip
 800b16e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b172:	d8e5      	bhi.n	800b140 <__multiply+0x10c>
 800b174:	9a01      	ldr	r2, [sp, #4]
 800b176:	50a9      	str	r1, [r5, r2]
 800b178:	3504      	adds	r5, #4
 800b17a:	e799      	b.n	800b0b0 <__multiply+0x7c>
 800b17c:	3e01      	subs	r6, #1
 800b17e:	e79b      	b.n	800b0b8 <__multiply+0x84>
 800b180:	0800c178 	.word	0x0800c178
 800b184:	0800c189 	.word	0x0800c189

0800b188 <__pow5mult>:
 800b188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b18c:	4615      	mov	r5, r2
 800b18e:	f012 0203 	ands.w	r2, r2, #3
 800b192:	4606      	mov	r6, r0
 800b194:	460f      	mov	r7, r1
 800b196:	d007      	beq.n	800b1a8 <__pow5mult+0x20>
 800b198:	4c25      	ldr	r4, [pc, #148]	; (800b230 <__pow5mult+0xa8>)
 800b19a:	3a01      	subs	r2, #1
 800b19c:	2300      	movs	r3, #0
 800b19e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b1a2:	f7ff fe9d 	bl	800aee0 <__multadd>
 800b1a6:	4607      	mov	r7, r0
 800b1a8:	10ad      	asrs	r5, r5, #2
 800b1aa:	d03d      	beq.n	800b228 <__pow5mult+0xa0>
 800b1ac:	69f4      	ldr	r4, [r6, #28]
 800b1ae:	b97c      	cbnz	r4, 800b1d0 <__pow5mult+0x48>
 800b1b0:	2010      	movs	r0, #16
 800b1b2:	f7ff fd7f 	bl	800acb4 <malloc>
 800b1b6:	4602      	mov	r2, r0
 800b1b8:	61f0      	str	r0, [r6, #28]
 800b1ba:	b928      	cbnz	r0, 800b1c8 <__pow5mult+0x40>
 800b1bc:	4b1d      	ldr	r3, [pc, #116]	; (800b234 <__pow5mult+0xac>)
 800b1be:	481e      	ldr	r0, [pc, #120]	; (800b238 <__pow5mult+0xb0>)
 800b1c0:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b1c4:	f000 fbd6 	bl	800b974 <__assert_func>
 800b1c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b1cc:	6004      	str	r4, [r0, #0]
 800b1ce:	60c4      	str	r4, [r0, #12]
 800b1d0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b1d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b1d8:	b94c      	cbnz	r4, 800b1ee <__pow5mult+0x66>
 800b1da:	f240 2171 	movw	r1, #625	; 0x271
 800b1de:	4630      	mov	r0, r6
 800b1e0:	f7ff ff12 	bl	800b008 <__i2b>
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	f8c8 0008 	str.w	r0, [r8, #8]
 800b1ea:	4604      	mov	r4, r0
 800b1ec:	6003      	str	r3, [r0, #0]
 800b1ee:	f04f 0900 	mov.w	r9, #0
 800b1f2:	07eb      	lsls	r3, r5, #31
 800b1f4:	d50a      	bpl.n	800b20c <__pow5mult+0x84>
 800b1f6:	4639      	mov	r1, r7
 800b1f8:	4622      	mov	r2, r4
 800b1fa:	4630      	mov	r0, r6
 800b1fc:	f7ff ff1a 	bl	800b034 <__multiply>
 800b200:	4639      	mov	r1, r7
 800b202:	4680      	mov	r8, r0
 800b204:	4630      	mov	r0, r6
 800b206:	f7ff fe49 	bl	800ae9c <_Bfree>
 800b20a:	4647      	mov	r7, r8
 800b20c:	106d      	asrs	r5, r5, #1
 800b20e:	d00b      	beq.n	800b228 <__pow5mult+0xa0>
 800b210:	6820      	ldr	r0, [r4, #0]
 800b212:	b938      	cbnz	r0, 800b224 <__pow5mult+0x9c>
 800b214:	4622      	mov	r2, r4
 800b216:	4621      	mov	r1, r4
 800b218:	4630      	mov	r0, r6
 800b21a:	f7ff ff0b 	bl	800b034 <__multiply>
 800b21e:	6020      	str	r0, [r4, #0]
 800b220:	f8c0 9000 	str.w	r9, [r0]
 800b224:	4604      	mov	r4, r0
 800b226:	e7e4      	b.n	800b1f2 <__pow5mult+0x6a>
 800b228:	4638      	mov	r0, r7
 800b22a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b22e:	bf00      	nop
 800b230:	0800c2d8 	.word	0x0800c2d8
 800b234:	0800c109 	.word	0x0800c109
 800b238:	0800c189 	.word	0x0800c189

0800b23c <__lshift>:
 800b23c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b240:	460c      	mov	r4, r1
 800b242:	6849      	ldr	r1, [r1, #4]
 800b244:	6923      	ldr	r3, [r4, #16]
 800b246:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b24a:	68a3      	ldr	r3, [r4, #8]
 800b24c:	4607      	mov	r7, r0
 800b24e:	4691      	mov	r9, r2
 800b250:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b254:	f108 0601 	add.w	r6, r8, #1
 800b258:	42b3      	cmp	r3, r6
 800b25a:	db0b      	blt.n	800b274 <__lshift+0x38>
 800b25c:	4638      	mov	r0, r7
 800b25e:	f7ff fddd 	bl	800ae1c <_Balloc>
 800b262:	4605      	mov	r5, r0
 800b264:	b948      	cbnz	r0, 800b27a <__lshift+0x3e>
 800b266:	4602      	mov	r2, r0
 800b268:	4b28      	ldr	r3, [pc, #160]	; (800b30c <__lshift+0xd0>)
 800b26a:	4829      	ldr	r0, [pc, #164]	; (800b310 <__lshift+0xd4>)
 800b26c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b270:	f000 fb80 	bl	800b974 <__assert_func>
 800b274:	3101      	adds	r1, #1
 800b276:	005b      	lsls	r3, r3, #1
 800b278:	e7ee      	b.n	800b258 <__lshift+0x1c>
 800b27a:	2300      	movs	r3, #0
 800b27c:	f100 0114 	add.w	r1, r0, #20
 800b280:	f100 0210 	add.w	r2, r0, #16
 800b284:	4618      	mov	r0, r3
 800b286:	4553      	cmp	r3, sl
 800b288:	db33      	blt.n	800b2f2 <__lshift+0xb6>
 800b28a:	6920      	ldr	r0, [r4, #16]
 800b28c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b290:	f104 0314 	add.w	r3, r4, #20
 800b294:	f019 091f 	ands.w	r9, r9, #31
 800b298:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b29c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b2a0:	d02b      	beq.n	800b2fa <__lshift+0xbe>
 800b2a2:	f1c9 0e20 	rsb	lr, r9, #32
 800b2a6:	468a      	mov	sl, r1
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	6818      	ldr	r0, [r3, #0]
 800b2ac:	fa00 f009 	lsl.w	r0, r0, r9
 800b2b0:	4310      	orrs	r0, r2
 800b2b2:	f84a 0b04 	str.w	r0, [sl], #4
 800b2b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2ba:	459c      	cmp	ip, r3
 800b2bc:	fa22 f20e 	lsr.w	r2, r2, lr
 800b2c0:	d8f3      	bhi.n	800b2aa <__lshift+0x6e>
 800b2c2:	ebac 0304 	sub.w	r3, ip, r4
 800b2c6:	3b15      	subs	r3, #21
 800b2c8:	f023 0303 	bic.w	r3, r3, #3
 800b2cc:	3304      	adds	r3, #4
 800b2ce:	f104 0015 	add.w	r0, r4, #21
 800b2d2:	4584      	cmp	ip, r0
 800b2d4:	bf38      	it	cc
 800b2d6:	2304      	movcc	r3, #4
 800b2d8:	50ca      	str	r2, [r1, r3]
 800b2da:	b10a      	cbz	r2, 800b2e0 <__lshift+0xa4>
 800b2dc:	f108 0602 	add.w	r6, r8, #2
 800b2e0:	3e01      	subs	r6, #1
 800b2e2:	4638      	mov	r0, r7
 800b2e4:	612e      	str	r6, [r5, #16]
 800b2e6:	4621      	mov	r1, r4
 800b2e8:	f7ff fdd8 	bl	800ae9c <_Bfree>
 800b2ec:	4628      	mov	r0, r5
 800b2ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2f2:	f842 0f04 	str.w	r0, [r2, #4]!
 800b2f6:	3301      	adds	r3, #1
 800b2f8:	e7c5      	b.n	800b286 <__lshift+0x4a>
 800b2fa:	3904      	subs	r1, #4
 800b2fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b300:	f841 2f04 	str.w	r2, [r1, #4]!
 800b304:	459c      	cmp	ip, r3
 800b306:	d8f9      	bhi.n	800b2fc <__lshift+0xc0>
 800b308:	e7ea      	b.n	800b2e0 <__lshift+0xa4>
 800b30a:	bf00      	nop
 800b30c:	0800c178 	.word	0x0800c178
 800b310:	0800c189 	.word	0x0800c189

0800b314 <__mcmp>:
 800b314:	b530      	push	{r4, r5, lr}
 800b316:	6902      	ldr	r2, [r0, #16]
 800b318:	690c      	ldr	r4, [r1, #16]
 800b31a:	1b12      	subs	r2, r2, r4
 800b31c:	d10e      	bne.n	800b33c <__mcmp+0x28>
 800b31e:	f100 0314 	add.w	r3, r0, #20
 800b322:	3114      	adds	r1, #20
 800b324:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b328:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b32c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b330:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b334:	42a5      	cmp	r5, r4
 800b336:	d003      	beq.n	800b340 <__mcmp+0x2c>
 800b338:	d305      	bcc.n	800b346 <__mcmp+0x32>
 800b33a:	2201      	movs	r2, #1
 800b33c:	4610      	mov	r0, r2
 800b33e:	bd30      	pop	{r4, r5, pc}
 800b340:	4283      	cmp	r3, r0
 800b342:	d3f3      	bcc.n	800b32c <__mcmp+0x18>
 800b344:	e7fa      	b.n	800b33c <__mcmp+0x28>
 800b346:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b34a:	e7f7      	b.n	800b33c <__mcmp+0x28>

0800b34c <__mdiff>:
 800b34c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b350:	460c      	mov	r4, r1
 800b352:	4606      	mov	r6, r0
 800b354:	4611      	mov	r1, r2
 800b356:	4620      	mov	r0, r4
 800b358:	4690      	mov	r8, r2
 800b35a:	f7ff ffdb 	bl	800b314 <__mcmp>
 800b35e:	1e05      	subs	r5, r0, #0
 800b360:	d110      	bne.n	800b384 <__mdiff+0x38>
 800b362:	4629      	mov	r1, r5
 800b364:	4630      	mov	r0, r6
 800b366:	f7ff fd59 	bl	800ae1c <_Balloc>
 800b36a:	b930      	cbnz	r0, 800b37a <__mdiff+0x2e>
 800b36c:	4b3a      	ldr	r3, [pc, #232]	; (800b458 <__mdiff+0x10c>)
 800b36e:	4602      	mov	r2, r0
 800b370:	f240 2137 	movw	r1, #567	; 0x237
 800b374:	4839      	ldr	r0, [pc, #228]	; (800b45c <__mdiff+0x110>)
 800b376:	f000 fafd 	bl	800b974 <__assert_func>
 800b37a:	2301      	movs	r3, #1
 800b37c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b380:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b384:	bfa4      	itt	ge
 800b386:	4643      	movge	r3, r8
 800b388:	46a0      	movge	r8, r4
 800b38a:	4630      	mov	r0, r6
 800b38c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b390:	bfa6      	itte	ge
 800b392:	461c      	movge	r4, r3
 800b394:	2500      	movge	r5, #0
 800b396:	2501      	movlt	r5, #1
 800b398:	f7ff fd40 	bl	800ae1c <_Balloc>
 800b39c:	b920      	cbnz	r0, 800b3a8 <__mdiff+0x5c>
 800b39e:	4b2e      	ldr	r3, [pc, #184]	; (800b458 <__mdiff+0x10c>)
 800b3a0:	4602      	mov	r2, r0
 800b3a2:	f240 2145 	movw	r1, #581	; 0x245
 800b3a6:	e7e5      	b.n	800b374 <__mdiff+0x28>
 800b3a8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b3ac:	6926      	ldr	r6, [r4, #16]
 800b3ae:	60c5      	str	r5, [r0, #12]
 800b3b0:	f104 0914 	add.w	r9, r4, #20
 800b3b4:	f108 0514 	add.w	r5, r8, #20
 800b3b8:	f100 0e14 	add.w	lr, r0, #20
 800b3bc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b3c0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b3c4:	f108 0210 	add.w	r2, r8, #16
 800b3c8:	46f2      	mov	sl, lr
 800b3ca:	2100      	movs	r1, #0
 800b3cc:	f859 3b04 	ldr.w	r3, [r9], #4
 800b3d0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b3d4:	fa11 f88b 	uxtah	r8, r1, fp
 800b3d8:	b299      	uxth	r1, r3
 800b3da:	0c1b      	lsrs	r3, r3, #16
 800b3dc:	eba8 0801 	sub.w	r8, r8, r1
 800b3e0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b3e4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b3e8:	fa1f f888 	uxth.w	r8, r8
 800b3ec:	1419      	asrs	r1, r3, #16
 800b3ee:	454e      	cmp	r6, r9
 800b3f0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b3f4:	f84a 3b04 	str.w	r3, [sl], #4
 800b3f8:	d8e8      	bhi.n	800b3cc <__mdiff+0x80>
 800b3fa:	1b33      	subs	r3, r6, r4
 800b3fc:	3b15      	subs	r3, #21
 800b3fe:	f023 0303 	bic.w	r3, r3, #3
 800b402:	3304      	adds	r3, #4
 800b404:	3415      	adds	r4, #21
 800b406:	42a6      	cmp	r6, r4
 800b408:	bf38      	it	cc
 800b40a:	2304      	movcc	r3, #4
 800b40c:	441d      	add	r5, r3
 800b40e:	4473      	add	r3, lr
 800b410:	469e      	mov	lr, r3
 800b412:	462e      	mov	r6, r5
 800b414:	4566      	cmp	r6, ip
 800b416:	d30e      	bcc.n	800b436 <__mdiff+0xea>
 800b418:	f10c 0203 	add.w	r2, ip, #3
 800b41c:	1b52      	subs	r2, r2, r5
 800b41e:	f022 0203 	bic.w	r2, r2, #3
 800b422:	3d03      	subs	r5, #3
 800b424:	45ac      	cmp	ip, r5
 800b426:	bf38      	it	cc
 800b428:	2200      	movcc	r2, #0
 800b42a:	4413      	add	r3, r2
 800b42c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b430:	b17a      	cbz	r2, 800b452 <__mdiff+0x106>
 800b432:	6107      	str	r7, [r0, #16]
 800b434:	e7a4      	b.n	800b380 <__mdiff+0x34>
 800b436:	f856 8b04 	ldr.w	r8, [r6], #4
 800b43a:	fa11 f288 	uxtah	r2, r1, r8
 800b43e:	1414      	asrs	r4, r2, #16
 800b440:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b444:	b292      	uxth	r2, r2
 800b446:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b44a:	f84e 2b04 	str.w	r2, [lr], #4
 800b44e:	1421      	asrs	r1, r4, #16
 800b450:	e7e0      	b.n	800b414 <__mdiff+0xc8>
 800b452:	3f01      	subs	r7, #1
 800b454:	e7ea      	b.n	800b42c <__mdiff+0xe0>
 800b456:	bf00      	nop
 800b458:	0800c178 	.word	0x0800c178
 800b45c:	0800c189 	.word	0x0800c189

0800b460 <__d2b>:
 800b460:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b464:	460f      	mov	r7, r1
 800b466:	2101      	movs	r1, #1
 800b468:	ec59 8b10 	vmov	r8, r9, d0
 800b46c:	4616      	mov	r6, r2
 800b46e:	f7ff fcd5 	bl	800ae1c <_Balloc>
 800b472:	4604      	mov	r4, r0
 800b474:	b930      	cbnz	r0, 800b484 <__d2b+0x24>
 800b476:	4602      	mov	r2, r0
 800b478:	4b24      	ldr	r3, [pc, #144]	; (800b50c <__d2b+0xac>)
 800b47a:	4825      	ldr	r0, [pc, #148]	; (800b510 <__d2b+0xb0>)
 800b47c:	f240 310f 	movw	r1, #783	; 0x30f
 800b480:	f000 fa78 	bl	800b974 <__assert_func>
 800b484:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b488:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b48c:	bb2d      	cbnz	r5, 800b4da <__d2b+0x7a>
 800b48e:	9301      	str	r3, [sp, #4]
 800b490:	f1b8 0300 	subs.w	r3, r8, #0
 800b494:	d026      	beq.n	800b4e4 <__d2b+0x84>
 800b496:	4668      	mov	r0, sp
 800b498:	9300      	str	r3, [sp, #0]
 800b49a:	f7ff fd87 	bl	800afac <__lo0bits>
 800b49e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b4a2:	b1e8      	cbz	r0, 800b4e0 <__d2b+0x80>
 800b4a4:	f1c0 0320 	rsb	r3, r0, #32
 800b4a8:	fa02 f303 	lsl.w	r3, r2, r3
 800b4ac:	430b      	orrs	r3, r1
 800b4ae:	40c2      	lsrs	r2, r0
 800b4b0:	6163      	str	r3, [r4, #20]
 800b4b2:	9201      	str	r2, [sp, #4]
 800b4b4:	9b01      	ldr	r3, [sp, #4]
 800b4b6:	61a3      	str	r3, [r4, #24]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	bf14      	ite	ne
 800b4bc:	2202      	movne	r2, #2
 800b4be:	2201      	moveq	r2, #1
 800b4c0:	6122      	str	r2, [r4, #16]
 800b4c2:	b1bd      	cbz	r5, 800b4f4 <__d2b+0x94>
 800b4c4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b4c8:	4405      	add	r5, r0
 800b4ca:	603d      	str	r5, [r7, #0]
 800b4cc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b4d0:	6030      	str	r0, [r6, #0]
 800b4d2:	4620      	mov	r0, r4
 800b4d4:	b003      	add	sp, #12
 800b4d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b4da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b4de:	e7d6      	b.n	800b48e <__d2b+0x2e>
 800b4e0:	6161      	str	r1, [r4, #20]
 800b4e2:	e7e7      	b.n	800b4b4 <__d2b+0x54>
 800b4e4:	a801      	add	r0, sp, #4
 800b4e6:	f7ff fd61 	bl	800afac <__lo0bits>
 800b4ea:	9b01      	ldr	r3, [sp, #4]
 800b4ec:	6163      	str	r3, [r4, #20]
 800b4ee:	3020      	adds	r0, #32
 800b4f0:	2201      	movs	r2, #1
 800b4f2:	e7e5      	b.n	800b4c0 <__d2b+0x60>
 800b4f4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b4f8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b4fc:	6038      	str	r0, [r7, #0]
 800b4fe:	6918      	ldr	r0, [r3, #16]
 800b500:	f7ff fd34 	bl	800af6c <__hi0bits>
 800b504:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b508:	e7e2      	b.n	800b4d0 <__d2b+0x70>
 800b50a:	bf00      	nop
 800b50c:	0800c178 	.word	0x0800c178
 800b510:	0800c189 	.word	0x0800c189

0800b514 <__ssputs_r>:
 800b514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b518:	688e      	ldr	r6, [r1, #8]
 800b51a:	461f      	mov	r7, r3
 800b51c:	42be      	cmp	r6, r7
 800b51e:	680b      	ldr	r3, [r1, #0]
 800b520:	4682      	mov	sl, r0
 800b522:	460c      	mov	r4, r1
 800b524:	4690      	mov	r8, r2
 800b526:	d82c      	bhi.n	800b582 <__ssputs_r+0x6e>
 800b528:	898a      	ldrh	r2, [r1, #12]
 800b52a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b52e:	d026      	beq.n	800b57e <__ssputs_r+0x6a>
 800b530:	6965      	ldr	r5, [r4, #20]
 800b532:	6909      	ldr	r1, [r1, #16]
 800b534:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b538:	eba3 0901 	sub.w	r9, r3, r1
 800b53c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b540:	1c7b      	adds	r3, r7, #1
 800b542:	444b      	add	r3, r9
 800b544:	106d      	asrs	r5, r5, #1
 800b546:	429d      	cmp	r5, r3
 800b548:	bf38      	it	cc
 800b54a:	461d      	movcc	r5, r3
 800b54c:	0553      	lsls	r3, r2, #21
 800b54e:	d527      	bpl.n	800b5a0 <__ssputs_r+0x8c>
 800b550:	4629      	mov	r1, r5
 800b552:	f7ff fbd7 	bl	800ad04 <_malloc_r>
 800b556:	4606      	mov	r6, r0
 800b558:	b360      	cbz	r0, 800b5b4 <__ssputs_r+0xa0>
 800b55a:	6921      	ldr	r1, [r4, #16]
 800b55c:	464a      	mov	r2, r9
 800b55e:	f7fe fcd4 	bl	8009f0a <memcpy>
 800b562:	89a3      	ldrh	r3, [r4, #12]
 800b564:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b56c:	81a3      	strh	r3, [r4, #12]
 800b56e:	6126      	str	r6, [r4, #16]
 800b570:	6165      	str	r5, [r4, #20]
 800b572:	444e      	add	r6, r9
 800b574:	eba5 0509 	sub.w	r5, r5, r9
 800b578:	6026      	str	r6, [r4, #0]
 800b57a:	60a5      	str	r5, [r4, #8]
 800b57c:	463e      	mov	r6, r7
 800b57e:	42be      	cmp	r6, r7
 800b580:	d900      	bls.n	800b584 <__ssputs_r+0x70>
 800b582:	463e      	mov	r6, r7
 800b584:	6820      	ldr	r0, [r4, #0]
 800b586:	4632      	mov	r2, r6
 800b588:	4641      	mov	r1, r8
 800b58a:	f000 f9c9 	bl	800b920 <memmove>
 800b58e:	68a3      	ldr	r3, [r4, #8]
 800b590:	1b9b      	subs	r3, r3, r6
 800b592:	60a3      	str	r3, [r4, #8]
 800b594:	6823      	ldr	r3, [r4, #0]
 800b596:	4433      	add	r3, r6
 800b598:	6023      	str	r3, [r4, #0]
 800b59a:	2000      	movs	r0, #0
 800b59c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5a0:	462a      	mov	r2, r5
 800b5a2:	f000 fa2d 	bl	800ba00 <_realloc_r>
 800b5a6:	4606      	mov	r6, r0
 800b5a8:	2800      	cmp	r0, #0
 800b5aa:	d1e0      	bne.n	800b56e <__ssputs_r+0x5a>
 800b5ac:	6921      	ldr	r1, [r4, #16]
 800b5ae:	4650      	mov	r0, sl
 800b5b0:	f7ff fb34 	bl	800ac1c <_free_r>
 800b5b4:	230c      	movs	r3, #12
 800b5b6:	f8ca 3000 	str.w	r3, [sl]
 800b5ba:	89a3      	ldrh	r3, [r4, #12]
 800b5bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5c0:	81a3      	strh	r3, [r4, #12]
 800b5c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b5c6:	e7e9      	b.n	800b59c <__ssputs_r+0x88>

0800b5c8 <_svfiprintf_r>:
 800b5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5cc:	4698      	mov	r8, r3
 800b5ce:	898b      	ldrh	r3, [r1, #12]
 800b5d0:	061b      	lsls	r3, r3, #24
 800b5d2:	b09d      	sub	sp, #116	; 0x74
 800b5d4:	4607      	mov	r7, r0
 800b5d6:	460d      	mov	r5, r1
 800b5d8:	4614      	mov	r4, r2
 800b5da:	d50e      	bpl.n	800b5fa <_svfiprintf_r+0x32>
 800b5dc:	690b      	ldr	r3, [r1, #16]
 800b5de:	b963      	cbnz	r3, 800b5fa <_svfiprintf_r+0x32>
 800b5e0:	2140      	movs	r1, #64	; 0x40
 800b5e2:	f7ff fb8f 	bl	800ad04 <_malloc_r>
 800b5e6:	6028      	str	r0, [r5, #0]
 800b5e8:	6128      	str	r0, [r5, #16]
 800b5ea:	b920      	cbnz	r0, 800b5f6 <_svfiprintf_r+0x2e>
 800b5ec:	230c      	movs	r3, #12
 800b5ee:	603b      	str	r3, [r7, #0]
 800b5f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b5f4:	e0d0      	b.n	800b798 <_svfiprintf_r+0x1d0>
 800b5f6:	2340      	movs	r3, #64	; 0x40
 800b5f8:	616b      	str	r3, [r5, #20]
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	9309      	str	r3, [sp, #36]	; 0x24
 800b5fe:	2320      	movs	r3, #32
 800b600:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b604:	f8cd 800c 	str.w	r8, [sp, #12]
 800b608:	2330      	movs	r3, #48	; 0x30
 800b60a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b7b0 <_svfiprintf_r+0x1e8>
 800b60e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b612:	f04f 0901 	mov.w	r9, #1
 800b616:	4623      	mov	r3, r4
 800b618:	469a      	mov	sl, r3
 800b61a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b61e:	b10a      	cbz	r2, 800b624 <_svfiprintf_r+0x5c>
 800b620:	2a25      	cmp	r2, #37	; 0x25
 800b622:	d1f9      	bne.n	800b618 <_svfiprintf_r+0x50>
 800b624:	ebba 0b04 	subs.w	fp, sl, r4
 800b628:	d00b      	beq.n	800b642 <_svfiprintf_r+0x7a>
 800b62a:	465b      	mov	r3, fp
 800b62c:	4622      	mov	r2, r4
 800b62e:	4629      	mov	r1, r5
 800b630:	4638      	mov	r0, r7
 800b632:	f7ff ff6f 	bl	800b514 <__ssputs_r>
 800b636:	3001      	adds	r0, #1
 800b638:	f000 80a9 	beq.w	800b78e <_svfiprintf_r+0x1c6>
 800b63c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b63e:	445a      	add	r2, fp
 800b640:	9209      	str	r2, [sp, #36]	; 0x24
 800b642:	f89a 3000 	ldrb.w	r3, [sl]
 800b646:	2b00      	cmp	r3, #0
 800b648:	f000 80a1 	beq.w	800b78e <_svfiprintf_r+0x1c6>
 800b64c:	2300      	movs	r3, #0
 800b64e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b652:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b656:	f10a 0a01 	add.w	sl, sl, #1
 800b65a:	9304      	str	r3, [sp, #16]
 800b65c:	9307      	str	r3, [sp, #28]
 800b65e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b662:	931a      	str	r3, [sp, #104]	; 0x68
 800b664:	4654      	mov	r4, sl
 800b666:	2205      	movs	r2, #5
 800b668:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b66c:	4850      	ldr	r0, [pc, #320]	; (800b7b0 <_svfiprintf_r+0x1e8>)
 800b66e:	f7f4 fdaf 	bl	80001d0 <memchr>
 800b672:	9a04      	ldr	r2, [sp, #16]
 800b674:	b9d8      	cbnz	r0, 800b6ae <_svfiprintf_r+0xe6>
 800b676:	06d0      	lsls	r0, r2, #27
 800b678:	bf44      	itt	mi
 800b67a:	2320      	movmi	r3, #32
 800b67c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b680:	0711      	lsls	r1, r2, #28
 800b682:	bf44      	itt	mi
 800b684:	232b      	movmi	r3, #43	; 0x2b
 800b686:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b68a:	f89a 3000 	ldrb.w	r3, [sl]
 800b68e:	2b2a      	cmp	r3, #42	; 0x2a
 800b690:	d015      	beq.n	800b6be <_svfiprintf_r+0xf6>
 800b692:	9a07      	ldr	r2, [sp, #28]
 800b694:	4654      	mov	r4, sl
 800b696:	2000      	movs	r0, #0
 800b698:	f04f 0c0a 	mov.w	ip, #10
 800b69c:	4621      	mov	r1, r4
 800b69e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b6a2:	3b30      	subs	r3, #48	; 0x30
 800b6a4:	2b09      	cmp	r3, #9
 800b6a6:	d94d      	bls.n	800b744 <_svfiprintf_r+0x17c>
 800b6a8:	b1b0      	cbz	r0, 800b6d8 <_svfiprintf_r+0x110>
 800b6aa:	9207      	str	r2, [sp, #28]
 800b6ac:	e014      	b.n	800b6d8 <_svfiprintf_r+0x110>
 800b6ae:	eba0 0308 	sub.w	r3, r0, r8
 800b6b2:	fa09 f303 	lsl.w	r3, r9, r3
 800b6b6:	4313      	orrs	r3, r2
 800b6b8:	9304      	str	r3, [sp, #16]
 800b6ba:	46a2      	mov	sl, r4
 800b6bc:	e7d2      	b.n	800b664 <_svfiprintf_r+0x9c>
 800b6be:	9b03      	ldr	r3, [sp, #12]
 800b6c0:	1d19      	adds	r1, r3, #4
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	9103      	str	r1, [sp, #12]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	bfbb      	ittet	lt
 800b6ca:	425b      	neglt	r3, r3
 800b6cc:	f042 0202 	orrlt.w	r2, r2, #2
 800b6d0:	9307      	strge	r3, [sp, #28]
 800b6d2:	9307      	strlt	r3, [sp, #28]
 800b6d4:	bfb8      	it	lt
 800b6d6:	9204      	strlt	r2, [sp, #16]
 800b6d8:	7823      	ldrb	r3, [r4, #0]
 800b6da:	2b2e      	cmp	r3, #46	; 0x2e
 800b6dc:	d10c      	bne.n	800b6f8 <_svfiprintf_r+0x130>
 800b6de:	7863      	ldrb	r3, [r4, #1]
 800b6e0:	2b2a      	cmp	r3, #42	; 0x2a
 800b6e2:	d134      	bne.n	800b74e <_svfiprintf_r+0x186>
 800b6e4:	9b03      	ldr	r3, [sp, #12]
 800b6e6:	1d1a      	adds	r2, r3, #4
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	9203      	str	r2, [sp, #12]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	bfb8      	it	lt
 800b6f0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b6f4:	3402      	adds	r4, #2
 800b6f6:	9305      	str	r3, [sp, #20]
 800b6f8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b7c0 <_svfiprintf_r+0x1f8>
 800b6fc:	7821      	ldrb	r1, [r4, #0]
 800b6fe:	2203      	movs	r2, #3
 800b700:	4650      	mov	r0, sl
 800b702:	f7f4 fd65 	bl	80001d0 <memchr>
 800b706:	b138      	cbz	r0, 800b718 <_svfiprintf_r+0x150>
 800b708:	9b04      	ldr	r3, [sp, #16]
 800b70a:	eba0 000a 	sub.w	r0, r0, sl
 800b70e:	2240      	movs	r2, #64	; 0x40
 800b710:	4082      	lsls	r2, r0
 800b712:	4313      	orrs	r3, r2
 800b714:	3401      	adds	r4, #1
 800b716:	9304      	str	r3, [sp, #16]
 800b718:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b71c:	4825      	ldr	r0, [pc, #148]	; (800b7b4 <_svfiprintf_r+0x1ec>)
 800b71e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b722:	2206      	movs	r2, #6
 800b724:	f7f4 fd54 	bl	80001d0 <memchr>
 800b728:	2800      	cmp	r0, #0
 800b72a:	d038      	beq.n	800b79e <_svfiprintf_r+0x1d6>
 800b72c:	4b22      	ldr	r3, [pc, #136]	; (800b7b8 <_svfiprintf_r+0x1f0>)
 800b72e:	bb1b      	cbnz	r3, 800b778 <_svfiprintf_r+0x1b0>
 800b730:	9b03      	ldr	r3, [sp, #12]
 800b732:	3307      	adds	r3, #7
 800b734:	f023 0307 	bic.w	r3, r3, #7
 800b738:	3308      	adds	r3, #8
 800b73a:	9303      	str	r3, [sp, #12]
 800b73c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b73e:	4433      	add	r3, r6
 800b740:	9309      	str	r3, [sp, #36]	; 0x24
 800b742:	e768      	b.n	800b616 <_svfiprintf_r+0x4e>
 800b744:	fb0c 3202 	mla	r2, ip, r2, r3
 800b748:	460c      	mov	r4, r1
 800b74a:	2001      	movs	r0, #1
 800b74c:	e7a6      	b.n	800b69c <_svfiprintf_r+0xd4>
 800b74e:	2300      	movs	r3, #0
 800b750:	3401      	adds	r4, #1
 800b752:	9305      	str	r3, [sp, #20]
 800b754:	4619      	mov	r1, r3
 800b756:	f04f 0c0a 	mov.w	ip, #10
 800b75a:	4620      	mov	r0, r4
 800b75c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b760:	3a30      	subs	r2, #48	; 0x30
 800b762:	2a09      	cmp	r2, #9
 800b764:	d903      	bls.n	800b76e <_svfiprintf_r+0x1a6>
 800b766:	2b00      	cmp	r3, #0
 800b768:	d0c6      	beq.n	800b6f8 <_svfiprintf_r+0x130>
 800b76a:	9105      	str	r1, [sp, #20]
 800b76c:	e7c4      	b.n	800b6f8 <_svfiprintf_r+0x130>
 800b76e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b772:	4604      	mov	r4, r0
 800b774:	2301      	movs	r3, #1
 800b776:	e7f0      	b.n	800b75a <_svfiprintf_r+0x192>
 800b778:	ab03      	add	r3, sp, #12
 800b77a:	9300      	str	r3, [sp, #0]
 800b77c:	462a      	mov	r2, r5
 800b77e:	4b0f      	ldr	r3, [pc, #60]	; (800b7bc <_svfiprintf_r+0x1f4>)
 800b780:	a904      	add	r1, sp, #16
 800b782:	4638      	mov	r0, r7
 800b784:	f7fd fe22 	bl	80093cc <_printf_float>
 800b788:	1c42      	adds	r2, r0, #1
 800b78a:	4606      	mov	r6, r0
 800b78c:	d1d6      	bne.n	800b73c <_svfiprintf_r+0x174>
 800b78e:	89ab      	ldrh	r3, [r5, #12]
 800b790:	065b      	lsls	r3, r3, #25
 800b792:	f53f af2d 	bmi.w	800b5f0 <_svfiprintf_r+0x28>
 800b796:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b798:	b01d      	add	sp, #116	; 0x74
 800b79a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b79e:	ab03      	add	r3, sp, #12
 800b7a0:	9300      	str	r3, [sp, #0]
 800b7a2:	462a      	mov	r2, r5
 800b7a4:	4b05      	ldr	r3, [pc, #20]	; (800b7bc <_svfiprintf_r+0x1f4>)
 800b7a6:	a904      	add	r1, sp, #16
 800b7a8:	4638      	mov	r0, r7
 800b7aa:	f7fe f8b3 	bl	8009914 <_printf_i>
 800b7ae:	e7eb      	b.n	800b788 <_svfiprintf_r+0x1c0>
 800b7b0:	0800c2e4 	.word	0x0800c2e4
 800b7b4:	0800c2ee 	.word	0x0800c2ee
 800b7b8:	080093cd 	.word	0x080093cd
 800b7bc:	0800b515 	.word	0x0800b515
 800b7c0:	0800c2ea 	.word	0x0800c2ea

0800b7c4 <__sflush_r>:
 800b7c4:	898a      	ldrh	r2, [r1, #12]
 800b7c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7ca:	4605      	mov	r5, r0
 800b7cc:	0710      	lsls	r0, r2, #28
 800b7ce:	460c      	mov	r4, r1
 800b7d0:	d458      	bmi.n	800b884 <__sflush_r+0xc0>
 800b7d2:	684b      	ldr	r3, [r1, #4]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	dc05      	bgt.n	800b7e4 <__sflush_r+0x20>
 800b7d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	dc02      	bgt.n	800b7e4 <__sflush_r+0x20>
 800b7de:	2000      	movs	r0, #0
 800b7e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b7e6:	2e00      	cmp	r6, #0
 800b7e8:	d0f9      	beq.n	800b7de <__sflush_r+0x1a>
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b7f0:	682f      	ldr	r7, [r5, #0]
 800b7f2:	6a21      	ldr	r1, [r4, #32]
 800b7f4:	602b      	str	r3, [r5, #0]
 800b7f6:	d032      	beq.n	800b85e <__sflush_r+0x9a>
 800b7f8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b7fa:	89a3      	ldrh	r3, [r4, #12]
 800b7fc:	075a      	lsls	r2, r3, #29
 800b7fe:	d505      	bpl.n	800b80c <__sflush_r+0x48>
 800b800:	6863      	ldr	r3, [r4, #4]
 800b802:	1ac0      	subs	r0, r0, r3
 800b804:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b806:	b10b      	cbz	r3, 800b80c <__sflush_r+0x48>
 800b808:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b80a:	1ac0      	subs	r0, r0, r3
 800b80c:	2300      	movs	r3, #0
 800b80e:	4602      	mov	r2, r0
 800b810:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b812:	6a21      	ldr	r1, [r4, #32]
 800b814:	4628      	mov	r0, r5
 800b816:	47b0      	blx	r6
 800b818:	1c43      	adds	r3, r0, #1
 800b81a:	89a3      	ldrh	r3, [r4, #12]
 800b81c:	d106      	bne.n	800b82c <__sflush_r+0x68>
 800b81e:	6829      	ldr	r1, [r5, #0]
 800b820:	291d      	cmp	r1, #29
 800b822:	d82b      	bhi.n	800b87c <__sflush_r+0xb8>
 800b824:	4a29      	ldr	r2, [pc, #164]	; (800b8cc <__sflush_r+0x108>)
 800b826:	410a      	asrs	r2, r1
 800b828:	07d6      	lsls	r6, r2, #31
 800b82a:	d427      	bmi.n	800b87c <__sflush_r+0xb8>
 800b82c:	2200      	movs	r2, #0
 800b82e:	6062      	str	r2, [r4, #4]
 800b830:	04d9      	lsls	r1, r3, #19
 800b832:	6922      	ldr	r2, [r4, #16]
 800b834:	6022      	str	r2, [r4, #0]
 800b836:	d504      	bpl.n	800b842 <__sflush_r+0x7e>
 800b838:	1c42      	adds	r2, r0, #1
 800b83a:	d101      	bne.n	800b840 <__sflush_r+0x7c>
 800b83c:	682b      	ldr	r3, [r5, #0]
 800b83e:	b903      	cbnz	r3, 800b842 <__sflush_r+0x7e>
 800b840:	6560      	str	r0, [r4, #84]	; 0x54
 800b842:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b844:	602f      	str	r7, [r5, #0]
 800b846:	2900      	cmp	r1, #0
 800b848:	d0c9      	beq.n	800b7de <__sflush_r+0x1a>
 800b84a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b84e:	4299      	cmp	r1, r3
 800b850:	d002      	beq.n	800b858 <__sflush_r+0x94>
 800b852:	4628      	mov	r0, r5
 800b854:	f7ff f9e2 	bl	800ac1c <_free_r>
 800b858:	2000      	movs	r0, #0
 800b85a:	6360      	str	r0, [r4, #52]	; 0x34
 800b85c:	e7c0      	b.n	800b7e0 <__sflush_r+0x1c>
 800b85e:	2301      	movs	r3, #1
 800b860:	4628      	mov	r0, r5
 800b862:	47b0      	blx	r6
 800b864:	1c41      	adds	r1, r0, #1
 800b866:	d1c8      	bne.n	800b7fa <__sflush_r+0x36>
 800b868:	682b      	ldr	r3, [r5, #0]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d0c5      	beq.n	800b7fa <__sflush_r+0x36>
 800b86e:	2b1d      	cmp	r3, #29
 800b870:	d001      	beq.n	800b876 <__sflush_r+0xb2>
 800b872:	2b16      	cmp	r3, #22
 800b874:	d101      	bne.n	800b87a <__sflush_r+0xb6>
 800b876:	602f      	str	r7, [r5, #0]
 800b878:	e7b1      	b.n	800b7de <__sflush_r+0x1a>
 800b87a:	89a3      	ldrh	r3, [r4, #12]
 800b87c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b880:	81a3      	strh	r3, [r4, #12]
 800b882:	e7ad      	b.n	800b7e0 <__sflush_r+0x1c>
 800b884:	690f      	ldr	r7, [r1, #16]
 800b886:	2f00      	cmp	r7, #0
 800b888:	d0a9      	beq.n	800b7de <__sflush_r+0x1a>
 800b88a:	0793      	lsls	r3, r2, #30
 800b88c:	680e      	ldr	r6, [r1, #0]
 800b88e:	bf08      	it	eq
 800b890:	694b      	ldreq	r3, [r1, #20]
 800b892:	600f      	str	r7, [r1, #0]
 800b894:	bf18      	it	ne
 800b896:	2300      	movne	r3, #0
 800b898:	eba6 0807 	sub.w	r8, r6, r7
 800b89c:	608b      	str	r3, [r1, #8]
 800b89e:	f1b8 0f00 	cmp.w	r8, #0
 800b8a2:	dd9c      	ble.n	800b7de <__sflush_r+0x1a>
 800b8a4:	6a21      	ldr	r1, [r4, #32]
 800b8a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b8a8:	4643      	mov	r3, r8
 800b8aa:	463a      	mov	r2, r7
 800b8ac:	4628      	mov	r0, r5
 800b8ae:	47b0      	blx	r6
 800b8b0:	2800      	cmp	r0, #0
 800b8b2:	dc06      	bgt.n	800b8c2 <__sflush_r+0xfe>
 800b8b4:	89a3      	ldrh	r3, [r4, #12]
 800b8b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b8ba:	81a3      	strh	r3, [r4, #12]
 800b8bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b8c0:	e78e      	b.n	800b7e0 <__sflush_r+0x1c>
 800b8c2:	4407      	add	r7, r0
 800b8c4:	eba8 0800 	sub.w	r8, r8, r0
 800b8c8:	e7e9      	b.n	800b89e <__sflush_r+0xda>
 800b8ca:	bf00      	nop
 800b8cc:	dfbffffe 	.word	0xdfbffffe

0800b8d0 <_fflush_r>:
 800b8d0:	b538      	push	{r3, r4, r5, lr}
 800b8d2:	690b      	ldr	r3, [r1, #16]
 800b8d4:	4605      	mov	r5, r0
 800b8d6:	460c      	mov	r4, r1
 800b8d8:	b913      	cbnz	r3, 800b8e0 <_fflush_r+0x10>
 800b8da:	2500      	movs	r5, #0
 800b8dc:	4628      	mov	r0, r5
 800b8de:	bd38      	pop	{r3, r4, r5, pc}
 800b8e0:	b118      	cbz	r0, 800b8ea <_fflush_r+0x1a>
 800b8e2:	6a03      	ldr	r3, [r0, #32]
 800b8e4:	b90b      	cbnz	r3, 800b8ea <_fflush_r+0x1a>
 800b8e6:	f7fe f9c3 	bl	8009c70 <__sinit>
 800b8ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d0f3      	beq.n	800b8da <_fflush_r+0xa>
 800b8f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b8f4:	07d0      	lsls	r0, r2, #31
 800b8f6:	d404      	bmi.n	800b902 <_fflush_r+0x32>
 800b8f8:	0599      	lsls	r1, r3, #22
 800b8fa:	d402      	bmi.n	800b902 <_fflush_r+0x32>
 800b8fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b8fe:	f7fe fb02 	bl	8009f06 <__retarget_lock_acquire_recursive>
 800b902:	4628      	mov	r0, r5
 800b904:	4621      	mov	r1, r4
 800b906:	f7ff ff5d 	bl	800b7c4 <__sflush_r>
 800b90a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b90c:	07da      	lsls	r2, r3, #31
 800b90e:	4605      	mov	r5, r0
 800b910:	d4e4      	bmi.n	800b8dc <_fflush_r+0xc>
 800b912:	89a3      	ldrh	r3, [r4, #12]
 800b914:	059b      	lsls	r3, r3, #22
 800b916:	d4e1      	bmi.n	800b8dc <_fflush_r+0xc>
 800b918:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b91a:	f7fe faf5 	bl	8009f08 <__retarget_lock_release_recursive>
 800b91e:	e7dd      	b.n	800b8dc <_fflush_r+0xc>

0800b920 <memmove>:
 800b920:	4288      	cmp	r0, r1
 800b922:	b510      	push	{r4, lr}
 800b924:	eb01 0402 	add.w	r4, r1, r2
 800b928:	d902      	bls.n	800b930 <memmove+0x10>
 800b92a:	4284      	cmp	r4, r0
 800b92c:	4623      	mov	r3, r4
 800b92e:	d807      	bhi.n	800b940 <memmove+0x20>
 800b930:	1e43      	subs	r3, r0, #1
 800b932:	42a1      	cmp	r1, r4
 800b934:	d008      	beq.n	800b948 <memmove+0x28>
 800b936:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b93a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b93e:	e7f8      	b.n	800b932 <memmove+0x12>
 800b940:	4402      	add	r2, r0
 800b942:	4601      	mov	r1, r0
 800b944:	428a      	cmp	r2, r1
 800b946:	d100      	bne.n	800b94a <memmove+0x2a>
 800b948:	bd10      	pop	{r4, pc}
 800b94a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b94e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b952:	e7f7      	b.n	800b944 <memmove+0x24>

0800b954 <_sbrk_r>:
 800b954:	b538      	push	{r3, r4, r5, lr}
 800b956:	4d06      	ldr	r5, [pc, #24]	; (800b970 <_sbrk_r+0x1c>)
 800b958:	2300      	movs	r3, #0
 800b95a:	4604      	mov	r4, r0
 800b95c:	4608      	mov	r0, r1
 800b95e:	602b      	str	r3, [r5, #0]
 800b960:	f7f6 f8fa 	bl	8001b58 <_sbrk>
 800b964:	1c43      	adds	r3, r0, #1
 800b966:	d102      	bne.n	800b96e <_sbrk_r+0x1a>
 800b968:	682b      	ldr	r3, [r5, #0]
 800b96a:	b103      	cbz	r3, 800b96e <_sbrk_r+0x1a>
 800b96c:	6023      	str	r3, [r4, #0]
 800b96e:	bd38      	pop	{r3, r4, r5, pc}
 800b970:	20002fac 	.word	0x20002fac

0800b974 <__assert_func>:
 800b974:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b976:	4614      	mov	r4, r2
 800b978:	461a      	mov	r2, r3
 800b97a:	4b09      	ldr	r3, [pc, #36]	; (800b9a0 <__assert_func+0x2c>)
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	4605      	mov	r5, r0
 800b980:	68d8      	ldr	r0, [r3, #12]
 800b982:	b14c      	cbz	r4, 800b998 <__assert_func+0x24>
 800b984:	4b07      	ldr	r3, [pc, #28]	; (800b9a4 <__assert_func+0x30>)
 800b986:	9100      	str	r1, [sp, #0]
 800b988:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b98c:	4906      	ldr	r1, [pc, #24]	; (800b9a8 <__assert_func+0x34>)
 800b98e:	462b      	mov	r3, r5
 800b990:	f000 f872 	bl	800ba78 <fiprintf>
 800b994:	f000 f882 	bl	800ba9c <abort>
 800b998:	4b04      	ldr	r3, [pc, #16]	; (800b9ac <__assert_func+0x38>)
 800b99a:	461c      	mov	r4, r3
 800b99c:	e7f3      	b.n	800b986 <__assert_func+0x12>
 800b99e:	bf00      	nop
 800b9a0:	20000068 	.word	0x20000068
 800b9a4:	0800c2ff 	.word	0x0800c2ff
 800b9a8:	0800c30c 	.word	0x0800c30c
 800b9ac:	0800c33a 	.word	0x0800c33a

0800b9b0 <_calloc_r>:
 800b9b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b9b2:	fba1 2402 	umull	r2, r4, r1, r2
 800b9b6:	b94c      	cbnz	r4, 800b9cc <_calloc_r+0x1c>
 800b9b8:	4611      	mov	r1, r2
 800b9ba:	9201      	str	r2, [sp, #4]
 800b9bc:	f7ff f9a2 	bl	800ad04 <_malloc_r>
 800b9c0:	9a01      	ldr	r2, [sp, #4]
 800b9c2:	4605      	mov	r5, r0
 800b9c4:	b930      	cbnz	r0, 800b9d4 <_calloc_r+0x24>
 800b9c6:	4628      	mov	r0, r5
 800b9c8:	b003      	add	sp, #12
 800b9ca:	bd30      	pop	{r4, r5, pc}
 800b9cc:	220c      	movs	r2, #12
 800b9ce:	6002      	str	r2, [r0, #0]
 800b9d0:	2500      	movs	r5, #0
 800b9d2:	e7f8      	b.n	800b9c6 <_calloc_r+0x16>
 800b9d4:	4621      	mov	r1, r4
 800b9d6:	f7fe fa18 	bl	8009e0a <memset>
 800b9da:	e7f4      	b.n	800b9c6 <_calloc_r+0x16>

0800b9dc <__ascii_mbtowc>:
 800b9dc:	b082      	sub	sp, #8
 800b9de:	b901      	cbnz	r1, 800b9e2 <__ascii_mbtowc+0x6>
 800b9e0:	a901      	add	r1, sp, #4
 800b9e2:	b142      	cbz	r2, 800b9f6 <__ascii_mbtowc+0x1a>
 800b9e4:	b14b      	cbz	r3, 800b9fa <__ascii_mbtowc+0x1e>
 800b9e6:	7813      	ldrb	r3, [r2, #0]
 800b9e8:	600b      	str	r3, [r1, #0]
 800b9ea:	7812      	ldrb	r2, [r2, #0]
 800b9ec:	1e10      	subs	r0, r2, #0
 800b9ee:	bf18      	it	ne
 800b9f0:	2001      	movne	r0, #1
 800b9f2:	b002      	add	sp, #8
 800b9f4:	4770      	bx	lr
 800b9f6:	4610      	mov	r0, r2
 800b9f8:	e7fb      	b.n	800b9f2 <__ascii_mbtowc+0x16>
 800b9fa:	f06f 0001 	mvn.w	r0, #1
 800b9fe:	e7f8      	b.n	800b9f2 <__ascii_mbtowc+0x16>

0800ba00 <_realloc_r>:
 800ba00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba04:	4680      	mov	r8, r0
 800ba06:	4614      	mov	r4, r2
 800ba08:	460e      	mov	r6, r1
 800ba0a:	b921      	cbnz	r1, 800ba16 <_realloc_r+0x16>
 800ba0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba10:	4611      	mov	r1, r2
 800ba12:	f7ff b977 	b.w	800ad04 <_malloc_r>
 800ba16:	b92a      	cbnz	r2, 800ba24 <_realloc_r+0x24>
 800ba18:	f7ff f900 	bl	800ac1c <_free_r>
 800ba1c:	4625      	mov	r5, r4
 800ba1e:	4628      	mov	r0, r5
 800ba20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba24:	f000 f841 	bl	800baaa <_malloc_usable_size_r>
 800ba28:	4284      	cmp	r4, r0
 800ba2a:	4607      	mov	r7, r0
 800ba2c:	d802      	bhi.n	800ba34 <_realloc_r+0x34>
 800ba2e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ba32:	d812      	bhi.n	800ba5a <_realloc_r+0x5a>
 800ba34:	4621      	mov	r1, r4
 800ba36:	4640      	mov	r0, r8
 800ba38:	f7ff f964 	bl	800ad04 <_malloc_r>
 800ba3c:	4605      	mov	r5, r0
 800ba3e:	2800      	cmp	r0, #0
 800ba40:	d0ed      	beq.n	800ba1e <_realloc_r+0x1e>
 800ba42:	42bc      	cmp	r4, r7
 800ba44:	4622      	mov	r2, r4
 800ba46:	4631      	mov	r1, r6
 800ba48:	bf28      	it	cs
 800ba4a:	463a      	movcs	r2, r7
 800ba4c:	f7fe fa5d 	bl	8009f0a <memcpy>
 800ba50:	4631      	mov	r1, r6
 800ba52:	4640      	mov	r0, r8
 800ba54:	f7ff f8e2 	bl	800ac1c <_free_r>
 800ba58:	e7e1      	b.n	800ba1e <_realloc_r+0x1e>
 800ba5a:	4635      	mov	r5, r6
 800ba5c:	e7df      	b.n	800ba1e <_realloc_r+0x1e>

0800ba5e <__ascii_wctomb>:
 800ba5e:	b149      	cbz	r1, 800ba74 <__ascii_wctomb+0x16>
 800ba60:	2aff      	cmp	r2, #255	; 0xff
 800ba62:	bf85      	ittet	hi
 800ba64:	238a      	movhi	r3, #138	; 0x8a
 800ba66:	6003      	strhi	r3, [r0, #0]
 800ba68:	700a      	strbls	r2, [r1, #0]
 800ba6a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800ba6e:	bf98      	it	ls
 800ba70:	2001      	movls	r0, #1
 800ba72:	4770      	bx	lr
 800ba74:	4608      	mov	r0, r1
 800ba76:	4770      	bx	lr

0800ba78 <fiprintf>:
 800ba78:	b40e      	push	{r1, r2, r3}
 800ba7a:	b503      	push	{r0, r1, lr}
 800ba7c:	4601      	mov	r1, r0
 800ba7e:	ab03      	add	r3, sp, #12
 800ba80:	4805      	ldr	r0, [pc, #20]	; (800ba98 <fiprintf+0x20>)
 800ba82:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba86:	6800      	ldr	r0, [r0, #0]
 800ba88:	9301      	str	r3, [sp, #4]
 800ba8a:	f000 f83f 	bl	800bb0c <_vfiprintf_r>
 800ba8e:	b002      	add	sp, #8
 800ba90:	f85d eb04 	ldr.w	lr, [sp], #4
 800ba94:	b003      	add	sp, #12
 800ba96:	4770      	bx	lr
 800ba98:	20000068 	.word	0x20000068

0800ba9c <abort>:
 800ba9c:	b508      	push	{r3, lr}
 800ba9e:	2006      	movs	r0, #6
 800baa0:	f000 fa0c 	bl	800bebc <raise>
 800baa4:	2001      	movs	r0, #1
 800baa6:	f7f5 ffdf 	bl	8001a68 <_exit>

0800baaa <_malloc_usable_size_r>:
 800baaa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800baae:	1f18      	subs	r0, r3, #4
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	bfbc      	itt	lt
 800bab4:	580b      	ldrlt	r3, [r1, r0]
 800bab6:	18c0      	addlt	r0, r0, r3
 800bab8:	4770      	bx	lr

0800baba <__sfputc_r>:
 800baba:	6893      	ldr	r3, [r2, #8]
 800babc:	3b01      	subs	r3, #1
 800babe:	2b00      	cmp	r3, #0
 800bac0:	b410      	push	{r4}
 800bac2:	6093      	str	r3, [r2, #8]
 800bac4:	da08      	bge.n	800bad8 <__sfputc_r+0x1e>
 800bac6:	6994      	ldr	r4, [r2, #24]
 800bac8:	42a3      	cmp	r3, r4
 800baca:	db01      	blt.n	800bad0 <__sfputc_r+0x16>
 800bacc:	290a      	cmp	r1, #10
 800bace:	d103      	bne.n	800bad8 <__sfputc_r+0x1e>
 800bad0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bad4:	f000 b934 	b.w	800bd40 <__swbuf_r>
 800bad8:	6813      	ldr	r3, [r2, #0]
 800bada:	1c58      	adds	r0, r3, #1
 800badc:	6010      	str	r0, [r2, #0]
 800bade:	7019      	strb	r1, [r3, #0]
 800bae0:	4608      	mov	r0, r1
 800bae2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bae6:	4770      	bx	lr

0800bae8 <__sfputs_r>:
 800bae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baea:	4606      	mov	r6, r0
 800baec:	460f      	mov	r7, r1
 800baee:	4614      	mov	r4, r2
 800baf0:	18d5      	adds	r5, r2, r3
 800baf2:	42ac      	cmp	r4, r5
 800baf4:	d101      	bne.n	800bafa <__sfputs_r+0x12>
 800baf6:	2000      	movs	r0, #0
 800baf8:	e007      	b.n	800bb0a <__sfputs_r+0x22>
 800bafa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bafe:	463a      	mov	r2, r7
 800bb00:	4630      	mov	r0, r6
 800bb02:	f7ff ffda 	bl	800baba <__sfputc_r>
 800bb06:	1c43      	adds	r3, r0, #1
 800bb08:	d1f3      	bne.n	800baf2 <__sfputs_r+0xa>
 800bb0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bb0c <_vfiprintf_r>:
 800bb0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb10:	460d      	mov	r5, r1
 800bb12:	b09d      	sub	sp, #116	; 0x74
 800bb14:	4614      	mov	r4, r2
 800bb16:	4698      	mov	r8, r3
 800bb18:	4606      	mov	r6, r0
 800bb1a:	b118      	cbz	r0, 800bb24 <_vfiprintf_r+0x18>
 800bb1c:	6a03      	ldr	r3, [r0, #32]
 800bb1e:	b90b      	cbnz	r3, 800bb24 <_vfiprintf_r+0x18>
 800bb20:	f7fe f8a6 	bl	8009c70 <__sinit>
 800bb24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb26:	07d9      	lsls	r1, r3, #31
 800bb28:	d405      	bmi.n	800bb36 <_vfiprintf_r+0x2a>
 800bb2a:	89ab      	ldrh	r3, [r5, #12]
 800bb2c:	059a      	lsls	r2, r3, #22
 800bb2e:	d402      	bmi.n	800bb36 <_vfiprintf_r+0x2a>
 800bb30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bb32:	f7fe f9e8 	bl	8009f06 <__retarget_lock_acquire_recursive>
 800bb36:	89ab      	ldrh	r3, [r5, #12]
 800bb38:	071b      	lsls	r3, r3, #28
 800bb3a:	d501      	bpl.n	800bb40 <_vfiprintf_r+0x34>
 800bb3c:	692b      	ldr	r3, [r5, #16]
 800bb3e:	b99b      	cbnz	r3, 800bb68 <_vfiprintf_r+0x5c>
 800bb40:	4629      	mov	r1, r5
 800bb42:	4630      	mov	r0, r6
 800bb44:	f000 f93a 	bl	800bdbc <__swsetup_r>
 800bb48:	b170      	cbz	r0, 800bb68 <_vfiprintf_r+0x5c>
 800bb4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb4c:	07dc      	lsls	r4, r3, #31
 800bb4e:	d504      	bpl.n	800bb5a <_vfiprintf_r+0x4e>
 800bb50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bb54:	b01d      	add	sp, #116	; 0x74
 800bb56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb5a:	89ab      	ldrh	r3, [r5, #12]
 800bb5c:	0598      	lsls	r0, r3, #22
 800bb5e:	d4f7      	bmi.n	800bb50 <_vfiprintf_r+0x44>
 800bb60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bb62:	f7fe f9d1 	bl	8009f08 <__retarget_lock_release_recursive>
 800bb66:	e7f3      	b.n	800bb50 <_vfiprintf_r+0x44>
 800bb68:	2300      	movs	r3, #0
 800bb6a:	9309      	str	r3, [sp, #36]	; 0x24
 800bb6c:	2320      	movs	r3, #32
 800bb6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bb72:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb76:	2330      	movs	r3, #48	; 0x30
 800bb78:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800bd2c <_vfiprintf_r+0x220>
 800bb7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bb80:	f04f 0901 	mov.w	r9, #1
 800bb84:	4623      	mov	r3, r4
 800bb86:	469a      	mov	sl, r3
 800bb88:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb8c:	b10a      	cbz	r2, 800bb92 <_vfiprintf_r+0x86>
 800bb8e:	2a25      	cmp	r2, #37	; 0x25
 800bb90:	d1f9      	bne.n	800bb86 <_vfiprintf_r+0x7a>
 800bb92:	ebba 0b04 	subs.w	fp, sl, r4
 800bb96:	d00b      	beq.n	800bbb0 <_vfiprintf_r+0xa4>
 800bb98:	465b      	mov	r3, fp
 800bb9a:	4622      	mov	r2, r4
 800bb9c:	4629      	mov	r1, r5
 800bb9e:	4630      	mov	r0, r6
 800bba0:	f7ff ffa2 	bl	800bae8 <__sfputs_r>
 800bba4:	3001      	adds	r0, #1
 800bba6:	f000 80a9 	beq.w	800bcfc <_vfiprintf_r+0x1f0>
 800bbaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bbac:	445a      	add	r2, fp
 800bbae:	9209      	str	r2, [sp, #36]	; 0x24
 800bbb0:	f89a 3000 	ldrb.w	r3, [sl]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	f000 80a1 	beq.w	800bcfc <_vfiprintf_r+0x1f0>
 800bbba:	2300      	movs	r3, #0
 800bbbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bbc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bbc4:	f10a 0a01 	add.w	sl, sl, #1
 800bbc8:	9304      	str	r3, [sp, #16]
 800bbca:	9307      	str	r3, [sp, #28]
 800bbcc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bbd0:	931a      	str	r3, [sp, #104]	; 0x68
 800bbd2:	4654      	mov	r4, sl
 800bbd4:	2205      	movs	r2, #5
 800bbd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbda:	4854      	ldr	r0, [pc, #336]	; (800bd2c <_vfiprintf_r+0x220>)
 800bbdc:	f7f4 faf8 	bl	80001d0 <memchr>
 800bbe0:	9a04      	ldr	r2, [sp, #16]
 800bbe2:	b9d8      	cbnz	r0, 800bc1c <_vfiprintf_r+0x110>
 800bbe4:	06d1      	lsls	r1, r2, #27
 800bbe6:	bf44      	itt	mi
 800bbe8:	2320      	movmi	r3, #32
 800bbea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bbee:	0713      	lsls	r3, r2, #28
 800bbf0:	bf44      	itt	mi
 800bbf2:	232b      	movmi	r3, #43	; 0x2b
 800bbf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bbf8:	f89a 3000 	ldrb.w	r3, [sl]
 800bbfc:	2b2a      	cmp	r3, #42	; 0x2a
 800bbfe:	d015      	beq.n	800bc2c <_vfiprintf_r+0x120>
 800bc00:	9a07      	ldr	r2, [sp, #28]
 800bc02:	4654      	mov	r4, sl
 800bc04:	2000      	movs	r0, #0
 800bc06:	f04f 0c0a 	mov.w	ip, #10
 800bc0a:	4621      	mov	r1, r4
 800bc0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc10:	3b30      	subs	r3, #48	; 0x30
 800bc12:	2b09      	cmp	r3, #9
 800bc14:	d94d      	bls.n	800bcb2 <_vfiprintf_r+0x1a6>
 800bc16:	b1b0      	cbz	r0, 800bc46 <_vfiprintf_r+0x13a>
 800bc18:	9207      	str	r2, [sp, #28]
 800bc1a:	e014      	b.n	800bc46 <_vfiprintf_r+0x13a>
 800bc1c:	eba0 0308 	sub.w	r3, r0, r8
 800bc20:	fa09 f303 	lsl.w	r3, r9, r3
 800bc24:	4313      	orrs	r3, r2
 800bc26:	9304      	str	r3, [sp, #16]
 800bc28:	46a2      	mov	sl, r4
 800bc2a:	e7d2      	b.n	800bbd2 <_vfiprintf_r+0xc6>
 800bc2c:	9b03      	ldr	r3, [sp, #12]
 800bc2e:	1d19      	adds	r1, r3, #4
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	9103      	str	r1, [sp, #12]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	bfbb      	ittet	lt
 800bc38:	425b      	neglt	r3, r3
 800bc3a:	f042 0202 	orrlt.w	r2, r2, #2
 800bc3e:	9307      	strge	r3, [sp, #28]
 800bc40:	9307      	strlt	r3, [sp, #28]
 800bc42:	bfb8      	it	lt
 800bc44:	9204      	strlt	r2, [sp, #16]
 800bc46:	7823      	ldrb	r3, [r4, #0]
 800bc48:	2b2e      	cmp	r3, #46	; 0x2e
 800bc4a:	d10c      	bne.n	800bc66 <_vfiprintf_r+0x15a>
 800bc4c:	7863      	ldrb	r3, [r4, #1]
 800bc4e:	2b2a      	cmp	r3, #42	; 0x2a
 800bc50:	d134      	bne.n	800bcbc <_vfiprintf_r+0x1b0>
 800bc52:	9b03      	ldr	r3, [sp, #12]
 800bc54:	1d1a      	adds	r2, r3, #4
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	9203      	str	r2, [sp, #12]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	bfb8      	it	lt
 800bc5e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800bc62:	3402      	adds	r4, #2
 800bc64:	9305      	str	r3, [sp, #20]
 800bc66:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800bd3c <_vfiprintf_r+0x230>
 800bc6a:	7821      	ldrb	r1, [r4, #0]
 800bc6c:	2203      	movs	r2, #3
 800bc6e:	4650      	mov	r0, sl
 800bc70:	f7f4 faae 	bl	80001d0 <memchr>
 800bc74:	b138      	cbz	r0, 800bc86 <_vfiprintf_r+0x17a>
 800bc76:	9b04      	ldr	r3, [sp, #16]
 800bc78:	eba0 000a 	sub.w	r0, r0, sl
 800bc7c:	2240      	movs	r2, #64	; 0x40
 800bc7e:	4082      	lsls	r2, r0
 800bc80:	4313      	orrs	r3, r2
 800bc82:	3401      	adds	r4, #1
 800bc84:	9304      	str	r3, [sp, #16]
 800bc86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc8a:	4829      	ldr	r0, [pc, #164]	; (800bd30 <_vfiprintf_r+0x224>)
 800bc8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bc90:	2206      	movs	r2, #6
 800bc92:	f7f4 fa9d 	bl	80001d0 <memchr>
 800bc96:	2800      	cmp	r0, #0
 800bc98:	d03f      	beq.n	800bd1a <_vfiprintf_r+0x20e>
 800bc9a:	4b26      	ldr	r3, [pc, #152]	; (800bd34 <_vfiprintf_r+0x228>)
 800bc9c:	bb1b      	cbnz	r3, 800bce6 <_vfiprintf_r+0x1da>
 800bc9e:	9b03      	ldr	r3, [sp, #12]
 800bca0:	3307      	adds	r3, #7
 800bca2:	f023 0307 	bic.w	r3, r3, #7
 800bca6:	3308      	adds	r3, #8
 800bca8:	9303      	str	r3, [sp, #12]
 800bcaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcac:	443b      	add	r3, r7
 800bcae:	9309      	str	r3, [sp, #36]	; 0x24
 800bcb0:	e768      	b.n	800bb84 <_vfiprintf_r+0x78>
 800bcb2:	fb0c 3202 	mla	r2, ip, r2, r3
 800bcb6:	460c      	mov	r4, r1
 800bcb8:	2001      	movs	r0, #1
 800bcba:	e7a6      	b.n	800bc0a <_vfiprintf_r+0xfe>
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	3401      	adds	r4, #1
 800bcc0:	9305      	str	r3, [sp, #20]
 800bcc2:	4619      	mov	r1, r3
 800bcc4:	f04f 0c0a 	mov.w	ip, #10
 800bcc8:	4620      	mov	r0, r4
 800bcca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bcce:	3a30      	subs	r2, #48	; 0x30
 800bcd0:	2a09      	cmp	r2, #9
 800bcd2:	d903      	bls.n	800bcdc <_vfiprintf_r+0x1d0>
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d0c6      	beq.n	800bc66 <_vfiprintf_r+0x15a>
 800bcd8:	9105      	str	r1, [sp, #20]
 800bcda:	e7c4      	b.n	800bc66 <_vfiprintf_r+0x15a>
 800bcdc:	fb0c 2101 	mla	r1, ip, r1, r2
 800bce0:	4604      	mov	r4, r0
 800bce2:	2301      	movs	r3, #1
 800bce4:	e7f0      	b.n	800bcc8 <_vfiprintf_r+0x1bc>
 800bce6:	ab03      	add	r3, sp, #12
 800bce8:	9300      	str	r3, [sp, #0]
 800bcea:	462a      	mov	r2, r5
 800bcec:	4b12      	ldr	r3, [pc, #72]	; (800bd38 <_vfiprintf_r+0x22c>)
 800bcee:	a904      	add	r1, sp, #16
 800bcf0:	4630      	mov	r0, r6
 800bcf2:	f7fd fb6b 	bl	80093cc <_printf_float>
 800bcf6:	4607      	mov	r7, r0
 800bcf8:	1c78      	adds	r0, r7, #1
 800bcfa:	d1d6      	bne.n	800bcaa <_vfiprintf_r+0x19e>
 800bcfc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bcfe:	07d9      	lsls	r1, r3, #31
 800bd00:	d405      	bmi.n	800bd0e <_vfiprintf_r+0x202>
 800bd02:	89ab      	ldrh	r3, [r5, #12]
 800bd04:	059a      	lsls	r2, r3, #22
 800bd06:	d402      	bmi.n	800bd0e <_vfiprintf_r+0x202>
 800bd08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bd0a:	f7fe f8fd 	bl	8009f08 <__retarget_lock_release_recursive>
 800bd0e:	89ab      	ldrh	r3, [r5, #12]
 800bd10:	065b      	lsls	r3, r3, #25
 800bd12:	f53f af1d 	bmi.w	800bb50 <_vfiprintf_r+0x44>
 800bd16:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd18:	e71c      	b.n	800bb54 <_vfiprintf_r+0x48>
 800bd1a:	ab03      	add	r3, sp, #12
 800bd1c:	9300      	str	r3, [sp, #0]
 800bd1e:	462a      	mov	r2, r5
 800bd20:	4b05      	ldr	r3, [pc, #20]	; (800bd38 <_vfiprintf_r+0x22c>)
 800bd22:	a904      	add	r1, sp, #16
 800bd24:	4630      	mov	r0, r6
 800bd26:	f7fd fdf5 	bl	8009914 <_printf_i>
 800bd2a:	e7e4      	b.n	800bcf6 <_vfiprintf_r+0x1ea>
 800bd2c:	0800c2e4 	.word	0x0800c2e4
 800bd30:	0800c2ee 	.word	0x0800c2ee
 800bd34:	080093cd 	.word	0x080093cd
 800bd38:	0800bae9 	.word	0x0800bae9
 800bd3c:	0800c2ea 	.word	0x0800c2ea

0800bd40 <__swbuf_r>:
 800bd40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd42:	460e      	mov	r6, r1
 800bd44:	4614      	mov	r4, r2
 800bd46:	4605      	mov	r5, r0
 800bd48:	b118      	cbz	r0, 800bd52 <__swbuf_r+0x12>
 800bd4a:	6a03      	ldr	r3, [r0, #32]
 800bd4c:	b90b      	cbnz	r3, 800bd52 <__swbuf_r+0x12>
 800bd4e:	f7fd ff8f 	bl	8009c70 <__sinit>
 800bd52:	69a3      	ldr	r3, [r4, #24]
 800bd54:	60a3      	str	r3, [r4, #8]
 800bd56:	89a3      	ldrh	r3, [r4, #12]
 800bd58:	071a      	lsls	r2, r3, #28
 800bd5a:	d525      	bpl.n	800bda8 <__swbuf_r+0x68>
 800bd5c:	6923      	ldr	r3, [r4, #16]
 800bd5e:	b31b      	cbz	r3, 800bda8 <__swbuf_r+0x68>
 800bd60:	6823      	ldr	r3, [r4, #0]
 800bd62:	6922      	ldr	r2, [r4, #16]
 800bd64:	1a98      	subs	r0, r3, r2
 800bd66:	6963      	ldr	r3, [r4, #20]
 800bd68:	b2f6      	uxtb	r6, r6
 800bd6a:	4283      	cmp	r3, r0
 800bd6c:	4637      	mov	r7, r6
 800bd6e:	dc04      	bgt.n	800bd7a <__swbuf_r+0x3a>
 800bd70:	4621      	mov	r1, r4
 800bd72:	4628      	mov	r0, r5
 800bd74:	f7ff fdac 	bl	800b8d0 <_fflush_r>
 800bd78:	b9e0      	cbnz	r0, 800bdb4 <__swbuf_r+0x74>
 800bd7a:	68a3      	ldr	r3, [r4, #8]
 800bd7c:	3b01      	subs	r3, #1
 800bd7e:	60a3      	str	r3, [r4, #8]
 800bd80:	6823      	ldr	r3, [r4, #0]
 800bd82:	1c5a      	adds	r2, r3, #1
 800bd84:	6022      	str	r2, [r4, #0]
 800bd86:	701e      	strb	r6, [r3, #0]
 800bd88:	6962      	ldr	r2, [r4, #20]
 800bd8a:	1c43      	adds	r3, r0, #1
 800bd8c:	429a      	cmp	r2, r3
 800bd8e:	d004      	beq.n	800bd9a <__swbuf_r+0x5a>
 800bd90:	89a3      	ldrh	r3, [r4, #12]
 800bd92:	07db      	lsls	r3, r3, #31
 800bd94:	d506      	bpl.n	800bda4 <__swbuf_r+0x64>
 800bd96:	2e0a      	cmp	r6, #10
 800bd98:	d104      	bne.n	800bda4 <__swbuf_r+0x64>
 800bd9a:	4621      	mov	r1, r4
 800bd9c:	4628      	mov	r0, r5
 800bd9e:	f7ff fd97 	bl	800b8d0 <_fflush_r>
 800bda2:	b938      	cbnz	r0, 800bdb4 <__swbuf_r+0x74>
 800bda4:	4638      	mov	r0, r7
 800bda6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bda8:	4621      	mov	r1, r4
 800bdaa:	4628      	mov	r0, r5
 800bdac:	f000 f806 	bl	800bdbc <__swsetup_r>
 800bdb0:	2800      	cmp	r0, #0
 800bdb2:	d0d5      	beq.n	800bd60 <__swbuf_r+0x20>
 800bdb4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800bdb8:	e7f4      	b.n	800bda4 <__swbuf_r+0x64>
	...

0800bdbc <__swsetup_r>:
 800bdbc:	b538      	push	{r3, r4, r5, lr}
 800bdbe:	4b2a      	ldr	r3, [pc, #168]	; (800be68 <__swsetup_r+0xac>)
 800bdc0:	4605      	mov	r5, r0
 800bdc2:	6818      	ldr	r0, [r3, #0]
 800bdc4:	460c      	mov	r4, r1
 800bdc6:	b118      	cbz	r0, 800bdd0 <__swsetup_r+0x14>
 800bdc8:	6a03      	ldr	r3, [r0, #32]
 800bdca:	b90b      	cbnz	r3, 800bdd0 <__swsetup_r+0x14>
 800bdcc:	f7fd ff50 	bl	8009c70 <__sinit>
 800bdd0:	89a3      	ldrh	r3, [r4, #12]
 800bdd2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bdd6:	0718      	lsls	r0, r3, #28
 800bdd8:	d422      	bmi.n	800be20 <__swsetup_r+0x64>
 800bdda:	06d9      	lsls	r1, r3, #27
 800bddc:	d407      	bmi.n	800bdee <__swsetup_r+0x32>
 800bdde:	2309      	movs	r3, #9
 800bde0:	602b      	str	r3, [r5, #0]
 800bde2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bde6:	81a3      	strh	r3, [r4, #12]
 800bde8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bdec:	e034      	b.n	800be58 <__swsetup_r+0x9c>
 800bdee:	0758      	lsls	r0, r3, #29
 800bdf0:	d512      	bpl.n	800be18 <__swsetup_r+0x5c>
 800bdf2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bdf4:	b141      	cbz	r1, 800be08 <__swsetup_r+0x4c>
 800bdf6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bdfa:	4299      	cmp	r1, r3
 800bdfc:	d002      	beq.n	800be04 <__swsetup_r+0x48>
 800bdfe:	4628      	mov	r0, r5
 800be00:	f7fe ff0c 	bl	800ac1c <_free_r>
 800be04:	2300      	movs	r3, #0
 800be06:	6363      	str	r3, [r4, #52]	; 0x34
 800be08:	89a3      	ldrh	r3, [r4, #12]
 800be0a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800be0e:	81a3      	strh	r3, [r4, #12]
 800be10:	2300      	movs	r3, #0
 800be12:	6063      	str	r3, [r4, #4]
 800be14:	6923      	ldr	r3, [r4, #16]
 800be16:	6023      	str	r3, [r4, #0]
 800be18:	89a3      	ldrh	r3, [r4, #12]
 800be1a:	f043 0308 	orr.w	r3, r3, #8
 800be1e:	81a3      	strh	r3, [r4, #12]
 800be20:	6923      	ldr	r3, [r4, #16]
 800be22:	b94b      	cbnz	r3, 800be38 <__swsetup_r+0x7c>
 800be24:	89a3      	ldrh	r3, [r4, #12]
 800be26:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800be2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be2e:	d003      	beq.n	800be38 <__swsetup_r+0x7c>
 800be30:	4621      	mov	r1, r4
 800be32:	4628      	mov	r0, r5
 800be34:	f000 f884 	bl	800bf40 <__smakebuf_r>
 800be38:	89a0      	ldrh	r0, [r4, #12]
 800be3a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800be3e:	f010 0301 	ands.w	r3, r0, #1
 800be42:	d00a      	beq.n	800be5a <__swsetup_r+0x9e>
 800be44:	2300      	movs	r3, #0
 800be46:	60a3      	str	r3, [r4, #8]
 800be48:	6963      	ldr	r3, [r4, #20]
 800be4a:	425b      	negs	r3, r3
 800be4c:	61a3      	str	r3, [r4, #24]
 800be4e:	6923      	ldr	r3, [r4, #16]
 800be50:	b943      	cbnz	r3, 800be64 <__swsetup_r+0xa8>
 800be52:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800be56:	d1c4      	bne.n	800bde2 <__swsetup_r+0x26>
 800be58:	bd38      	pop	{r3, r4, r5, pc}
 800be5a:	0781      	lsls	r1, r0, #30
 800be5c:	bf58      	it	pl
 800be5e:	6963      	ldrpl	r3, [r4, #20]
 800be60:	60a3      	str	r3, [r4, #8]
 800be62:	e7f4      	b.n	800be4e <__swsetup_r+0x92>
 800be64:	2000      	movs	r0, #0
 800be66:	e7f7      	b.n	800be58 <__swsetup_r+0x9c>
 800be68:	20000068 	.word	0x20000068

0800be6c <_raise_r>:
 800be6c:	291f      	cmp	r1, #31
 800be6e:	b538      	push	{r3, r4, r5, lr}
 800be70:	4604      	mov	r4, r0
 800be72:	460d      	mov	r5, r1
 800be74:	d904      	bls.n	800be80 <_raise_r+0x14>
 800be76:	2316      	movs	r3, #22
 800be78:	6003      	str	r3, [r0, #0]
 800be7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800be7e:	bd38      	pop	{r3, r4, r5, pc}
 800be80:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800be82:	b112      	cbz	r2, 800be8a <_raise_r+0x1e>
 800be84:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800be88:	b94b      	cbnz	r3, 800be9e <_raise_r+0x32>
 800be8a:	4620      	mov	r0, r4
 800be8c:	f000 f830 	bl	800bef0 <_getpid_r>
 800be90:	462a      	mov	r2, r5
 800be92:	4601      	mov	r1, r0
 800be94:	4620      	mov	r0, r4
 800be96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be9a:	f000 b817 	b.w	800becc <_kill_r>
 800be9e:	2b01      	cmp	r3, #1
 800bea0:	d00a      	beq.n	800beb8 <_raise_r+0x4c>
 800bea2:	1c59      	adds	r1, r3, #1
 800bea4:	d103      	bne.n	800beae <_raise_r+0x42>
 800bea6:	2316      	movs	r3, #22
 800bea8:	6003      	str	r3, [r0, #0]
 800beaa:	2001      	movs	r0, #1
 800beac:	e7e7      	b.n	800be7e <_raise_r+0x12>
 800beae:	2400      	movs	r4, #0
 800beb0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800beb4:	4628      	mov	r0, r5
 800beb6:	4798      	blx	r3
 800beb8:	2000      	movs	r0, #0
 800beba:	e7e0      	b.n	800be7e <_raise_r+0x12>

0800bebc <raise>:
 800bebc:	4b02      	ldr	r3, [pc, #8]	; (800bec8 <raise+0xc>)
 800bebe:	4601      	mov	r1, r0
 800bec0:	6818      	ldr	r0, [r3, #0]
 800bec2:	f7ff bfd3 	b.w	800be6c <_raise_r>
 800bec6:	bf00      	nop
 800bec8:	20000068 	.word	0x20000068

0800becc <_kill_r>:
 800becc:	b538      	push	{r3, r4, r5, lr}
 800bece:	4d07      	ldr	r5, [pc, #28]	; (800beec <_kill_r+0x20>)
 800bed0:	2300      	movs	r3, #0
 800bed2:	4604      	mov	r4, r0
 800bed4:	4608      	mov	r0, r1
 800bed6:	4611      	mov	r1, r2
 800bed8:	602b      	str	r3, [r5, #0]
 800beda:	f7f5 fdb5 	bl	8001a48 <_kill>
 800bede:	1c43      	adds	r3, r0, #1
 800bee0:	d102      	bne.n	800bee8 <_kill_r+0x1c>
 800bee2:	682b      	ldr	r3, [r5, #0]
 800bee4:	b103      	cbz	r3, 800bee8 <_kill_r+0x1c>
 800bee6:	6023      	str	r3, [r4, #0]
 800bee8:	bd38      	pop	{r3, r4, r5, pc}
 800beea:	bf00      	nop
 800beec:	20002fac 	.word	0x20002fac

0800bef0 <_getpid_r>:
 800bef0:	f7f5 bda2 	b.w	8001a38 <_getpid>

0800bef4 <__swhatbuf_r>:
 800bef4:	b570      	push	{r4, r5, r6, lr}
 800bef6:	460c      	mov	r4, r1
 800bef8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800befc:	2900      	cmp	r1, #0
 800befe:	b096      	sub	sp, #88	; 0x58
 800bf00:	4615      	mov	r5, r2
 800bf02:	461e      	mov	r6, r3
 800bf04:	da0d      	bge.n	800bf22 <__swhatbuf_r+0x2e>
 800bf06:	89a3      	ldrh	r3, [r4, #12]
 800bf08:	f013 0f80 	tst.w	r3, #128	; 0x80
 800bf0c:	f04f 0100 	mov.w	r1, #0
 800bf10:	bf0c      	ite	eq
 800bf12:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800bf16:	2340      	movne	r3, #64	; 0x40
 800bf18:	2000      	movs	r0, #0
 800bf1a:	6031      	str	r1, [r6, #0]
 800bf1c:	602b      	str	r3, [r5, #0]
 800bf1e:	b016      	add	sp, #88	; 0x58
 800bf20:	bd70      	pop	{r4, r5, r6, pc}
 800bf22:	466a      	mov	r2, sp
 800bf24:	f000 f848 	bl	800bfb8 <_fstat_r>
 800bf28:	2800      	cmp	r0, #0
 800bf2a:	dbec      	blt.n	800bf06 <__swhatbuf_r+0x12>
 800bf2c:	9901      	ldr	r1, [sp, #4]
 800bf2e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800bf32:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800bf36:	4259      	negs	r1, r3
 800bf38:	4159      	adcs	r1, r3
 800bf3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf3e:	e7eb      	b.n	800bf18 <__swhatbuf_r+0x24>

0800bf40 <__smakebuf_r>:
 800bf40:	898b      	ldrh	r3, [r1, #12]
 800bf42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bf44:	079d      	lsls	r5, r3, #30
 800bf46:	4606      	mov	r6, r0
 800bf48:	460c      	mov	r4, r1
 800bf4a:	d507      	bpl.n	800bf5c <__smakebuf_r+0x1c>
 800bf4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bf50:	6023      	str	r3, [r4, #0]
 800bf52:	6123      	str	r3, [r4, #16]
 800bf54:	2301      	movs	r3, #1
 800bf56:	6163      	str	r3, [r4, #20]
 800bf58:	b002      	add	sp, #8
 800bf5a:	bd70      	pop	{r4, r5, r6, pc}
 800bf5c:	ab01      	add	r3, sp, #4
 800bf5e:	466a      	mov	r2, sp
 800bf60:	f7ff ffc8 	bl	800bef4 <__swhatbuf_r>
 800bf64:	9900      	ldr	r1, [sp, #0]
 800bf66:	4605      	mov	r5, r0
 800bf68:	4630      	mov	r0, r6
 800bf6a:	f7fe fecb 	bl	800ad04 <_malloc_r>
 800bf6e:	b948      	cbnz	r0, 800bf84 <__smakebuf_r+0x44>
 800bf70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf74:	059a      	lsls	r2, r3, #22
 800bf76:	d4ef      	bmi.n	800bf58 <__smakebuf_r+0x18>
 800bf78:	f023 0303 	bic.w	r3, r3, #3
 800bf7c:	f043 0302 	orr.w	r3, r3, #2
 800bf80:	81a3      	strh	r3, [r4, #12]
 800bf82:	e7e3      	b.n	800bf4c <__smakebuf_r+0xc>
 800bf84:	89a3      	ldrh	r3, [r4, #12]
 800bf86:	6020      	str	r0, [r4, #0]
 800bf88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf8c:	81a3      	strh	r3, [r4, #12]
 800bf8e:	9b00      	ldr	r3, [sp, #0]
 800bf90:	6163      	str	r3, [r4, #20]
 800bf92:	9b01      	ldr	r3, [sp, #4]
 800bf94:	6120      	str	r0, [r4, #16]
 800bf96:	b15b      	cbz	r3, 800bfb0 <__smakebuf_r+0x70>
 800bf98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf9c:	4630      	mov	r0, r6
 800bf9e:	f000 f81d 	bl	800bfdc <_isatty_r>
 800bfa2:	b128      	cbz	r0, 800bfb0 <__smakebuf_r+0x70>
 800bfa4:	89a3      	ldrh	r3, [r4, #12]
 800bfa6:	f023 0303 	bic.w	r3, r3, #3
 800bfaa:	f043 0301 	orr.w	r3, r3, #1
 800bfae:	81a3      	strh	r3, [r4, #12]
 800bfb0:	89a3      	ldrh	r3, [r4, #12]
 800bfb2:	431d      	orrs	r5, r3
 800bfb4:	81a5      	strh	r5, [r4, #12]
 800bfb6:	e7cf      	b.n	800bf58 <__smakebuf_r+0x18>

0800bfb8 <_fstat_r>:
 800bfb8:	b538      	push	{r3, r4, r5, lr}
 800bfba:	4d07      	ldr	r5, [pc, #28]	; (800bfd8 <_fstat_r+0x20>)
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	4604      	mov	r4, r0
 800bfc0:	4608      	mov	r0, r1
 800bfc2:	4611      	mov	r1, r2
 800bfc4:	602b      	str	r3, [r5, #0]
 800bfc6:	f7f5 fd9e 	bl	8001b06 <_fstat>
 800bfca:	1c43      	adds	r3, r0, #1
 800bfcc:	d102      	bne.n	800bfd4 <_fstat_r+0x1c>
 800bfce:	682b      	ldr	r3, [r5, #0]
 800bfd0:	b103      	cbz	r3, 800bfd4 <_fstat_r+0x1c>
 800bfd2:	6023      	str	r3, [r4, #0]
 800bfd4:	bd38      	pop	{r3, r4, r5, pc}
 800bfd6:	bf00      	nop
 800bfd8:	20002fac 	.word	0x20002fac

0800bfdc <_isatty_r>:
 800bfdc:	b538      	push	{r3, r4, r5, lr}
 800bfde:	4d06      	ldr	r5, [pc, #24]	; (800bff8 <_isatty_r+0x1c>)
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	4604      	mov	r4, r0
 800bfe4:	4608      	mov	r0, r1
 800bfe6:	602b      	str	r3, [r5, #0]
 800bfe8:	f7f5 fd9d 	bl	8001b26 <_isatty>
 800bfec:	1c43      	adds	r3, r0, #1
 800bfee:	d102      	bne.n	800bff6 <_isatty_r+0x1a>
 800bff0:	682b      	ldr	r3, [r5, #0]
 800bff2:	b103      	cbz	r3, 800bff6 <_isatty_r+0x1a>
 800bff4:	6023      	str	r3, [r4, #0]
 800bff6:	bd38      	pop	{r3, r4, r5, pc}
 800bff8:	20002fac 	.word	0x20002fac

0800bffc <_init>:
 800bffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bffe:	bf00      	nop
 800c000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c002:	bc08      	pop	{r3}
 800c004:	469e      	mov	lr, r3
 800c006:	4770      	bx	lr

0800c008 <_fini>:
 800c008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c00a:	bf00      	nop
 800c00c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c00e:	bc08      	pop	{r3}
 800c010:	469e      	mov	lr, r3
 800c012:	4770      	bx	lr
