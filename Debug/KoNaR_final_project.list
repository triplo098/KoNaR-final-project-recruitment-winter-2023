
KoNaR_final_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a5bc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  0800a750  0800a750  0001a750  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab7c  0800ab7c  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ab7c  0800ab7c  0001ab7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ab84  0800ab84  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ab84  0800ab84  0001ab84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ab88  0800ab88  0001ab88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800ab8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002da8  200001d8  0800ad64  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002f80  0800ad64  00022f80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b395  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b37  00000000  00000000  0003b5e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001938  00000000  00000000  0003f118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013ad  00000000  00000000  00040a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a50b  00000000  00000000  00041dfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c869  00000000  00000000  0006c308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001010ae  00000000  00000000  00088b71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007a44  00000000  00000000  00189c20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00191664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a734 	.word	0x0800a734

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800a734 	.word	0x0800a734

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	4a07      	ldr	r2, [pc, #28]	; (8000ed0 <vApplicationGetIdleTaskMemory+0x2c>)
 8000eb4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	4a06      	ldr	r2, [pc, #24]	; (8000ed4 <vApplicationGetIdleTaskMemory+0x30>)
 8000eba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2280      	movs	r2, #128	; 0x80
 8000ec0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000ec2:	bf00      	nop
 8000ec4:	3714      	adds	r7, #20
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	200001f4 	.word	0x200001f4
 8000ed4:	20000248 	.word	0x20000248

08000ed8 <HAL_TIM_PeriodElapsedCallback>:
}




void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]

	if (htim == &htim2) {
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	4a0a      	ldr	r2, [pc, #40]	; (8000f0c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d103      	bne.n	8000ef0 <HAL_TIM_PeriodElapsedCallback+0x18>

		blink_flag = true;
 8000ee8:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000eea:	2201      	movs	r2, #1
 8000eec:	701a      	strb	r2, [r3, #0]

		data_send_flag = true;

	}

}
 8000eee:	e006      	b.n	8000efe <HAL_TIM_PeriodElapsedCallback+0x26>
	} else if (htim == &htim3) {
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	4a08      	ldr	r2, [pc, #32]	; (8000f14 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d102      	bne.n	8000efe <HAL_TIM_PeriodElapsedCallback+0x26>
		data_send_flag = true;
 8000ef8:	4b07      	ldr	r3, [pc, #28]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000efa:	2201      	movs	r2, #1
 8000efc:	701a      	strb	r2, [r3, #0]
}
 8000efe:	bf00      	nop
 8000f00:	370c      	adds	r7, #12
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	2000049c 	.word	0x2000049c
 8000f10:	200005c0 	.word	0x200005c0
 8000f14:	200004e8 	.word	0x200004e8
 8000f18:	200005c3 	.word	0x200005c3

08000f1c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == B1_Pin) {
 8000f26:	88fb      	ldrh	r3, [r7, #6]
 8000f28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f2c:	d103      	bne.n	8000f36 <HAL_GPIO_EXTI_Callback+0x1a>

		button_flag = true;
 8000f2e:	4b08      	ldr	r3, [pc, #32]	; (8000f50 <HAL_GPIO_EXTI_Callback+0x34>)
 8000f30:	2201      	movs	r2, #1
 8000f32:	701a      	strb	r2, [r3, #0]
	} else if (GPIO_Pin == GPIO_PIN_10) {

		data_ready_flag = true;

	}
}
 8000f34:	e006      	b.n	8000f44 <HAL_GPIO_EXTI_Callback+0x28>
	} else if (GPIO_Pin == GPIO_PIN_10) {
 8000f36:	88fb      	ldrh	r3, [r7, #6]
 8000f38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f3c:	d102      	bne.n	8000f44 <HAL_GPIO_EXTI_Callback+0x28>
		data_ready_flag = true;
 8000f3e:	4b05      	ldr	r3, [pc, #20]	; (8000f54 <HAL_GPIO_EXTI_Callback+0x38>)
 8000f40:	2201      	movs	r2, #1
 8000f42:	701a      	strb	r2, [r3, #0]
}
 8000f44:	bf00      	nop
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	200005c1 	.word	0x200005c1
 8000f54:	200005c2 	.word	0x200005c2

08000f58 <sender>:
//	if (huart == &huart2) {
//		transimt_flag = true;
//	}
//}

void sender(void *param) {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]

	while(1) {

		char c;
		if(xQueueReceive(queue, &c, 100)) {
 8000f60:	4b09      	ldr	r3, [pc, #36]	; (8000f88 <sender+0x30>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f107 010f 	add.w	r1, r7, #15
 8000f68:	2264      	movs	r2, #100	; 0x64
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f005 fa6a 	bl	8006444 <xQueueReceive>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d0f4      	beq.n	8000f60 <sender+0x8>
			HAL_UART_Transmit_IT(&huart2, (uint8_t * ) &c, 1);
 8000f76:	f107 030f 	add.w	r3, r7, #15
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4803      	ldr	r0, [pc, #12]	; (8000f8c <sender+0x34>)
 8000f80:	f003 fe32 	bl	8004be8 <HAL_UART_Transmit_IT>
	while(1) {
 8000f84:	e7ec      	b.n	8000f60 <sender+0x8>
 8000f86:	bf00      	nop
 8000f88:	200005c4 	.word	0x200005c4
 8000f8c:	20000534 	.word	0x20000534

08000f90 <blink>:
	}
}



void blink(void *param) {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]

	while(1) {

		if (blink_flag == true) {
 8000f98:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <blink+0x24>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d0fa      	beq.n	8000f98 <blink+0x8>

			blink_flag = false;
 8000fa2:	4b04      	ldr	r3, [pc, #16]	; (8000fb4 <blink+0x24>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(DIODE_GPIO_Port, DIODE_Pin);
 8000fa8:	2120      	movs	r1, #32
 8000faa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fae:	f001 f943 	bl	8002238 <HAL_GPIO_TogglePin>
		if (blink_flag == true) {
 8000fb2:	e7f1      	b.n	8000f98 <blink+0x8>
 8000fb4:	200005c0 	.word	0x200005c0

08000fb8 <button>:

	}

}

void button(void *param) {
 8000fb8:	b5b0      	push	{r4, r5, r7, lr}
 8000fba:	b094      	sub	sp, #80	; 0x50
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
//	char buffer[64] = {0};
//	snprintf((char*) buffer, sizeof(buffer), "Button Pressed!\r\n");



	char buffer[64] = "Button Pressed!\r\n";
 8000fc0:	4b1b      	ldr	r3, [pc, #108]	; (8001030 <button+0x78>)
 8000fc2:	f107 040c 	add.w	r4, r7, #12
 8000fc6:	461d      	mov	r5, r3
 8000fc8:	6828      	ldr	r0, [r5, #0]
 8000fca:	6869      	ldr	r1, [r5, #4]
 8000fcc:	68aa      	ldr	r2, [r5, #8]
 8000fce:	68eb      	ldr	r3, [r5, #12]
 8000fd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fd2:	8a2b      	ldrh	r3, [r5, #16]
 8000fd4:	8023      	strh	r3, [r4, #0]
 8000fd6:	f107 031e 	add.w	r3, r7, #30
 8000fda:	222e      	movs	r2, #46	; 0x2e
 8000fdc:	2100      	movs	r1, #0
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f007 fc57 	bl	8008892 <memset>

//	char message[] = "Button Pressed!\r\n";

	while (1) {

		if (button_flag == true) {
 8000fe4:	4b13      	ldr	r3, [pc, #76]	; (8001034 <button+0x7c>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d0fa      	beq.n	8000fe4 <button+0x2c>

			button_flag = false;
 8000fee:	4b11      	ldr	r3, [pc, #68]	; (8001034 <button+0x7c>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	701a      	strb	r2, [r3, #0]
//			HAL_UART_Transmit_IT(&huart2, (uint8_t*) buffer, strlen((char*)buffer));
//			HAL_UART_Transmit_IT(&huart2, (uint8_t*) message, strlen(message));
//			HAL_GPIO_TogglePin(DIODE_GPIO_Port, DIODE_Pin);

			for (int i = 0; i < strlen((char*)buffer); i++) {
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000ff8:	e00f      	b.n	800101a <button+0x62>
				if (xQueueSend(queue, &buffer[i], 100)) {
 8000ffa:	4b0f      	ldr	r3, [pc, #60]	; (8001038 <button+0x80>)
 8000ffc:	6818      	ldr	r0, [r3, #0]
 8000ffe:	f107 020c 	add.w	r2, r7, #12
 8001002:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001004:	18d1      	adds	r1, r2, r3
 8001006:	2300      	movs	r3, #0
 8001008:	2264      	movs	r2, #100	; 0x64
 800100a:	f005 f91d 	bl	8006248 <xQueueGenericSend>
					//udało się
				} else {
					//nie udało się
				}
				vTaskDelay(20);
 800100e:	2014      	movs	r0, #20
 8001010:	f005 fd9c 	bl	8006b4c <vTaskDelay>
			for (int i = 0; i < strlen((char*)buffer); i++) {
 8001014:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001016:	3301      	adds	r3, #1
 8001018:	64fb      	str	r3, [r7, #76]	; 0x4c
 800101a:	f107 030c 	add.w	r3, r7, #12
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff f926 	bl	8000270 <strlen>
 8001024:	4602      	mov	r2, r0
 8001026:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001028:	429a      	cmp	r2, r3
 800102a:	d8e6      	bhi.n	8000ffa <button+0x42>
		if (button_flag == true) {
 800102c:	e7da      	b.n	8000fe4 <button+0x2c>
 800102e:	bf00      	nop
 8001030:	0800a750 	.word	0x0800a750
 8001034:	200005c1 	.word	0x200005c1
 8001038:	200005c4 	.word	0x200005c4

0800103c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800103c:	b5b0      	push	{r4, r5, r7, lr}
 800103e:	b08a      	sub	sp, #40	; 0x28
 8001040:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001042:	f000 fd2b 	bl	8001a9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001046:	f000 f85f 	bl	8001108 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800104a:	f000 f9d1 	bl	80013f0 <MX_GPIO_Init>
  MX_TIM2_Init();
 800104e:	f000 f8ed 	bl	800122c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001052:	f000 f99d 	bl	8001390 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001056:	f000 f943 	bl	80012e0 <MX_TIM3_Init>
  MX_I2C1_Init();
 800105a:	f000 f8a7 	bl	80011ac <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */


  //starting timer for LED blink 13 Hz
  HAL_TIM_Base_Start_IT(&htim2);
 800105e:	4820      	ldr	r0, [pc, #128]	; (80010e0 <main+0xa4>)
 8001060:	f002 fd88 	bl	8003b74 <HAL_TIM_Base_Start_IT>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001064:	4b1f      	ldr	r3, [pc, #124]	; (80010e4 <main+0xa8>)
 8001066:	1d3c      	adds	r4, r7, #4
 8001068:	461d      	mov	r5, r3
 800106a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800106c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800106e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001072:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001076:	1d3b      	adds	r3, r7, #4
 8001078:	2100      	movs	r1, #0
 800107a:	4618      	mov	r0, r3
 800107c:	f004 ff0e 	bl	8005e9c <osThreadCreate>
 8001080:	4603      	mov	r3, r0
 8001082:	4a19      	ldr	r2, [pc, #100]	; (80010e8 <main+0xac>)
 8001084:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */


  queue = xQueueCreate(1024, sizeof(char));
 8001086:	2200      	movs	r2, #0
 8001088:	2101      	movs	r1, #1
 800108a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800108e:	f005 f881 	bl	8006194 <xQueueGenericCreate>
 8001092:	4603      	mov	r3, r0
 8001094:	4a15      	ldr	r2, [pc, #84]	; (80010ec <main+0xb0>)
 8001096:	6013      	str	r3, [r2, #0]


  xTaskCreate(blink, "blink", 512, NULL, 5, NULL);
 8001098:	2300      	movs	r3, #0
 800109a:	9301      	str	r3, [sp, #4]
 800109c:	2305      	movs	r3, #5
 800109e:	9300      	str	r3, [sp, #0]
 80010a0:	2300      	movs	r3, #0
 80010a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010a6:	4912      	ldr	r1, [pc, #72]	; (80010f0 <main+0xb4>)
 80010a8:	4812      	ldr	r0, [pc, #72]	; (80010f4 <main+0xb8>)
 80010aa:	f005 fc18 	bl	80068de <xTaskCreate>
  xTaskCreate(button, "button", 512, NULL, 5, NULL);
 80010ae:	2300      	movs	r3, #0
 80010b0:	9301      	str	r3, [sp, #4]
 80010b2:	2305      	movs	r3, #5
 80010b4:	9300      	str	r3, [sp, #0]
 80010b6:	2300      	movs	r3, #0
 80010b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010bc:	490e      	ldr	r1, [pc, #56]	; (80010f8 <main+0xbc>)
 80010be:	480f      	ldr	r0, [pc, #60]	; (80010fc <main+0xc0>)
 80010c0:	f005 fc0d 	bl	80068de <xTaskCreate>

  xTaskCreate(sender, "sender", 512, NULL, 5, NULL);
 80010c4:	2300      	movs	r3, #0
 80010c6:	9301      	str	r3, [sp, #4]
 80010c8:	2305      	movs	r3, #5
 80010ca:	9300      	str	r3, [sp, #0]
 80010cc:	2300      	movs	r3, #0
 80010ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010d2:	490b      	ldr	r1, [pc, #44]	; (8001100 <main+0xc4>)
 80010d4:	480b      	ldr	r0, [pc, #44]	; (8001104 <main+0xc8>)
 80010d6:	f005 fc02 	bl	80068de <xTaskCreate>
//  xTaskCreate(sensor, "sensor", 512, NULL, 5, NULL);

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80010da:	f004 fed8 	bl	8005e8e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80010de:	e7fe      	b.n	80010de <main+0xa2>
 80010e0:	2000049c 	.word	0x2000049c
 80010e4:	0800a79c 	.word	0x0800a79c
 80010e8:	200005bc 	.word	0x200005bc
 80010ec:	200005c4 	.word	0x200005c4
 80010f0:	0800a778 	.word	0x0800a778
 80010f4:	08000f91 	.word	0x08000f91
 80010f8:	0800a780 	.word	0x0800a780
 80010fc:	08000fb9 	.word	0x08000fb9
 8001100:	0800a788 	.word	0x0800a788
 8001104:	08000f59 	.word	0x08000f59

08001108 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b096      	sub	sp, #88	; 0x58
 800110c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800110e:	f107 0314 	add.w	r3, r7, #20
 8001112:	2244      	movs	r2, #68	; 0x44
 8001114:	2100      	movs	r1, #0
 8001116:	4618      	mov	r0, r3
 8001118:	f007 fbbb 	bl	8008892 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800111c:	463b      	mov	r3, r7
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	605a      	str	r2, [r3, #4]
 8001124:	609a      	str	r2, [r3, #8]
 8001126:	60da      	str	r2, [r3, #12]
 8001128:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800112a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800112e:	f001 fa0f 	bl	8002550 <HAL_PWREx_ControlVoltageScaling>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001138:	f000 f9e0 	bl	80014fc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800113c:	2302      	movs	r3, #2
 800113e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001140:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001144:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001146:	2310      	movs	r3, #16
 8001148:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800114a:	2302      	movs	r3, #2
 800114c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800114e:	2302      	movs	r3, #2
 8001150:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001152:	2301      	movs	r3, #1
 8001154:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001156:	230a      	movs	r3, #10
 8001158:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800115a:	2307      	movs	r3, #7
 800115c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800115e:	2302      	movs	r3, #2
 8001160:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001162:	2302      	movs	r3, #2
 8001164:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001166:	f107 0314 	add.w	r3, r7, #20
 800116a:	4618      	mov	r0, r3
 800116c:	f001 fa46 	bl	80025fc <HAL_RCC_OscConfig>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001176:	f000 f9c1 	bl	80014fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800117a:	230f      	movs	r3, #15
 800117c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800117e:	2303      	movs	r3, #3
 8001180:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001182:	2300      	movs	r3, #0
 8001184:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001186:	2300      	movs	r3, #0
 8001188:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800118a:	2300      	movs	r3, #0
 800118c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800118e:	463b      	mov	r3, r7
 8001190:	2104      	movs	r1, #4
 8001192:	4618      	mov	r0, r3
 8001194:	f001 fe0e 	bl	8002db4 <HAL_RCC_ClockConfig>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800119e:	f000 f9ad 	bl	80014fc <Error_Handler>
  }
}
 80011a2:	bf00      	nop
 80011a4:	3758      	adds	r7, #88	; 0x58
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
	...

080011ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011b0:	4b1b      	ldr	r3, [pc, #108]	; (8001220 <MX_I2C1_Init+0x74>)
 80011b2:	4a1c      	ldr	r2, [pc, #112]	; (8001224 <MX_I2C1_Init+0x78>)
 80011b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80011b6:	4b1a      	ldr	r3, [pc, #104]	; (8001220 <MX_I2C1_Init+0x74>)
 80011b8:	4a1b      	ldr	r2, [pc, #108]	; (8001228 <MX_I2C1_Init+0x7c>)
 80011ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80011bc:	4b18      	ldr	r3, [pc, #96]	; (8001220 <MX_I2C1_Init+0x74>)
 80011be:	2200      	movs	r2, #0
 80011c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011c2:	4b17      	ldr	r3, [pc, #92]	; (8001220 <MX_I2C1_Init+0x74>)
 80011c4:	2201      	movs	r2, #1
 80011c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011c8:	4b15      	ldr	r3, [pc, #84]	; (8001220 <MX_I2C1_Init+0x74>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80011ce:	4b14      	ldr	r3, [pc, #80]	; (8001220 <MX_I2C1_Init+0x74>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011d4:	4b12      	ldr	r3, [pc, #72]	; (8001220 <MX_I2C1_Init+0x74>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011da:	4b11      	ldr	r3, [pc, #68]	; (8001220 <MX_I2C1_Init+0x74>)
 80011dc:	2200      	movs	r2, #0
 80011de:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011e0:	4b0f      	ldr	r3, [pc, #60]	; (8001220 <MX_I2C1_Init+0x74>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011e6:	480e      	ldr	r0, [pc, #56]	; (8001220 <MX_I2C1_Init+0x74>)
 80011e8:	f001 f858 	bl	800229c <HAL_I2C_Init>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80011f2:	f000 f983 	bl	80014fc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011f6:	2100      	movs	r1, #0
 80011f8:	4809      	ldr	r0, [pc, #36]	; (8001220 <MX_I2C1_Init+0x74>)
 80011fa:	f001 f904 	bl	8002406 <HAL_I2CEx_ConfigAnalogFilter>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001204:	f000 f97a 	bl	80014fc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001208:	2100      	movs	r1, #0
 800120a:	4805      	ldr	r0, [pc, #20]	; (8001220 <MX_I2C1_Init+0x74>)
 800120c:	f001 f946 	bl	800249c <HAL_I2CEx_ConfigDigitalFilter>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001216:	f000 f971 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20000448 	.word	0x20000448
 8001224:	40005400 	.word	0x40005400
 8001228:	10909cec 	.word	0x10909cec

0800122c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08a      	sub	sp, #40	; 0x28
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001232:	f107 031c 	add.w	r3, r7, #28
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]
 800123c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800123e:	463b      	mov	r3, r7
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
 800124a:	611a      	str	r2, [r3, #16]
 800124c:	615a      	str	r2, [r3, #20]
 800124e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001250:	4b22      	ldr	r3, [pc, #136]	; (80012dc <MX_TIM2_Init+0xb0>)
 8001252:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001256:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10394;
 8001258:	4b20      	ldr	r3, [pc, #128]	; (80012dc <MX_TIM2_Init+0xb0>)
 800125a:	f642 029a 	movw	r2, #10394	; 0x289a
 800125e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001260:	4b1e      	ldr	r3, [pc, #120]	; (80012dc <MX_TIM2_Init+0xb0>)
 8001262:	2200      	movs	r2, #0
 8001264:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 295;
 8001266:	4b1d      	ldr	r3, [pc, #116]	; (80012dc <MX_TIM2_Init+0xb0>)
 8001268:	f240 1227 	movw	r2, #295	; 0x127
 800126c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800126e:	4b1b      	ldr	r3, [pc, #108]	; (80012dc <MX_TIM2_Init+0xb0>)
 8001270:	2200      	movs	r2, #0
 8001272:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001274:	4b19      	ldr	r3, [pc, #100]	; (80012dc <MX_TIM2_Init+0xb0>)
 8001276:	2200      	movs	r2, #0
 8001278:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800127a:	4818      	ldr	r0, [pc, #96]	; (80012dc <MX_TIM2_Init+0xb0>)
 800127c:	f002 fd41 	bl	8003d02 <HAL_TIM_PWM_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 8001286:	f000 f939 	bl	80014fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800128a:	2300      	movs	r3, #0
 800128c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800128e:	2300      	movs	r3, #0
 8001290:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001292:	f107 031c 	add.w	r3, r7, #28
 8001296:	4619      	mov	r1, r3
 8001298:	4810      	ldr	r0, [pc, #64]	; (80012dc <MX_TIM2_Init+0xb0>)
 800129a:	f003 fbb1 	bl	8004a00 <HAL_TIMEx_MasterConfigSynchronization>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80012a4:	f000 f92a 	bl	80014fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012a8:	2360      	movs	r3, #96	; 0x60
 80012aa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012b0:	2300      	movs	r3, #0
 80012b2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012b4:	2300      	movs	r3, #0
 80012b6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012b8:	463b      	mov	r3, r7
 80012ba:	2200      	movs	r2, #0
 80012bc:	4619      	mov	r1, r3
 80012be:	4807      	ldr	r0, [pc, #28]	; (80012dc <MX_TIM2_Init+0xb0>)
 80012c0:	f002 fef2 	bl	80040a8 <HAL_TIM_PWM_ConfigChannel>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 80012ca:	f000 f917 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80012ce:	4803      	ldr	r0, [pc, #12]	; (80012dc <MX_TIM2_Init+0xb0>)
 80012d0:	f000 f9f2 	bl	80016b8 <HAL_TIM_MspPostInit>

}
 80012d4:	bf00      	nop
 80012d6:	3728      	adds	r7, #40	; 0x28
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	2000049c 	.word	0x2000049c

080012e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08a      	sub	sp, #40	; 0x28
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012e6:	f107 031c 	add.w	r3, r7, #28
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012f2:	463b      	mov	r3, r7
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]
 80012fe:	611a      	str	r2, [r3, #16]
 8001300:	615a      	str	r2, [r3, #20]
 8001302:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001304:	4b20      	ldr	r3, [pc, #128]	; (8001388 <MX_TIM3_Init+0xa8>)
 8001306:	4a21      	ldr	r2, [pc, #132]	; (800138c <MX_TIM3_Init+0xac>)
 8001308:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 55516;
 800130a:	4b1f      	ldr	r3, [pc, #124]	; (8001388 <MX_TIM3_Init+0xa8>)
 800130c:	f64d 02dc 	movw	r2, #55516	; 0xd8dc
 8001310:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001312:	4b1d      	ldr	r3, [pc, #116]	; (8001388 <MX_TIM3_Init+0xa8>)
 8001314:	2200      	movs	r2, #0
 8001316:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001318:	4b1b      	ldr	r3, [pc, #108]	; (8001388 <MX_TIM3_Init+0xa8>)
 800131a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800131e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001320:	4b19      	ldr	r3, [pc, #100]	; (8001388 <MX_TIM3_Init+0xa8>)
 8001322:	2200      	movs	r2, #0
 8001324:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001326:	4b18      	ldr	r3, [pc, #96]	; (8001388 <MX_TIM3_Init+0xa8>)
 8001328:	2200      	movs	r2, #0
 800132a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 800132c:	4816      	ldr	r0, [pc, #88]	; (8001388 <MX_TIM3_Init+0xa8>)
 800132e:	f002 fc91 	bl	8003c54 <HAL_TIM_OC_Init>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 8001338:	f000 f8e0 	bl	80014fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800133c:	2300      	movs	r3, #0
 800133e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001340:	2300      	movs	r3, #0
 8001342:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001344:	f107 031c 	add.w	r3, r7, #28
 8001348:	4619      	mov	r1, r3
 800134a:	480f      	ldr	r0, [pc, #60]	; (8001388 <MX_TIM3_Init+0xa8>)
 800134c:	f003 fb58 	bl	8004a00 <HAL_TIMEx_MasterConfigSynchronization>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8001356:	f000 f8d1 	bl	80014fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800135a:	2300      	movs	r3, #0
 800135c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800135e:	2300      	movs	r3, #0
 8001360:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001362:	2300      	movs	r3, #0
 8001364:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001366:	2300      	movs	r3, #0
 8001368:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800136a:	463b      	mov	r3, r7
 800136c:	2200      	movs	r2, #0
 800136e:	4619      	mov	r1, r3
 8001370:	4805      	ldr	r0, [pc, #20]	; (8001388 <MX_TIM3_Init+0xa8>)
 8001372:	f002 fe1f 	bl	8003fb4 <HAL_TIM_OC_ConfigChannel>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 800137c:	f000 f8be 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001380:	bf00      	nop
 8001382:	3728      	adds	r7, #40	; 0x28
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	200004e8 	.word	0x200004e8
 800138c:	40000400 	.word	0x40000400

08001390 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001394:	4b14      	ldr	r3, [pc, #80]	; (80013e8 <MX_USART2_UART_Init+0x58>)
 8001396:	4a15      	ldr	r2, [pc, #84]	; (80013ec <MX_USART2_UART_Init+0x5c>)
 8001398:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800139a:	4b13      	ldr	r3, [pc, #76]	; (80013e8 <MX_USART2_UART_Init+0x58>)
 800139c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013a2:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <MX_USART2_UART_Init+0x58>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013a8:	4b0f      	ldr	r3, [pc, #60]	; (80013e8 <MX_USART2_UART_Init+0x58>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013ae:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <MX_USART2_UART_Init+0x58>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013b4:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <MX_USART2_UART_Init+0x58>)
 80013b6:	220c      	movs	r2, #12
 80013b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ba:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <MX_USART2_UART_Init+0x58>)
 80013bc:	2200      	movs	r2, #0
 80013be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013c0:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <MX_USART2_UART_Init+0x58>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013c6:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <MX_USART2_UART_Init+0x58>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013cc:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <MX_USART2_UART_Init+0x58>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013d2:	4805      	ldr	r0, [pc, #20]	; (80013e8 <MX_USART2_UART_Init+0x58>)
 80013d4:	f003 fbba 	bl	8004b4c <HAL_UART_Init>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80013de:	f000 f88d 	bl	80014fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	20000534 	.word	0x20000534
 80013ec:	40004400 	.word	0x40004400

080013f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b08a      	sub	sp, #40	; 0x28
 80013f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f6:	f107 0314 	add.w	r3, r7, #20
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	605a      	str	r2, [r3, #4]
 8001400:	609a      	str	r2, [r3, #8]
 8001402:	60da      	str	r2, [r3, #12]
 8001404:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001406:	4b36      	ldr	r3, [pc, #216]	; (80014e0 <MX_GPIO_Init+0xf0>)
 8001408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140a:	4a35      	ldr	r2, [pc, #212]	; (80014e0 <MX_GPIO_Init+0xf0>)
 800140c:	f043 0304 	orr.w	r3, r3, #4
 8001410:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001412:	4b33      	ldr	r3, [pc, #204]	; (80014e0 <MX_GPIO_Init+0xf0>)
 8001414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001416:	f003 0304 	and.w	r3, r3, #4
 800141a:	613b      	str	r3, [r7, #16]
 800141c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800141e:	4b30      	ldr	r3, [pc, #192]	; (80014e0 <MX_GPIO_Init+0xf0>)
 8001420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001422:	4a2f      	ldr	r2, [pc, #188]	; (80014e0 <MX_GPIO_Init+0xf0>)
 8001424:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001428:	64d3      	str	r3, [r2, #76]	; 0x4c
 800142a:	4b2d      	ldr	r3, [pc, #180]	; (80014e0 <MX_GPIO_Init+0xf0>)
 800142c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001436:	4b2a      	ldr	r3, [pc, #168]	; (80014e0 <MX_GPIO_Init+0xf0>)
 8001438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800143a:	4a29      	ldr	r2, [pc, #164]	; (80014e0 <MX_GPIO_Init+0xf0>)
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001442:	4b27      	ldr	r3, [pc, #156]	; (80014e0 <MX_GPIO_Init+0xf0>)
 8001444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	60bb      	str	r3, [r7, #8]
 800144c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800144e:	4b24      	ldr	r3, [pc, #144]	; (80014e0 <MX_GPIO_Init+0xf0>)
 8001450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001452:	4a23      	ldr	r2, [pc, #140]	; (80014e0 <MX_GPIO_Init+0xf0>)
 8001454:	f043 0302 	orr.w	r3, r3, #2
 8001458:	64d3      	str	r3, [r2, #76]	; 0x4c
 800145a:	4b21      	ldr	r3, [pc, #132]	; (80014e0 <MX_GPIO_Init+0xf0>)
 800145c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	607b      	str	r3, [r7, #4]
 8001464:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIODE_GPIO_Port, DIODE_Pin, GPIO_PIN_RESET);
 8001466:	2200      	movs	r2, #0
 8001468:	2120      	movs	r1, #32
 800146a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800146e:	f000 fecb 	bl	8002208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001472:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001476:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001478:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800147c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	2300      	movs	r3, #0
 8001480:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001482:	f107 0314 	add.w	r3, r7, #20
 8001486:	4619      	mov	r1, r3
 8001488:	4816      	ldr	r0, [pc, #88]	; (80014e4 <MX_GPIO_Init+0xf4>)
 800148a:	f000 fd13 	bl	8001eb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIODE_Pin */
  GPIO_InitStruct.Pin = DIODE_Pin;
 800148e:	2320      	movs	r3, #32
 8001490:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001492:	2301      	movs	r3, #1
 8001494:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149a:	2300      	movs	r3, #0
 800149c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIODE_GPIO_Port, &GPIO_InitStruct);
 800149e:	f107 0314 	add.w	r3, r7, #20
 80014a2:	4619      	mov	r1, r3
 80014a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014a8:	f000 fd04 	bl	8001eb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80014ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014b2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80014b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014bc:	f107 0314 	add.w	r3, r7, #20
 80014c0:	4619      	mov	r1, r3
 80014c2:	4809      	ldr	r0, [pc, #36]	; (80014e8 <MX_GPIO_Init+0xf8>)
 80014c4:	f000 fcf6 	bl	8001eb4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80014c8:	2200      	movs	r2, #0
 80014ca:	2105      	movs	r1, #5
 80014cc:	2028      	movs	r0, #40	; 0x28
 80014ce:	f000 fc3c 	bl	8001d4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80014d2:	2028      	movs	r0, #40	; 0x28
 80014d4:	f000 fc55 	bl	8001d82 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014d8:	bf00      	nop
 80014da:	3728      	adds	r7, #40	; 0x28
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	40021000 	.word	0x40021000
 80014e4:	48000800 	.word	0x48000800
 80014e8:	48000400 	.word	0x48000400

080014ec <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80014f4:	2001      	movs	r0, #1
 80014f6:	f004 fd1d 	bl	8005f34 <osDelay>
 80014fa:	e7fb      	b.n	80014f4 <StartDefaultTask+0x8>

080014fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001500:	b672      	cpsid	i
}
 8001502:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001504:	e7fe      	b.n	8001504 <Error_Handler+0x8>
	...

08001508 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800150e:	4b11      	ldr	r3, [pc, #68]	; (8001554 <HAL_MspInit+0x4c>)
 8001510:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001512:	4a10      	ldr	r2, [pc, #64]	; (8001554 <HAL_MspInit+0x4c>)
 8001514:	f043 0301 	orr.w	r3, r3, #1
 8001518:	6613      	str	r3, [r2, #96]	; 0x60
 800151a:	4b0e      	ldr	r3, [pc, #56]	; (8001554 <HAL_MspInit+0x4c>)
 800151c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	607b      	str	r3, [r7, #4]
 8001524:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001526:	4b0b      	ldr	r3, [pc, #44]	; (8001554 <HAL_MspInit+0x4c>)
 8001528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800152a:	4a0a      	ldr	r2, [pc, #40]	; (8001554 <HAL_MspInit+0x4c>)
 800152c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001530:	6593      	str	r3, [r2, #88]	; 0x58
 8001532:	4b08      	ldr	r3, [pc, #32]	; (8001554 <HAL_MspInit+0x4c>)
 8001534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153a:	603b      	str	r3, [r7, #0]
 800153c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800153e:	2200      	movs	r2, #0
 8001540:	210f      	movs	r1, #15
 8001542:	f06f 0001 	mvn.w	r0, #1
 8001546:	f000 fc00 	bl	8001d4a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40021000 	.word	0x40021000

08001558 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b0ac      	sub	sp, #176	; 0xb0
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001560:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]
 800156c:	60da      	str	r2, [r3, #12]
 800156e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001570:	f107 0314 	add.w	r3, r7, #20
 8001574:	2288      	movs	r2, #136	; 0x88
 8001576:	2100      	movs	r1, #0
 8001578:	4618      	mov	r0, r3
 800157a:	f007 f98a 	bl	8008892 <memset>
  if(hi2c->Instance==I2C1)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a25      	ldr	r2, [pc, #148]	; (8001618 <HAL_I2C_MspInit+0xc0>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d142      	bne.n	800160e <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001588:	2340      	movs	r3, #64	; 0x40
 800158a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800158c:	2300      	movs	r3, #0
 800158e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001590:	f107 0314 	add.w	r3, r7, #20
 8001594:	4618      	mov	r0, r3
 8001596:	f001 fe31 	bl	80031fc <HAL_RCCEx_PeriphCLKConfig>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80015a0:	f7ff ffac 	bl	80014fc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a4:	4b1d      	ldr	r3, [pc, #116]	; (800161c <HAL_I2C_MspInit+0xc4>)
 80015a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a8:	4a1c      	ldr	r2, [pc, #112]	; (800161c <HAL_I2C_MspInit+0xc4>)
 80015aa:	f043 0302 	orr.w	r3, r3, #2
 80015ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015b0:	4b1a      	ldr	r3, [pc, #104]	; (800161c <HAL_I2C_MspInit+0xc4>)
 80015b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b4:	f003 0302 	and.w	r3, r3, #2
 80015b8:	613b      	str	r3, [r7, #16]
 80015ba:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015bc:	23c0      	movs	r3, #192	; 0xc0
 80015be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015c2:	2312      	movs	r3, #18
 80015c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ce:	2303      	movs	r3, #3
 80015d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015d4:	2304      	movs	r3, #4
 80015d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015da:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80015de:	4619      	mov	r1, r3
 80015e0:	480f      	ldr	r0, [pc, #60]	; (8001620 <HAL_I2C_MspInit+0xc8>)
 80015e2:	f000 fc67 	bl	8001eb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015e6:	4b0d      	ldr	r3, [pc, #52]	; (800161c <HAL_I2C_MspInit+0xc4>)
 80015e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ea:	4a0c      	ldr	r2, [pc, #48]	; (800161c <HAL_I2C_MspInit+0xc4>)
 80015ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015f0:	6593      	str	r3, [r2, #88]	; 0x58
 80015f2:	4b0a      	ldr	r3, [pc, #40]	; (800161c <HAL_I2C_MspInit+0xc4>)
 80015f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80015fe:	2200      	movs	r2, #0
 8001600:	2105      	movs	r1, #5
 8001602:	201f      	movs	r0, #31
 8001604:	f000 fba1 	bl	8001d4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001608:	201f      	movs	r0, #31
 800160a:	f000 fbba 	bl	8001d82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800160e:	bf00      	nop
 8001610:	37b0      	adds	r7, #176	; 0xb0
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40005400 	.word	0x40005400
 800161c:	40021000 	.word	0x40021000
 8001620:	48000400 	.word	0x48000400

08001624 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001634:	d113      	bne.n	800165e <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001636:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <HAL_TIM_PWM_MspInit+0x44>)
 8001638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800163a:	4a0b      	ldr	r2, [pc, #44]	; (8001668 <HAL_TIM_PWM_MspInit+0x44>)
 800163c:	f043 0301 	orr.w	r3, r3, #1
 8001640:	6593      	str	r3, [r2, #88]	; 0x58
 8001642:	4b09      	ldr	r3, [pc, #36]	; (8001668 <HAL_TIM_PWM_MspInit+0x44>)
 8001644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800164e:	2200      	movs	r2, #0
 8001650:	2105      	movs	r1, #5
 8001652:	201c      	movs	r0, #28
 8001654:	f000 fb79 	bl	8001d4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001658:	201c      	movs	r0, #28
 800165a:	f000 fb92 	bl	8001d82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800165e:	bf00      	nop
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40021000 	.word	0x40021000

0800166c <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM3)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a0d      	ldr	r2, [pc, #52]	; (80016b0 <HAL_TIM_OC_MspInit+0x44>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d113      	bne.n	80016a6 <HAL_TIM_OC_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800167e:	4b0d      	ldr	r3, [pc, #52]	; (80016b4 <HAL_TIM_OC_MspInit+0x48>)
 8001680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001682:	4a0c      	ldr	r2, [pc, #48]	; (80016b4 <HAL_TIM_OC_MspInit+0x48>)
 8001684:	f043 0302 	orr.w	r3, r3, #2
 8001688:	6593      	str	r3, [r2, #88]	; 0x58
 800168a:	4b0a      	ldr	r3, [pc, #40]	; (80016b4 <HAL_TIM_OC_MspInit+0x48>)
 800168c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001696:	2200      	movs	r2, #0
 8001698:	2105      	movs	r1, #5
 800169a:	201d      	movs	r0, #29
 800169c:	f000 fb55 	bl	8001d4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80016a0:	201d      	movs	r0, #29
 80016a2:	f000 fb6e 	bl	8001d82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80016a6:	bf00      	nop
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40000400 	.word	0x40000400
 80016b4:	40021000 	.word	0x40021000

080016b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b088      	sub	sp, #32
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c0:	f107 030c 	add.w	r3, r7, #12
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	605a      	str	r2, [r3, #4]
 80016ca:	609a      	str	r2, [r3, #8]
 80016cc:	60da      	str	r2, [r3, #12]
 80016ce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016d8:	d11c      	bne.n	8001714 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016da:	4b10      	ldr	r3, [pc, #64]	; (800171c <HAL_TIM_MspPostInit+0x64>)
 80016dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016de:	4a0f      	ldr	r2, [pc, #60]	; (800171c <HAL_TIM_MspPostInit+0x64>)
 80016e0:	f043 0301 	orr.w	r3, r3, #1
 80016e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016e6:	4b0d      	ldr	r3, [pc, #52]	; (800171c <HAL_TIM_MspPostInit+0x64>)
 80016e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	60bb      	str	r3, [r7, #8]
 80016f0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016f2:	2301      	movs	r3, #1
 80016f4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f6:	2302      	movs	r3, #2
 80016f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fa:	2300      	movs	r3, #0
 80016fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fe:	2300      	movs	r3, #0
 8001700:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001702:	2301      	movs	r3, #1
 8001704:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001706:	f107 030c 	add.w	r3, r7, #12
 800170a:	4619      	mov	r1, r3
 800170c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001710:	f000 fbd0 	bl	8001eb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001714:	bf00      	nop
 8001716:	3720      	adds	r7, #32
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	40021000 	.word	0x40021000

08001720 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b0ac      	sub	sp, #176	; 0xb0
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001728:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	605a      	str	r2, [r3, #4]
 8001732:	609a      	str	r2, [r3, #8]
 8001734:	60da      	str	r2, [r3, #12]
 8001736:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001738:	f107 0314 	add.w	r3, r7, #20
 800173c:	2288      	movs	r2, #136	; 0x88
 800173e:	2100      	movs	r1, #0
 8001740:	4618      	mov	r0, r3
 8001742:	f007 f8a6 	bl	8008892 <memset>
  if(huart->Instance==USART2)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a25      	ldr	r2, [pc, #148]	; (80017e0 <HAL_UART_MspInit+0xc0>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d143      	bne.n	80017d8 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001750:	2302      	movs	r3, #2
 8001752:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001754:	2300      	movs	r3, #0
 8001756:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001758:	f107 0314 	add.w	r3, r7, #20
 800175c:	4618      	mov	r0, r3
 800175e:	f001 fd4d 	bl	80031fc <HAL_RCCEx_PeriphCLKConfig>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001768:	f7ff fec8 	bl	80014fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800176c:	4b1d      	ldr	r3, [pc, #116]	; (80017e4 <HAL_UART_MspInit+0xc4>)
 800176e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001770:	4a1c      	ldr	r2, [pc, #112]	; (80017e4 <HAL_UART_MspInit+0xc4>)
 8001772:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001776:	6593      	str	r3, [r2, #88]	; 0x58
 8001778:	4b1a      	ldr	r3, [pc, #104]	; (80017e4 <HAL_UART_MspInit+0xc4>)
 800177a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800177c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001780:	613b      	str	r3, [r7, #16]
 8001782:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001784:	4b17      	ldr	r3, [pc, #92]	; (80017e4 <HAL_UART_MspInit+0xc4>)
 8001786:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001788:	4a16      	ldr	r2, [pc, #88]	; (80017e4 <HAL_UART_MspInit+0xc4>)
 800178a:	f043 0301 	orr.w	r3, r3, #1
 800178e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001790:	4b14      	ldr	r3, [pc, #80]	; (80017e4 <HAL_UART_MspInit+0xc4>)
 8001792:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001794:	f003 0301 	and.w	r3, r3, #1
 8001798:	60fb      	str	r3, [r7, #12]
 800179a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800179c:	230c      	movs	r3, #12
 800179e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a2:	2302      	movs	r3, #2
 80017a4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a8:	2300      	movs	r3, #0
 80017aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ae:	2303      	movs	r3, #3
 80017b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017b4:	2307      	movs	r3, #7
 80017b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ba:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017be:	4619      	mov	r1, r3
 80017c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017c4:	f000 fb76 	bl	8001eb4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80017c8:	2200      	movs	r2, #0
 80017ca:	2105      	movs	r1, #5
 80017cc:	2026      	movs	r0, #38	; 0x26
 80017ce:	f000 fabc 	bl	8001d4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80017d2:	2026      	movs	r0, #38	; 0x26
 80017d4:	f000 fad5 	bl	8001d82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017d8:	bf00      	nop
 80017da:	37b0      	adds	r7, #176	; 0xb0
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40004400 	.word	0x40004400
 80017e4:	40021000 	.word	0x40021000

080017e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017ec:	e7fe      	b.n	80017ec <NMI_Handler+0x4>

080017ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ee:	b480      	push	{r7}
 80017f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017f2:	e7fe      	b.n	80017f2 <HardFault_Handler+0x4>

080017f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017f8:	e7fe      	b.n	80017f8 <MemManage_Handler+0x4>

080017fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017fa:	b480      	push	{r7}
 80017fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017fe:	e7fe      	b.n	80017fe <BusFault_Handler+0x4>

08001800 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001804:	e7fe      	b.n	8001804 <UsageFault_Handler+0x4>

08001806 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001806:	b480      	push	{r7}
 8001808:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800180a:	bf00      	nop
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001818:	f000 f99c 	bl	8001b54 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800181c:	f005 fdc8 	bl	80073b0 <xTaskGetSchedulerState>
 8001820:	4603      	mov	r3, r0
 8001822:	2b01      	cmp	r3, #1
 8001824:	d001      	beq.n	800182a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001826:	f006 f88f 	bl	8007948 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
	...

08001830 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001834:	4802      	ldr	r0, [pc, #8]	; (8001840 <TIM2_IRQHandler+0x10>)
 8001836:	f002 fabb 	bl	8003db0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	2000049c 	.word	0x2000049c

08001844 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001848:	4802      	ldr	r0, [pc, #8]	; (8001854 <TIM3_IRQHandler+0x10>)
 800184a:	f002 fab1 	bl	8003db0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	200004e8 	.word	0x200004e8

08001858 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800185c:	4802      	ldr	r0, [pc, #8]	; (8001868 <I2C1_EV_IRQHandler+0x10>)
 800185e:	f000 fdb8 	bl	80023d2 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001862:	bf00      	nop
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	20000448 	.word	0x20000448

0800186c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001870:	4802      	ldr	r0, [pc, #8]	; (800187c <USART2_IRQHandler+0x10>)
 8001872:	f003 fa17 	bl	8004ca4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001876:	bf00      	nop
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20000534 	.word	0x20000534

08001880 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001884:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001888:	f000 fcf0 	bl	800226c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800188c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001890:	f000 fcec 	bl	800226c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001894:	bf00      	nop
 8001896:	bd80      	pop	{r7, pc}

08001898 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  return 1;
 800189c:	2301      	movs	r3, #1
}
 800189e:	4618      	mov	r0, r3
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <_kill>:

int _kill(int pid, int sig)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018b2:	f007 f841 	bl	8008938 <__errno>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2216      	movs	r2, #22
 80018ba:	601a      	str	r2, [r3, #0]
  return -1;
 80018bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3708      	adds	r7, #8
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <_exit>:

void _exit (int status)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f7ff ffe7 	bl	80018a8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80018da:	e7fe      	b.n	80018da <_exit+0x12>

080018dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b086      	sub	sp, #24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018e8:	2300      	movs	r3, #0
 80018ea:	617b      	str	r3, [r7, #20]
 80018ec:	e00a      	b.n	8001904 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018ee:	f3af 8000 	nop.w
 80018f2:	4601      	mov	r1, r0
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	1c5a      	adds	r2, r3, #1
 80018f8:	60ba      	str	r2, [r7, #8]
 80018fa:	b2ca      	uxtb	r2, r1
 80018fc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	3301      	adds	r3, #1
 8001902:	617b      	str	r3, [r7, #20]
 8001904:	697a      	ldr	r2, [r7, #20]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	429a      	cmp	r2, r3
 800190a:	dbf0      	blt.n	80018ee <_read+0x12>
  }

  return len;
 800190c:	687b      	ldr	r3, [r7, #4]
}
 800190e:	4618      	mov	r0, r3
 8001910:	3718      	adds	r7, #24
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b086      	sub	sp, #24
 800191a:	af00      	add	r7, sp, #0
 800191c:	60f8      	str	r0, [r7, #12]
 800191e:	60b9      	str	r1, [r7, #8]
 8001920:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001922:	2300      	movs	r3, #0
 8001924:	617b      	str	r3, [r7, #20]
 8001926:	e009      	b.n	800193c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	1c5a      	adds	r2, r3, #1
 800192c:	60ba      	str	r2, [r7, #8]
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	4618      	mov	r0, r3
 8001932:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	3301      	adds	r3, #1
 800193a:	617b      	str	r3, [r7, #20]
 800193c:	697a      	ldr	r2, [r7, #20]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	429a      	cmp	r2, r3
 8001942:	dbf1      	blt.n	8001928 <_write+0x12>
  }
  return len;
 8001944:	687b      	ldr	r3, [r7, #4]
}
 8001946:	4618      	mov	r0, r3
 8001948:	3718      	adds	r7, #24
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <_close>:

int _close(int file)
{
 800194e:	b480      	push	{r7}
 8001950:	b083      	sub	sp, #12
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001956:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800195a:	4618      	mov	r0, r3
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr

08001966 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001966:	b480      	push	{r7}
 8001968:	b083      	sub	sp, #12
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
 800196e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001976:	605a      	str	r2, [r3, #4]
  return 0;
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr

08001986 <_isatty>:

int _isatty(int file)
{
 8001986:	b480      	push	{r7}
 8001988:	b083      	sub	sp, #12
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800198e:	2301      	movs	r3, #1
}
 8001990:	4618      	mov	r0, r3
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	60b9      	str	r1, [r7, #8]
 80019a6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3714      	adds	r7, #20
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
	...

080019b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019c0:	4a14      	ldr	r2, [pc, #80]	; (8001a14 <_sbrk+0x5c>)
 80019c2:	4b15      	ldr	r3, [pc, #84]	; (8001a18 <_sbrk+0x60>)
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019cc:	4b13      	ldr	r3, [pc, #76]	; (8001a1c <_sbrk+0x64>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d102      	bne.n	80019da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019d4:	4b11      	ldr	r3, [pc, #68]	; (8001a1c <_sbrk+0x64>)
 80019d6:	4a12      	ldr	r2, [pc, #72]	; (8001a20 <_sbrk+0x68>)
 80019d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019da:	4b10      	ldr	r3, [pc, #64]	; (8001a1c <_sbrk+0x64>)
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4413      	add	r3, r2
 80019e2:	693a      	ldr	r2, [r7, #16]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d207      	bcs.n	80019f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019e8:	f006 ffa6 	bl	8008938 <__errno>
 80019ec:	4603      	mov	r3, r0
 80019ee:	220c      	movs	r2, #12
 80019f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019f6:	e009      	b.n	8001a0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019f8:	4b08      	ldr	r3, [pc, #32]	; (8001a1c <_sbrk+0x64>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019fe:	4b07      	ldr	r3, [pc, #28]	; (8001a1c <_sbrk+0x64>)
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4413      	add	r3, r2
 8001a06:	4a05      	ldr	r2, [pc, #20]	; (8001a1c <_sbrk+0x64>)
 8001a08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3718      	adds	r7, #24
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	20018000 	.word	0x20018000
 8001a18:	00000400 	.word	0x00000400
 8001a1c:	200005c8 	.word	0x200005c8
 8001a20:	20002f80 	.word	0x20002f80

08001a24 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a28:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <SystemInit+0x20>)
 8001a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a2e:	4a05      	ldr	r2, [pc, #20]	; (8001a44 <SystemInit+0x20>)
 8001a30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001a38:	bf00      	nop
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	e000ed00 	.word	0xe000ed00

08001a48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a80 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a4c:	f7ff ffea 	bl	8001a24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a50:	480c      	ldr	r0, [pc, #48]	; (8001a84 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a52:	490d      	ldr	r1, [pc, #52]	; (8001a88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a54:	4a0d      	ldr	r2, [pc, #52]	; (8001a8c <LoopForever+0xe>)
  movs r3, #0
 8001a56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a58:	e002      	b.n	8001a60 <LoopCopyDataInit>

08001a5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a5e:	3304      	adds	r3, #4

08001a60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a64:	d3f9      	bcc.n	8001a5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a66:	4a0a      	ldr	r2, [pc, #40]	; (8001a90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a68:	4c0a      	ldr	r4, [pc, #40]	; (8001a94 <LoopForever+0x16>)
  movs r3, #0
 8001a6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a6c:	e001      	b.n	8001a72 <LoopFillZerobss>

08001a6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a70:	3204      	adds	r2, #4

08001a72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a74:	d3fb      	bcc.n	8001a6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a76:	f006 ff65 	bl	8008944 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a7a:	f7ff fadf 	bl	800103c <main>

08001a7e <LoopForever>:

LoopForever:
    b LoopForever
 8001a7e:	e7fe      	b.n	8001a7e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001a80:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001a84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a88:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001a8c:	0800ab8c 	.word	0x0800ab8c
  ldr r2, =_sbss
 8001a90:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001a94:	20002f80 	.word	0x20002f80

08001a98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a98:	e7fe      	b.n	8001a98 <ADC1_2_IRQHandler>
	...

08001a9c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001aa6:	4b0c      	ldr	r3, [pc, #48]	; (8001ad8 <HAL_Init+0x3c>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a0b      	ldr	r2, [pc, #44]	; (8001ad8 <HAL_Init+0x3c>)
 8001aac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ab0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ab2:	2003      	movs	r0, #3
 8001ab4:	f000 f93e 	bl	8001d34 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ab8:	200f      	movs	r0, #15
 8001aba:	f000 f80f 	bl	8001adc <HAL_InitTick>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d002      	beq.n	8001aca <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	71fb      	strb	r3, [r7, #7]
 8001ac8:	e001      	b.n	8001ace <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001aca:	f7ff fd1d 	bl	8001508 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ace:	79fb      	ldrb	r3, [r7, #7]
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40022000 	.word	0x40022000

08001adc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001ae8:	4b17      	ldr	r3, [pc, #92]	; (8001b48 <HAL_InitTick+0x6c>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d023      	beq.n	8001b38 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001af0:	4b16      	ldr	r3, [pc, #88]	; (8001b4c <HAL_InitTick+0x70>)
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	4b14      	ldr	r3, [pc, #80]	; (8001b48 <HAL_InitTick+0x6c>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	4619      	mov	r1, r3
 8001afa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001afe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b06:	4618      	mov	r0, r3
 8001b08:	f000 f949 	bl	8001d9e <HAL_SYSTICK_Config>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d10f      	bne.n	8001b32 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2b0f      	cmp	r3, #15
 8001b16:	d809      	bhi.n	8001b2c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b18:	2200      	movs	r2, #0
 8001b1a:	6879      	ldr	r1, [r7, #4]
 8001b1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b20:	f000 f913 	bl	8001d4a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b24:	4a0a      	ldr	r2, [pc, #40]	; (8001b50 <HAL_InitTick+0x74>)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6013      	str	r3, [r2, #0]
 8001b2a:	e007      	b.n	8001b3c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	73fb      	strb	r3, [r7, #15]
 8001b30:	e004      	b.n	8001b3c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	73fb      	strb	r3, [r7, #15]
 8001b36:	e001      	b.n	8001b3c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	20000008 	.word	0x20000008
 8001b4c:	20000000 	.word	0x20000000
 8001b50:	20000004 	.word	0x20000004

08001b54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b58:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <HAL_IncTick+0x20>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <HAL_IncTick+0x24>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4413      	add	r3, r2
 8001b64:	4a04      	ldr	r2, [pc, #16]	; (8001b78 <HAL_IncTick+0x24>)
 8001b66:	6013      	str	r3, [r2, #0]
}
 8001b68:	bf00      	nop
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	20000008 	.word	0x20000008
 8001b78:	200005cc 	.word	0x200005cc

08001b7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b80:	4b03      	ldr	r3, [pc, #12]	; (8001b90 <HAL_GetTick+0x14>)
 8001b82:	681b      	ldr	r3, [r3, #0]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	200005cc 	.word	0x200005cc

08001b94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b085      	sub	sp, #20
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f003 0307 	and.w	r3, r3, #7
 8001ba2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ba4:	4b0c      	ldr	r3, [pc, #48]	; (8001bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001baa:	68ba      	ldr	r2, [r7, #8]
 8001bac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bc6:	4a04      	ldr	r2, [pc, #16]	; (8001bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	60d3      	str	r3, [r2, #12]
}
 8001bcc:	bf00      	nop
 8001bce:	3714      	adds	r7, #20
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr
 8001bd8:	e000ed00 	.word	0xe000ed00

08001bdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001be0:	4b04      	ldr	r3, [pc, #16]	; (8001bf4 <__NVIC_GetPriorityGrouping+0x18>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	0a1b      	lsrs	r3, r3, #8
 8001be6:	f003 0307 	and.w	r3, r3, #7
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	e000ed00 	.word	0xe000ed00

08001bf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	4603      	mov	r3, r0
 8001c00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	db0b      	blt.n	8001c22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c0a:	79fb      	ldrb	r3, [r7, #7]
 8001c0c:	f003 021f 	and.w	r2, r3, #31
 8001c10:	4907      	ldr	r1, [pc, #28]	; (8001c30 <__NVIC_EnableIRQ+0x38>)
 8001c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c16:	095b      	lsrs	r3, r3, #5
 8001c18:	2001      	movs	r0, #1
 8001c1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c22:	bf00      	nop
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	e000e100 	.word	0xe000e100

08001c34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	6039      	str	r1, [r7, #0]
 8001c3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	db0a      	blt.n	8001c5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	b2da      	uxtb	r2, r3
 8001c4c:	490c      	ldr	r1, [pc, #48]	; (8001c80 <__NVIC_SetPriority+0x4c>)
 8001c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c52:	0112      	lsls	r2, r2, #4
 8001c54:	b2d2      	uxtb	r2, r2
 8001c56:	440b      	add	r3, r1
 8001c58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c5c:	e00a      	b.n	8001c74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	b2da      	uxtb	r2, r3
 8001c62:	4908      	ldr	r1, [pc, #32]	; (8001c84 <__NVIC_SetPriority+0x50>)
 8001c64:	79fb      	ldrb	r3, [r7, #7]
 8001c66:	f003 030f 	and.w	r3, r3, #15
 8001c6a:	3b04      	subs	r3, #4
 8001c6c:	0112      	lsls	r2, r2, #4
 8001c6e:	b2d2      	uxtb	r2, r2
 8001c70:	440b      	add	r3, r1
 8001c72:	761a      	strb	r2, [r3, #24]
}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	e000e100 	.word	0xe000e100
 8001c84:	e000ed00 	.word	0xe000ed00

08001c88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b089      	sub	sp, #36	; 0x24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f003 0307 	and.w	r3, r3, #7
 8001c9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	f1c3 0307 	rsb	r3, r3, #7
 8001ca2:	2b04      	cmp	r3, #4
 8001ca4:	bf28      	it	cs
 8001ca6:	2304      	movcs	r3, #4
 8001ca8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	3304      	adds	r3, #4
 8001cae:	2b06      	cmp	r3, #6
 8001cb0:	d902      	bls.n	8001cb8 <NVIC_EncodePriority+0x30>
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	3b03      	subs	r3, #3
 8001cb6:	e000      	b.n	8001cba <NVIC_EncodePriority+0x32>
 8001cb8:	2300      	movs	r3, #0
 8001cba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	43da      	mvns	r2, r3
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	401a      	ands	r2, r3
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cd0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cda:	43d9      	mvns	r1, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce0:	4313      	orrs	r3, r2
         );
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3724      	adds	r7, #36	; 0x24
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
	...

08001cf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d00:	d301      	bcc.n	8001d06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d02:	2301      	movs	r3, #1
 8001d04:	e00f      	b.n	8001d26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d06:	4a0a      	ldr	r2, [pc, #40]	; (8001d30 <SysTick_Config+0x40>)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d0e:	210f      	movs	r1, #15
 8001d10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d14:	f7ff ff8e 	bl	8001c34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d18:	4b05      	ldr	r3, [pc, #20]	; (8001d30 <SysTick_Config+0x40>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d1e:	4b04      	ldr	r3, [pc, #16]	; (8001d30 <SysTick_Config+0x40>)
 8001d20:	2207      	movs	r2, #7
 8001d22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	e000e010 	.word	0xe000e010

08001d34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f7ff ff29 	bl	8001b94 <__NVIC_SetPriorityGrouping>
}
 8001d42:	bf00      	nop
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b086      	sub	sp, #24
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	4603      	mov	r3, r0
 8001d52:	60b9      	str	r1, [r7, #8]
 8001d54:	607a      	str	r2, [r7, #4]
 8001d56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d5c:	f7ff ff3e 	bl	8001bdc <__NVIC_GetPriorityGrouping>
 8001d60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	68b9      	ldr	r1, [r7, #8]
 8001d66:	6978      	ldr	r0, [r7, #20]
 8001d68:	f7ff ff8e 	bl	8001c88 <NVIC_EncodePriority>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d72:	4611      	mov	r1, r2
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff ff5d 	bl	8001c34 <__NVIC_SetPriority>
}
 8001d7a:	bf00      	nop
 8001d7c:	3718      	adds	r7, #24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b082      	sub	sp, #8
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	4603      	mov	r3, r0
 8001d8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff ff31 	bl	8001bf8 <__NVIC_EnableIRQ>
}
 8001d96:	bf00      	nop
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b082      	sub	sp, #8
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f7ff ffa2 	bl	8001cf0 <SysTick_Config>
 8001dac:	4603      	mov	r3, r0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001db6:	b480      	push	{r7}
 8001db8:	b085      	sub	sp, #20
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d008      	beq.n	8001de0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2204      	movs	r2, #4
 8001dd2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e022      	b.n	8001e26 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f022 020e 	bic.w	r2, r2, #14
 8001dee:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f022 0201 	bic.w	r2, r2, #1
 8001dfe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e04:	f003 021c 	and.w	r2, r3, #28
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0c:	2101      	movs	r1, #1
 8001e0e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e12:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2201      	movs	r2, #1
 8001e18:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001e24:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3714      	adds	r7, #20
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b084      	sub	sp, #16
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d005      	beq.n	8001e56 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2204      	movs	r2, #4
 8001e4e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	73fb      	strb	r3, [r7, #15]
 8001e54:	e029      	b.n	8001eaa <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f022 020e 	bic.w	r2, r2, #14
 8001e64:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f022 0201 	bic.w	r2, r2, #1
 8001e74:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7a:	f003 021c 	and.w	r2, r3, #28
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	2101      	movs	r1, #1
 8001e84:	fa01 f202 	lsl.w	r2, r1, r2
 8001e88:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d003      	beq.n	8001eaa <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	4798      	blx	r3
    }
  }
  return status;
 8001eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3710      	adds	r7, #16
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b087      	sub	sp, #28
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ec2:	e17f      	b.n	80021c4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	2101      	movs	r1, #1
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	f000 8171 	beq.w	80021be <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f003 0303 	and.w	r3, r3, #3
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d005      	beq.n	8001ef4 <HAL_GPIO_Init+0x40>
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f003 0303 	and.w	r3, r3, #3
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d130      	bne.n	8001f56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	2203      	movs	r2, #3
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	43db      	mvns	r3, r3
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	68da      	ldr	r2, [r3, #12]
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	693a      	ldr	r2, [r7, #16]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	43db      	mvns	r3, r3
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	4013      	ands	r3, r2
 8001f38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	091b      	lsrs	r3, r3, #4
 8001f40:	f003 0201 	and.w	r2, r3, #1
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f003 0303 	and.w	r3, r3, #3
 8001f5e:	2b03      	cmp	r3, #3
 8001f60:	d118      	bne.n	8001f94 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001f68:	2201      	movs	r2, #1
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	43db      	mvns	r3, r3
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	4013      	ands	r3, r2
 8001f76:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	08db      	lsrs	r3, r3, #3
 8001f7e:	f003 0201 	and.w	r2, r3, #1
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	693a      	ldr	r2, [r7, #16]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	693a      	ldr	r2, [r7, #16]
 8001f92:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f003 0303 	and.w	r3, r3, #3
 8001f9c:	2b03      	cmp	r3, #3
 8001f9e:	d017      	beq.n	8001fd0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	2203      	movs	r2, #3
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	43db      	mvns	r3, r3
 8001fb2:	693a      	ldr	r2, [r7, #16]
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	689a      	ldr	r2, [r3, #8]
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	693a      	ldr	r2, [r7, #16]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	693a      	ldr	r2, [r7, #16]
 8001fce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f003 0303 	and.w	r3, r3, #3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d123      	bne.n	8002024 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	08da      	lsrs	r2, r3, #3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	3208      	adds	r2, #8
 8001fe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	f003 0307 	and.w	r3, r3, #7
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	220f      	movs	r2, #15
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	43db      	mvns	r3, r3
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	691a      	ldr	r2, [r3, #16]
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	f003 0307 	and.w	r3, r3, #7
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	693a      	ldr	r2, [r7, #16]
 8002012:	4313      	orrs	r3, r2
 8002014:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	08da      	lsrs	r2, r3, #3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	3208      	adds	r2, #8
 800201e:	6939      	ldr	r1, [r7, #16]
 8002020:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	2203      	movs	r2, #3
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	43db      	mvns	r3, r3
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	4013      	ands	r3, r2
 800203a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f003 0203 	and.w	r2, r3, #3
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	693a      	ldr	r2, [r7, #16]
 800204e:	4313      	orrs	r3, r2
 8002050:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	693a      	ldr	r2, [r7, #16]
 8002056:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002060:	2b00      	cmp	r3, #0
 8002062:	f000 80ac 	beq.w	80021be <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002066:	4b5f      	ldr	r3, [pc, #380]	; (80021e4 <HAL_GPIO_Init+0x330>)
 8002068:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800206a:	4a5e      	ldr	r2, [pc, #376]	; (80021e4 <HAL_GPIO_Init+0x330>)
 800206c:	f043 0301 	orr.w	r3, r3, #1
 8002070:	6613      	str	r3, [r2, #96]	; 0x60
 8002072:	4b5c      	ldr	r3, [pc, #368]	; (80021e4 <HAL_GPIO_Init+0x330>)
 8002074:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	60bb      	str	r3, [r7, #8]
 800207c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800207e:	4a5a      	ldr	r2, [pc, #360]	; (80021e8 <HAL_GPIO_Init+0x334>)
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	089b      	lsrs	r3, r3, #2
 8002084:	3302      	adds	r3, #2
 8002086:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800208a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	f003 0303 	and.w	r3, r3, #3
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	220f      	movs	r2, #15
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	43db      	mvns	r3, r3
 800209c:	693a      	ldr	r2, [r7, #16]
 800209e:	4013      	ands	r3, r2
 80020a0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80020a8:	d025      	beq.n	80020f6 <HAL_GPIO_Init+0x242>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a4f      	ldr	r2, [pc, #316]	; (80021ec <HAL_GPIO_Init+0x338>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d01f      	beq.n	80020f2 <HAL_GPIO_Init+0x23e>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a4e      	ldr	r2, [pc, #312]	; (80021f0 <HAL_GPIO_Init+0x33c>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d019      	beq.n	80020ee <HAL_GPIO_Init+0x23a>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a4d      	ldr	r2, [pc, #308]	; (80021f4 <HAL_GPIO_Init+0x340>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d013      	beq.n	80020ea <HAL_GPIO_Init+0x236>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a4c      	ldr	r2, [pc, #304]	; (80021f8 <HAL_GPIO_Init+0x344>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d00d      	beq.n	80020e6 <HAL_GPIO_Init+0x232>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a4b      	ldr	r2, [pc, #300]	; (80021fc <HAL_GPIO_Init+0x348>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d007      	beq.n	80020e2 <HAL_GPIO_Init+0x22e>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a4a      	ldr	r2, [pc, #296]	; (8002200 <HAL_GPIO_Init+0x34c>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d101      	bne.n	80020de <HAL_GPIO_Init+0x22a>
 80020da:	2306      	movs	r3, #6
 80020dc:	e00c      	b.n	80020f8 <HAL_GPIO_Init+0x244>
 80020de:	2307      	movs	r3, #7
 80020e0:	e00a      	b.n	80020f8 <HAL_GPIO_Init+0x244>
 80020e2:	2305      	movs	r3, #5
 80020e4:	e008      	b.n	80020f8 <HAL_GPIO_Init+0x244>
 80020e6:	2304      	movs	r3, #4
 80020e8:	e006      	b.n	80020f8 <HAL_GPIO_Init+0x244>
 80020ea:	2303      	movs	r3, #3
 80020ec:	e004      	b.n	80020f8 <HAL_GPIO_Init+0x244>
 80020ee:	2302      	movs	r3, #2
 80020f0:	e002      	b.n	80020f8 <HAL_GPIO_Init+0x244>
 80020f2:	2301      	movs	r3, #1
 80020f4:	e000      	b.n	80020f8 <HAL_GPIO_Init+0x244>
 80020f6:	2300      	movs	r3, #0
 80020f8:	697a      	ldr	r2, [r7, #20]
 80020fa:	f002 0203 	and.w	r2, r2, #3
 80020fe:	0092      	lsls	r2, r2, #2
 8002100:	4093      	lsls	r3, r2
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	4313      	orrs	r3, r2
 8002106:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002108:	4937      	ldr	r1, [pc, #220]	; (80021e8 <HAL_GPIO_Init+0x334>)
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	089b      	lsrs	r3, r3, #2
 800210e:	3302      	adds	r3, #2
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002116:	4b3b      	ldr	r3, [pc, #236]	; (8002204 <HAL_GPIO_Init+0x350>)
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	43db      	mvns	r3, r3
 8002120:	693a      	ldr	r2, [r7, #16]
 8002122:	4013      	ands	r3, r2
 8002124:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d003      	beq.n	800213a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	4313      	orrs	r3, r2
 8002138:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800213a:	4a32      	ldr	r2, [pc, #200]	; (8002204 <HAL_GPIO_Init+0x350>)
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002140:	4b30      	ldr	r3, [pc, #192]	; (8002204 <HAL_GPIO_Init+0x350>)
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	43db      	mvns	r3, r3
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	4013      	ands	r3, r2
 800214e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d003      	beq.n	8002164 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800215c:	693a      	ldr	r2, [r7, #16]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	4313      	orrs	r3, r2
 8002162:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002164:	4a27      	ldr	r2, [pc, #156]	; (8002204 <HAL_GPIO_Init+0x350>)
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800216a:	4b26      	ldr	r3, [pc, #152]	; (8002204 <HAL_GPIO_Init+0x350>)
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	43db      	mvns	r3, r3
 8002174:	693a      	ldr	r2, [r7, #16]
 8002176:	4013      	ands	r3, r2
 8002178:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d003      	beq.n	800218e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002186:	693a      	ldr	r2, [r7, #16]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	4313      	orrs	r3, r2
 800218c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800218e:	4a1d      	ldr	r2, [pc, #116]	; (8002204 <HAL_GPIO_Init+0x350>)
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002194:	4b1b      	ldr	r3, [pc, #108]	; (8002204 <HAL_GPIO_Init+0x350>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	43db      	mvns	r3, r3
 800219e:	693a      	ldr	r2, [r7, #16]
 80021a0:	4013      	ands	r3, r2
 80021a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d003      	beq.n	80021b8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80021b0:	693a      	ldr	r2, [r7, #16]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80021b8:	4a12      	ldr	r2, [pc, #72]	; (8002204 <HAL_GPIO_Init+0x350>)
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	3301      	adds	r3, #1
 80021c2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	fa22 f303 	lsr.w	r3, r2, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	f47f ae78 	bne.w	8001ec4 <HAL_GPIO_Init+0x10>
  }
}
 80021d4:	bf00      	nop
 80021d6:	bf00      	nop
 80021d8:	371c      	adds	r7, #28
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	40021000 	.word	0x40021000
 80021e8:	40010000 	.word	0x40010000
 80021ec:	48000400 	.word	0x48000400
 80021f0:	48000800 	.word	0x48000800
 80021f4:	48000c00 	.word	0x48000c00
 80021f8:	48001000 	.word	0x48001000
 80021fc:	48001400 	.word	0x48001400
 8002200:	48001800 	.word	0x48001800
 8002204:	40010400 	.word	0x40010400

08002208 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	460b      	mov	r3, r1
 8002212:	807b      	strh	r3, [r7, #2]
 8002214:	4613      	mov	r3, r2
 8002216:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002218:	787b      	ldrb	r3, [r7, #1]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d003      	beq.n	8002226 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800221e:	887a      	ldrh	r2, [r7, #2]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002224:	e002      	b.n	800222c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002226:	887a      	ldrh	r2, [r7, #2]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800222c:	bf00      	nop
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	460b      	mov	r3, r1
 8002242:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	695b      	ldr	r3, [r3, #20]
 8002248:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800224a:	887a      	ldrh	r2, [r7, #2]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	4013      	ands	r3, r2
 8002250:	041a      	lsls	r2, r3, #16
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	43d9      	mvns	r1, r3
 8002256:	887b      	ldrh	r3, [r7, #2]
 8002258:	400b      	ands	r3, r1
 800225a:	431a      	orrs	r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	619a      	str	r2, [r3, #24]
}
 8002260:	bf00      	nop
 8002262:	3714      	adds	r7, #20
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	4603      	mov	r3, r0
 8002274:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002276:	4b08      	ldr	r3, [pc, #32]	; (8002298 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002278:	695a      	ldr	r2, [r3, #20]
 800227a:	88fb      	ldrh	r3, [r7, #6]
 800227c:	4013      	ands	r3, r2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d006      	beq.n	8002290 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002282:	4a05      	ldr	r2, [pc, #20]	; (8002298 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002284:	88fb      	ldrh	r3, [r7, #6]
 8002286:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002288:	88fb      	ldrh	r3, [r7, #6]
 800228a:	4618      	mov	r0, r3
 800228c:	f7fe fe46 	bl	8000f1c <HAL_GPIO_EXTI_Callback>
  }
}
 8002290:	bf00      	nop
 8002292:	3708      	adds	r7, #8
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	40010400 	.word	0x40010400

0800229c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e08d      	b.n	80023ca <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d106      	bne.n	80022c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f7ff f948 	bl	8001558 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2224      	movs	r2, #36	; 0x24
 80022cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f022 0201 	bic.w	r2, r2, #1
 80022de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685a      	ldr	r2, [r3, #4]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022ec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	689a      	ldr	r2, [r3, #8]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022fc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	2b01      	cmp	r3, #1
 8002304:	d107      	bne.n	8002316 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	689a      	ldr	r2, [r3, #8]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002312:	609a      	str	r2, [r3, #8]
 8002314:	e006      	b.n	8002324 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	689a      	ldr	r2, [r3, #8]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002322:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	2b02      	cmp	r3, #2
 800232a:	d108      	bne.n	800233e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	685a      	ldr	r2, [r3, #4]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800233a:	605a      	str	r2, [r3, #4]
 800233c:	e007      	b.n	800234e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	685a      	ldr	r2, [r3, #4]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800234c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	6812      	ldr	r2, [r2, #0]
 8002358:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800235c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002360:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	68da      	ldr	r2, [r3, #12]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002370:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	691a      	ldr	r2, [r3, #16]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	695b      	ldr	r3, [r3, #20]
 800237a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	430a      	orrs	r2, r1
 800238a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	69d9      	ldr	r1, [r3, #28]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6a1a      	ldr	r2, [r3, #32]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	430a      	orrs	r2, r1
 800239a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f042 0201 	orr.w	r2, r2, #1
 80023aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2220      	movs	r2, #32
 80023b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b084      	sub	sp, #16
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d005      	beq.n	80023fe <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023f6:	68ba      	ldr	r2, [r7, #8]
 80023f8:	68f9      	ldr	r1, [r7, #12]
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	4798      	blx	r3
  }
}
 80023fe:	bf00      	nop
 8002400:	3710      	adds	r7, #16
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002406:	b480      	push	{r7}
 8002408:	b083      	sub	sp, #12
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
 800240e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002416:	b2db      	uxtb	r3, r3
 8002418:	2b20      	cmp	r3, #32
 800241a:	d138      	bne.n	800248e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002422:	2b01      	cmp	r3, #1
 8002424:	d101      	bne.n	800242a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002426:	2302      	movs	r3, #2
 8002428:	e032      	b.n	8002490 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2201      	movs	r2, #1
 800242e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2224      	movs	r2, #36	; 0x24
 8002436:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f022 0201 	bic.w	r2, r2, #1
 8002448:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002458:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	6819      	ldr	r1, [r3, #0]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	683a      	ldr	r2, [r7, #0]
 8002466:	430a      	orrs	r2, r1
 8002468:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f042 0201 	orr.w	r2, r2, #1
 8002478:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2220      	movs	r2, #32
 800247e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800248a:	2300      	movs	r3, #0
 800248c:	e000      	b.n	8002490 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800248e:	2302      	movs	r3, #2
  }
}
 8002490:	4618      	mov	r0, r3
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800249c:	b480      	push	{r7}
 800249e:	b085      	sub	sp, #20
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	2b20      	cmp	r3, #32
 80024b0:	d139      	bne.n	8002526 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d101      	bne.n	80024c0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80024bc:	2302      	movs	r3, #2
 80024be:	e033      	b.n	8002528 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2224      	movs	r2, #36	; 0x24
 80024cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f022 0201 	bic.w	r2, r2, #1
 80024de:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80024ee:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	021b      	lsls	r3, r3, #8
 80024f4:	68fa      	ldr	r2, [r7, #12]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68fa      	ldr	r2, [r7, #12]
 8002500:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f042 0201 	orr.w	r2, r2, #1
 8002510:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2220      	movs	r2, #32
 8002516:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002522:	2300      	movs	r3, #0
 8002524:	e000      	b.n	8002528 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002526:	2302      	movs	r3, #2
  }
}
 8002528:	4618      	mov	r0, r3
 800252a:	3714      	adds	r7, #20
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002538:	4b04      	ldr	r3, [pc, #16]	; (800254c <HAL_PWREx_GetVoltageRange+0x18>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002540:	4618      	mov	r0, r3
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	40007000 	.word	0x40007000

08002550 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800255e:	d130      	bne.n	80025c2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002560:	4b23      	ldr	r3, [pc, #140]	; (80025f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002568:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800256c:	d038      	beq.n	80025e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800256e:	4b20      	ldr	r3, [pc, #128]	; (80025f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002576:	4a1e      	ldr	r2, [pc, #120]	; (80025f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002578:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800257c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800257e:	4b1d      	ldr	r3, [pc, #116]	; (80025f4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2232      	movs	r2, #50	; 0x32
 8002584:	fb02 f303 	mul.w	r3, r2, r3
 8002588:	4a1b      	ldr	r2, [pc, #108]	; (80025f8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800258a:	fba2 2303 	umull	r2, r3, r2, r3
 800258e:	0c9b      	lsrs	r3, r3, #18
 8002590:	3301      	adds	r3, #1
 8002592:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002594:	e002      	b.n	800259c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	3b01      	subs	r3, #1
 800259a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800259c:	4b14      	ldr	r3, [pc, #80]	; (80025f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800259e:	695b      	ldr	r3, [r3, #20]
 80025a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025a8:	d102      	bne.n	80025b0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d1f2      	bne.n	8002596 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025b0:	4b0f      	ldr	r3, [pc, #60]	; (80025f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025b2:	695b      	ldr	r3, [r3, #20]
 80025b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025bc:	d110      	bne.n	80025e0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e00f      	b.n	80025e2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80025c2:	4b0b      	ldr	r3, [pc, #44]	; (80025f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80025ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025ce:	d007      	beq.n	80025e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80025d0:	4b07      	ldr	r3, [pc, #28]	; (80025f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80025d8:	4a05      	ldr	r2, [pc, #20]	; (80025f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025de:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3714      	adds	r7, #20
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	40007000 	.word	0x40007000
 80025f4:	20000000 	.word	0x20000000
 80025f8:	431bde83 	.word	0x431bde83

080025fc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b088      	sub	sp, #32
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d101      	bne.n	800260e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e3ca      	b.n	8002da4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800260e:	4b97      	ldr	r3, [pc, #604]	; (800286c <HAL_RCC_OscConfig+0x270>)
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f003 030c 	and.w	r3, r3, #12
 8002616:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002618:	4b94      	ldr	r3, [pc, #592]	; (800286c <HAL_RCC_OscConfig+0x270>)
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	f003 0303 	and.w	r3, r3, #3
 8002620:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0310 	and.w	r3, r3, #16
 800262a:	2b00      	cmp	r3, #0
 800262c:	f000 80e4 	beq.w	80027f8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d007      	beq.n	8002646 <HAL_RCC_OscConfig+0x4a>
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	2b0c      	cmp	r3, #12
 800263a:	f040 808b 	bne.w	8002754 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	2b01      	cmp	r3, #1
 8002642:	f040 8087 	bne.w	8002754 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002646:	4b89      	ldr	r3, [pc, #548]	; (800286c <HAL_RCC_OscConfig+0x270>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d005      	beq.n	800265e <HAL_RCC_OscConfig+0x62>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e3a2      	b.n	8002da4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6a1a      	ldr	r2, [r3, #32]
 8002662:	4b82      	ldr	r3, [pc, #520]	; (800286c <HAL_RCC_OscConfig+0x270>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0308 	and.w	r3, r3, #8
 800266a:	2b00      	cmp	r3, #0
 800266c:	d004      	beq.n	8002678 <HAL_RCC_OscConfig+0x7c>
 800266e:	4b7f      	ldr	r3, [pc, #508]	; (800286c <HAL_RCC_OscConfig+0x270>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002676:	e005      	b.n	8002684 <HAL_RCC_OscConfig+0x88>
 8002678:	4b7c      	ldr	r3, [pc, #496]	; (800286c <HAL_RCC_OscConfig+0x270>)
 800267a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800267e:	091b      	lsrs	r3, r3, #4
 8002680:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002684:	4293      	cmp	r3, r2
 8002686:	d223      	bcs.n	80026d0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6a1b      	ldr	r3, [r3, #32]
 800268c:	4618      	mov	r0, r3
 800268e:	f000 fd55 	bl	800313c <RCC_SetFlashLatencyFromMSIRange>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d001      	beq.n	800269c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e383      	b.n	8002da4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800269c:	4b73      	ldr	r3, [pc, #460]	; (800286c <HAL_RCC_OscConfig+0x270>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a72      	ldr	r2, [pc, #456]	; (800286c <HAL_RCC_OscConfig+0x270>)
 80026a2:	f043 0308 	orr.w	r3, r3, #8
 80026a6:	6013      	str	r3, [r2, #0]
 80026a8:	4b70      	ldr	r3, [pc, #448]	; (800286c <HAL_RCC_OscConfig+0x270>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a1b      	ldr	r3, [r3, #32]
 80026b4:	496d      	ldr	r1, [pc, #436]	; (800286c <HAL_RCC_OscConfig+0x270>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026ba:	4b6c      	ldr	r3, [pc, #432]	; (800286c <HAL_RCC_OscConfig+0x270>)
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	69db      	ldr	r3, [r3, #28]
 80026c6:	021b      	lsls	r3, r3, #8
 80026c8:	4968      	ldr	r1, [pc, #416]	; (800286c <HAL_RCC_OscConfig+0x270>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	604b      	str	r3, [r1, #4]
 80026ce:	e025      	b.n	800271c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026d0:	4b66      	ldr	r3, [pc, #408]	; (800286c <HAL_RCC_OscConfig+0x270>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a65      	ldr	r2, [pc, #404]	; (800286c <HAL_RCC_OscConfig+0x270>)
 80026d6:	f043 0308 	orr.w	r3, r3, #8
 80026da:	6013      	str	r3, [r2, #0]
 80026dc:	4b63      	ldr	r3, [pc, #396]	; (800286c <HAL_RCC_OscConfig+0x270>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a1b      	ldr	r3, [r3, #32]
 80026e8:	4960      	ldr	r1, [pc, #384]	; (800286c <HAL_RCC_OscConfig+0x270>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026ee:	4b5f      	ldr	r3, [pc, #380]	; (800286c <HAL_RCC_OscConfig+0x270>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	69db      	ldr	r3, [r3, #28]
 80026fa:	021b      	lsls	r3, r3, #8
 80026fc:	495b      	ldr	r1, [pc, #364]	; (800286c <HAL_RCC_OscConfig+0x270>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d109      	bne.n	800271c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a1b      	ldr	r3, [r3, #32]
 800270c:	4618      	mov	r0, r3
 800270e:	f000 fd15 	bl	800313c <RCC_SetFlashLatencyFromMSIRange>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d001      	beq.n	800271c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e343      	b.n	8002da4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800271c:	f000 fc4a 	bl	8002fb4 <HAL_RCC_GetSysClockFreq>
 8002720:	4602      	mov	r2, r0
 8002722:	4b52      	ldr	r3, [pc, #328]	; (800286c <HAL_RCC_OscConfig+0x270>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	091b      	lsrs	r3, r3, #4
 8002728:	f003 030f 	and.w	r3, r3, #15
 800272c:	4950      	ldr	r1, [pc, #320]	; (8002870 <HAL_RCC_OscConfig+0x274>)
 800272e:	5ccb      	ldrb	r3, [r1, r3]
 8002730:	f003 031f 	and.w	r3, r3, #31
 8002734:	fa22 f303 	lsr.w	r3, r2, r3
 8002738:	4a4e      	ldr	r2, [pc, #312]	; (8002874 <HAL_RCC_OscConfig+0x278>)
 800273a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800273c:	4b4e      	ldr	r3, [pc, #312]	; (8002878 <HAL_RCC_OscConfig+0x27c>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4618      	mov	r0, r3
 8002742:	f7ff f9cb 	bl	8001adc <HAL_InitTick>
 8002746:	4603      	mov	r3, r0
 8002748:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800274a:	7bfb      	ldrb	r3, [r7, #15]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d052      	beq.n	80027f6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002750:	7bfb      	ldrb	r3, [r7, #15]
 8002752:	e327      	b.n	8002da4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	699b      	ldr	r3, [r3, #24]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d032      	beq.n	80027c2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800275c:	4b43      	ldr	r3, [pc, #268]	; (800286c <HAL_RCC_OscConfig+0x270>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a42      	ldr	r2, [pc, #264]	; (800286c <HAL_RCC_OscConfig+0x270>)
 8002762:	f043 0301 	orr.w	r3, r3, #1
 8002766:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002768:	f7ff fa08 	bl	8001b7c <HAL_GetTick>
 800276c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800276e:	e008      	b.n	8002782 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002770:	f7ff fa04 	bl	8001b7c <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e310      	b.n	8002da4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002782:	4b3a      	ldr	r3, [pc, #232]	; (800286c <HAL_RCC_OscConfig+0x270>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d0f0      	beq.n	8002770 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800278e:	4b37      	ldr	r3, [pc, #220]	; (800286c <HAL_RCC_OscConfig+0x270>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a36      	ldr	r2, [pc, #216]	; (800286c <HAL_RCC_OscConfig+0x270>)
 8002794:	f043 0308 	orr.w	r3, r3, #8
 8002798:	6013      	str	r3, [r2, #0]
 800279a:	4b34      	ldr	r3, [pc, #208]	; (800286c <HAL_RCC_OscConfig+0x270>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a1b      	ldr	r3, [r3, #32]
 80027a6:	4931      	ldr	r1, [pc, #196]	; (800286c <HAL_RCC_OscConfig+0x270>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027ac:	4b2f      	ldr	r3, [pc, #188]	; (800286c <HAL_RCC_OscConfig+0x270>)
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	69db      	ldr	r3, [r3, #28]
 80027b8:	021b      	lsls	r3, r3, #8
 80027ba:	492c      	ldr	r1, [pc, #176]	; (800286c <HAL_RCC_OscConfig+0x270>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	604b      	str	r3, [r1, #4]
 80027c0:	e01a      	b.n	80027f8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80027c2:	4b2a      	ldr	r3, [pc, #168]	; (800286c <HAL_RCC_OscConfig+0x270>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a29      	ldr	r2, [pc, #164]	; (800286c <HAL_RCC_OscConfig+0x270>)
 80027c8:	f023 0301 	bic.w	r3, r3, #1
 80027cc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80027ce:	f7ff f9d5 	bl	8001b7c <HAL_GetTick>
 80027d2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027d4:	e008      	b.n	80027e8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027d6:	f7ff f9d1 	bl	8001b7c <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d901      	bls.n	80027e8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e2dd      	b.n	8002da4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027e8:	4b20      	ldr	r3, [pc, #128]	; (800286c <HAL_RCC_OscConfig+0x270>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0302 	and.w	r3, r3, #2
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d1f0      	bne.n	80027d6 <HAL_RCC_OscConfig+0x1da>
 80027f4:	e000      	b.n	80027f8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027f6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0301 	and.w	r3, r3, #1
 8002800:	2b00      	cmp	r3, #0
 8002802:	d074      	beq.n	80028ee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	2b08      	cmp	r3, #8
 8002808:	d005      	beq.n	8002816 <HAL_RCC_OscConfig+0x21a>
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	2b0c      	cmp	r3, #12
 800280e:	d10e      	bne.n	800282e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	2b03      	cmp	r3, #3
 8002814:	d10b      	bne.n	800282e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002816:	4b15      	ldr	r3, [pc, #84]	; (800286c <HAL_RCC_OscConfig+0x270>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d064      	beq.n	80028ec <HAL_RCC_OscConfig+0x2f0>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d160      	bne.n	80028ec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e2ba      	b.n	8002da4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002836:	d106      	bne.n	8002846 <HAL_RCC_OscConfig+0x24a>
 8002838:	4b0c      	ldr	r3, [pc, #48]	; (800286c <HAL_RCC_OscConfig+0x270>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a0b      	ldr	r2, [pc, #44]	; (800286c <HAL_RCC_OscConfig+0x270>)
 800283e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002842:	6013      	str	r3, [r2, #0]
 8002844:	e026      	b.n	8002894 <HAL_RCC_OscConfig+0x298>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800284e:	d115      	bne.n	800287c <HAL_RCC_OscConfig+0x280>
 8002850:	4b06      	ldr	r3, [pc, #24]	; (800286c <HAL_RCC_OscConfig+0x270>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a05      	ldr	r2, [pc, #20]	; (800286c <HAL_RCC_OscConfig+0x270>)
 8002856:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800285a:	6013      	str	r3, [r2, #0]
 800285c:	4b03      	ldr	r3, [pc, #12]	; (800286c <HAL_RCC_OscConfig+0x270>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a02      	ldr	r2, [pc, #8]	; (800286c <HAL_RCC_OscConfig+0x270>)
 8002862:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002866:	6013      	str	r3, [r2, #0]
 8002868:	e014      	b.n	8002894 <HAL_RCC_OscConfig+0x298>
 800286a:	bf00      	nop
 800286c:	40021000 	.word	0x40021000
 8002870:	0800a7c0 	.word	0x0800a7c0
 8002874:	20000000 	.word	0x20000000
 8002878:	20000004 	.word	0x20000004
 800287c:	4ba0      	ldr	r3, [pc, #640]	; (8002b00 <HAL_RCC_OscConfig+0x504>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a9f      	ldr	r2, [pc, #636]	; (8002b00 <HAL_RCC_OscConfig+0x504>)
 8002882:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002886:	6013      	str	r3, [r2, #0]
 8002888:	4b9d      	ldr	r3, [pc, #628]	; (8002b00 <HAL_RCC_OscConfig+0x504>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a9c      	ldr	r2, [pc, #624]	; (8002b00 <HAL_RCC_OscConfig+0x504>)
 800288e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002892:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d013      	beq.n	80028c4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289c:	f7ff f96e 	bl	8001b7c <HAL_GetTick>
 80028a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028a2:	e008      	b.n	80028b6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028a4:	f7ff f96a 	bl	8001b7c <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b64      	cmp	r3, #100	; 0x64
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e276      	b.n	8002da4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028b6:	4b92      	ldr	r3, [pc, #584]	; (8002b00 <HAL_RCC_OscConfig+0x504>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d0f0      	beq.n	80028a4 <HAL_RCC_OscConfig+0x2a8>
 80028c2:	e014      	b.n	80028ee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c4:	f7ff f95a 	bl	8001b7c <HAL_GetTick>
 80028c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028ca:	e008      	b.n	80028de <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028cc:	f7ff f956 	bl	8001b7c <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b64      	cmp	r3, #100	; 0x64
 80028d8:	d901      	bls.n	80028de <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e262      	b.n	8002da4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028de:	4b88      	ldr	r3, [pc, #544]	; (8002b00 <HAL_RCC_OscConfig+0x504>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1f0      	bne.n	80028cc <HAL_RCC_OscConfig+0x2d0>
 80028ea:	e000      	b.n	80028ee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d060      	beq.n	80029bc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	2b04      	cmp	r3, #4
 80028fe:	d005      	beq.n	800290c <HAL_RCC_OscConfig+0x310>
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	2b0c      	cmp	r3, #12
 8002904:	d119      	bne.n	800293a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	2b02      	cmp	r3, #2
 800290a:	d116      	bne.n	800293a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800290c:	4b7c      	ldr	r3, [pc, #496]	; (8002b00 <HAL_RCC_OscConfig+0x504>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002914:	2b00      	cmp	r3, #0
 8002916:	d005      	beq.n	8002924 <HAL_RCC_OscConfig+0x328>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d101      	bne.n	8002924 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e23f      	b.n	8002da4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002924:	4b76      	ldr	r3, [pc, #472]	; (8002b00 <HAL_RCC_OscConfig+0x504>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	061b      	lsls	r3, r3, #24
 8002932:	4973      	ldr	r1, [pc, #460]	; (8002b00 <HAL_RCC_OscConfig+0x504>)
 8002934:	4313      	orrs	r3, r2
 8002936:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002938:	e040      	b.n	80029bc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d023      	beq.n	800298a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002942:	4b6f      	ldr	r3, [pc, #444]	; (8002b00 <HAL_RCC_OscConfig+0x504>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a6e      	ldr	r2, [pc, #440]	; (8002b00 <HAL_RCC_OscConfig+0x504>)
 8002948:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800294c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800294e:	f7ff f915 	bl	8001b7c <HAL_GetTick>
 8002952:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002954:	e008      	b.n	8002968 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002956:	f7ff f911 	bl	8001b7c <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	2b02      	cmp	r3, #2
 8002962:	d901      	bls.n	8002968 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e21d      	b.n	8002da4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002968:	4b65      	ldr	r3, [pc, #404]	; (8002b00 <HAL_RCC_OscConfig+0x504>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002970:	2b00      	cmp	r3, #0
 8002972:	d0f0      	beq.n	8002956 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002974:	4b62      	ldr	r3, [pc, #392]	; (8002b00 <HAL_RCC_OscConfig+0x504>)
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	691b      	ldr	r3, [r3, #16]
 8002980:	061b      	lsls	r3, r3, #24
 8002982:	495f      	ldr	r1, [pc, #380]	; (8002b00 <HAL_RCC_OscConfig+0x504>)
 8002984:	4313      	orrs	r3, r2
 8002986:	604b      	str	r3, [r1, #4]
 8002988:	e018      	b.n	80029bc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800298a:	4b5d      	ldr	r3, [pc, #372]	; (8002b00 <HAL_RCC_OscConfig+0x504>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a5c      	ldr	r2, [pc, #368]	; (8002b00 <HAL_RCC_OscConfig+0x504>)
 8002990:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002994:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002996:	f7ff f8f1 	bl	8001b7c <HAL_GetTick>
 800299a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800299c:	e008      	b.n	80029b0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800299e:	f7ff f8ed 	bl	8001b7c <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d901      	bls.n	80029b0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e1f9      	b.n	8002da4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029b0:	4b53      	ldr	r3, [pc, #332]	; (8002b00 <HAL_RCC_OscConfig+0x504>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1f0      	bne.n	800299e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0308 	and.w	r3, r3, #8
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d03c      	beq.n	8002a42 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	695b      	ldr	r3, [r3, #20]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d01c      	beq.n	8002a0a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029d0:	4b4b      	ldr	r3, [pc, #300]	; (8002b00 <HAL_RCC_OscConfig+0x504>)
 80029d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029d6:	4a4a      	ldr	r2, [pc, #296]	; (8002b00 <HAL_RCC_OscConfig+0x504>)
 80029d8:	f043 0301 	orr.w	r3, r3, #1
 80029dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e0:	f7ff f8cc 	bl	8001b7c <HAL_GetTick>
 80029e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029e6:	e008      	b.n	80029fa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029e8:	f7ff f8c8 	bl	8001b7c <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e1d4      	b.n	8002da4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029fa:	4b41      	ldr	r3, [pc, #260]	; (8002b00 <HAL_RCC_OscConfig+0x504>)
 80029fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d0ef      	beq.n	80029e8 <HAL_RCC_OscConfig+0x3ec>
 8002a08:	e01b      	b.n	8002a42 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a0a:	4b3d      	ldr	r3, [pc, #244]	; (8002b00 <HAL_RCC_OscConfig+0x504>)
 8002a0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a10:	4a3b      	ldr	r2, [pc, #236]	; (8002b00 <HAL_RCC_OscConfig+0x504>)
 8002a12:	f023 0301 	bic.w	r3, r3, #1
 8002a16:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a1a:	f7ff f8af 	bl	8001b7c <HAL_GetTick>
 8002a1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a20:	e008      	b.n	8002a34 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a22:	f7ff f8ab 	bl	8001b7c <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d901      	bls.n	8002a34 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e1b7      	b.n	8002da4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a34:	4b32      	ldr	r3, [pc, #200]	; (8002b00 <HAL_RCC_OscConfig+0x504>)
 8002a36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a3a:	f003 0302 	and.w	r3, r3, #2
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d1ef      	bne.n	8002a22 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0304 	and.w	r3, r3, #4
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	f000 80a6 	beq.w	8002b9c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a50:	2300      	movs	r3, #0
 8002a52:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002a54:	4b2a      	ldr	r3, [pc, #168]	; (8002b00 <HAL_RCC_OscConfig+0x504>)
 8002a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d10d      	bne.n	8002a7c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a60:	4b27      	ldr	r3, [pc, #156]	; (8002b00 <HAL_RCC_OscConfig+0x504>)
 8002a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a64:	4a26      	ldr	r2, [pc, #152]	; (8002b00 <HAL_RCC_OscConfig+0x504>)
 8002a66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a6a:	6593      	str	r3, [r2, #88]	; 0x58
 8002a6c:	4b24      	ldr	r3, [pc, #144]	; (8002b00 <HAL_RCC_OscConfig+0x504>)
 8002a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a74:	60bb      	str	r3, [r7, #8]
 8002a76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a7c:	4b21      	ldr	r3, [pc, #132]	; (8002b04 <HAL_RCC_OscConfig+0x508>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d118      	bne.n	8002aba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a88:	4b1e      	ldr	r3, [pc, #120]	; (8002b04 <HAL_RCC_OscConfig+0x508>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a1d      	ldr	r2, [pc, #116]	; (8002b04 <HAL_RCC_OscConfig+0x508>)
 8002a8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a92:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a94:	f7ff f872 	bl	8001b7c <HAL_GetTick>
 8002a98:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a9a:	e008      	b.n	8002aae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a9c:	f7ff f86e 	bl	8001b7c <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e17a      	b.n	8002da4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002aae:	4b15      	ldr	r3, [pc, #84]	; (8002b04 <HAL_RCC_OscConfig+0x508>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d0f0      	beq.n	8002a9c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d108      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x4d8>
 8002ac2:	4b0f      	ldr	r3, [pc, #60]	; (8002b00 <HAL_RCC_OscConfig+0x504>)
 8002ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ac8:	4a0d      	ldr	r2, [pc, #52]	; (8002b00 <HAL_RCC_OscConfig+0x504>)
 8002aca:	f043 0301 	orr.w	r3, r3, #1
 8002ace:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ad2:	e029      	b.n	8002b28 <HAL_RCC_OscConfig+0x52c>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	2b05      	cmp	r3, #5
 8002ada:	d115      	bne.n	8002b08 <HAL_RCC_OscConfig+0x50c>
 8002adc:	4b08      	ldr	r3, [pc, #32]	; (8002b00 <HAL_RCC_OscConfig+0x504>)
 8002ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ae2:	4a07      	ldr	r2, [pc, #28]	; (8002b00 <HAL_RCC_OscConfig+0x504>)
 8002ae4:	f043 0304 	orr.w	r3, r3, #4
 8002ae8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002aec:	4b04      	ldr	r3, [pc, #16]	; (8002b00 <HAL_RCC_OscConfig+0x504>)
 8002aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002af2:	4a03      	ldr	r2, [pc, #12]	; (8002b00 <HAL_RCC_OscConfig+0x504>)
 8002af4:	f043 0301 	orr.w	r3, r3, #1
 8002af8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002afc:	e014      	b.n	8002b28 <HAL_RCC_OscConfig+0x52c>
 8002afe:	bf00      	nop
 8002b00:	40021000 	.word	0x40021000
 8002b04:	40007000 	.word	0x40007000
 8002b08:	4b9c      	ldr	r3, [pc, #624]	; (8002d7c <HAL_RCC_OscConfig+0x780>)
 8002b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b0e:	4a9b      	ldr	r2, [pc, #620]	; (8002d7c <HAL_RCC_OscConfig+0x780>)
 8002b10:	f023 0301 	bic.w	r3, r3, #1
 8002b14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b18:	4b98      	ldr	r3, [pc, #608]	; (8002d7c <HAL_RCC_OscConfig+0x780>)
 8002b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b1e:	4a97      	ldr	r2, [pc, #604]	; (8002d7c <HAL_RCC_OscConfig+0x780>)
 8002b20:	f023 0304 	bic.w	r3, r3, #4
 8002b24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d016      	beq.n	8002b5e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b30:	f7ff f824 	bl	8001b7c <HAL_GetTick>
 8002b34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b36:	e00a      	b.n	8002b4e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b38:	f7ff f820 	bl	8001b7c <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e12a      	b.n	8002da4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b4e:	4b8b      	ldr	r3, [pc, #556]	; (8002d7c <HAL_RCC_OscConfig+0x780>)
 8002b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b54:	f003 0302 	and.w	r3, r3, #2
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d0ed      	beq.n	8002b38 <HAL_RCC_OscConfig+0x53c>
 8002b5c:	e015      	b.n	8002b8a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b5e:	f7ff f80d 	bl	8001b7c <HAL_GetTick>
 8002b62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b64:	e00a      	b.n	8002b7c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b66:	f7ff f809 	bl	8001b7c <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d901      	bls.n	8002b7c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e113      	b.n	8002da4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b7c:	4b7f      	ldr	r3, [pc, #508]	; (8002d7c <HAL_RCC_OscConfig+0x780>)
 8002b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d1ed      	bne.n	8002b66 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b8a:	7ffb      	ldrb	r3, [r7, #31]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d105      	bne.n	8002b9c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b90:	4b7a      	ldr	r3, [pc, #488]	; (8002d7c <HAL_RCC_OscConfig+0x780>)
 8002b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b94:	4a79      	ldr	r2, [pc, #484]	; (8002d7c <HAL_RCC_OscConfig+0x780>)
 8002b96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b9a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	f000 80fe 	beq.w	8002da2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	f040 80d0 	bne.w	8002d50 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002bb0:	4b72      	ldr	r3, [pc, #456]	; (8002d7c <HAL_RCC_OscConfig+0x780>)
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	f003 0203 	and.w	r2, r3, #3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d130      	bne.n	8002c26 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d127      	bne.n	8002c26 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002be0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d11f      	bne.n	8002c26 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002bf0:	2a07      	cmp	r2, #7
 8002bf2:	bf14      	ite	ne
 8002bf4:	2201      	movne	r2, #1
 8002bf6:	2200      	moveq	r2, #0
 8002bf8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d113      	bne.n	8002c26 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c08:	085b      	lsrs	r3, r3, #1
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d109      	bne.n	8002c26 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1c:	085b      	lsrs	r3, r3, #1
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d06e      	beq.n	8002d04 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	2b0c      	cmp	r3, #12
 8002c2a:	d069      	beq.n	8002d00 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002c2c:	4b53      	ldr	r3, [pc, #332]	; (8002d7c <HAL_RCC_OscConfig+0x780>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d105      	bne.n	8002c44 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002c38:	4b50      	ldr	r3, [pc, #320]	; (8002d7c <HAL_RCC_OscConfig+0x780>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d001      	beq.n	8002c48 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e0ad      	b.n	8002da4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002c48:	4b4c      	ldr	r3, [pc, #304]	; (8002d7c <HAL_RCC_OscConfig+0x780>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a4b      	ldr	r2, [pc, #300]	; (8002d7c <HAL_RCC_OscConfig+0x780>)
 8002c4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c52:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c54:	f7fe ff92 	bl	8001b7c <HAL_GetTick>
 8002c58:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c5a:	e008      	b.n	8002c6e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c5c:	f7fe ff8e 	bl	8001b7c <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e09a      	b.n	8002da4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c6e:	4b43      	ldr	r3, [pc, #268]	; (8002d7c <HAL_RCC_OscConfig+0x780>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d1f0      	bne.n	8002c5c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c7a:	4b40      	ldr	r3, [pc, #256]	; (8002d7c <HAL_RCC_OscConfig+0x780>)
 8002c7c:	68da      	ldr	r2, [r3, #12]
 8002c7e:	4b40      	ldr	r3, [pc, #256]	; (8002d80 <HAL_RCC_OscConfig+0x784>)
 8002c80:	4013      	ands	r3, r2
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002c8a:	3a01      	subs	r2, #1
 8002c8c:	0112      	lsls	r2, r2, #4
 8002c8e:	4311      	orrs	r1, r2
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c94:	0212      	lsls	r2, r2, #8
 8002c96:	4311      	orrs	r1, r2
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002c9c:	0852      	lsrs	r2, r2, #1
 8002c9e:	3a01      	subs	r2, #1
 8002ca0:	0552      	lsls	r2, r2, #21
 8002ca2:	4311      	orrs	r1, r2
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002ca8:	0852      	lsrs	r2, r2, #1
 8002caa:	3a01      	subs	r2, #1
 8002cac:	0652      	lsls	r2, r2, #25
 8002cae:	4311      	orrs	r1, r2
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002cb4:	0912      	lsrs	r2, r2, #4
 8002cb6:	0452      	lsls	r2, r2, #17
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	4930      	ldr	r1, [pc, #192]	; (8002d7c <HAL_RCC_OscConfig+0x780>)
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002cc0:	4b2e      	ldr	r3, [pc, #184]	; (8002d7c <HAL_RCC_OscConfig+0x780>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a2d      	ldr	r2, [pc, #180]	; (8002d7c <HAL_RCC_OscConfig+0x780>)
 8002cc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ccc:	4b2b      	ldr	r3, [pc, #172]	; (8002d7c <HAL_RCC_OscConfig+0x780>)
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	4a2a      	ldr	r2, [pc, #168]	; (8002d7c <HAL_RCC_OscConfig+0x780>)
 8002cd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cd6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002cd8:	f7fe ff50 	bl	8001b7c <HAL_GetTick>
 8002cdc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cde:	e008      	b.n	8002cf2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ce0:	f7fe ff4c 	bl	8001b7c <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e058      	b.n	8002da4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cf2:	4b22      	ldr	r3, [pc, #136]	; (8002d7c <HAL_RCC_OscConfig+0x780>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d0f0      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cfe:	e050      	b.n	8002da2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e04f      	b.n	8002da4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d04:	4b1d      	ldr	r3, [pc, #116]	; (8002d7c <HAL_RCC_OscConfig+0x780>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d148      	bne.n	8002da2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002d10:	4b1a      	ldr	r3, [pc, #104]	; (8002d7c <HAL_RCC_OscConfig+0x780>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a19      	ldr	r2, [pc, #100]	; (8002d7c <HAL_RCC_OscConfig+0x780>)
 8002d16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d1a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d1c:	4b17      	ldr	r3, [pc, #92]	; (8002d7c <HAL_RCC_OscConfig+0x780>)
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	4a16      	ldr	r2, [pc, #88]	; (8002d7c <HAL_RCC_OscConfig+0x780>)
 8002d22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d26:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d28:	f7fe ff28 	bl	8001b7c <HAL_GetTick>
 8002d2c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d2e:	e008      	b.n	8002d42 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d30:	f7fe ff24 	bl	8001b7c <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e030      	b.n	8002da4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d42:	4b0e      	ldr	r3, [pc, #56]	; (8002d7c <HAL_RCC_OscConfig+0x780>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d0f0      	beq.n	8002d30 <HAL_RCC_OscConfig+0x734>
 8002d4e:	e028      	b.n	8002da2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	2b0c      	cmp	r3, #12
 8002d54:	d023      	beq.n	8002d9e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d56:	4b09      	ldr	r3, [pc, #36]	; (8002d7c <HAL_RCC_OscConfig+0x780>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a08      	ldr	r2, [pc, #32]	; (8002d7c <HAL_RCC_OscConfig+0x780>)
 8002d5c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d62:	f7fe ff0b 	bl	8001b7c <HAL_GetTick>
 8002d66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d68:	e00c      	b.n	8002d84 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d6a:	f7fe ff07 	bl	8001b7c <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d905      	bls.n	8002d84 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e013      	b.n	8002da4 <HAL_RCC_OscConfig+0x7a8>
 8002d7c:	40021000 	.word	0x40021000
 8002d80:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d84:	4b09      	ldr	r3, [pc, #36]	; (8002dac <HAL_RCC_OscConfig+0x7b0>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d1ec      	bne.n	8002d6a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002d90:	4b06      	ldr	r3, [pc, #24]	; (8002dac <HAL_RCC_OscConfig+0x7b0>)
 8002d92:	68da      	ldr	r2, [r3, #12]
 8002d94:	4905      	ldr	r1, [pc, #20]	; (8002dac <HAL_RCC_OscConfig+0x7b0>)
 8002d96:	4b06      	ldr	r3, [pc, #24]	; (8002db0 <HAL_RCC_OscConfig+0x7b4>)
 8002d98:	4013      	ands	r3, r2
 8002d9a:	60cb      	str	r3, [r1, #12]
 8002d9c:	e001      	b.n	8002da2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e000      	b.n	8002da4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3720      	adds	r7, #32
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	40021000 	.word	0x40021000
 8002db0:	feeefffc 	.word	0xfeeefffc

08002db4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d101      	bne.n	8002dc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e0e7      	b.n	8002f98 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002dc8:	4b75      	ldr	r3, [pc, #468]	; (8002fa0 <HAL_RCC_ClockConfig+0x1ec>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0307 	and.w	r3, r3, #7
 8002dd0:	683a      	ldr	r2, [r7, #0]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d910      	bls.n	8002df8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dd6:	4b72      	ldr	r3, [pc, #456]	; (8002fa0 <HAL_RCC_ClockConfig+0x1ec>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f023 0207 	bic.w	r2, r3, #7
 8002dde:	4970      	ldr	r1, [pc, #448]	; (8002fa0 <HAL_RCC_ClockConfig+0x1ec>)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002de6:	4b6e      	ldr	r3, [pc, #440]	; (8002fa0 <HAL_RCC_ClockConfig+0x1ec>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0307 	and.w	r3, r3, #7
 8002dee:	683a      	ldr	r2, [r7, #0]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d001      	beq.n	8002df8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e0cf      	b.n	8002f98 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0302 	and.w	r3, r3, #2
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d010      	beq.n	8002e26 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	689a      	ldr	r2, [r3, #8]
 8002e08:	4b66      	ldr	r3, [pc, #408]	; (8002fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d908      	bls.n	8002e26 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e14:	4b63      	ldr	r3, [pc, #396]	; (8002fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	4960      	ldr	r1, [pc, #384]	; (8002fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d04c      	beq.n	8002ecc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	2b03      	cmp	r3, #3
 8002e38:	d107      	bne.n	8002e4a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e3a:	4b5a      	ldr	r3, [pc, #360]	; (8002fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d121      	bne.n	8002e8a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e0a6      	b.n	8002f98 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d107      	bne.n	8002e62 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e52:	4b54      	ldr	r3, [pc, #336]	; (8002fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d115      	bne.n	8002e8a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e09a      	b.n	8002f98 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d107      	bne.n	8002e7a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e6a:	4b4e      	ldr	r3, [pc, #312]	; (8002fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d109      	bne.n	8002e8a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e08e      	b.n	8002f98 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e7a:	4b4a      	ldr	r3, [pc, #296]	; (8002fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e086      	b.n	8002f98 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e8a:	4b46      	ldr	r3, [pc, #280]	; (8002fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f023 0203 	bic.w	r2, r3, #3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	4943      	ldr	r1, [pc, #268]	; (8002fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e9c:	f7fe fe6e 	bl	8001b7c <HAL_GetTick>
 8002ea0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ea2:	e00a      	b.n	8002eba <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ea4:	f7fe fe6a 	bl	8001b7c <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e06e      	b.n	8002f98 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eba:	4b3a      	ldr	r3, [pc, #232]	; (8002fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f003 020c 	and.w	r2, r3, #12
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d1eb      	bne.n	8002ea4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d010      	beq.n	8002efa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689a      	ldr	r2, [r3, #8]
 8002edc:	4b31      	ldr	r3, [pc, #196]	; (8002fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d208      	bcs.n	8002efa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ee8:	4b2e      	ldr	r3, [pc, #184]	; (8002fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	492b      	ldr	r1, [pc, #172]	; (8002fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002efa:	4b29      	ldr	r3, [pc, #164]	; (8002fa0 <HAL_RCC_ClockConfig+0x1ec>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0307 	and.w	r3, r3, #7
 8002f02:	683a      	ldr	r2, [r7, #0]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d210      	bcs.n	8002f2a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f08:	4b25      	ldr	r3, [pc, #148]	; (8002fa0 <HAL_RCC_ClockConfig+0x1ec>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f023 0207 	bic.w	r2, r3, #7
 8002f10:	4923      	ldr	r1, [pc, #140]	; (8002fa0 <HAL_RCC_ClockConfig+0x1ec>)
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f18:	4b21      	ldr	r3, [pc, #132]	; (8002fa0 <HAL_RCC_ClockConfig+0x1ec>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0307 	and.w	r3, r3, #7
 8002f20:	683a      	ldr	r2, [r7, #0]
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d001      	beq.n	8002f2a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e036      	b.n	8002f98 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0304 	and.w	r3, r3, #4
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d008      	beq.n	8002f48 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f36:	4b1b      	ldr	r3, [pc, #108]	; (8002fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	4918      	ldr	r1, [pc, #96]	; (8002fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0308 	and.w	r3, r3, #8
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d009      	beq.n	8002f68 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f54:	4b13      	ldr	r3, [pc, #76]	; (8002fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	691b      	ldr	r3, [r3, #16]
 8002f60:	00db      	lsls	r3, r3, #3
 8002f62:	4910      	ldr	r1, [pc, #64]	; (8002fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f68:	f000 f824 	bl	8002fb4 <HAL_RCC_GetSysClockFreq>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	4b0d      	ldr	r3, [pc, #52]	; (8002fa4 <HAL_RCC_ClockConfig+0x1f0>)
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	091b      	lsrs	r3, r3, #4
 8002f74:	f003 030f 	and.w	r3, r3, #15
 8002f78:	490b      	ldr	r1, [pc, #44]	; (8002fa8 <HAL_RCC_ClockConfig+0x1f4>)
 8002f7a:	5ccb      	ldrb	r3, [r1, r3]
 8002f7c:	f003 031f 	and.w	r3, r3, #31
 8002f80:	fa22 f303 	lsr.w	r3, r2, r3
 8002f84:	4a09      	ldr	r2, [pc, #36]	; (8002fac <HAL_RCC_ClockConfig+0x1f8>)
 8002f86:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002f88:	4b09      	ldr	r3, [pc, #36]	; (8002fb0 <HAL_RCC_ClockConfig+0x1fc>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7fe fda5 	bl	8001adc <HAL_InitTick>
 8002f92:	4603      	mov	r3, r0
 8002f94:	72fb      	strb	r3, [r7, #11]

  return status;
 8002f96:	7afb      	ldrb	r3, [r7, #11]
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3710      	adds	r7, #16
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	40022000 	.word	0x40022000
 8002fa4:	40021000 	.word	0x40021000
 8002fa8:	0800a7c0 	.word	0x0800a7c0
 8002fac:	20000000 	.word	0x20000000
 8002fb0:	20000004 	.word	0x20000004

08002fb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b089      	sub	sp, #36	; 0x24
 8002fb8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	61fb      	str	r3, [r7, #28]
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fc2:	4b3e      	ldr	r3, [pc, #248]	; (80030bc <HAL_RCC_GetSysClockFreq+0x108>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f003 030c 	and.w	r3, r3, #12
 8002fca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fcc:	4b3b      	ldr	r3, [pc, #236]	; (80030bc <HAL_RCC_GetSysClockFreq+0x108>)
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	f003 0303 	and.w	r3, r3, #3
 8002fd4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d005      	beq.n	8002fe8 <HAL_RCC_GetSysClockFreq+0x34>
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	2b0c      	cmp	r3, #12
 8002fe0:	d121      	bne.n	8003026 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d11e      	bne.n	8003026 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002fe8:	4b34      	ldr	r3, [pc, #208]	; (80030bc <HAL_RCC_GetSysClockFreq+0x108>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0308 	and.w	r3, r3, #8
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d107      	bne.n	8003004 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ff4:	4b31      	ldr	r3, [pc, #196]	; (80030bc <HAL_RCC_GetSysClockFreq+0x108>)
 8002ff6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ffa:	0a1b      	lsrs	r3, r3, #8
 8002ffc:	f003 030f 	and.w	r3, r3, #15
 8003000:	61fb      	str	r3, [r7, #28]
 8003002:	e005      	b.n	8003010 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003004:	4b2d      	ldr	r3, [pc, #180]	; (80030bc <HAL_RCC_GetSysClockFreq+0x108>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	091b      	lsrs	r3, r3, #4
 800300a:	f003 030f 	and.w	r3, r3, #15
 800300e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003010:	4a2b      	ldr	r2, [pc, #172]	; (80030c0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003018:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d10d      	bne.n	800303c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003024:	e00a      	b.n	800303c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	2b04      	cmp	r3, #4
 800302a:	d102      	bne.n	8003032 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800302c:	4b25      	ldr	r3, [pc, #148]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800302e:	61bb      	str	r3, [r7, #24]
 8003030:	e004      	b.n	800303c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	2b08      	cmp	r3, #8
 8003036:	d101      	bne.n	800303c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003038:	4b23      	ldr	r3, [pc, #140]	; (80030c8 <HAL_RCC_GetSysClockFreq+0x114>)
 800303a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	2b0c      	cmp	r3, #12
 8003040:	d134      	bne.n	80030ac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003042:	4b1e      	ldr	r3, [pc, #120]	; (80030bc <HAL_RCC_GetSysClockFreq+0x108>)
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	f003 0303 	and.w	r3, r3, #3
 800304a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	2b02      	cmp	r3, #2
 8003050:	d003      	beq.n	800305a <HAL_RCC_GetSysClockFreq+0xa6>
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	2b03      	cmp	r3, #3
 8003056:	d003      	beq.n	8003060 <HAL_RCC_GetSysClockFreq+0xac>
 8003058:	e005      	b.n	8003066 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800305a:	4b1a      	ldr	r3, [pc, #104]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800305c:	617b      	str	r3, [r7, #20]
      break;
 800305e:	e005      	b.n	800306c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003060:	4b19      	ldr	r3, [pc, #100]	; (80030c8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003062:	617b      	str	r3, [r7, #20]
      break;
 8003064:	e002      	b.n	800306c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	617b      	str	r3, [r7, #20]
      break;
 800306a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800306c:	4b13      	ldr	r3, [pc, #76]	; (80030bc <HAL_RCC_GetSysClockFreq+0x108>)
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	091b      	lsrs	r3, r3, #4
 8003072:	f003 0307 	and.w	r3, r3, #7
 8003076:	3301      	adds	r3, #1
 8003078:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800307a:	4b10      	ldr	r3, [pc, #64]	; (80030bc <HAL_RCC_GetSysClockFreq+0x108>)
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	0a1b      	lsrs	r3, r3, #8
 8003080:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003084:	697a      	ldr	r2, [r7, #20]
 8003086:	fb03 f202 	mul.w	r2, r3, r2
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003090:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003092:	4b0a      	ldr	r3, [pc, #40]	; (80030bc <HAL_RCC_GetSysClockFreq+0x108>)
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	0e5b      	lsrs	r3, r3, #25
 8003098:	f003 0303 	and.w	r3, r3, #3
 800309c:	3301      	adds	r3, #1
 800309e:	005b      	lsls	r3, r3, #1
 80030a0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030aa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80030ac:	69bb      	ldr	r3, [r7, #24]
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3724      	adds	r7, #36	; 0x24
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	40021000 	.word	0x40021000
 80030c0:	0800a7d8 	.word	0x0800a7d8
 80030c4:	00f42400 	.word	0x00f42400
 80030c8:	007a1200 	.word	0x007a1200

080030cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030d0:	4b03      	ldr	r3, [pc, #12]	; (80030e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80030d2:	681b      	ldr	r3, [r3, #0]
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	20000000 	.word	0x20000000

080030e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80030e8:	f7ff fff0 	bl	80030cc <HAL_RCC_GetHCLKFreq>
 80030ec:	4602      	mov	r2, r0
 80030ee:	4b06      	ldr	r3, [pc, #24]	; (8003108 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	0a1b      	lsrs	r3, r3, #8
 80030f4:	f003 0307 	and.w	r3, r3, #7
 80030f8:	4904      	ldr	r1, [pc, #16]	; (800310c <HAL_RCC_GetPCLK1Freq+0x28>)
 80030fa:	5ccb      	ldrb	r3, [r1, r3]
 80030fc:	f003 031f 	and.w	r3, r3, #31
 8003100:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003104:	4618      	mov	r0, r3
 8003106:	bd80      	pop	{r7, pc}
 8003108:	40021000 	.word	0x40021000
 800310c:	0800a7d0 	.word	0x0800a7d0

08003110 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003114:	f7ff ffda 	bl	80030cc <HAL_RCC_GetHCLKFreq>
 8003118:	4602      	mov	r2, r0
 800311a:	4b06      	ldr	r3, [pc, #24]	; (8003134 <HAL_RCC_GetPCLK2Freq+0x24>)
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	0adb      	lsrs	r3, r3, #11
 8003120:	f003 0307 	and.w	r3, r3, #7
 8003124:	4904      	ldr	r1, [pc, #16]	; (8003138 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003126:	5ccb      	ldrb	r3, [r1, r3]
 8003128:	f003 031f 	and.w	r3, r3, #31
 800312c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003130:	4618      	mov	r0, r3
 8003132:	bd80      	pop	{r7, pc}
 8003134:	40021000 	.word	0x40021000
 8003138:	0800a7d0 	.word	0x0800a7d0

0800313c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003144:	2300      	movs	r3, #0
 8003146:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003148:	4b2a      	ldr	r3, [pc, #168]	; (80031f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800314a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800314c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d003      	beq.n	800315c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003154:	f7ff f9ee 	bl	8002534 <HAL_PWREx_GetVoltageRange>
 8003158:	6178      	str	r0, [r7, #20]
 800315a:	e014      	b.n	8003186 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800315c:	4b25      	ldr	r3, [pc, #148]	; (80031f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800315e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003160:	4a24      	ldr	r2, [pc, #144]	; (80031f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003162:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003166:	6593      	str	r3, [r2, #88]	; 0x58
 8003168:	4b22      	ldr	r3, [pc, #136]	; (80031f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800316a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800316c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003170:	60fb      	str	r3, [r7, #12]
 8003172:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003174:	f7ff f9de 	bl	8002534 <HAL_PWREx_GetVoltageRange>
 8003178:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800317a:	4b1e      	ldr	r3, [pc, #120]	; (80031f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800317c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800317e:	4a1d      	ldr	r2, [pc, #116]	; (80031f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003180:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003184:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800318c:	d10b      	bne.n	80031a6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2b80      	cmp	r3, #128	; 0x80
 8003192:	d919      	bls.n	80031c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2ba0      	cmp	r3, #160	; 0xa0
 8003198:	d902      	bls.n	80031a0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800319a:	2302      	movs	r3, #2
 800319c:	613b      	str	r3, [r7, #16]
 800319e:	e013      	b.n	80031c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031a0:	2301      	movs	r3, #1
 80031a2:	613b      	str	r3, [r7, #16]
 80031a4:	e010      	b.n	80031c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2b80      	cmp	r3, #128	; 0x80
 80031aa:	d902      	bls.n	80031b2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80031ac:	2303      	movs	r3, #3
 80031ae:	613b      	str	r3, [r7, #16]
 80031b0:	e00a      	b.n	80031c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2b80      	cmp	r3, #128	; 0x80
 80031b6:	d102      	bne.n	80031be <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80031b8:	2302      	movs	r3, #2
 80031ba:	613b      	str	r3, [r7, #16]
 80031bc:	e004      	b.n	80031c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2b70      	cmp	r3, #112	; 0x70
 80031c2:	d101      	bne.n	80031c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031c4:	2301      	movs	r3, #1
 80031c6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80031c8:	4b0b      	ldr	r3, [pc, #44]	; (80031f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f023 0207 	bic.w	r2, r3, #7
 80031d0:	4909      	ldr	r1, [pc, #36]	; (80031f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80031d8:	4b07      	ldr	r3, [pc, #28]	; (80031f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0307 	and.w	r3, r3, #7
 80031e0:	693a      	ldr	r2, [r7, #16]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d001      	beq.n	80031ea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e000      	b.n	80031ec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3718      	adds	r7, #24
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	40021000 	.word	0x40021000
 80031f8:	40022000 	.word	0x40022000

080031fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b086      	sub	sp, #24
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003204:	2300      	movs	r3, #0
 8003206:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003208:	2300      	movs	r3, #0
 800320a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003214:	2b00      	cmp	r3, #0
 8003216:	d041      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800321c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003220:	d02a      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003222:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003226:	d824      	bhi.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003228:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800322c:	d008      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800322e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003232:	d81e      	bhi.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003234:	2b00      	cmp	r3, #0
 8003236:	d00a      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003238:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800323c:	d010      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800323e:	e018      	b.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003240:	4b86      	ldr	r3, [pc, #536]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	4a85      	ldr	r2, [pc, #532]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003246:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800324a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800324c:	e015      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	3304      	adds	r3, #4
 8003252:	2100      	movs	r1, #0
 8003254:	4618      	mov	r0, r3
 8003256:	f000 fabb 	bl	80037d0 <RCCEx_PLLSAI1_Config>
 800325a:	4603      	mov	r3, r0
 800325c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800325e:	e00c      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	3320      	adds	r3, #32
 8003264:	2100      	movs	r1, #0
 8003266:	4618      	mov	r0, r3
 8003268:	f000 fba6 	bl	80039b8 <RCCEx_PLLSAI2_Config>
 800326c:	4603      	mov	r3, r0
 800326e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003270:	e003      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	74fb      	strb	r3, [r7, #19]
      break;
 8003276:	e000      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003278:	bf00      	nop
    }

    if(ret == HAL_OK)
 800327a:	7cfb      	ldrb	r3, [r7, #19]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d10b      	bne.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003280:	4b76      	ldr	r3, [pc, #472]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003286:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800328e:	4973      	ldr	r1, [pc, #460]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003290:	4313      	orrs	r3, r2
 8003292:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003296:	e001      	b.n	800329c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003298:	7cfb      	ldrb	r3, [r7, #19]
 800329a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d041      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032ac:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80032b0:	d02a      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80032b2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80032b6:	d824      	bhi.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80032b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80032bc:	d008      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80032be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80032c2:	d81e      	bhi.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d00a      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80032c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032cc:	d010      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80032ce:	e018      	b.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80032d0:	4b62      	ldr	r3, [pc, #392]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	4a61      	ldr	r2, [pc, #388]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032da:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032dc:	e015      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	3304      	adds	r3, #4
 80032e2:	2100      	movs	r1, #0
 80032e4:	4618      	mov	r0, r3
 80032e6:	f000 fa73 	bl	80037d0 <RCCEx_PLLSAI1_Config>
 80032ea:	4603      	mov	r3, r0
 80032ec:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032ee:	e00c      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	3320      	adds	r3, #32
 80032f4:	2100      	movs	r1, #0
 80032f6:	4618      	mov	r0, r3
 80032f8:	f000 fb5e 	bl	80039b8 <RCCEx_PLLSAI2_Config>
 80032fc:	4603      	mov	r3, r0
 80032fe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003300:	e003      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	74fb      	strb	r3, [r7, #19]
      break;
 8003306:	e000      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003308:	bf00      	nop
    }

    if(ret == HAL_OK)
 800330a:	7cfb      	ldrb	r3, [r7, #19]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d10b      	bne.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003310:	4b52      	ldr	r3, [pc, #328]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003316:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800331e:	494f      	ldr	r1, [pc, #316]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003320:	4313      	orrs	r3, r2
 8003322:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003326:	e001      	b.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003328:	7cfb      	ldrb	r3, [r7, #19]
 800332a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003334:	2b00      	cmp	r3, #0
 8003336:	f000 80a0 	beq.w	800347a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800333a:	2300      	movs	r3, #0
 800333c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800333e:	4b47      	ldr	r3, [pc, #284]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d101      	bne.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800334a:	2301      	movs	r3, #1
 800334c:	e000      	b.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800334e:	2300      	movs	r3, #0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d00d      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003354:	4b41      	ldr	r3, [pc, #260]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003358:	4a40      	ldr	r2, [pc, #256]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800335a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800335e:	6593      	str	r3, [r2, #88]	; 0x58
 8003360:	4b3e      	ldr	r3, [pc, #248]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003364:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003368:	60bb      	str	r3, [r7, #8]
 800336a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800336c:	2301      	movs	r3, #1
 800336e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003370:	4b3b      	ldr	r3, [pc, #236]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a3a      	ldr	r2, [pc, #232]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003376:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800337a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800337c:	f7fe fbfe 	bl	8001b7c <HAL_GetTick>
 8003380:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003382:	e009      	b.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003384:	f7fe fbfa 	bl	8001b7c <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b02      	cmp	r3, #2
 8003390:	d902      	bls.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	74fb      	strb	r3, [r7, #19]
        break;
 8003396:	e005      	b.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003398:	4b31      	ldr	r3, [pc, #196]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d0ef      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80033a4:	7cfb      	ldrb	r3, [r7, #19]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d15c      	bne.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80033aa:	4b2c      	ldr	r3, [pc, #176]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033b4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d01f      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x200>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d019      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80033c8:	4b24      	ldr	r3, [pc, #144]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033d2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033d4:	4b21      	ldr	r3, [pc, #132]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033da:	4a20      	ldr	r2, [pc, #128]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033e4:	4b1d      	ldr	r3, [pc, #116]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ea:	4a1c      	ldr	r2, [pc, #112]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80033f4:	4a19      	ldr	r2, [pc, #100]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	2b00      	cmp	r3, #0
 8003404:	d016      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003406:	f7fe fbb9 	bl	8001b7c <HAL_GetTick>
 800340a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800340c:	e00b      	b.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800340e:	f7fe fbb5 	bl	8001b7c <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	f241 3288 	movw	r2, #5000	; 0x1388
 800341c:	4293      	cmp	r3, r2
 800341e:	d902      	bls.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	74fb      	strb	r3, [r7, #19]
            break;
 8003424:	e006      	b.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003426:	4b0d      	ldr	r3, [pc, #52]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800342c:	f003 0302 	and.w	r3, r3, #2
 8003430:	2b00      	cmp	r3, #0
 8003432:	d0ec      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003434:	7cfb      	ldrb	r3, [r7, #19]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10c      	bne.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800343a:	4b08      	ldr	r3, [pc, #32]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800343c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003440:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800344a:	4904      	ldr	r1, [pc, #16]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800344c:	4313      	orrs	r3, r2
 800344e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003452:	e009      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003454:	7cfb      	ldrb	r3, [r7, #19]
 8003456:	74bb      	strb	r3, [r7, #18]
 8003458:	e006      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800345a:	bf00      	nop
 800345c:	40021000 	.word	0x40021000
 8003460:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003464:	7cfb      	ldrb	r3, [r7, #19]
 8003466:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003468:	7c7b      	ldrb	r3, [r7, #17]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d105      	bne.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800346e:	4b9e      	ldr	r3, [pc, #632]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003472:	4a9d      	ldr	r2, [pc, #628]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003474:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003478:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00a      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003486:	4b98      	ldr	r3, [pc, #608]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800348c:	f023 0203 	bic.w	r2, r3, #3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003494:	4994      	ldr	r1, [pc, #592]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003496:	4313      	orrs	r3, r2
 8003498:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0302 	and.w	r3, r3, #2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d00a      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034a8:	4b8f      	ldr	r3, [pc, #572]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ae:	f023 020c 	bic.w	r2, r3, #12
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034b6:	498c      	ldr	r1, [pc, #560]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0304 	and.w	r3, r3, #4
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00a      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80034ca:	4b87      	ldr	r3, [pc, #540]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d8:	4983      	ldr	r1, [pc, #524]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0308 	and.w	r3, r3, #8
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d00a      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80034ec:	4b7e      	ldr	r3, [pc, #504]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034f2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034fa:	497b      	ldr	r1, [pc, #492]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0310 	and.w	r3, r3, #16
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00a      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800350e:	4b76      	ldr	r3, [pc, #472]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003514:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800351c:	4972      	ldr	r1, [pc, #456]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800351e:	4313      	orrs	r3, r2
 8003520:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0320 	and.w	r3, r3, #32
 800352c:	2b00      	cmp	r3, #0
 800352e:	d00a      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003530:	4b6d      	ldr	r3, [pc, #436]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003536:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800353e:	496a      	ldr	r1, [pc, #424]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003540:	4313      	orrs	r3, r2
 8003542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00a      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003552:	4b65      	ldr	r3, [pc, #404]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003558:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003560:	4961      	ldr	r1, [pc, #388]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003562:	4313      	orrs	r3, r2
 8003564:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00a      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003574:	4b5c      	ldr	r3, [pc, #368]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800357a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003582:	4959      	ldr	r1, [pc, #356]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003584:	4313      	orrs	r3, r2
 8003586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00a      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003596:	4b54      	ldr	r3, [pc, #336]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800359c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035a4:	4950      	ldr	r1, [pc, #320]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d00a      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035b8:	4b4b      	ldr	r3, [pc, #300]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035be:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c6:	4948      	ldr	r1, [pc, #288]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00a      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035da:	4b43      	ldr	r3, [pc, #268]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e8:	493f      	ldr	r1, [pc, #252]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d028      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035fc:	4b3a      	ldr	r3, [pc, #232]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003602:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800360a:	4937      	ldr	r1, [pc, #220]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800360c:	4313      	orrs	r3, r2
 800360e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003616:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800361a:	d106      	bne.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800361c:	4b32      	ldr	r3, [pc, #200]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	4a31      	ldr	r2, [pc, #196]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003622:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003626:	60d3      	str	r3, [r2, #12]
 8003628:	e011      	b.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800362e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003632:	d10c      	bne.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	3304      	adds	r3, #4
 8003638:	2101      	movs	r1, #1
 800363a:	4618      	mov	r0, r3
 800363c:	f000 f8c8 	bl	80037d0 <RCCEx_PLLSAI1_Config>
 8003640:	4603      	mov	r3, r0
 8003642:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003644:	7cfb      	ldrb	r3, [r7, #19]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800364a:	7cfb      	ldrb	r3, [r7, #19]
 800364c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d028      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800365a:	4b23      	ldr	r3, [pc, #140]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800365c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003660:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003668:	491f      	ldr	r1, [pc, #124]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800366a:	4313      	orrs	r3, r2
 800366c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003674:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003678:	d106      	bne.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800367a:	4b1b      	ldr	r3, [pc, #108]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	4a1a      	ldr	r2, [pc, #104]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003680:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003684:	60d3      	str	r3, [r2, #12]
 8003686:	e011      	b.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800368c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003690:	d10c      	bne.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	3304      	adds	r3, #4
 8003696:	2101      	movs	r1, #1
 8003698:	4618      	mov	r0, r3
 800369a:	f000 f899 	bl	80037d0 <RCCEx_PLLSAI1_Config>
 800369e:	4603      	mov	r3, r0
 80036a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036a2:	7cfb      	ldrb	r3, [r7, #19]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d001      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80036a8:	7cfb      	ldrb	r3, [r7, #19]
 80036aa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d02b      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80036b8:	4b0b      	ldr	r3, [pc, #44]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036c6:	4908      	ldr	r1, [pc, #32]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036d6:	d109      	bne.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036d8:	4b03      	ldr	r3, [pc, #12]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	4a02      	ldr	r2, [pc, #8]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036e2:	60d3      	str	r3, [r2, #12]
 80036e4:	e014      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80036e6:	bf00      	nop
 80036e8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036f4:	d10c      	bne.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	3304      	adds	r3, #4
 80036fa:	2101      	movs	r1, #1
 80036fc:	4618      	mov	r0, r3
 80036fe:	f000 f867 	bl	80037d0 <RCCEx_PLLSAI1_Config>
 8003702:	4603      	mov	r3, r0
 8003704:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003706:	7cfb      	ldrb	r3, [r7, #19]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d001      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800370c:	7cfb      	ldrb	r3, [r7, #19]
 800370e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d02f      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800371c:	4b2b      	ldr	r3, [pc, #172]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800371e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003722:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800372a:	4928      	ldr	r1, [pc, #160]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800372c:	4313      	orrs	r3, r2
 800372e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003736:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800373a:	d10d      	bne.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	3304      	adds	r3, #4
 8003740:	2102      	movs	r1, #2
 8003742:	4618      	mov	r0, r3
 8003744:	f000 f844 	bl	80037d0 <RCCEx_PLLSAI1_Config>
 8003748:	4603      	mov	r3, r0
 800374a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800374c:	7cfb      	ldrb	r3, [r7, #19]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d014      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003752:	7cfb      	ldrb	r3, [r7, #19]
 8003754:	74bb      	strb	r3, [r7, #18]
 8003756:	e011      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800375c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003760:	d10c      	bne.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	3320      	adds	r3, #32
 8003766:	2102      	movs	r1, #2
 8003768:	4618      	mov	r0, r3
 800376a:	f000 f925 	bl	80039b8 <RCCEx_PLLSAI2_Config>
 800376e:	4603      	mov	r3, r0
 8003770:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003772:	7cfb      	ldrb	r3, [r7, #19]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d001      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003778:	7cfb      	ldrb	r3, [r7, #19]
 800377a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00a      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003788:	4b10      	ldr	r3, [pc, #64]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800378a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800378e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003796:	490d      	ldr	r1, [pc, #52]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003798:	4313      	orrs	r3, r2
 800379a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00b      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80037aa:	4b08      	ldr	r3, [pc, #32]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037ba:	4904      	ldr	r1, [pc, #16]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80037c2:	7cbb      	ldrb	r3, [r7, #18]
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3718      	adds	r7, #24
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	40021000 	.word	0x40021000

080037d0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037da:	2300      	movs	r3, #0
 80037dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80037de:	4b75      	ldr	r3, [pc, #468]	; (80039b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	f003 0303 	and.w	r3, r3, #3
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d018      	beq.n	800381c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80037ea:	4b72      	ldr	r3, [pc, #456]	; (80039b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	f003 0203 	and.w	r2, r3, #3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d10d      	bne.n	8003816 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
       ||
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d009      	beq.n	8003816 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003802:	4b6c      	ldr	r3, [pc, #432]	; (80039b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	091b      	lsrs	r3, r3, #4
 8003808:	f003 0307 	and.w	r3, r3, #7
 800380c:	1c5a      	adds	r2, r3, #1
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
       ||
 8003812:	429a      	cmp	r2, r3
 8003814:	d047      	beq.n	80038a6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	73fb      	strb	r3, [r7, #15]
 800381a:	e044      	b.n	80038a6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2b03      	cmp	r3, #3
 8003822:	d018      	beq.n	8003856 <RCCEx_PLLSAI1_Config+0x86>
 8003824:	2b03      	cmp	r3, #3
 8003826:	d825      	bhi.n	8003874 <RCCEx_PLLSAI1_Config+0xa4>
 8003828:	2b01      	cmp	r3, #1
 800382a:	d002      	beq.n	8003832 <RCCEx_PLLSAI1_Config+0x62>
 800382c:	2b02      	cmp	r3, #2
 800382e:	d009      	beq.n	8003844 <RCCEx_PLLSAI1_Config+0x74>
 8003830:	e020      	b.n	8003874 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003832:	4b60      	ldr	r3, [pc, #384]	; (80039b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0302 	and.w	r3, r3, #2
 800383a:	2b00      	cmp	r3, #0
 800383c:	d11d      	bne.n	800387a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003842:	e01a      	b.n	800387a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003844:	4b5b      	ldr	r3, [pc, #364]	; (80039b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800384c:	2b00      	cmp	r3, #0
 800384e:	d116      	bne.n	800387e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003854:	e013      	b.n	800387e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003856:	4b57      	ldr	r3, [pc, #348]	; (80039b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d10f      	bne.n	8003882 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003862:	4b54      	ldr	r3, [pc, #336]	; (80039b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d109      	bne.n	8003882 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003872:	e006      	b.n	8003882 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	73fb      	strb	r3, [r7, #15]
      break;
 8003878:	e004      	b.n	8003884 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800387a:	bf00      	nop
 800387c:	e002      	b.n	8003884 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800387e:	bf00      	nop
 8003880:	e000      	b.n	8003884 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003882:	bf00      	nop
    }

    if(status == HAL_OK)
 8003884:	7bfb      	ldrb	r3, [r7, #15]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d10d      	bne.n	80038a6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800388a:	4b4a      	ldr	r3, [pc, #296]	; (80039b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6819      	ldr	r1, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	3b01      	subs	r3, #1
 800389c:	011b      	lsls	r3, r3, #4
 800389e:	430b      	orrs	r3, r1
 80038a0:	4944      	ldr	r1, [pc, #272]	; (80039b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80038a6:	7bfb      	ldrb	r3, [r7, #15]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d17d      	bne.n	80039a8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80038ac:	4b41      	ldr	r3, [pc, #260]	; (80039b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a40      	ldr	r2, [pc, #256]	; (80039b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80038b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038b8:	f7fe f960 	bl	8001b7c <HAL_GetTick>
 80038bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80038be:	e009      	b.n	80038d4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038c0:	f7fe f95c 	bl	8001b7c <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d902      	bls.n	80038d4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	73fb      	strb	r3, [r7, #15]
        break;
 80038d2:	e005      	b.n	80038e0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80038d4:	4b37      	ldr	r3, [pc, #220]	; (80039b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d1ef      	bne.n	80038c0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80038e0:	7bfb      	ldrb	r3, [r7, #15]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d160      	bne.n	80039a8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d111      	bne.n	8003910 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038ec:	4b31      	ldr	r3, [pc, #196]	; (80039b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ee:	691b      	ldr	r3, [r3, #16]
 80038f0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80038f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	6892      	ldr	r2, [r2, #8]
 80038fc:	0211      	lsls	r1, r2, #8
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	68d2      	ldr	r2, [r2, #12]
 8003902:	0912      	lsrs	r2, r2, #4
 8003904:	0452      	lsls	r2, r2, #17
 8003906:	430a      	orrs	r2, r1
 8003908:	492a      	ldr	r1, [pc, #168]	; (80039b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800390a:	4313      	orrs	r3, r2
 800390c:	610b      	str	r3, [r1, #16]
 800390e:	e027      	b.n	8003960 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	2b01      	cmp	r3, #1
 8003914:	d112      	bne.n	800393c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003916:	4b27      	ldr	r3, [pc, #156]	; (80039b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800391e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	6892      	ldr	r2, [r2, #8]
 8003926:	0211      	lsls	r1, r2, #8
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	6912      	ldr	r2, [r2, #16]
 800392c:	0852      	lsrs	r2, r2, #1
 800392e:	3a01      	subs	r2, #1
 8003930:	0552      	lsls	r2, r2, #21
 8003932:	430a      	orrs	r2, r1
 8003934:	491f      	ldr	r1, [pc, #124]	; (80039b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003936:	4313      	orrs	r3, r2
 8003938:	610b      	str	r3, [r1, #16]
 800393a:	e011      	b.n	8003960 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800393c:	4b1d      	ldr	r3, [pc, #116]	; (80039b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800393e:	691b      	ldr	r3, [r3, #16]
 8003940:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003944:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	6892      	ldr	r2, [r2, #8]
 800394c:	0211      	lsls	r1, r2, #8
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	6952      	ldr	r2, [r2, #20]
 8003952:	0852      	lsrs	r2, r2, #1
 8003954:	3a01      	subs	r2, #1
 8003956:	0652      	lsls	r2, r2, #25
 8003958:	430a      	orrs	r2, r1
 800395a:	4916      	ldr	r1, [pc, #88]	; (80039b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800395c:	4313      	orrs	r3, r2
 800395e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003960:	4b14      	ldr	r3, [pc, #80]	; (80039b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a13      	ldr	r2, [pc, #76]	; (80039b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003966:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800396a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800396c:	f7fe f906 	bl	8001b7c <HAL_GetTick>
 8003970:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003972:	e009      	b.n	8003988 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003974:	f7fe f902 	bl	8001b7c <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	2b02      	cmp	r3, #2
 8003980:	d902      	bls.n	8003988 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	73fb      	strb	r3, [r7, #15]
          break;
 8003986:	e005      	b.n	8003994 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003988:	4b0a      	ldr	r3, [pc, #40]	; (80039b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d0ef      	beq.n	8003974 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003994:	7bfb      	ldrb	r3, [r7, #15]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d106      	bne.n	80039a8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800399a:	4b06      	ldr	r3, [pc, #24]	; (80039b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800399c:	691a      	ldr	r2, [r3, #16]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	699b      	ldr	r3, [r3, #24]
 80039a2:	4904      	ldr	r1, [pc, #16]	; (80039b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80039a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	40021000 	.word	0x40021000

080039b8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039c2:	2300      	movs	r3, #0
 80039c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80039c6:	4b6a      	ldr	r3, [pc, #424]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	f003 0303 	and.w	r3, r3, #3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d018      	beq.n	8003a04 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80039d2:	4b67      	ldr	r3, [pc, #412]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	f003 0203 	and.w	r2, r3, #3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	429a      	cmp	r2, r3
 80039e0:	d10d      	bne.n	80039fe <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
       ||
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d009      	beq.n	80039fe <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80039ea:	4b61      	ldr	r3, [pc, #388]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	091b      	lsrs	r3, r3, #4
 80039f0:	f003 0307 	and.w	r3, r3, #7
 80039f4:	1c5a      	adds	r2, r3, #1
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
       ||
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d047      	beq.n	8003a8e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	73fb      	strb	r3, [r7, #15]
 8003a02:	e044      	b.n	8003a8e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2b03      	cmp	r3, #3
 8003a0a:	d018      	beq.n	8003a3e <RCCEx_PLLSAI2_Config+0x86>
 8003a0c:	2b03      	cmp	r3, #3
 8003a0e:	d825      	bhi.n	8003a5c <RCCEx_PLLSAI2_Config+0xa4>
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d002      	beq.n	8003a1a <RCCEx_PLLSAI2_Config+0x62>
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d009      	beq.n	8003a2c <RCCEx_PLLSAI2_Config+0x74>
 8003a18:	e020      	b.n	8003a5c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a1a:	4b55      	ldr	r3, [pc, #340]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0302 	and.w	r3, r3, #2
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d11d      	bne.n	8003a62 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a2a:	e01a      	b.n	8003a62 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a2c:	4b50      	ldr	r3, [pc, #320]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d116      	bne.n	8003a66 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a3c:	e013      	b.n	8003a66 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a3e:	4b4c      	ldr	r3, [pc, #304]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d10f      	bne.n	8003a6a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a4a:	4b49      	ldr	r3, [pc, #292]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d109      	bne.n	8003a6a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a5a:	e006      	b.n	8003a6a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	73fb      	strb	r3, [r7, #15]
      break;
 8003a60:	e004      	b.n	8003a6c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a62:	bf00      	nop
 8003a64:	e002      	b.n	8003a6c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a66:	bf00      	nop
 8003a68:	e000      	b.n	8003a6c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a6a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a6c:	7bfb      	ldrb	r3, [r7, #15]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d10d      	bne.n	8003a8e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a72:	4b3f      	ldr	r3, [pc, #252]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6819      	ldr	r1, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	3b01      	subs	r3, #1
 8003a84:	011b      	lsls	r3, r3, #4
 8003a86:	430b      	orrs	r3, r1
 8003a88:	4939      	ldr	r1, [pc, #228]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a8e:	7bfb      	ldrb	r3, [r7, #15]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d167      	bne.n	8003b64 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003a94:	4b36      	ldr	r3, [pc, #216]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a35      	ldr	r2, [pc, #212]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003aa0:	f7fe f86c 	bl	8001b7c <HAL_GetTick>
 8003aa4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003aa6:	e009      	b.n	8003abc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003aa8:	f7fe f868 	bl	8001b7c <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d902      	bls.n	8003abc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	73fb      	strb	r3, [r7, #15]
        break;
 8003aba:	e005      	b.n	8003ac8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003abc:	4b2c      	ldr	r3, [pc, #176]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d1ef      	bne.n	8003aa8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003ac8:	7bfb      	ldrb	r3, [r7, #15]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d14a      	bne.n	8003b64 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d111      	bne.n	8003af8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ad4:	4b26      	ldr	r3, [pc, #152]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ad6:	695b      	ldr	r3, [r3, #20]
 8003ad8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003adc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	6892      	ldr	r2, [r2, #8]
 8003ae4:	0211      	lsls	r1, r2, #8
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	68d2      	ldr	r2, [r2, #12]
 8003aea:	0912      	lsrs	r2, r2, #4
 8003aec:	0452      	lsls	r2, r2, #17
 8003aee:	430a      	orrs	r2, r1
 8003af0:	491f      	ldr	r1, [pc, #124]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	614b      	str	r3, [r1, #20]
 8003af6:	e011      	b.n	8003b1c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003af8:	4b1d      	ldr	r3, [pc, #116]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003afa:	695b      	ldr	r3, [r3, #20]
 8003afc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003b00:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	6892      	ldr	r2, [r2, #8]
 8003b08:	0211      	lsls	r1, r2, #8
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	6912      	ldr	r2, [r2, #16]
 8003b0e:	0852      	lsrs	r2, r2, #1
 8003b10:	3a01      	subs	r2, #1
 8003b12:	0652      	lsls	r2, r2, #25
 8003b14:	430a      	orrs	r2, r1
 8003b16:	4916      	ldr	r1, [pc, #88]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003b1c:	4b14      	ldr	r3, [pc, #80]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a13      	ldr	r2, [pc, #76]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b26:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b28:	f7fe f828 	bl	8001b7c <HAL_GetTick>
 8003b2c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b2e:	e009      	b.n	8003b44 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b30:	f7fe f824 	bl	8001b7c <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d902      	bls.n	8003b44 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	73fb      	strb	r3, [r7, #15]
          break;
 8003b42:	e005      	b.n	8003b50 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b44:	4b0a      	ldr	r3, [pc, #40]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d0ef      	beq.n	8003b30 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003b50:	7bfb      	ldrb	r3, [r7, #15]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d106      	bne.n	8003b64 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003b56:	4b06      	ldr	r3, [pc, #24]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b58:	695a      	ldr	r2, [r3, #20]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	4904      	ldr	r1, [pc, #16]	; (8003b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3710      	adds	r7, #16
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	40021000 	.word	0x40021000

08003b74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b085      	sub	sp, #20
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d001      	beq.n	8003b8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e04f      	b.n	8003c2c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2202      	movs	r2, #2
 8003b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68da      	ldr	r2, [r3, #12]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f042 0201 	orr.w	r2, r2, #1
 8003ba2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a23      	ldr	r2, [pc, #140]	; (8003c38 <HAL_TIM_Base_Start_IT+0xc4>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d01d      	beq.n	8003bea <HAL_TIM_Base_Start_IT+0x76>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bb6:	d018      	beq.n	8003bea <HAL_TIM_Base_Start_IT+0x76>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a1f      	ldr	r2, [pc, #124]	; (8003c3c <HAL_TIM_Base_Start_IT+0xc8>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d013      	beq.n	8003bea <HAL_TIM_Base_Start_IT+0x76>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a1e      	ldr	r2, [pc, #120]	; (8003c40 <HAL_TIM_Base_Start_IT+0xcc>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d00e      	beq.n	8003bea <HAL_TIM_Base_Start_IT+0x76>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a1c      	ldr	r2, [pc, #112]	; (8003c44 <HAL_TIM_Base_Start_IT+0xd0>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d009      	beq.n	8003bea <HAL_TIM_Base_Start_IT+0x76>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a1b      	ldr	r2, [pc, #108]	; (8003c48 <HAL_TIM_Base_Start_IT+0xd4>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d004      	beq.n	8003bea <HAL_TIM_Base_Start_IT+0x76>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a19      	ldr	r2, [pc, #100]	; (8003c4c <HAL_TIM_Base_Start_IT+0xd8>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d115      	bne.n	8003c16 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	689a      	ldr	r2, [r3, #8]
 8003bf0:	4b17      	ldr	r3, [pc, #92]	; (8003c50 <HAL_TIM_Base_Start_IT+0xdc>)
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2b06      	cmp	r3, #6
 8003bfa:	d015      	beq.n	8003c28 <HAL_TIM_Base_Start_IT+0xb4>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c02:	d011      	beq.n	8003c28 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f042 0201 	orr.w	r2, r2, #1
 8003c12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c14:	e008      	b.n	8003c28 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f042 0201 	orr.w	r2, r2, #1
 8003c24:	601a      	str	r2, [r3, #0]
 8003c26:	e000      	b.n	8003c2a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c28:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003c2a:	2300      	movs	r3, #0
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3714      	adds	r7, #20
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr
 8003c38:	40012c00 	.word	0x40012c00
 8003c3c:	40000400 	.word	0x40000400
 8003c40:	40000800 	.word	0x40000800
 8003c44:	40000c00 	.word	0x40000c00
 8003c48:	40013400 	.word	0x40013400
 8003c4c:	40014000 	.word	0x40014000
 8003c50:	00010007 	.word	0x00010007

08003c54 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d101      	bne.n	8003c66 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e049      	b.n	8003cfa <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d106      	bne.n	8003c80 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f7fd fcf6 	bl	800166c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2202      	movs	r2, #2
 8003c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	3304      	adds	r3, #4
 8003c90:	4619      	mov	r1, r3
 8003c92:	4610      	mov	r0, r2
 8003c94:	f000 fb44 	bl	8004320 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3708      	adds	r7, #8
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d02:	b580      	push	{r7, lr}
 8003d04:	b082      	sub	sp, #8
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d101      	bne.n	8003d14 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e049      	b.n	8003da8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d106      	bne.n	8003d2e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f7fd fc7b 	bl	8001624 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2202      	movs	r2, #2
 8003d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	3304      	adds	r3, #4
 8003d3e:	4619      	mov	r1, r3
 8003d40:	4610      	mov	r0, r2
 8003d42:	f000 faed 	bl	8004320 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2201      	movs	r2, #1
 8003d52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2201      	movs	r2, #1
 8003d62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2201      	movs	r2, #1
 8003d72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2201      	movs	r2, #1
 8003d7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2201      	movs	r2, #1
 8003d82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2201      	movs	r2, #1
 8003d92:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2201      	movs	r2, #1
 8003d9a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2201      	movs	r2, #1
 8003da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3708      	adds	r7, #8
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	f003 0302 	and.w	r3, r3, #2
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d020      	beq.n	8003e14 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f003 0302 	and.w	r3, r3, #2
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d01b      	beq.n	8003e14 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f06f 0202 	mvn.w	r2, #2
 8003de4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2201      	movs	r2, #1
 8003dea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	699b      	ldr	r3, [r3, #24]
 8003df2:	f003 0303 	and.w	r3, r3, #3
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d003      	beq.n	8003e02 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f000 fa72 	bl	80042e4 <HAL_TIM_IC_CaptureCallback>
 8003e00:	e005      	b.n	8003e0e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 fa64 	bl	80042d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f000 fa75 	bl	80042f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	f003 0304 	and.w	r3, r3, #4
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d020      	beq.n	8003e60 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f003 0304 	and.w	r3, r3, #4
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d01b      	beq.n	8003e60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f06f 0204 	mvn.w	r2, #4
 8003e30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2202      	movs	r2, #2
 8003e36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	699b      	ldr	r3, [r3, #24]
 8003e3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d003      	beq.n	8003e4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f000 fa4c 	bl	80042e4 <HAL_TIM_IC_CaptureCallback>
 8003e4c:	e005      	b.n	8003e5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f000 fa3e 	bl	80042d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f000 fa4f 	bl	80042f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	f003 0308 	and.w	r3, r3, #8
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d020      	beq.n	8003eac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f003 0308 	and.w	r3, r3, #8
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d01b      	beq.n	8003eac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f06f 0208 	mvn.w	r2, #8
 8003e7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2204      	movs	r2, #4
 8003e82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	69db      	ldr	r3, [r3, #28]
 8003e8a:	f003 0303 	and.w	r3, r3, #3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d003      	beq.n	8003e9a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 fa26 	bl	80042e4 <HAL_TIM_IC_CaptureCallback>
 8003e98:	e005      	b.n	8003ea6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f000 fa18 	bl	80042d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f000 fa29 	bl	80042f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	f003 0310 	and.w	r3, r3, #16
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d020      	beq.n	8003ef8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f003 0310 	and.w	r3, r3, #16
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d01b      	beq.n	8003ef8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f06f 0210 	mvn.w	r2, #16
 8003ec8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2208      	movs	r2, #8
 8003ece:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	69db      	ldr	r3, [r3, #28]
 8003ed6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d003      	beq.n	8003ee6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 fa00 	bl	80042e4 <HAL_TIM_IC_CaptureCallback>
 8003ee4:	e005      	b.n	8003ef2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 f9f2 	bl	80042d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f000 fa03 	bl	80042f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	f003 0301 	and.w	r3, r3, #1
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00c      	beq.n	8003f1c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f003 0301 	and.w	r3, r3, #1
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d007      	beq.n	8003f1c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f06f 0201 	mvn.w	r2, #1
 8003f14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f7fc ffde 	bl	8000ed8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00c      	beq.n	8003f40 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d007      	beq.n	8003f40 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 fdf2 	bl	8004b24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00c      	beq.n	8003f64 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d007      	beq.n	8003f64 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003f5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 fdea 	bl	8004b38 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00c      	beq.n	8003f88 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d007      	beq.n	8003f88 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 f9c2 	bl	800430c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	f003 0320 	and.w	r3, r3, #32
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d00c      	beq.n	8003fac <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	f003 0320 	and.w	r3, r3, #32
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d007      	beq.n	8003fac <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f06f 0220 	mvn.w	r2, #32
 8003fa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 fdb2 	bl	8004b10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003fac:	bf00      	nop
 8003fae:	3710      	adds	r7, #16
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b086      	sub	sp, #24
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d101      	bne.n	8003fd2 <HAL_TIM_OC_ConfigChannel+0x1e>
 8003fce:	2302      	movs	r3, #2
 8003fd0:	e066      	b.n	80040a0 <HAL_TIM_OC_ConfigChannel+0xec>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2b14      	cmp	r3, #20
 8003fde:	d857      	bhi.n	8004090 <HAL_TIM_OC_ConfigChannel+0xdc>
 8003fe0:	a201      	add	r2, pc, #4	; (adr r2, 8003fe8 <HAL_TIM_OC_ConfigChannel+0x34>)
 8003fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fe6:	bf00      	nop
 8003fe8:	0800403d 	.word	0x0800403d
 8003fec:	08004091 	.word	0x08004091
 8003ff0:	08004091 	.word	0x08004091
 8003ff4:	08004091 	.word	0x08004091
 8003ff8:	0800404b 	.word	0x0800404b
 8003ffc:	08004091 	.word	0x08004091
 8004000:	08004091 	.word	0x08004091
 8004004:	08004091 	.word	0x08004091
 8004008:	08004059 	.word	0x08004059
 800400c:	08004091 	.word	0x08004091
 8004010:	08004091 	.word	0x08004091
 8004014:	08004091 	.word	0x08004091
 8004018:	08004067 	.word	0x08004067
 800401c:	08004091 	.word	0x08004091
 8004020:	08004091 	.word	0x08004091
 8004024:	08004091 	.word	0x08004091
 8004028:	08004075 	.word	0x08004075
 800402c:	08004091 	.word	0x08004091
 8004030:	08004091 	.word	0x08004091
 8004034:	08004091 	.word	0x08004091
 8004038:	08004083 	.word	0x08004083
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68b9      	ldr	r1, [r7, #8]
 8004042:	4618      	mov	r0, r3
 8004044:	f000 fa06 	bl	8004454 <TIM_OC1_SetConfig>
      break;
 8004048:	e025      	b.n	8004096 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68b9      	ldr	r1, [r7, #8]
 8004050:	4618      	mov	r0, r3
 8004052:	f000 fa8f 	bl	8004574 <TIM_OC2_SetConfig>
      break;
 8004056:	e01e      	b.n	8004096 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	68b9      	ldr	r1, [r7, #8]
 800405e:	4618      	mov	r0, r3
 8004060:	f000 fb12 	bl	8004688 <TIM_OC3_SetConfig>
      break;
 8004064:	e017      	b.n	8004096 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68b9      	ldr	r1, [r7, #8]
 800406c:	4618      	mov	r0, r3
 800406e:	f000 fb93 	bl	8004798 <TIM_OC4_SetConfig>
      break;
 8004072:	e010      	b.n	8004096 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68b9      	ldr	r1, [r7, #8]
 800407a:	4618      	mov	r0, r3
 800407c:	f000 fbf6 	bl	800486c <TIM_OC5_SetConfig>
      break;
 8004080:	e009      	b.n	8004096 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68b9      	ldr	r1, [r7, #8]
 8004088:	4618      	mov	r0, r3
 800408a:	f000 fc53 	bl	8004934 <TIM_OC6_SetConfig>
      break;
 800408e:	e002      	b.n	8004096 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	75fb      	strb	r3, [r7, #23]
      break;
 8004094:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2200      	movs	r2, #0
 800409a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800409e:	7dfb      	ldrb	r3, [r7, #23]
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3718      	adds	r7, #24
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b086      	sub	sp, #24
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040b4:	2300      	movs	r3, #0
 80040b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d101      	bne.n	80040c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80040c2:	2302      	movs	r3, #2
 80040c4:	e0ff      	b.n	80042c6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2b14      	cmp	r3, #20
 80040d2:	f200 80f0 	bhi.w	80042b6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80040d6:	a201      	add	r2, pc, #4	; (adr r2, 80040dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80040d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040dc:	08004131 	.word	0x08004131
 80040e0:	080042b7 	.word	0x080042b7
 80040e4:	080042b7 	.word	0x080042b7
 80040e8:	080042b7 	.word	0x080042b7
 80040ec:	08004171 	.word	0x08004171
 80040f0:	080042b7 	.word	0x080042b7
 80040f4:	080042b7 	.word	0x080042b7
 80040f8:	080042b7 	.word	0x080042b7
 80040fc:	080041b3 	.word	0x080041b3
 8004100:	080042b7 	.word	0x080042b7
 8004104:	080042b7 	.word	0x080042b7
 8004108:	080042b7 	.word	0x080042b7
 800410c:	080041f3 	.word	0x080041f3
 8004110:	080042b7 	.word	0x080042b7
 8004114:	080042b7 	.word	0x080042b7
 8004118:	080042b7 	.word	0x080042b7
 800411c:	08004235 	.word	0x08004235
 8004120:	080042b7 	.word	0x080042b7
 8004124:	080042b7 	.word	0x080042b7
 8004128:	080042b7 	.word	0x080042b7
 800412c:	08004275 	.word	0x08004275
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68b9      	ldr	r1, [r7, #8]
 8004136:	4618      	mov	r0, r3
 8004138:	f000 f98c 	bl	8004454 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	699a      	ldr	r2, [r3, #24]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f042 0208 	orr.w	r2, r2, #8
 800414a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	699a      	ldr	r2, [r3, #24]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f022 0204 	bic.w	r2, r2, #4
 800415a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	6999      	ldr	r1, [r3, #24]
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	691a      	ldr	r2, [r3, #16]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	430a      	orrs	r2, r1
 800416c:	619a      	str	r2, [r3, #24]
      break;
 800416e:	e0a5      	b.n	80042bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68b9      	ldr	r1, [r7, #8]
 8004176:	4618      	mov	r0, r3
 8004178:	f000 f9fc 	bl	8004574 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	699a      	ldr	r2, [r3, #24]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800418a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	699a      	ldr	r2, [r3, #24]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800419a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	6999      	ldr	r1, [r3, #24]
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	691b      	ldr	r3, [r3, #16]
 80041a6:	021a      	lsls	r2, r3, #8
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	430a      	orrs	r2, r1
 80041ae:	619a      	str	r2, [r3, #24]
      break;
 80041b0:	e084      	b.n	80042bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68b9      	ldr	r1, [r7, #8]
 80041b8:	4618      	mov	r0, r3
 80041ba:	f000 fa65 	bl	8004688 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	69da      	ldr	r2, [r3, #28]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f042 0208 	orr.w	r2, r2, #8
 80041cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	69da      	ldr	r2, [r3, #28]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f022 0204 	bic.w	r2, r2, #4
 80041dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	69d9      	ldr	r1, [r3, #28]
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	691a      	ldr	r2, [r3, #16]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	430a      	orrs	r2, r1
 80041ee:	61da      	str	r2, [r3, #28]
      break;
 80041f0:	e064      	b.n	80042bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	68b9      	ldr	r1, [r7, #8]
 80041f8:	4618      	mov	r0, r3
 80041fa:	f000 facd 	bl	8004798 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	69da      	ldr	r2, [r3, #28]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800420c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	69da      	ldr	r2, [r3, #28]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800421c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	69d9      	ldr	r1, [r3, #28]
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	691b      	ldr	r3, [r3, #16]
 8004228:	021a      	lsls	r2, r3, #8
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	430a      	orrs	r2, r1
 8004230:	61da      	str	r2, [r3, #28]
      break;
 8004232:	e043      	b.n	80042bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	68b9      	ldr	r1, [r7, #8]
 800423a:	4618      	mov	r0, r3
 800423c:	f000 fb16 	bl	800486c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f042 0208 	orr.w	r2, r2, #8
 800424e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f022 0204 	bic.w	r2, r2, #4
 800425e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	691a      	ldr	r2, [r3, #16]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	430a      	orrs	r2, r1
 8004270:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004272:	e023      	b.n	80042bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68b9      	ldr	r1, [r7, #8]
 800427a:	4618      	mov	r0, r3
 800427c:	f000 fb5a 	bl	8004934 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800428e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800429e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	021a      	lsls	r2, r3, #8
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	430a      	orrs	r2, r1
 80042b2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80042b4:	e002      	b.n	80042bc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	75fb      	strb	r3, [r7, #23]
      break;
 80042ba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80042c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3718      	adds	r7, #24
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop

080042d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042d8:	bf00      	nop
 80042da:	370c      	adds	r7, #12
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr

080042e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042ec:	bf00      	nop
 80042ee:	370c      	adds	r7, #12
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004300:	bf00      	nop
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004314:	bf00      	nop
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004320:	b480      	push	{r7}
 8004322:	b085      	sub	sp, #20
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	4a40      	ldr	r2, [pc, #256]	; (8004434 <TIM_Base_SetConfig+0x114>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d013      	beq.n	8004360 <TIM_Base_SetConfig+0x40>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800433e:	d00f      	beq.n	8004360 <TIM_Base_SetConfig+0x40>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4a3d      	ldr	r2, [pc, #244]	; (8004438 <TIM_Base_SetConfig+0x118>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d00b      	beq.n	8004360 <TIM_Base_SetConfig+0x40>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4a3c      	ldr	r2, [pc, #240]	; (800443c <TIM_Base_SetConfig+0x11c>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d007      	beq.n	8004360 <TIM_Base_SetConfig+0x40>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	4a3b      	ldr	r2, [pc, #236]	; (8004440 <TIM_Base_SetConfig+0x120>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d003      	beq.n	8004360 <TIM_Base_SetConfig+0x40>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4a3a      	ldr	r2, [pc, #232]	; (8004444 <TIM_Base_SetConfig+0x124>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d108      	bne.n	8004372 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004366:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	68fa      	ldr	r2, [r7, #12]
 800436e:	4313      	orrs	r3, r2
 8004370:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a2f      	ldr	r2, [pc, #188]	; (8004434 <TIM_Base_SetConfig+0x114>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d01f      	beq.n	80043ba <TIM_Base_SetConfig+0x9a>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004380:	d01b      	beq.n	80043ba <TIM_Base_SetConfig+0x9a>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a2c      	ldr	r2, [pc, #176]	; (8004438 <TIM_Base_SetConfig+0x118>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d017      	beq.n	80043ba <TIM_Base_SetConfig+0x9a>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a2b      	ldr	r2, [pc, #172]	; (800443c <TIM_Base_SetConfig+0x11c>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d013      	beq.n	80043ba <TIM_Base_SetConfig+0x9a>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a2a      	ldr	r2, [pc, #168]	; (8004440 <TIM_Base_SetConfig+0x120>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d00f      	beq.n	80043ba <TIM_Base_SetConfig+0x9a>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a29      	ldr	r2, [pc, #164]	; (8004444 <TIM_Base_SetConfig+0x124>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d00b      	beq.n	80043ba <TIM_Base_SetConfig+0x9a>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a28      	ldr	r2, [pc, #160]	; (8004448 <TIM_Base_SetConfig+0x128>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d007      	beq.n	80043ba <TIM_Base_SetConfig+0x9a>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a27      	ldr	r2, [pc, #156]	; (800444c <TIM_Base_SetConfig+0x12c>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d003      	beq.n	80043ba <TIM_Base_SetConfig+0x9a>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a26      	ldr	r2, [pc, #152]	; (8004450 <TIM_Base_SetConfig+0x130>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d108      	bne.n	80043cc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	695b      	ldr	r3, [r3, #20]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	68fa      	ldr	r2, [r7, #12]
 80043de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	689a      	ldr	r2, [r3, #8]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	4a10      	ldr	r2, [pc, #64]	; (8004434 <TIM_Base_SetConfig+0x114>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d00f      	beq.n	8004418 <TIM_Base_SetConfig+0xf8>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	4a12      	ldr	r2, [pc, #72]	; (8004444 <TIM_Base_SetConfig+0x124>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d00b      	beq.n	8004418 <TIM_Base_SetConfig+0xf8>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	4a11      	ldr	r2, [pc, #68]	; (8004448 <TIM_Base_SetConfig+0x128>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d007      	beq.n	8004418 <TIM_Base_SetConfig+0xf8>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a10      	ldr	r2, [pc, #64]	; (800444c <TIM_Base_SetConfig+0x12c>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d003      	beq.n	8004418 <TIM_Base_SetConfig+0xf8>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a0f      	ldr	r2, [pc, #60]	; (8004450 <TIM_Base_SetConfig+0x130>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d103      	bne.n	8004420 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	691a      	ldr	r2, [r3, #16]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	615a      	str	r2, [r3, #20]
}
 8004426:	bf00      	nop
 8004428:	3714      	adds	r7, #20
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	40012c00 	.word	0x40012c00
 8004438:	40000400 	.word	0x40000400
 800443c:	40000800 	.word	0x40000800
 8004440:	40000c00 	.word	0x40000c00
 8004444:	40013400 	.word	0x40013400
 8004448:	40014000 	.word	0x40014000
 800444c:	40014400 	.word	0x40014400
 8004450:	40014800 	.word	0x40014800

08004454 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004454:	b480      	push	{r7}
 8004456:	b087      	sub	sp, #28
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a1b      	ldr	r3, [r3, #32]
 8004462:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a1b      	ldr	r3, [r3, #32]
 8004468:	f023 0201 	bic.w	r2, r3, #1
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004486:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f023 0303 	bic.w	r3, r3, #3
 800448e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68fa      	ldr	r2, [r7, #12]
 8004496:	4313      	orrs	r3, r2
 8004498:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	f023 0302 	bic.w	r3, r3, #2
 80044a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	697a      	ldr	r2, [r7, #20]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a2c      	ldr	r2, [pc, #176]	; (8004560 <TIM_OC1_SetConfig+0x10c>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d00f      	beq.n	80044d4 <TIM_OC1_SetConfig+0x80>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4a2b      	ldr	r2, [pc, #172]	; (8004564 <TIM_OC1_SetConfig+0x110>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d00b      	beq.n	80044d4 <TIM_OC1_SetConfig+0x80>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4a2a      	ldr	r2, [pc, #168]	; (8004568 <TIM_OC1_SetConfig+0x114>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d007      	beq.n	80044d4 <TIM_OC1_SetConfig+0x80>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	4a29      	ldr	r2, [pc, #164]	; (800456c <TIM_OC1_SetConfig+0x118>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d003      	beq.n	80044d4 <TIM_OC1_SetConfig+0x80>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4a28      	ldr	r2, [pc, #160]	; (8004570 <TIM_OC1_SetConfig+0x11c>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d10c      	bne.n	80044ee <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	f023 0308 	bic.w	r3, r3, #8
 80044da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	697a      	ldr	r2, [r7, #20]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	f023 0304 	bic.w	r3, r3, #4
 80044ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a1b      	ldr	r2, [pc, #108]	; (8004560 <TIM_OC1_SetConfig+0x10c>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d00f      	beq.n	8004516 <TIM_OC1_SetConfig+0xc2>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a1a      	ldr	r2, [pc, #104]	; (8004564 <TIM_OC1_SetConfig+0x110>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d00b      	beq.n	8004516 <TIM_OC1_SetConfig+0xc2>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a19      	ldr	r2, [pc, #100]	; (8004568 <TIM_OC1_SetConfig+0x114>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d007      	beq.n	8004516 <TIM_OC1_SetConfig+0xc2>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a18      	ldr	r2, [pc, #96]	; (800456c <TIM_OC1_SetConfig+0x118>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d003      	beq.n	8004516 <TIM_OC1_SetConfig+0xc2>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a17      	ldr	r2, [pc, #92]	; (8004570 <TIM_OC1_SetConfig+0x11c>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d111      	bne.n	800453a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800451c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004524:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	695b      	ldr	r3, [r3, #20]
 800452a:	693a      	ldr	r2, [r7, #16]
 800452c:	4313      	orrs	r3, r2
 800452e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	699b      	ldr	r3, [r3, #24]
 8004534:	693a      	ldr	r2, [r7, #16]
 8004536:	4313      	orrs	r3, r2
 8004538:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	693a      	ldr	r2, [r7, #16]
 800453e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	68fa      	ldr	r2, [r7, #12]
 8004544:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	685a      	ldr	r2, [r3, #4]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	697a      	ldr	r2, [r7, #20]
 8004552:	621a      	str	r2, [r3, #32]
}
 8004554:	bf00      	nop
 8004556:	371c      	adds	r7, #28
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr
 8004560:	40012c00 	.word	0x40012c00
 8004564:	40013400 	.word	0x40013400
 8004568:	40014000 	.word	0x40014000
 800456c:	40014400 	.word	0x40014400
 8004570:	40014800 	.word	0x40014800

08004574 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004574:	b480      	push	{r7}
 8004576:	b087      	sub	sp, #28
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a1b      	ldr	r3, [r3, #32]
 8004582:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a1b      	ldr	r3, [r3, #32]
 8004588:	f023 0210 	bic.w	r2, r3, #16
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	699b      	ldr	r3, [r3, #24]
 800459a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	021b      	lsls	r3, r3, #8
 80045b6:	68fa      	ldr	r2, [r7, #12]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	f023 0320 	bic.w	r3, r3, #32
 80045c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	011b      	lsls	r3, r3, #4
 80045ca:	697a      	ldr	r2, [r7, #20]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	4a28      	ldr	r2, [pc, #160]	; (8004674 <TIM_OC2_SetConfig+0x100>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d003      	beq.n	80045e0 <TIM_OC2_SetConfig+0x6c>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	4a27      	ldr	r2, [pc, #156]	; (8004678 <TIM_OC2_SetConfig+0x104>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d10d      	bne.n	80045fc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	011b      	lsls	r3, r3, #4
 80045ee:	697a      	ldr	r2, [r7, #20]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	4a1d      	ldr	r2, [pc, #116]	; (8004674 <TIM_OC2_SetConfig+0x100>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d00f      	beq.n	8004624 <TIM_OC2_SetConfig+0xb0>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4a1c      	ldr	r2, [pc, #112]	; (8004678 <TIM_OC2_SetConfig+0x104>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d00b      	beq.n	8004624 <TIM_OC2_SetConfig+0xb0>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	4a1b      	ldr	r2, [pc, #108]	; (800467c <TIM_OC2_SetConfig+0x108>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d007      	beq.n	8004624 <TIM_OC2_SetConfig+0xb0>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4a1a      	ldr	r2, [pc, #104]	; (8004680 <TIM_OC2_SetConfig+0x10c>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d003      	beq.n	8004624 <TIM_OC2_SetConfig+0xb0>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4a19      	ldr	r2, [pc, #100]	; (8004684 <TIM_OC2_SetConfig+0x110>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d113      	bne.n	800464c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800462a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004632:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	695b      	ldr	r3, [r3, #20]
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	693a      	ldr	r2, [r7, #16]
 800463c:	4313      	orrs	r3, r2
 800463e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	699b      	ldr	r3, [r3, #24]
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	693a      	ldr	r2, [r7, #16]
 8004648:	4313      	orrs	r3, r2
 800464a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	693a      	ldr	r2, [r7, #16]
 8004650:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	68fa      	ldr	r2, [r7, #12]
 8004656:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	685a      	ldr	r2, [r3, #4]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	697a      	ldr	r2, [r7, #20]
 8004664:	621a      	str	r2, [r3, #32]
}
 8004666:	bf00      	nop
 8004668:	371c      	adds	r7, #28
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr
 8004672:	bf00      	nop
 8004674:	40012c00 	.word	0x40012c00
 8004678:	40013400 	.word	0x40013400
 800467c:	40014000 	.word	0x40014000
 8004680:	40014400 	.word	0x40014400
 8004684:	40014800 	.word	0x40014800

08004688 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004688:	b480      	push	{r7}
 800468a:	b087      	sub	sp, #28
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a1b      	ldr	r3, [r3, #32]
 8004696:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a1b      	ldr	r3, [r3, #32]
 800469c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	69db      	ldr	r3, [r3, #28]
 80046ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f023 0303 	bic.w	r3, r3, #3
 80046c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68fa      	ldr	r2, [r7, #12]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80046d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	021b      	lsls	r3, r3, #8
 80046dc:	697a      	ldr	r2, [r7, #20]
 80046de:	4313      	orrs	r3, r2
 80046e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a27      	ldr	r2, [pc, #156]	; (8004784 <TIM_OC3_SetConfig+0xfc>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d003      	beq.n	80046f2 <TIM_OC3_SetConfig+0x6a>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a26      	ldr	r2, [pc, #152]	; (8004788 <TIM_OC3_SetConfig+0x100>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d10d      	bne.n	800470e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	021b      	lsls	r3, r3, #8
 8004700:	697a      	ldr	r2, [r7, #20]
 8004702:	4313      	orrs	r3, r2
 8004704:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800470c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a1c      	ldr	r2, [pc, #112]	; (8004784 <TIM_OC3_SetConfig+0xfc>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d00f      	beq.n	8004736 <TIM_OC3_SetConfig+0xae>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a1b      	ldr	r2, [pc, #108]	; (8004788 <TIM_OC3_SetConfig+0x100>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d00b      	beq.n	8004736 <TIM_OC3_SetConfig+0xae>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a1a      	ldr	r2, [pc, #104]	; (800478c <TIM_OC3_SetConfig+0x104>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d007      	beq.n	8004736 <TIM_OC3_SetConfig+0xae>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a19      	ldr	r2, [pc, #100]	; (8004790 <TIM_OC3_SetConfig+0x108>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d003      	beq.n	8004736 <TIM_OC3_SetConfig+0xae>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a18      	ldr	r2, [pc, #96]	; (8004794 <TIM_OC3_SetConfig+0x10c>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d113      	bne.n	800475e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800473c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004744:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	695b      	ldr	r3, [r3, #20]
 800474a:	011b      	lsls	r3, r3, #4
 800474c:	693a      	ldr	r2, [r7, #16]
 800474e:	4313      	orrs	r3, r2
 8004750:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	699b      	ldr	r3, [r3, #24]
 8004756:	011b      	lsls	r3, r3, #4
 8004758:	693a      	ldr	r2, [r7, #16]
 800475a:	4313      	orrs	r3, r2
 800475c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	693a      	ldr	r2, [r7, #16]
 8004762:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	685a      	ldr	r2, [r3, #4]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	697a      	ldr	r2, [r7, #20]
 8004776:	621a      	str	r2, [r3, #32]
}
 8004778:	bf00      	nop
 800477a:	371c      	adds	r7, #28
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr
 8004784:	40012c00 	.word	0x40012c00
 8004788:	40013400 	.word	0x40013400
 800478c:	40014000 	.word	0x40014000
 8004790:	40014400 	.word	0x40014400
 8004794:	40014800 	.word	0x40014800

08004798 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004798:	b480      	push	{r7}
 800479a:	b087      	sub	sp, #28
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a1b      	ldr	r3, [r3, #32]
 80047a6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6a1b      	ldr	r3, [r3, #32]
 80047ac:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	69db      	ldr	r3, [r3, #28]
 80047be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	021b      	lsls	r3, r3, #8
 80047da:	68fa      	ldr	r2, [r7, #12]
 80047dc:	4313      	orrs	r3, r2
 80047de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	031b      	lsls	r3, r3, #12
 80047ee:	693a      	ldr	r2, [r7, #16]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	4a18      	ldr	r2, [pc, #96]	; (8004858 <TIM_OC4_SetConfig+0xc0>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d00f      	beq.n	800481c <TIM_OC4_SetConfig+0x84>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4a17      	ldr	r2, [pc, #92]	; (800485c <TIM_OC4_SetConfig+0xc4>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d00b      	beq.n	800481c <TIM_OC4_SetConfig+0x84>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	4a16      	ldr	r2, [pc, #88]	; (8004860 <TIM_OC4_SetConfig+0xc8>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d007      	beq.n	800481c <TIM_OC4_SetConfig+0x84>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4a15      	ldr	r2, [pc, #84]	; (8004864 <TIM_OC4_SetConfig+0xcc>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d003      	beq.n	800481c <TIM_OC4_SetConfig+0x84>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4a14      	ldr	r2, [pc, #80]	; (8004868 <TIM_OC4_SetConfig+0xd0>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d109      	bne.n	8004830 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004822:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	695b      	ldr	r3, [r3, #20]
 8004828:	019b      	lsls	r3, r3, #6
 800482a:	697a      	ldr	r2, [r7, #20]
 800482c:	4313      	orrs	r3, r2
 800482e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	697a      	ldr	r2, [r7, #20]
 8004834:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	68fa      	ldr	r2, [r7, #12]
 800483a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	685a      	ldr	r2, [r3, #4]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	693a      	ldr	r2, [r7, #16]
 8004848:	621a      	str	r2, [r3, #32]
}
 800484a:	bf00      	nop
 800484c:	371c      	adds	r7, #28
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop
 8004858:	40012c00 	.word	0x40012c00
 800485c:	40013400 	.word	0x40013400
 8004860:	40014000 	.word	0x40014000
 8004864:	40014400 	.word	0x40014400
 8004868:	40014800 	.word	0x40014800

0800486c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800486c:	b480      	push	{r7}
 800486e:	b087      	sub	sp, #28
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a1b      	ldr	r3, [r3, #32]
 800487a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a1b      	ldr	r3, [r3, #32]
 8004880:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800489a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800489e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68fa      	ldr	r2, [r7, #12]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80048b0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	041b      	lsls	r3, r3, #16
 80048b8:	693a      	ldr	r2, [r7, #16]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a17      	ldr	r2, [pc, #92]	; (8004920 <TIM_OC5_SetConfig+0xb4>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d00f      	beq.n	80048e6 <TIM_OC5_SetConfig+0x7a>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a16      	ldr	r2, [pc, #88]	; (8004924 <TIM_OC5_SetConfig+0xb8>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d00b      	beq.n	80048e6 <TIM_OC5_SetConfig+0x7a>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a15      	ldr	r2, [pc, #84]	; (8004928 <TIM_OC5_SetConfig+0xbc>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d007      	beq.n	80048e6 <TIM_OC5_SetConfig+0x7a>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a14      	ldr	r2, [pc, #80]	; (800492c <TIM_OC5_SetConfig+0xc0>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d003      	beq.n	80048e6 <TIM_OC5_SetConfig+0x7a>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a13      	ldr	r2, [pc, #76]	; (8004930 <TIM_OC5_SetConfig+0xc4>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d109      	bne.n	80048fa <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	695b      	ldr	r3, [r3, #20]
 80048f2:	021b      	lsls	r3, r3, #8
 80048f4:	697a      	ldr	r2, [r7, #20]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	697a      	ldr	r2, [r7, #20]
 80048fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	68fa      	ldr	r2, [r7, #12]
 8004904:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	685a      	ldr	r2, [r3, #4]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	693a      	ldr	r2, [r7, #16]
 8004912:	621a      	str	r2, [r3, #32]
}
 8004914:	bf00      	nop
 8004916:	371c      	adds	r7, #28
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr
 8004920:	40012c00 	.word	0x40012c00
 8004924:	40013400 	.word	0x40013400
 8004928:	40014000 	.word	0x40014000
 800492c:	40014400 	.word	0x40014400
 8004930:	40014800 	.word	0x40014800

08004934 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004934:	b480      	push	{r7}
 8004936:	b087      	sub	sp, #28
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a1b      	ldr	r3, [r3, #32]
 8004942:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a1b      	ldr	r3, [r3, #32]
 8004948:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800495a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004962:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004966:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	021b      	lsls	r3, r3, #8
 800496e:	68fa      	ldr	r2, [r7, #12]
 8004970:	4313      	orrs	r3, r2
 8004972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800497a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	051b      	lsls	r3, r3, #20
 8004982:	693a      	ldr	r2, [r7, #16]
 8004984:	4313      	orrs	r3, r2
 8004986:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a18      	ldr	r2, [pc, #96]	; (80049ec <TIM_OC6_SetConfig+0xb8>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d00f      	beq.n	80049b0 <TIM_OC6_SetConfig+0x7c>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4a17      	ldr	r2, [pc, #92]	; (80049f0 <TIM_OC6_SetConfig+0xbc>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d00b      	beq.n	80049b0 <TIM_OC6_SetConfig+0x7c>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a16      	ldr	r2, [pc, #88]	; (80049f4 <TIM_OC6_SetConfig+0xc0>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d007      	beq.n	80049b0 <TIM_OC6_SetConfig+0x7c>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	4a15      	ldr	r2, [pc, #84]	; (80049f8 <TIM_OC6_SetConfig+0xc4>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d003      	beq.n	80049b0 <TIM_OC6_SetConfig+0x7c>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	4a14      	ldr	r2, [pc, #80]	; (80049fc <TIM_OC6_SetConfig+0xc8>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d109      	bne.n	80049c4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049b6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	695b      	ldr	r3, [r3, #20]
 80049bc:	029b      	lsls	r3, r3, #10
 80049be:	697a      	ldr	r2, [r7, #20]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	697a      	ldr	r2, [r7, #20]
 80049c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	68fa      	ldr	r2, [r7, #12]
 80049ce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	685a      	ldr	r2, [r3, #4]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	693a      	ldr	r2, [r7, #16]
 80049dc:	621a      	str	r2, [r3, #32]
}
 80049de:	bf00      	nop
 80049e0:	371c      	adds	r7, #28
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr
 80049ea:	bf00      	nop
 80049ec:	40012c00 	.word	0x40012c00
 80049f0:	40013400 	.word	0x40013400
 80049f4:	40014000 	.word	0x40014000
 80049f8:	40014400 	.word	0x40014400
 80049fc:	40014800 	.word	0x40014800

08004a00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b085      	sub	sp, #20
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d101      	bne.n	8004a18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a14:	2302      	movs	r3, #2
 8004a16:	e068      	b.n	8004aea <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2202      	movs	r2, #2
 8004a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a2e      	ldr	r2, [pc, #184]	; (8004af8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d004      	beq.n	8004a4c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a2d      	ldr	r2, [pc, #180]	; (8004afc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d108      	bne.n	8004a5e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004a52:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	68fa      	ldr	r2, [r7, #12]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a64:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	68fa      	ldr	r2, [r7, #12]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a1e      	ldr	r2, [pc, #120]	; (8004af8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d01d      	beq.n	8004abe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a8a:	d018      	beq.n	8004abe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a1b      	ldr	r2, [pc, #108]	; (8004b00 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d013      	beq.n	8004abe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a1a      	ldr	r2, [pc, #104]	; (8004b04 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d00e      	beq.n	8004abe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a18      	ldr	r2, [pc, #96]	; (8004b08 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d009      	beq.n	8004abe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a13      	ldr	r2, [pc, #76]	; (8004afc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d004      	beq.n	8004abe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a14      	ldr	r2, [pc, #80]	; (8004b0c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d10c      	bne.n	8004ad8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ac4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	68ba      	ldr	r2, [r7, #8]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	68ba      	ldr	r2, [r7, #8]
 8004ad6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ae8:	2300      	movs	r3, #0
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3714      	adds	r7, #20
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop
 8004af8:	40012c00 	.word	0x40012c00
 8004afc:	40013400 	.word	0x40013400
 8004b00:	40000400 	.word	0x40000400
 8004b04:	40000800 	.word	0x40000800
 8004b08:	40000c00 	.word	0x40000c00
 8004b0c:	40014000 	.word	0x40014000

08004b10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b18:	bf00      	nop
 8004b1a:	370c      	adds	r7, #12
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr

08004b24 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b2c:	bf00      	nop
 8004b2e:	370c      	adds	r7, #12
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr

08004b38 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004b40:	bf00      	nop
 8004b42:	370c      	adds	r7, #12
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b082      	sub	sp, #8
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d101      	bne.n	8004b5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e040      	b.n	8004be0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d106      	bne.n	8004b74 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f7fc fdd6 	bl	8001720 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2224      	movs	r2, #36	; 0x24
 8004b78:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f022 0201 	bic.w	r2, r2, #1
 8004b88:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d002      	beq.n	8004b98 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 fe48 	bl	8005828 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f000 fb8d 	bl	80052b8 <UART_SetConfig>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d101      	bne.n	8004ba8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e01b      	b.n	8004be0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	685a      	ldr	r2, [r3, #4]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004bb6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	689a      	ldr	r2, [r3, #8]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004bc6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f042 0201 	orr.w	r2, r2, #1
 8004bd6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f000 fec7 	bl	800596c <UART_CheckIdleState>
 8004bde:	4603      	mov	r3, r0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3708      	adds	r7, #8
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b08b      	sub	sp, #44	; 0x2c
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bfa:	2b20      	cmp	r3, #32
 8004bfc:	d147      	bne.n	8004c8e <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d002      	beq.n	8004c0a <HAL_UART_Transmit_IT+0x22>
 8004c04:	88fb      	ldrh	r3, [r7, #6]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d101      	bne.n	8004c0e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e040      	b.n	8004c90 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	68ba      	ldr	r2, [r7, #8]
 8004c12:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	88fa      	ldrh	r2, [r7, #6]
 8004c18:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	88fa      	ldrh	r2, [r7, #6]
 8004c20:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2200      	movs	r2, #0
 8004c28:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2221      	movs	r2, #33	; 0x21
 8004c36:	67da      	str	r2, [r3, #124]	; 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c40:	d107      	bne.n	8004c52 <HAL_UART_Transmit_IT+0x6a>
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d103      	bne.n	8004c52 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	4a13      	ldr	r2, [pc, #76]	; (8004c9c <HAL_UART_Transmit_IT+0xb4>)
 8004c4e:	66da      	str	r2, [r3, #108]	; 0x6c
 8004c50:	e002      	b.n	8004c58 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	4a12      	ldr	r2, [pc, #72]	; (8004ca0 <HAL_UART_Transmit_IT+0xb8>)
 8004c56:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	e853 3f00 	ldrex	r3, [r3]
 8004c64:	613b      	str	r3, [r7, #16]
   return(result);
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c6c:	627b      	str	r3, [r7, #36]	; 0x24
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	461a      	mov	r2, r3
 8004c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c76:	623b      	str	r3, [r7, #32]
 8004c78:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c7a:	69f9      	ldr	r1, [r7, #28]
 8004c7c:	6a3a      	ldr	r2, [r7, #32]
 8004c7e:	e841 2300 	strex	r3, r2, [r1]
 8004c82:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d1e6      	bne.n	8004c58 <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	e000      	b.n	8004c90 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8004c8e:	2302      	movs	r3, #2
  }
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	372c      	adds	r7, #44	; 0x2c
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr
 8004c9c:	08005d37 	.word	0x08005d37
 8004ca0:	08005c7f 	.word	0x08005c7f

08004ca4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b0ba      	sub	sp, #232	; 0xe8
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	69db      	ldr	r3, [r3, #28]
 8004cb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004cca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004cce:	f640 030f 	movw	r3, #2063	; 0x80f
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004cd8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d115      	bne.n	8004d0c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004ce0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ce4:	f003 0320 	and.w	r3, r3, #32
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d00f      	beq.n	8004d0c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004cec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cf0:	f003 0320 	and.w	r3, r3, #32
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d009      	beq.n	8004d0c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	f000 82ae 	beq.w	800525e <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	4798      	blx	r3
      }
      return;
 8004d0a:	e2a8      	b.n	800525e <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004d0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	f000 8117 	beq.w	8004f44 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004d16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d1a:	f003 0301 	and.w	r3, r3, #1
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d106      	bne.n	8004d30 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004d22:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004d26:	4b85      	ldr	r3, [pc, #532]	; (8004f3c <HAL_UART_IRQHandler+0x298>)
 8004d28:	4013      	ands	r3, r2
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	f000 810a 	beq.w	8004f44 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004d30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d34:	f003 0301 	and.w	r3, r3, #1
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d011      	beq.n	8004d60 <HAL_UART_IRQHandler+0xbc>
 8004d3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d00b      	beq.n	8004d60 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d56:	f043 0201 	orr.w	r2, r3, #1
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d64:	f003 0302 	and.w	r3, r3, #2
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d011      	beq.n	8004d90 <HAL_UART_IRQHandler+0xec>
 8004d6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d70:	f003 0301 	and.w	r3, r3, #1
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d00b      	beq.n	8004d90 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2202      	movs	r2, #2
 8004d7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d86:	f043 0204 	orr.w	r2, r3, #4
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d94:	f003 0304 	and.w	r3, r3, #4
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d011      	beq.n	8004dc0 <HAL_UART_IRQHandler+0x11c>
 8004d9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004da0:	f003 0301 	and.w	r3, r3, #1
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d00b      	beq.n	8004dc0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	2204      	movs	r2, #4
 8004dae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004db6:	f043 0202 	orr.w	r2, r3, #2
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004dc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dc4:	f003 0308 	and.w	r3, r3, #8
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d017      	beq.n	8004dfc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004dcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dd0:	f003 0320 	and.w	r3, r3, #32
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d105      	bne.n	8004de4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004dd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ddc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d00b      	beq.n	8004dfc <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2208      	movs	r2, #8
 8004dea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004df2:	f043 0208 	orr.w	r2, r3, #8
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004dfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d012      	beq.n	8004e2e <HAL_UART_IRQHandler+0x18a>
 8004e08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e0c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d00c      	beq.n	8004e2e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e1c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e24:	f043 0220 	orr.w	r2, r3, #32
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	f000 8214 	beq.w	8005262 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004e3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e3e:	f003 0320 	and.w	r3, r3, #32
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d00d      	beq.n	8004e62 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004e46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e4a:	f003 0320 	and.w	r3, r3, #32
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d007      	beq.n	8004e62 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d003      	beq.n	8004e62 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e68:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e76:	2b40      	cmp	r3, #64	; 0x40
 8004e78:	d005      	beq.n	8004e86 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004e7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e7e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d04f      	beq.n	8004f26 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f000 fe7f 	bl	8005b8a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e96:	2b40      	cmp	r3, #64	; 0x40
 8004e98:	d141      	bne.n	8004f1e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	3308      	adds	r3, #8
 8004ea0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004ea8:	e853 3f00 	ldrex	r3, [r3]
 8004eac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004eb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004eb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004eb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	3308      	adds	r3, #8
 8004ec2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004ec6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004eca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ece:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004ed2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004ed6:	e841 2300 	strex	r3, r2, [r1]
 8004eda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004ede:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d1d9      	bne.n	8004e9a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d013      	beq.n	8004f16 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ef2:	4a13      	ldr	r2, [pc, #76]	; (8004f40 <HAL_UART_IRQHandler+0x29c>)
 8004ef4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004efa:	4618      	mov	r0, r3
 8004efc:	f7fc ff99 	bl	8001e32 <HAL_DMA_Abort_IT>
 8004f00:	4603      	mov	r3, r0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d017      	beq.n	8004f36 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004f10:	4610      	mov	r0, r2
 8004f12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f14:	e00f      	b.n	8004f36 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 f9b8 	bl	800528c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f1c:	e00b      	b.n	8004f36 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 f9b4 	bl	800528c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f24:	e007      	b.n	8004f36 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f000 f9b0 	bl	800528c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004f34:	e195      	b.n	8005262 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f36:	bf00      	nop
    return;
 8004f38:	e193      	b.n	8005262 <HAL_UART_IRQHandler+0x5be>
 8004f3a:	bf00      	nop
 8004f3c:	04000120 	.word	0x04000120
 8004f40:	08005c53 	.word	0x08005c53

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	f040 814e 	bne.w	80051ea <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004f4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f52:	f003 0310 	and.w	r3, r3, #16
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	f000 8147 	beq.w	80051ea <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004f5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f60:	f003 0310 	and.w	r3, r3, #16
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	f000 8140 	beq.w	80051ea <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2210      	movs	r2, #16
 8004f70:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f7c:	2b40      	cmp	r3, #64	; 0x40
 8004f7e:	f040 80b8 	bne.w	80050f2 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004f8e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	f000 8167 	beq.w	8005266 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004f9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	f080 815f 	bcs.w	8005266 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004fae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 0320 	and.w	r3, r3, #32
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	f040 8086 	bne.w	80050d0 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fcc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004fd0:	e853 3f00 	ldrex	r3, [r3]
 8004fd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004fd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004fdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fe0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	461a      	mov	r2, r3
 8004fea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004fee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004ff2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004ffa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004ffe:	e841 2300 	strex	r3, r2, [r1]
 8005002:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005006:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800500a:	2b00      	cmp	r3, #0
 800500c:	d1da      	bne.n	8004fc4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	3308      	adds	r3, #8
 8005014:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005016:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005018:	e853 3f00 	ldrex	r3, [r3]
 800501c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800501e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005020:	f023 0301 	bic.w	r3, r3, #1
 8005024:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	3308      	adds	r3, #8
 800502e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005032:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005036:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005038:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800503a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800503e:	e841 2300 	strex	r3, r2, [r1]
 8005042:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005044:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005046:	2b00      	cmp	r3, #0
 8005048:	d1e1      	bne.n	800500e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	3308      	adds	r3, #8
 8005050:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005052:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005054:	e853 3f00 	ldrex	r3, [r3]
 8005058:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800505a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800505c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005060:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	3308      	adds	r3, #8
 800506a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800506e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005070:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005072:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005074:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005076:	e841 2300 	strex	r3, r2, [r1]
 800507a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800507c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1e3      	bne.n	800504a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2220      	movs	r2, #32
 8005086:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005096:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005098:	e853 3f00 	ldrex	r3, [r3]
 800509c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800509e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050a0:	f023 0310 	bic.w	r3, r3, #16
 80050a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	461a      	mov	r2, r3
 80050ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80050b2:	65bb      	str	r3, [r7, #88]	; 0x58
 80050b4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80050b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80050ba:	e841 2300 	strex	r3, r2, [r1]
 80050be:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80050c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d1e4      	bne.n	8005090 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050ca:	4618      	mov	r0, r3
 80050cc:	f7fc fe73 	bl	8001db6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2202      	movs	r2, #2
 80050d4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	4619      	mov	r1, r3
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f000 f8d8 	bl	80052a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80050f0:	e0b9      	b.n	8005266 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80050fe:	b29b      	uxth	r3, r3
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800510c:	b29b      	uxth	r3, r3
 800510e:	2b00      	cmp	r3, #0
 8005110:	f000 80ab 	beq.w	800526a <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8005114:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005118:	2b00      	cmp	r3, #0
 800511a:	f000 80a6 	beq.w	800526a <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005126:	e853 3f00 	ldrex	r3, [r3]
 800512a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800512c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800512e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005132:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	461a      	mov	r2, r3
 800513c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005140:	647b      	str	r3, [r7, #68]	; 0x44
 8005142:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005144:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005146:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005148:	e841 2300 	strex	r3, r2, [r1]
 800514c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800514e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005150:	2b00      	cmp	r3, #0
 8005152:	d1e4      	bne.n	800511e <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	3308      	adds	r3, #8
 800515a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800515c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515e:	e853 3f00 	ldrex	r3, [r3]
 8005162:	623b      	str	r3, [r7, #32]
   return(result);
 8005164:	6a3b      	ldr	r3, [r7, #32]
 8005166:	f023 0301 	bic.w	r3, r3, #1
 800516a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	3308      	adds	r3, #8
 8005174:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005178:	633a      	str	r2, [r7, #48]	; 0x30
 800517a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800517c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800517e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005180:	e841 2300 	strex	r3, r2, [r1]
 8005184:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005188:	2b00      	cmp	r3, #0
 800518a:	d1e3      	bne.n	8005154 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2220      	movs	r2, #32
 8005190:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	e853 3f00 	ldrex	r3, [r3]
 80051ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f023 0310 	bic.w	r3, r3, #16
 80051b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	461a      	mov	r2, r3
 80051be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80051c2:	61fb      	str	r3, [r7, #28]
 80051c4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c6:	69b9      	ldr	r1, [r7, #24]
 80051c8:	69fa      	ldr	r2, [r7, #28]
 80051ca:	e841 2300 	strex	r3, r2, [r1]
 80051ce:	617b      	str	r3, [r7, #20]
   return(result);
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d1e4      	bne.n	80051a0 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2202      	movs	r2, #2
 80051da:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80051dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80051e0:	4619      	mov	r1, r3
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 f85c 	bl	80052a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80051e8:	e03f      	b.n	800526a <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80051ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00e      	beq.n	8005214 <HAL_UART_IRQHandler+0x570>
 80051f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d008      	beq.n	8005214 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800520a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f000 fe1c 	bl	8005e4a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005212:	e02d      	b.n	8005270 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005214:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005218:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800521c:	2b00      	cmp	r3, #0
 800521e:	d00e      	beq.n	800523e <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005220:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005224:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005228:	2b00      	cmp	r3, #0
 800522a:	d008      	beq.n	800523e <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005230:	2b00      	cmp	r3, #0
 8005232:	d01c      	beq.n	800526e <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	4798      	blx	r3
    }
    return;
 800523c:	e017      	b.n	800526e <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800523e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005246:	2b00      	cmp	r3, #0
 8005248:	d012      	beq.n	8005270 <HAL_UART_IRQHandler+0x5cc>
 800524a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800524e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005252:	2b00      	cmp	r3, #0
 8005254:	d00c      	beq.n	8005270 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f000 fdcd 	bl	8005df6 <UART_EndTransmit_IT>
    return;
 800525c:	e008      	b.n	8005270 <HAL_UART_IRQHandler+0x5cc>
      return;
 800525e:	bf00      	nop
 8005260:	e006      	b.n	8005270 <HAL_UART_IRQHandler+0x5cc>
    return;
 8005262:	bf00      	nop
 8005264:	e004      	b.n	8005270 <HAL_UART_IRQHandler+0x5cc>
      return;
 8005266:	bf00      	nop
 8005268:	e002      	b.n	8005270 <HAL_UART_IRQHandler+0x5cc>
      return;
 800526a:	bf00      	nop
 800526c:	e000      	b.n	8005270 <HAL_UART_IRQHandler+0x5cc>
    return;
 800526e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005270:	37e8      	adds	r7, #232	; 0xe8
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}
 8005276:	bf00      	nop

08005278 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005278:	b480      	push	{r7}
 800527a:	b083      	sub	sp, #12
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005280:	bf00      	nop
 8005282:	370c      	adds	r7, #12
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr

0800528c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800528c:	b480      	push	{r7}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005294:	bf00      	nop
 8005296:	370c      	adds	r7, #12
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr

080052a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	460b      	mov	r3, r1
 80052aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80052ac:	bf00      	nop
 80052ae:	370c      	adds	r7, #12
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052bc:	b08a      	sub	sp, #40	; 0x28
 80052be:	af00      	add	r7, sp, #0
 80052c0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80052c2:	2300      	movs	r3, #0
 80052c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	689a      	ldr	r2, [r3, #8]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	691b      	ldr	r3, [r3, #16]
 80052d0:	431a      	orrs	r2, r3
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	695b      	ldr	r3, [r3, #20]
 80052d6:	431a      	orrs	r2, r3
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	69db      	ldr	r3, [r3, #28]
 80052dc:	4313      	orrs	r3, r2
 80052de:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	4ba4      	ldr	r3, [pc, #656]	; (8005578 <UART_SetConfig+0x2c0>)
 80052e8:	4013      	ands	r3, r2
 80052ea:	68fa      	ldr	r2, [r7, #12]
 80052ec:	6812      	ldr	r2, [r2, #0]
 80052ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80052f0:	430b      	orrs	r3, r1
 80052f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	68da      	ldr	r2, [r3, #12]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	430a      	orrs	r2, r1
 8005308:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	699b      	ldr	r3, [r3, #24]
 800530e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a99      	ldr	r2, [pc, #612]	; (800557c <UART_SetConfig+0x2c4>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d004      	beq.n	8005324 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6a1b      	ldr	r3, [r3, #32]
 800531e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005320:	4313      	orrs	r3, r2
 8005322:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005334:	430a      	orrs	r2, r1
 8005336:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a90      	ldr	r2, [pc, #576]	; (8005580 <UART_SetConfig+0x2c8>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d126      	bne.n	8005390 <UART_SetConfig+0xd8>
 8005342:	4b90      	ldr	r3, [pc, #576]	; (8005584 <UART_SetConfig+0x2cc>)
 8005344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005348:	f003 0303 	and.w	r3, r3, #3
 800534c:	2b03      	cmp	r3, #3
 800534e:	d81b      	bhi.n	8005388 <UART_SetConfig+0xd0>
 8005350:	a201      	add	r2, pc, #4	; (adr r2, 8005358 <UART_SetConfig+0xa0>)
 8005352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005356:	bf00      	nop
 8005358:	08005369 	.word	0x08005369
 800535c:	08005379 	.word	0x08005379
 8005360:	08005371 	.word	0x08005371
 8005364:	08005381 	.word	0x08005381
 8005368:	2301      	movs	r3, #1
 800536a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800536e:	e116      	b.n	800559e <UART_SetConfig+0x2e6>
 8005370:	2302      	movs	r3, #2
 8005372:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005376:	e112      	b.n	800559e <UART_SetConfig+0x2e6>
 8005378:	2304      	movs	r3, #4
 800537a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800537e:	e10e      	b.n	800559e <UART_SetConfig+0x2e6>
 8005380:	2308      	movs	r3, #8
 8005382:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005386:	e10a      	b.n	800559e <UART_SetConfig+0x2e6>
 8005388:	2310      	movs	r3, #16
 800538a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800538e:	e106      	b.n	800559e <UART_SetConfig+0x2e6>
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a7c      	ldr	r2, [pc, #496]	; (8005588 <UART_SetConfig+0x2d0>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d138      	bne.n	800540c <UART_SetConfig+0x154>
 800539a:	4b7a      	ldr	r3, [pc, #488]	; (8005584 <UART_SetConfig+0x2cc>)
 800539c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053a0:	f003 030c 	and.w	r3, r3, #12
 80053a4:	2b0c      	cmp	r3, #12
 80053a6:	d82d      	bhi.n	8005404 <UART_SetConfig+0x14c>
 80053a8:	a201      	add	r2, pc, #4	; (adr r2, 80053b0 <UART_SetConfig+0xf8>)
 80053aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ae:	bf00      	nop
 80053b0:	080053e5 	.word	0x080053e5
 80053b4:	08005405 	.word	0x08005405
 80053b8:	08005405 	.word	0x08005405
 80053bc:	08005405 	.word	0x08005405
 80053c0:	080053f5 	.word	0x080053f5
 80053c4:	08005405 	.word	0x08005405
 80053c8:	08005405 	.word	0x08005405
 80053cc:	08005405 	.word	0x08005405
 80053d0:	080053ed 	.word	0x080053ed
 80053d4:	08005405 	.word	0x08005405
 80053d8:	08005405 	.word	0x08005405
 80053dc:	08005405 	.word	0x08005405
 80053e0:	080053fd 	.word	0x080053fd
 80053e4:	2300      	movs	r3, #0
 80053e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053ea:	e0d8      	b.n	800559e <UART_SetConfig+0x2e6>
 80053ec:	2302      	movs	r3, #2
 80053ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053f2:	e0d4      	b.n	800559e <UART_SetConfig+0x2e6>
 80053f4:	2304      	movs	r3, #4
 80053f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053fa:	e0d0      	b.n	800559e <UART_SetConfig+0x2e6>
 80053fc:	2308      	movs	r3, #8
 80053fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005402:	e0cc      	b.n	800559e <UART_SetConfig+0x2e6>
 8005404:	2310      	movs	r3, #16
 8005406:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800540a:	e0c8      	b.n	800559e <UART_SetConfig+0x2e6>
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a5e      	ldr	r2, [pc, #376]	; (800558c <UART_SetConfig+0x2d4>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d125      	bne.n	8005462 <UART_SetConfig+0x1aa>
 8005416:	4b5b      	ldr	r3, [pc, #364]	; (8005584 <UART_SetConfig+0x2cc>)
 8005418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800541c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005420:	2b30      	cmp	r3, #48	; 0x30
 8005422:	d016      	beq.n	8005452 <UART_SetConfig+0x19a>
 8005424:	2b30      	cmp	r3, #48	; 0x30
 8005426:	d818      	bhi.n	800545a <UART_SetConfig+0x1a2>
 8005428:	2b20      	cmp	r3, #32
 800542a:	d00a      	beq.n	8005442 <UART_SetConfig+0x18a>
 800542c:	2b20      	cmp	r3, #32
 800542e:	d814      	bhi.n	800545a <UART_SetConfig+0x1a2>
 8005430:	2b00      	cmp	r3, #0
 8005432:	d002      	beq.n	800543a <UART_SetConfig+0x182>
 8005434:	2b10      	cmp	r3, #16
 8005436:	d008      	beq.n	800544a <UART_SetConfig+0x192>
 8005438:	e00f      	b.n	800545a <UART_SetConfig+0x1a2>
 800543a:	2300      	movs	r3, #0
 800543c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005440:	e0ad      	b.n	800559e <UART_SetConfig+0x2e6>
 8005442:	2302      	movs	r3, #2
 8005444:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005448:	e0a9      	b.n	800559e <UART_SetConfig+0x2e6>
 800544a:	2304      	movs	r3, #4
 800544c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005450:	e0a5      	b.n	800559e <UART_SetConfig+0x2e6>
 8005452:	2308      	movs	r3, #8
 8005454:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005458:	e0a1      	b.n	800559e <UART_SetConfig+0x2e6>
 800545a:	2310      	movs	r3, #16
 800545c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005460:	e09d      	b.n	800559e <UART_SetConfig+0x2e6>
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a4a      	ldr	r2, [pc, #296]	; (8005590 <UART_SetConfig+0x2d8>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d125      	bne.n	80054b8 <UART_SetConfig+0x200>
 800546c:	4b45      	ldr	r3, [pc, #276]	; (8005584 <UART_SetConfig+0x2cc>)
 800546e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005472:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005476:	2bc0      	cmp	r3, #192	; 0xc0
 8005478:	d016      	beq.n	80054a8 <UART_SetConfig+0x1f0>
 800547a:	2bc0      	cmp	r3, #192	; 0xc0
 800547c:	d818      	bhi.n	80054b0 <UART_SetConfig+0x1f8>
 800547e:	2b80      	cmp	r3, #128	; 0x80
 8005480:	d00a      	beq.n	8005498 <UART_SetConfig+0x1e0>
 8005482:	2b80      	cmp	r3, #128	; 0x80
 8005484:	d814      	bhi.n	80054b0 <UART_SetConfig+0x1f8>
 8005486:	2b00      	cmp	r3, #0
 8005488:	d002      	beq.n	8005490 <UART_SetConfig+0x1d8>
 800548a:	2b40      	cmp	r3, #64	; 0x40
 800548c:	d008      	beq.n	80054a0 <UART_SetConfig+0x1e8>
 800548e:	e00f      	b.n	80054b0 <UART_SetConfig+0x1f8>
 8005490:	2300      	movs	r3, #0
 8005492:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005496:	e082      	b.n	800559e <UART_SetConfig+0x2e6>
 8005498:	2302      	movs	r3, #2
 800549a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800549e:	e07e      	b.n	800559e <UART_SetConfig+0x2e6>
 80054a0:	2304      	movs	r3, #4
 80054a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054a6:	e07a      	b.n	800559e <UART_SetConfig+0x2e6>
 80054a8:	2308      	movs	r3, #8
 80054aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054ae:	e076      	b.n	800559e <UART_SetConfig+0x2e6>
 80054b0:	2310      	movs	r3, #16
 80054b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054b6:	e072      	b.n	800559e <UART_SetConfig+0x2e6>
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a35      	ldr	r2, [pc, #212]	; (8005594 <UART_SetConfig+0x2dc>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d12a      	bne.n	8005518 <UART_SetConfig+0x260>
 80054c2:	4b30      	ldr	r3, [pc, #192]	; (8005584 <UART_SetConfig+0x2cc>)
 80054c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054d0:	d01a      	beq.n	8005508 <UART_SetConfig+0x250>
 80054d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054d6:	d81b      	bhi.n	8005510 <UART_SetConfig+0x258>
 80054d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054dc:	d00c      	beq.n	80054f8 <UART_SetConfig+0x240>
 80054de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054e2:	d815      	bhi.n	8005510 <UART_SetConfig+0x258>
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d003      	beq.n	80054f0 <UART_SetConfig+0x238>
 80054e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054ec:	d008      	beq.n	8005500 <UART_SetConfig+0x248>
 80054ee:	e00f      	b.n	8005510 <UART_SetConfig+0x258>
 80054f0:	2300      	movs	r3, #0
 80054f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054f6:	e052      	b.n	800559e <UART_SetConfig+0x2e6>
 80054f8:	2302      	movs	r3, #2
 80054fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054fe:	e04e      	b.n	800559e <UART_SetConfig+0x2e6>
 8005500:	2304      	movs	r3, #4
 8005502:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005506:	e04a      	b.n	800559e <UART_SetConfig+0x2e6>
 8005508:	2308      	movs	r3, #8
 800550a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800550e:	e046      	b.n	800559e <UART_SetConfig+0x2e6>
 8005510:	2310      	movs	r3, #16
 8005512:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005516:	e042      	b.n	800559e <UART_SetConfig+0x2e6>
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a17      	ldr	r2, [pc, #92]	; (800557c <UART_SetConfig+0x2c4>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d13a      	bne.n	8005598 <UART_SetConfig+0x2e0>
 8005522:	4b18      	ldr	r3, [pc, #96]	; (8005584 <UART_SetConfig+0x2cc>)
 8005524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005528:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800552c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005530:	d01a      	beq.n	8005568 <UART_SetConfig+0x2b0>
 8005532:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005536:	d81b      	bhi.n	8005570 <UART_SetConfig+0x2b8>
 8005538:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800553c:	d00c      	beq.n	8005558 <UART_SetConfig+0x2a0>
 800553e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005542:	d815      	bhi.n	8005570 <UART_SetConfig+0x2b8>
 8005544:	2b00      	cmp	r3, #0
 8005546:	d003      	beq.n	8005550 <UART_SetConfig+0x298>
 8005548:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800554c:	d008      	beq.n	8005560 <UART_SetConfig+0x2a8>
 800554e:	e00f      	b.n	8005570 <UART_SetConfig+0x2b8>
 8005550:	2300      	movs	r3, #0
 8005552:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005556:	e022      	b.n	800559e <UART_SetConfig+0x2e6>
 8005558:	2302      	movs	r3, #2
 800555a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800555e:	e01e      	b.n	800559e <UART_SetConfig+0x2e6>
 8005560:	2304      	movs	r3, #4
 8005562:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005566:	e01a      	b.n	800559e <UART_SetConfig+0x2e6>
 8005568:	2308      	movs	r3, #8
 800556a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800556e:	e016      	b.n	800559e <UART_SetConfig+0x2e6>
 8005570:	2310      	movs	r3, #16
 8005572:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005576:	e012      	b.n	800559e <UART_SetConfig+0x2e6>
 8005578:	efff69f3 	.word	0xefff69f3
 800557c:	40008000 	.word	0x40008000
 8005580:	40013800 	.word	0x40013800
 8005584:	40021000 	.word	0x40021000
 8005588:	40004400 	.word	0x40004400
 800558c:	40004800 	.word	0x40004800
 8005590:	40004c00 	.word	0x40004c00
 8005594:	40005000 	.word	0x40005000
 8005598:	2310      	movs	r3, #16
 800559a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a9f      	ldr	r2, [pc, #636]	; (8005820 <UART_SetConfig+0x568>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d17a      	bne.n	800569e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80055a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80055ac:	2b08      	cmp	r3, #8
 80055ae:	d824      	bhi.n	80055fa <UART_SetConfig+0x342>
 80055b0:	a201      	add	r2, pc, #4	; (adr r2, 80055b8 <UART_SetConfig+0x300>)
 80055b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b6:	bf00      	nop
 80055b8:	080055dd 	.word	0x080055dd
 80055bc:	080055fb 	.word	0x080055fb
 80055c0:	080055e5 	.word	0x080055e5
 80055c4:	080055fb 	.word	0x080055fb
 80055c8:	080055eb 	.word	0x080055eb
 80055cc:	080055fb 	.word	0x080055fb
 80055d0:	080055fb 	.word	0x080055fb
 80055d4:	080055fb 	.word	0x080055fb
 80055d8:	080055f3 	.word	0x080055f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055dc:	f7fd fd82 	bl	80030e4 <HAL_RCC_GetPCLK1Freq>
 80055e0:	61f8      	str	r0, [r7, #28]
        break;
 80055e2:	e010      	b.n	8005606 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055e4:	4b8f      	ldr	r3, [pc, #572]	; (8005824 <UART_SetConfig+0x56c>)
 80055e6:	61fb      	str	r3, [r7, #28]
        break;
 80055e8:	e00d      	b.n	8005606 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055ea:	f7fd fce3 	bl	8002fb4 <HAL_RCC_GetSysClockFreq>
 80055ee:	61f8      	str	r0, [r7, #28]
        break;
 80055f0:	e009      	b.n	8005606 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055f6:	61fb      	str	r3, [r7, #28]
        break;
 80055f8:	e005      	b.n	8005606 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80055fa:	2300      	movs	r3, #0
 80055fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005604:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	2b00      	cmp	r3, #0
 800560a:	f000 80fb 	beq.w	8005804 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	685a      	ldr	r2, [r3, #4]
 8005612:	4613      	mov	r3, r2
 8005614:	005b      	lsls	r3, r3, #1
 8005616:	4413      	add	r3, r2
 8005618:	69fa      	ldr	r2, [r7, #28]
 800561a:	429a      	cmp	r2, r3
 800561c:	d305      	bcc.n	800562a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005624:	69fa      	ldr	r2, [r7, #28]
 8005626:	429a      	cmp	r2, r3
 8005628:	d903      	bls.n	8005632 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005630:	e0e8      	b.n	8005804 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	2200      	movs	r2, #0
 8005636:	461c      	mov	r4, r3
 8005638:	4615      	mov	r5, r2
 800563a:	f04f 0200 	mov.w	r2, #0
 800563e:	f04f 0300 	mov.w	r3, #0
 8005642:	022b      	lsls	r3, r5, #8
 8005644:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005648:	0222      	lsls	r2, r4, #8
 800564a:	68f9      	ldr	r1, [r7, #12]
 800564c:	6849      	ldr	r1, [r1, #4]
 800564e:	0849      	lsrs	r1, r1, #1
 8005650:	2000      	movs	r0, #0
 8005652:	4688      	mov	r8, r1
 8005654:	4681      	mov	r9, r0
 8005656:	eb12 0a08 	adds.w	sl, r2, r8
 800565a:	eb43 0b09 	adc.w	fp, r3, r9
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	603b      	str	r3, [r7, #0]
 8005666:	607a      	str	r2, [r7, #4]
 8005668:	e9d7 2300 	ldrd	r2, r3, [r7]
 800566c:	4650      	mov	r0, sl
 800566e:	4659      	mov	r1, fp
 8005670:	f7fb fa9a 	bl	8000ba8 <__aeabi_uldivmod>
 8005674:	4602      	mov	r2, r0
 8005676:	460b      	mov	r3, r1
 8005678:	4613      	mov	r3, r2
 800567a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005682:	d308      	bcc.n	8005696 <UART_SetConfig+0x3de>
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800568a:	d204      	bcs.n	8005696 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	69ba      	ldr	r2, [r7, #24]
 8005692:	60da      	str	r2, [r3, #12]
 8005694:	e0b6      	b.n	8005804 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800569c:	e0b2      	b.n	8005804 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	69db      	ldr	r3, [r3, #28]
 80056a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056a6:	d15e      	bne.n	8005766 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80056a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80056ac:	2b08      	cmp	r3, #8
 80056ae:	d828      	bhi.n	8005702 <UART_SetConfig+0x44a>
 80056b0:	a201      	add	r2, pc, #4	; (adr r2, 80056b8 <UART_SetConfig+0x400>)
 80056b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b6:	bf00      	nop
 80056b8:	080056dd 	.word	0x080056dd
 80056bc:	080056e5 	.word	0x080056e5
 80056c0:	080056ed 	.word	0x080056ed
 80056c4:	08005703 	.word	0x08005703
 80056c8:	080056f3 	.word	0x080056f3
 80056cc:	08005703 	.word	0x08005703
 80056d0:	08005703 	.word	0x08005703
 80056d4:	08005703 	.word	0x08005703
 80056d8:	080056fb 	.word	0x080056fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056dc:	f7fd fd02 	bl	80030e4 <HAL_RCC_GetPCLK1Freq>
 80056e0:	61f8      	str	r0, [r7, #28]
        break;
 80056e2:	e014      	b.n	800570e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056e4:	f7fd fd14 	bl	8003110 <HAL_RCC_GetPCLK2Freq>
 80056e8:	61f8      	str	r0, [r7, #28]
        break;
 80056ea:	e010      	b.n	800570e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056ec:	4b4d      	ldr	r3, [pc, #308]	; (8005824 <UART_SetConfig+0x56c>)
 80056ee:	61fb      	str	r3, [r7, #28]
        break;
 80056f0:	e00d      	b.n	800570e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056f2:	f7fd fc5f 	bl	8002fb4 <HAL_RCC_GetSysClockFreq>
 80056f6:	61f8      	str	r0, [r7, #28]
        break;
 80056f8:	e009      	b.n	800570e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056fe:	61fb      	str	r3, [r7, #28]
        break;
 8005700:	e005      	b.n	800570e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005702:	2300      	movs	r3, #0
 8005704:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800570c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d077      	beq.n	8005804 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	005a      	lsls	r2, r3, #1
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	085b      	lsrs	r3, r3, #1
 800571e:	441a      	add	r2, r3
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	fbb2 f3f3 	udiv	r3, r2, r3
 8005728:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	2b0f      	cmp	r3, #15
 800572e:	d916      	bls.n	800575e <UART_SetConfig+0x4a6>
 8005730:	69bb      	ldr	r3, [r7, #24]
 8005732:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005736:	d212      	bcs.n	800575e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	b29b      	uxth	r3, r3
 800573c:	f023 030f 	bic.w	r3, r3, #15
 8005740:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005742:	69bb      	ldr	r3, [r7, #24]
 8005744:	085b      	lsrs	r3, r3, #1
 8005746:	b29b      	uxth	r3, r3
 8005748:	f003 0307 	and.w	r3, r3, #7
 800574c:	b29a      	uxth	r2, r3
 800574e:	8afb      	ldrh	r3, [r7, #22]
 8005750:	4313      	orrs	r3, r2
 8005752:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	8afa      	ldrh	r2, [r7, #22]
 800575a:	60da      	str	r2, [r3, #12]
 800575c:	e052      	b.n	8005804 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005764:	e04e      	b.n	8005804 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005766:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800576a:	2b08      	cmp	r3, #8
 800576c:	d827      	bhi.n	80057be <UART_SetConfig+0x506>
 800576e:	a201      	add	r2, pc, #4	; (adr r2, 8005774 <UART_SetConfig+0x4bc>)
 8005770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005774:	08005799 	.word	0x08005799
 8005778:	080057a1 	.word	0x080057a1
 800577c:	080057a9 	.word	0x080057a9
 8005780:	080057bf 	.word	0x080057bf
 8005784:	080057af 	.word	0x080057af
 8005788:	080057bf 	.word	0x080057bf
 800578c:	080057bf 	.word	0x080057bf
 8005790:	080057bf 	.word	0x080057bf
 8005794:	080057b7 	.word	0x080057b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005798:	f7fd fca4 	bl	80030e4 <HAL_RCC_GetPCLK1Freq>
 800579c:	61f8      	str	r0, [r7, #28]
        break;
 800579e:	e014      	b.n	80057ca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057a0:	f7fd fcb6 	bl	8003110 <HAL_RCC_GetPCLK2Freq>
 80057a4:	61f8      	str	r0, [r7, #28]
        break;
 80057a6:	e010      	b.n	80057ca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057a8:	4b1e      	ldr	r3, [pc, #120]	; (8005824 <UART_SetConfig+0x56c>)
 80057aa:	61fb      	str	r3, [r7, #28]
        break;
 80057ac:	e00d      	b.n	80057ca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057ae:	f7fd fc01 	bl	8002fb4 <HAL_RCC_GetSysClockFreq>
 80057b2:	61f8      	str	r0, [r7, #28]
        break;
 80057b4:	e009      	b.n	80057ca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057ba:	61fb      	str	r3, [r7, #28]
        break;
 80057bc:	e005      	b.n	80057ca <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80057be:	2300      	movs	r3, #0
 80057c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80057c8:	bf00      	nop
    }

    if (pclk != 0U)
 80057ca:	69fb      	ldr	r3, [r7, #28]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d019      	beq.n	8005804 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	085a      	lsrs	r2, r3, #1
 80057d6:	69fb      	ldr	r3, [r7, #28]
 80057d8:	441a      	add	r2, r3
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	fbb2 f3f3 	udiv	r3, r2, r3
 80057e2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057e4:	69bb      	ldr	r3, [r7, #24]
 80057e6:	2b0f      	cmp	r3, #15
 80057e8:	d909      	bls.n	80057fe <UART_SetConfig+0x546>
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057f0:	d205      	bcs.n	80057fe <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	b29a      	uxth	r2, r3
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	60da      	str	r2, [r3, #12]
 80057fc:	e002      	b.n	8005804 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2200      	movs	r2, #0
 8005808:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2200      	movs	r2, #0
 800580e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005810:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005814:	4618      	mov	r0, r3
 8005816:	3728      	adds	r7, #40	; 0x28
 8005818:	46bd      	mov	sp, r7
 800581a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800581e:	bf00      	nop
 8005820:	40008000 	.word	0x40008000
 8005824:	00f42400 	.word	0x00f42400

08005828 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005828:	b480      	push	{r7}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005834:	f003 0308 	and.w	r3, r3, #8
 8005838:	2b00      	cmp	r3, #0
 800583a:	d00a      	beq.n	8005852 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	430a      	orrs	r2, r1
 8005850:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005856:	f003 0301 	and.w	r3, r3, #1
 800585a:	2b00      	cmp	r3, #0
 800585c:	d00a      	beq.n	8005874 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	430a      	orrs	r2, r1
 8005872:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005878:	f003 0302 	and.w	r3, r3, #2
 800587c:	2b00      	cmp	r3, #0
 800587e:	d00a      	beq.n	8005896 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	430a      	orrs	r2, r1
 8005894:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589a:	f003 0304 	and.w	r3, r3, #4
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d00a      	beq.n	80058b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	430a      	orrs	r2, r1
 80058b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058bc:	f003 0310 	and.w	r3, r3, #16
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d00a      	beq.n	80058da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	430a      	orrs	r2, r1
 80058d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058de:	f003 0320 	and.w	r3, r3, #32
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d00a      	beq.n	80058fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	430a      	orrs	r2, r1
 80058fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005904:	2b00      	cmp	r3, #0
 8005906:	d01a      	beq.n	800593e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	430a      	orrs	r2, r1
 800591c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005922:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005926:	d10a      	bne.n	800593e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	430a      	orrs	r2, r1
 800593c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005946:	2b00      	cmp	r3, #0
 8005948:	d00a      	beq.n	8005960 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	430a      	orrs	r2, r1
 800595e:	605a      	str	r2, [r3, #4]
  }
}
 8005960:	bf00      	nop
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b098      	sub	sp, #96	; 0x60
 8005970:	af02      	add	r7, sp, #8
 8005972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800597c:	f7fc f8fe 	bl	8001b7c <HAL_GetTick>
 8005980:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 0308 	and.w	r3, r3, #8
 800598c:	2b08      	cmp	r3, #8
 800598e:	d12e      	bne.n	80059ee <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005990:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005994:	9300      	str	r3, [sp, #0]
 8005996:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005998:	2200      	movs	r2, #0
 800599a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 f88c 	bl	8005abc <UART_WaitOnFlagUntilTimeout>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d021      	beq.n	80059ee <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b2:	e853 3f00 	ldrex	r3, [r3]
 80059b6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80059b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059be:	653b      	str	r3, [r7, #80]	; 0x50
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	461a      	mov	r2, r3
 80059c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059c8:	647b      	str	r3, [r7, #68]	; 0x44
 80059ca:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80059ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80059d0:	e841 2300 	strex	r3, r2, [r1]
 80059d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80059d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d1e6      	bne.n	80059aa <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2220      	movs	r2, #32
 80059e0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059ea:	2303      	movs	r3, #3
 80059ec:	e062      	b.n	8005ab4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f003 0304 	and.w	r3, r3, #4
 80059f8:	2b04      	cmp	r3, #4
 80059fa:	d149      	bne.n	8005a90 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a00:	9300      	str	r3, [sp, #0]
 8005a02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a04:	2200      	movs	r2, #0
 8005a06:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 f856 	bl	8005abc <UART_WaitOnFlagUntilTimeout>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d03c      	beq.n	8005a90 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1e:	e853 3f00 	ldrex	r3, [r3]
 8005a22:	623b      	str	r3, [r7, #32]
   return(result);
 8005a24:	6a3b      	ldr	r3, [r7, #32]
 8005a26:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	461a      	mov	r2, r3
 8005a32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a34:	633b      	str	r3, [r7, #48]	; 0x30
 8005a36:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a38:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a3c:	e841 2300 	strex	r3, r2, [r1]
 8005a40:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d1e6      	bne.n	8005a16 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	3308      	adds	r3, #8
 8005a4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	e853 3f00 	ldrex	r3, [r3]
 8005a56:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f023 0301 	bic.w	r3, r3, #1
 8005a5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	3308      	adds	r3, #8
 8005a66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a68:	61fa      	str	r2, [r7, #28]
 8005a6a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a6c:	69b9      	ldr	r1, [r7, #24]
 8005a6e:	69fa      	ldr	r2, [r7, #28]
 8005a70:	e841 2300 	strex	r3, r2, [r1]
 8005a74:	617b      	str	r3, [r7, #20]
   return(result);
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d1e5      	bne.n	8005a48 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2220      	movs	r2, #32
 8005a80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a8c:	2303      	movs	r3, #3
 8005a8e:	e011      	b.n	8005ab4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2220      	movs	r2, #32
 8005a94:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2220      	movs	r2, #32
 8005a9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005ab2:	2300      	movs	r3, #0
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3758      	adds	r7, #88	; 0x58
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}

08005abc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b084      	sub	sp, #16
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	60f8      	str	r0, [r7, #12]
 8005ac4:	60b9      	str	r1, [r7, #8]
 8005ac6:	603b      	str	r3, [r7, #0]
 8005ac8:	4613      	mov	r3, r2
 8005aca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005acc:	e049      	b.n	8005b62 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ad4:	d045      	beq.n	8005b62 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ad6:	f7fc f851 	bl	8001b7c <HAL_GetTick>
 8005ada:	4602      	mov	r2, r0
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	1ad3      	subs	r3, r2, r3
 8005ae0:	69ba      	ldr	r2, [r7, #24]
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d302      	bcc.n	8005aec <UART_WaitOnFlagUntilTimeout+0x30>
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d101      	bne.n	8005af0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005aec:	2303      	movs	r3, #3
 8005aee:	e048      	b.n	8005b82 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f003 0304 	and.w	r3, r3, #4
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d031      	beq.n	8005b62 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	69db      	ldr	r3, [r3, #28]
 8005b04:	f003 0308 	and.w	r3, r3, #8
 8005b08:	2b08      	cmp	r3, #8
 8005b0a:	d110      	bne.n	8005b2e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	2208      	movs	r2, #8
 8005b12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b14:	68f8      	ldr	r0, [r7, #12]
 8005b16:	f000 f838 	bl	8005b8a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2208      	movs	r2, #8
 8005b1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2200      	movs	r2, #0
 8005b26:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e029      	b.n	8005b82 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	69db      	ldr	r3, [r3, #28]
 8005b34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b3c:	d111      	bne.n	8005b62 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b48:	68f8      	ldr	r0, [r7, #12]
 8005b4a:	f000 f81e 	bl	8005b8a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2220      	movs	r2, #32
 8005b52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005b5e:	2303      	movs	r3, #3
 8005b60:	e00f      	b.n	8005b82 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	69da      	ldr	r2, [r3, #28]
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	4013      	ands	r3, r2
 8005b6c:	68ba      	ldr	r2, [r7, #8]
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	bf0c      	ite	eq
 8005b72:	2301      	moveq	r3, #1
 8005b74:	2300      	movne	r3, #0
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	461a      	mov	r2, r3
 8005b7a:	79fb      	ldrb	r3, [r7, #7]
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d0a6      	beq.n	8005ace <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b80:	2300      	movs	r3, #0
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3710      	adds	r7, #16
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}

08005b8a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b8a:	b480      	push	{r7}
 8005b8c:	b095      	sub	sp, #84	; 0x54
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b9a:	e853 3f00 	ldrex	r3, [r3]
 8005b9e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ba6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	461a      	mov	r2, r3
 8005bae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bb0:	643b      	str	r3, [r7, #64]	; 0x40
 8005bb2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005bb6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005bb8:	e841 2300 	strex	r3, r2, [r1]
 8005bbc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d1e6      	bne.n	8005b92 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	3308      	adds	r3, #8
 8005bca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bcc:	6a3b      	ldr	r3, [r7, #32]
 8005bce:	e853 3f00 	ldrex	r3, [r3]
 8005bd2:	61fb      	str	r3, [r7, #28]
   return(result);
 8005bd4:	69fb      	ldr	r3, [r7, #28]
 8005bd6:	f023 0301 	bic.w	r3, r3, #1
 8005bda:	64bb      	str	r3, [r7, #72]	; 0x48
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	3308      	adds	r3, #8
 8005be2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005be4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005be6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005bea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bec:	e841 2300 	strex	r3, r2, [r1]
 8005bf0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d1e5      	bne.n	8005bc4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d118      	bne.n	8005c32 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	e853 3f00 	ldrex	r3, [r3]
 8005c0c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	f023 0310 	bic.w	r3, r3, #16
 8005c14:	647b      	str	r3, [r7, #68]	; 0x44
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c1e:	61bb      	str	r3, [r7, #24]
 8005c20:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c22:	6979      	ldr	r1, [r7, #20]
 8005c24:	69ba      	ldr	r2, [r7, #24]
 8005c26:	e841 2300 	strex	r3, r2, [r1]
 8005c2a:	613b      	str	r3, [r7, #16]
   return(result);
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d1e6      	bne.n	8005c00 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2220      	movs	r2, #32
 8005c36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2200      	movs	r2, #0
 8005c44:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005c46:	bf00      	nop
 8005c48:	3754      	adds	r7, #84	; 0x54
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c50:	4770      	bx	lr

08005c52 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c52:	b580      	push	{r7, lr}
 8005c54:	b084      	sub	sp, #16
 8005c56:	af00      	add	r7, sp, #0
 8005c58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c5e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2200      	movs	r2, #0
 8005c64:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c70:	68f8      	ldr	r0, [r7, #12]
 8005c72:	f7ff fb0b 	bl	800528c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c76:	bf00      	nop
 8005c78:	3710      	adds	r7, #16
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}

08005c7e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005c7e:	b480      	push	{r7}
 8005c80:	b08f      	sub	sp, #60	; 0x3c
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c8a:	2b21      	cmp	r3, #33	; 0x21
 8005c8c:	d14d      	bne.n	8005d2a <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d132      	bne.n	8005d00 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca0:	6a3b      	ldr	r3, [r7, #32]
 8005ca2:	e853 3f00 	ldrex	r3, [r3]
 8005ca6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ca8:	69fb      	ldr	r3, [r7, #28]
 8005caa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cae:	637b      	str	r3, [r7, #52]	; 0x34
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cba:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005cbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cc0:	e841 2300 	strex	r3, r2, [r1]
 8005cc4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d1e6      	bne.n	8005c9a <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	e853 3f00 	ldrex	r3, [r3]
 8005cd8:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ce0:	633b      	str	r3, [r7, #48]	; 0x30
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cea:	61bb      	str	r3, [r7, #24]
 8005cec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cee:	6979      	ldr	r1, [r7, #20]
 8005cf0:	69ba      	ldr	r2, [r7, #24]
 8005cf2:	e841 2300 	strex	r3, r2, [r1]
 8005cf6:	613b      	str	r3, [r7, #16]
   return(result);
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d1e6      	bne.n	8005ccc <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8005cfe:	e014      	b.n	8005d2a <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d04:	781a      	ldrb	r2, [r3, #0]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	b292      	uxth	r2, r2
 8005d0c:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d12:	1c5a      	adds	r2, r3, #1
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	3b01      	subs	r3, #1
 8005d22:	b29a      	uxth	r2, r3
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005d2a:	bf00      	nop
 8005d2c:	373c      	adds	r7, #60	; 0x3c
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr

08005d36 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005d36:	b480      	push	{r7}
 8005d38:	b091      	sub	sp, #68	; 0x44
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d42:	2b21      	cmp	r3, #33	; 0x21
 8005d44:	d151      	bne.n	8005dea <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d132      	bne.n	8005db8 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5a:	e853 3f00 	ldrex	r3, [r3]
 8005d5e:	623b      	str	r3, [r7, #32]
   return(result);
 8005d60:	6a3b      	ldr	r3, [r7, #32]
 8005d62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d66:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d70:	633b      	str	r3, [r7, #48]	; 0x30
 8005d72:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d78:	e841 2300 	strex	r3, r2, [r1]
 8005d7c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d1e6      	bne.n	8005d52 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	e853 3f00 	ldrex	r3, [r3]
 8005d90:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d98:	637b      	str	r3, [r7, #52]	; 0x34
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	461a      	mov	r2, r3
 8005da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005da2:	61fb      	str	r3, [r7, #28]
 8005da4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da6:	69b9      	ldr	r1, [r7, #24]
 8005da8:	69fa      	ldr	r2, [r7, #28]
 8005daa:	e841 2300 	strex	r3, r2, [r1]
 8005dae:	617b      	str	r3, [r7, #20]
   return(result);
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d1e6      	bne.n	8005d84 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005db6:	e018      	b.n	8005dea <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005dbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dc0:	881a      	ldrh	r2, [r3, #0]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005dca:	b292      	uxth	r2, r2
 8005dcc:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dd2:	1c9a      	adds	r2, r3, #2
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	3b01      	subs	r3, #1
 8005de2:	b29a      	uxth	r2, r3
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005dea:	bf00      	nop
 8005dec:	3744      	adds	r7, #68	; 0x44
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr

08005df6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005df6:	b580      	push	{r7, lr}
 8005df8:	b088      	sub	sp, #32
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	e853 3f00 	ldrex	r3, [r3]
 8005e0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e12:	61fb      	str	r3, [r7, #28]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	461a      	mov	r2, r3
 8005e1a:	69fb      	ldr	r3, [r7, #28]
 8005e1c:	61bb      	str	r3, [r7, #24]
 8005e1e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e20:	6979      	ldr	r1, [r7, #20]
 8005e22:	69ba      	ldr	r2, [r7, #24]
 8005e24:	e841 2300 	strex	r3, r2, [r1]
 8005e28:	613b      	str	r3, [r7, #16]
   return(result);
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d1e6      	bne.n	8005dfe <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2220      	movs	r2, #32
 8005e34:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f7ff fa1b 	bl	8005278 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e42:	bf00      	nop
 8005e44:	3720      	adds	r7, #32
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}

08005e4a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005e4a:	b480      	push	{r7}
 8005e4c:	b083      	sub	sp, #12
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005e52:	bf00      	nop
 8005e54:	370c      	adds	r7, #12
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr

08005e5e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005e5e:	b480      	push	{r7}
 8005e60:	b085      	sub	sp, #20
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	4603      	mov	r3, r0
 8005e66:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005e6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005e70:	2b84      	cmp	r3, #132	; 0x84
 8005e72:	d005      	beq.n	8005e80 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005e74:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	4413      	add	r3, r2
 8005e7c:	3303      	adds	r3, #3
 8005e7e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005e80:	68fb      	ldr	r3, [r7, #12]
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3714      	adds	r7, #20
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr

08005e8e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005e8e:	b580      	push	{r7, lr}
 8005e90:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005e92:	f000 fe8f 	bl	8006bb4 <vTaskStartScheduler>
  
  return osOK;
 8005e96:	2300      	movs	r3, #0
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e9e:	b089      	sub	sp, #36	; 0x24
 8005ea0:	af04      	add	r7, sp, #16
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	695b      	ldr	r3, [r3, #20]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d020      	beq.n	8005ef0 <osThreadCreate+0x54>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	699b      	ldr	r3, [r3, #24]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d01c      	beq.n	8005ef0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	685c      	ldr	r4, [r3, #4]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	691e      	ldr	r6, [r3, #16]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f7ff ffc8 	bl	8005e5e <makeFreeRtosPriority>
 8005ece:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	695b      	ldr	r3, [r3, #20]
 8005ed4:	687a      	ldr	r2, [r7, #4]
 8005ed6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005ed8:	9202      	str	r2, [sp, #8]
 8005eda:	9301      	str	r3, [sp, #4]
 8005edc:	9100      	str	r1, [sp, #0]
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	4632      	mov	r2, r6
 8005ee2:	4629      	mov	r1, r5
 8005ee4:	4620      	mov	r0, r4
 8005ee6:	f000 fc9d 	bl	8006824 <xTaskCreateStatic>
 8005eea:	4603      	mov	r3, r0
 8005eec:	60fb      	str	r3, [r7, #12]
 8005eee:	e01c      	b.n	8005f2a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	685c      	ldr	r4, [r3, #4]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005efc:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f04:	4618      	mov	r0, r3
 8005f06:	f7ff ffaa 	bl	8005e5e <makeFreeRtosPriority>
 8005f0a:	4602      	mov	r2, r0
 8005f0c:	f107 030c 	add.w	r3, r7, #12
 8005f10:	9301      	str	r3, [sp, #4]
 8005f12:	9200      	str	r2, [sp, #0]
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	4632      	mov	r2, r6
 8005f18:	4629      	mov	r1, r5
 8005f1a:	4620      	mov	r0, r4
 8005f1c:	f000 fcdf 	bl	80068de <xTaskCreate>
 8005f20:	4603      	mov	r3, r0
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d001      	beq.n	8005f2a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005f26:	2300      	movs	r3, #0
 8005f28:	e000      	b.n	8005f2c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3714      	adds	r7, #20
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005f34 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b084      	sub	sp, #16
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d001      	beq.n	8005f4a <osDelay+0x16>
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	e000      	b.n	8005f4c <osDelay+0x18>
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f000 fdfd 	bl	8006b4c <vTaskDelay>
  
  return osOK;
 8005f52:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3710      	adds	r7, #16
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b083      	sub	sp, #12
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f103 0208 	add.w	r2, r3, #8
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f74:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f103 0208 	add.w	r2, r3, #8
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f103 0208 	add.w	r2, r3, #8
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005f90:	bf00      	nop
 8005f92:	370c      	adds	r7, #12
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005faa:	bf00      	nop
 8005fac:	370c      	adds	r7, #12
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr

08005fb6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005fb6:	b480      	push	{r7}
 8005fb8:	b085      	sub	sp, #20
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	6078      	str	r0, [r7, #4]
 8005fbe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	68fa      	ldr	r2, [r7, #12]
 8005fca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	689a      	ldr	r2, [r3, #8]
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	683a      	ldr	r2, [r7, #0]
 8005fda:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	683a      	ldr	r2, [r7, #0]
 8005fe0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	687a      	ldr	r2, [r7, #4]
 8005fe6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	1c5a      	adds	r2, r3, #1
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	601a      	str	r2, [r3, #0]
}
 8005ff2:	bf00      	nop
 8005ff4:	3714      	adds	r7, #20
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr

08005ffe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005ffe:	b480      	push	{r7}
 8006000:	b085      	sub	sp, #20
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]
 8006006:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006014:	d103      	bne.n	800601e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	60fb      	str	r3, [r7, #12]
 800601c:	e00c      	b.n	8006038 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	3308      	adds	r3, #8
 8006022:	60fb      	str	r3, [r7, #12]
 8006024:	e002      	b.n	800602c <vListInsert+0x2e>
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	60fb      	str	r3, [r7, #12]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	68ba      	ldr	r2, [r7, #8]
 8006034:	429a      	cmp	r2, r3
 8006036:	d2f6      	bcs.n	8006026 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	685a      	ldr	r2, [r3, #4]
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	683a      	ldr	r2, [r7, #0]
 8006046:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	68fa      	ldr	r2, [r7, #12]
 800604c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	683a      	ldr	r2, [r7, #0]
 8006052:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	1c5a      	adds	r2, r3, #1
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	601a      	str	r2, [r3, #0]
}
 8006064:	bf00      	nop
 8006066:	3714      	adds	r7, #20
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006070:	b480      	push	{r7}
 8006072:	b085      	sub	sp, #20
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	691b      	ldr	r3, [r3, #16]
 800607c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	6892      	ldr	r2, [r2, #8]
 8006086:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	6852      	ldr	r2, [r2, #4]
 8006090:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	687a      	ldr	r2, [r7, #4]
 8006098:	429a      	cmp	r2, r3
 800609a:	d103      	bne.n	80060a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	689a      	ldr	r2, [r3, #8]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	1e5a      	subs	r2, r3, #1
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3714      	adds	r7, #20
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr

080060c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b084      	sub	sp, #16
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d10a      	bne.n	80060ee <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80060d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060dc:	f383 8811 	msr	BASEPRI, r3
 80060e0:	f3bf 8f6f 	isb	sy
 80060e4:	f3bf 8f4f 	dsb	sy
 80060e8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80060ea:	bf00      	nop
 80060ec:	e7fe      	b.n	80060ec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80060ee:	f001 fb99 	bl	8007824 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060fa:	68f9      	ldr	r1, [r7, #12]
 80060fc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80060fe:	fb01 f303 	mul.w	r3, r1, r3
 8006102:	441a      	add	r2, r3
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2200      	movs	r2, #0
 800610c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800611e:	3b01      	subs	r3, #1
 8006120:	68f9      	ldr	r1, [r7, #12]
 8006122:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006124:	fb01 f303 	mul.w	r3, r1, r3
 8006128:	441a      	add	r2, r3
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	22ff      	movs	r2, #255	; 0xff
 8006132:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	22ff      	movs	r2, #255	; 0xff
 800613a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d114      	bne.n	800616e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	691b      	ldr	r3, [r3, #16]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d01a      	beq.n	8006182 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	3310      	adds	r3, #16
 8006150:	4618      	mov	r0, r3
 8006152:	f000 ff71 	bl	8007038 <xTaskRemoveFromEventList>
 8006156:	4603      	mov	r3, r0
 8006158:	2b00      	cmp	r3, #0
 800615a:	d012      	beq.n	8006182 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800615c:	4b0c      	ldr	r3, [pc, #48]	; (8006190 <xQueueGenericReset+0xcc>)
 800615e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006162:	601a      	str	r2, [r3, #0]
 8006164:	f3bf 8f4f 	dsb	sy
 8006168:	f3bf 8f6f 	isb	sy
 800616c:	e009      	b.n	8006182 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	3310      	adds	r3, #16
 8006172:	4618      	mov	r0, r3
 8006174:	f7ff fef2 	bl	8005f5c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	3324      	adds	r3, #36	; 0x24
 800617c:	4618      	mov	r0, r3
 800617e:	f7ff feed 	bl	8005f5c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006182:	f001 fb7f 	bl	8007884 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006186:	2301      	movs	r3, #1
}
 8006188:	4618      	mov	r0, r3
 800618a:	3710      	adds	r7, #16
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}
 8006190:	e000ed04 	.word	0xe000ed04

08006194 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006194:	b580      	push	{r7, lr}
 8006196:	b08a      	sub	sp, #40	; 0x28
 8006198:	af02      	add	r7, sp, #8
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	60b9      	str	r1, [r7, #8]
 800619e:	4613      	mov	r3, r2
 80061a0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d10a      	bne.n	80061be <xQueueGenericCreate+0x2a>
	__asm volatile
 80061a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ac:	f383 8811 	msr	BASEPRI, r3
 80061b0:	f3bf 8f6f 	isb	sy
 80061b4:	f3bf 8f4f 	dsb	sy
 80061b8:	613b      	str	r3, [r7, #16]
}
 80061ba:	bf00      	nop
 80061bc:	e7fe      	b.n	80061bc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	68ba      	ldr	r2, [r7, #8]
 80061c2:	fb02 f303 	mul.w	r3, r2, r3
 80061c6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80061c8:	69fb      	ldr	r3, [r7, #28]
 80061ca:	3348      	adds	r3, #72	; 0x48
 80061cc:	4618      	mov	r0, r3
 80061ce:	f001 fc0b 	bl	80079e8 <pvPortMalloc>
 80061d2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d011      	beq.n	80061fe <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80061da:	69bb      	ldr	r3, [r7, #24]
 80061dc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	3348      	adds	r3, #72	; 0x48
 80061e2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80061e4:	69bb      	ldr	r3, [r7, #24]
 80061e6:	2200      	movs	r2, #0
 80061e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80061ec:	79fa      	ldrb	r2, [r7, #7]
 80061ee:	69bb      	ldr	r3, [r7, #24]
 80061f0:	9300      	str	r3, [sp, #0]
 80061f2:	4613      	mov	r3, r2
 80061f4:	697a      	ldr	r2, [r7, #20]
 80061f6:	68b9      	ldr	r1, [r7, #8]
 80061f8:	68f8      	ldr	r0, [r7, #12]
 80061fa:	f000 f805 	bl	8006208 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80061fe:	69bb      	ldr	r3, [r7, #24]
	}
 8006200:	4618      	mov	r0, r3
 8006202:	3720      	adds	r7, #32
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	607a      	str	r2, [r7, #4]
 8006214:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d103      	bne.n	8006224 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800621c:	69bb      	ldr	r3, [r7, #24]
 800621e:	69ba      	ldr	r2, [r7, #24]
 8006220:	601a      	str	r2, [r3, #0]
 8006222:	e002      	b.n	800622a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006224:	69bb      	ldr	r3, [r7, #24]
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	68fa      	ldr	r2, [r7, #12]
 800622e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	68ba      	ldr	r2, [r7, #8]
 8006234:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006236:	2101      	movs	r1, #1
 8006238:	69b8      	ldr	r0, [r7, #24]
 800623a:	f7ff ff43 	bl	80060c4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800623e:	bf00      	nop
 8006240:	3710      	adds	r7, #16
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
	...

08006248 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b08e      	sub	sp, #56	; 0x38
 800624c:	af00      	add	r7, sp, #0
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	60b9      	str	r1, [r7, #8]
 8006252:	607a      	str	r2, [r7, #4]
 8006254:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006256:	2300      	movs	r3, #0
 8006258:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800625e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006260:	2b00      	cmp	r3, #0
 8006262:	d10a      	bne.n	800627a <xQueueGenericSend+0x32>
	__asm volatile
 8006264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006268:	f383 8811 	msr	BASEPRI, r3
 800626c:	f3bf 8f6f 	isb	sy
 8006270:	f3bf 8f4f 	dsb	sy
 8006274:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006276:	bf00      	nop
 8006278:	e7fe      	b.n	8006278 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d103      	bne.n	8006288 <xQueueGenericSend+0x40>
 8006280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006284:	2b00      	cmp	r3, #0
 8006286:	d101      	bne.n	800628c <xQueueGenericSend+0x44>
 8006288:	2301      	movs	r3, #1
 800628a:	e000      	b.n	800628e <xQueueGenericSend+0x46>
 800628c:	2300      	movs	r3, #0
 800628e:	2b00      	cmp	r3, #0
 8006290:	d10a      	bne.n	80062a8 <xQueueGenericSend+0x60>
	__asm volatile
 8006292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006296:	f383 8811 	msr	BASEPRI, r3
 800629a:	f3bf 8f6f 	isb	sy
 800629e:	f3bf 8f4f 	dsb	sy
 80062a2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80062a4:	bf00      	nop
 80062a6:	e7fe      	b.n	80062a6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	2b02      	cmp	r3, #2
 80062ac:	d103      	bne.n	80062b6 <xQueueGenericSend+0x6e>
 80062ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d101      	bne.n	80062ba <xQueueGenericSend+0x72>
 80062b6:	2301      	movs	r3, #1
 80062b8:	e000      	b.n	80062bc <xQueueGenericSend+0x74>
 80062ba:	2300      	movs	r3, #0
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d10a      	bne.n	80062d6 <xQueueGenericSend+0x8e>
	__asm volatile
 80062c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c4:	f383 8811 	msr	BASEPRI, r3
 80062c8:	f3bf 8f6f 	isb	sy
 80062cc:	f3bf 8f4f 	dsb	sy
 80062d0:	623b      	str	r3, [r7, #32]
}
 80062d2:	bf00      	nop
 80062d4:	e7fe      	b.n	80062d4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80062d6:	f001 f86b 	bl	80073b0 <xTaskGetSchedulerState>
 80062da:	4603      	mov	r3, r0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d102      	bne.n	80062e6 <xQueueGenericSend+0x9e>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d101      	bne.n	80062ea <xQueueGenericSend+0xa2>
 80062e6:	2301      	movs	r3, #1
 80062e8:	e000      	b.n	80062ec <xQueueGenericSend+0xa4>
 80062ea:	2300      	movs	r3, #0
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d10a      	bne.n	8006306 <xQueueGenericSend+0xbe>
	__asm volatile
 80062f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f4:	f383 8811 	msr	BASEPRI, r3
 80062f8:	f3bf 8f6f 	isb	sy
 80062fc:	f3bf 8f4f 	dsb	sy
 8006300:	61fb      	str	r3, [r7, #28]
}
 8006302:	bf00      	nop
 8006304:	e7fe      	b.n	8006304 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006306:	f001 fa8d 	bl	8007824 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800630a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800630c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800630e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006312:	429a      	cmp	r2, r3
 8006314:	d302      	bcc.n	800631c <xQueueGenericSend+0xd4>
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	2b02      	cmp	r3, #2
 800631a:	d129      	bne.n	8006370 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800631c:	683a      	ldr	r2, [r7, #0]
 800631e:	68b9      	ldr	r1, [r7, #8]
 8006320:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006322:	f000 f96f 	bl	8006604 <prvCopyDataToQueue>
 8006326:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800632a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632c:	2b00      	cmp	r3, #0
 800632e:	d010      	beq.n	8006352 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006332:	3324      	adds	r3, #36	; 0x24
 8006334:	4618      	mov	r0, r3
 8006336:	f000 fe7f 	bl	8007038 <xTaskRemoveFromEventList>
 800633a:	4603      	mov	r3, r0
 800633c:	2b00      	cmp	r3, #0
 800633e:	d013      	beq.n	8006368 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006340:	4b3f      	ldr	r3, [pc, #252]	; (8006440 <xQueueGenericSend+0x1f8>)
 8006342:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006346:	601a      	str	r2, [r3, #0]
 8006348:	f3bf 8f4f 	dsb	sy
 800634c:	f3bf 8f6f 	isb	sy
 8006350:	e00a      	b.n	8006368 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006354:	2b00      	cmp	r3, #0
 8006356:	d007      	beq.n	8006368 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006358:	4b39      	ldr	r3, [pc, #228]	; (8006440 <xQueueGenericSend+0x1f8>)
 800635a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800635e:	601a      	str	r2, [r3, #0]
 8006360:	f3bf 8f4f 	dsb	sy
 8006364:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006368:	f001 fa8c 	bl	8007884 <vPortExitCritical>
				return pdPASS;
 800636c:	2301      	movs	r3, #1
 800636e:	e063      	b.n	8006438 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d103      	bne.n	800637e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006376:	f001 fa85 	bl	8007884 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800637a:	2300      	movs	r3, #0
 800637c:	e05c      	b.n	8006438 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800637e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006380:	2b00      	cmp	r3, #0
 8006382:	d106      	bne.n	8006392 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006384:	f107 0314 	add.w	r3, r7, #20
 8006388:	4618      	mov	r0, r3
 800638a:	f000 feb7 	bl	80070fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800638e:	2301      	movs	r3, #1
 8006390:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006392:	f001 fa77 	bl	8007884 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006396:	f000 fc6d 	bl	8006c74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800639a:	f001 fa43 	bl	8007824 <vPortEnterCritical>
 800639e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80063a4:	b25b      	sxtb	r3, r3
 80063a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063aa:	d103      	bne.n	80063b4 <xQueueGenericSend+0x16c>
 80063ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ae:	2200      	movs	r2, #0
 80063b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063ba:	b25b      	sxtb	r3, r3
 80063bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063c0:	d103      	bne.n	80063ca <xQueueGenericSend+0x182>
 80063c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c4:	2200      	movs	r2, #0
 80063c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063ca:	f001 fa5b 	bl	8007884 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80063ce:	1d3a      	adds	r2, r7, #4
 80063d0:	f107 0314 	add.w	r3, r7, #20
 80063d4:	4611      	mov	r1, r2
 80063d6:	4618      	mov	r0, r3
 80063d8:	f000 fea6 	bl	8007128 <xTaskCheckForTimeOut>
 80063dc:	4603      	mov	r3, r0
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d124      	bne.n	800642c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80063e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80063e4:	f000 fa06 	bl	80067f4 <prvIsQueueFull>
 80063e8:	4603      	mov	r3, r0
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d018      	beq.n	8006420 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80063ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f0:	3310      	adds	r3, #16
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	4611      	mov	r1, r2
 80063f6:	4618      	mov	r0, r3
 80063f8:	f000 fdfa 	bl	8006ff0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80063fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80063fe:	f000 f991 	bl	8006724 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006402:	f000 fc45 	bl	8006c90 <xTaskResumeAll>
 8006406:	4603      	mov	r3, r0
 8006408:	2b00      	cmp	r3, #0
 800640a:	f47f af7c 	bne.w	8006306 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800640e:	4b0c      	ldr	r3, [pc, #48]	; (8006440 <xQueueGenericSend+0x1f8>)
 8006410:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006414:	601a      	str	r2, [r3, #0]
 8006416:	f3bf 8f4f 	dsb	sy
 800641a:	f3bf 8f6f 	isb	sy
 800641e:	e772      	b.n	8006306 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006420:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006422:	f000 f97f 	bl	8006724 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006426:	f000 fc33 	bl	8006c90 <xTaskResumeAll>
 800642a:	e76c      	b.n	8006306 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800642c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800642e:	f000 f979 	bl	8006724 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006432:	f000 fc2d 	bl	8006c90 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006436:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006438:	4618      	mov	r0, r3
 800643a:	3738      	adds	r7, #56	; 0x38
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}
 8006440:	e000ed04 	.word	0xe000ed04

08006444 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b08c      	sub	sp, #48	; 0x30
 8006448:	af00      	add	r7, sp, #0
 800644a:	60f8      	str	r0, [r7, #12]
 800644c:	60b9      	str	r1, [r7, #8]
 800644e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006450:	2300      	movs	r3, #0
 8006452:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800645a:	2b00      	cmp	r3, #0
 800645c:	d10a      	bne.n	8006474 <xQueueReceive+0x30>
	__asm volatile
 800645e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006462:	f383 8811 	msr	BASEPRI, r3
 8006466:	f3bf 8f6f 	isb	sy
 800646a:	f3bf 8f4f 	dsb	sy
 800646e:	623b      	str	r3, [r7, #32]
}
 8006470:	bf00      	nop
 8006472:	e7fe      	b.n	8006472 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d103      	bne.n	8006482 <xQueueReceive+0x3e>
 800647a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800647c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800647e:	2b00      	cmp	r3, #0
 8006480:	d101      	bne.n	8006486 <xQueueReceive+0x42>
 8006482:	2301      	movs	r3, #1
 8006484:	e000      	b.n	8006488 <xQueueReceive+0x44>
 8006486:	2300      	movs	r3, #0
 8006488:	2b00      	cmp	r3, #0
 800648a:	d10a      	bne.n	80064a2 <xQueueReceive+0x5e>
	__asm volatile
 800648c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006490:	f383 8811 	msr	BASEPRI, r3
 8006494:	f3bf 8f6f 	isb	sy
 8006498:	f3bf 8f4f 	dsb	sy
 800649c:	61fb      	str	r3, [r7, #28]
}
 800649e:	bf00      	nop
 80064a0:	e7fe      	b.n	80064a0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80064a2:	f000 ff85 	bl	80073b0 <xTaskGetSchedulerState>
 80064a6:	4603      	mov	r3, r0
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d102      	bne.n	80064b2 <xQueueReceive+0x6e>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d101      	bne.n	80064b6 <xQueueReceive+0x72>
 80064b2:	2301      	movs	r3, #1
 80064b4:	e000      	b.n	80064b8 <xQueueReceive+0x74>
 80064b6:	2300      	movs	r3, #0
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d10a      	bne.n	80064d2 <xQueueReceive+0x8e>
	__asm volatile
 80064bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c0:	f383 8811 	msr	BASEPRI, r3
 80064c4:	f3bf 8f6f 	isb	sy
 80064c8:	f3bf 8f4f 	dsb	sy
 80064cc:	61bb      	str	r3, [r7, #24]
}
 80064ce:	bf00      	nop
 80064d0:	e7fe      	b.n	80064d0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80064d2:	f001 f9a7 	bl	8007824 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80064d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064da:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80064dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d01f      	beq.n	8006522 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80064e2:	68b9      	ldr	r1, [r7, #8]
 80064e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064e6:	f000 f8f7 	bl	80066d8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80064ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ec:	1e5a      	subs	r2, r3, #1
 80064ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064f0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80064f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d00f      	beq.n	800651a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80064fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064fc:	3310      	adds	r3, #16
 80064fe:	4618      	mov	r0, r3
 8006500:	f000 fd9a 	bl	8007038 <xTaskRemoveFromEventList>
 8006504:	4603      	mov	r3, r0
 8006506:	2b00      	cmp	r3, #0
 8006508:	d007      	beq.n	800651a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800650a:	4b3d      	ldr	r3, [pc, #244]	; (8006600 <xQueueReceive+0x1bc>)
 800650c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006510:	601a      	str	r2, [r3, #0]
 8006512:	f3bf 8f4f 	dsb	sy
 8006516:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800651a:	f001 f9b3 	bl	8007884 <vPortExitCritical>
				return pdPASS;
 800651e:	2301      	movs	r3, #1
 8006520:	e069      	b.n	80065f6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d103      	bne.n	8006530 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006528:	f001 f9ac 	bl	8007884 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800652c:	2300      	movs	r3, #0
 800652e:	e062      	b.n	80065f6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006532:	2b00      	cmp	r3, #0
 8006534:	d106      	bne.n	8006544 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006536:	f107 0310 	add.w	r3, r7, #16
 800653a:	4618      	mov	r0, r3
 800653c:	f000 fdde 	bl	80070fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006540:	2301      	movs	r3, #1
 8006542:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006544:	f001 f99e 	bl	8007884 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006548:	f000 fb94 	bl	8006c74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800654c:	f001 f96a 	bl	8007824 <vPortEnterCritical>
 8006550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006552:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006556:	b25b      	sxtb	r3, r3
 8006558:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800655c:	d103      	bne.n	8006566 <xQueueReceive+0x122>
 800655e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006560:	2200      	movs	r2, #0
 8006562:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006568:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800656c:	b25b      	sxtb	r3, r3
 800656e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006572:	d103      	bne.n	800657c <xQueueReceive+0x138>
 8006574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006576:	2200      	movs	r2, #0
 8006578:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800657c:	f001 f982 	bl	8007884 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006580:	1d3a      	adds	r2, r7, #4
 8006582:	f107 0310 	add.w	r3, r7, #16
 8006586:	4611      	mov	r1, r2
 8006588:	4618      	mov	r0, r3
 800658a:	f000 fdcd 	bl	8007128 <xTaskCheckForTimeOut>
 800658e:	4603      	mov	r3, r0
 8006590:	2b00      	cmp	r3, #0
 8006592:	d123      	bne.n	80065dc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006594:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006596:	f000 f917 	bl	80067c8 <prvIsQueueEmpty>
 800659a:	4603      	mov	r3, r0
 800659c:	2b00      	cmp	r3, #0
 800659e:	d017      	beq.n	80065d0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80065a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a2:	3324      	adds	r3, #36	; 0x24
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	4611      	mov	r1, r2
 80065a8:	4618      	mov	r0, r3
 80065aa:	f000 fd21 	bl	8006ff0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80065ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065b0:	f000 f8b8 	bl	8006724 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80065b4:	f000 fb6c 	bl	8006c90 <xTaskResumeAll>
 80065b8:	4603      	mov	r3, r0
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d189      	bne.n	80064d2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80065be:	4b10      	ldr	r3, [pc, #64]	; (8006600 <xQueueReceive+0x1bc>)
 80065c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065c4:	601a      	str	r2, [r3, #0]
 80065c6:	f3bf 8f4f 	dsb	sy
 80065ca:	f3bf 8f6f 	isb	sy
 80065ce:	e780      	b.n	80064d2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80065d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065d2:	f000 f8a7 	bl	8006724 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80065d6:	f000 fb5b 	bl	8006c90 <xTaskResumeAll>
 80065da:	e77a      	b.n	80064d2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80065dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065de:	f000 f8a1 	bl	8006724 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80065e2:	f000 fb55 	bl	8006c90 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80065e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065e8:	f000 f8ee 	bl	80067c8 <prvIsQueueEmpty>
 80065ec:	4603      	mov	r3, r0
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	f43f af6f 	beq.w	80064d2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80065f4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3730      	adds	r7, #48	; 0x30
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	bf00      	nop
 8006600:	e000ed04 	.word	0xe000ed04

08006604 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b086      	sub	sp, #24
 8006608:	af00      	add	r7, sp, #0
 800660a:	60f8      	str	r0, [r7, #12]
 800660c:	60b9      	str	r1, [r7, #8]
 800660e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006610:	2300      	movs	r3, #0
 8006612:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006618:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800661e:	2b00      	cmp	r3, #0
 8006620:	d10d      	bne.n	800663e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d14d      	bne.n	80066c6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	4618      	mov	r0, r3
 8006630:	f000 fedc 	bl	80073ec <xTaskPriorityDisinherit>
 8006634:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2200      	movs	r2, #0
 800663a:	609a      	str	r2, [r3, #8]
 800663c:	e043      	b.n	80066c6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d119      	bne.n	8006678 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6858      	ldr	r0, [r3, #4]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800664c:	461a      	mov	r2, r3
 800664e:	68b9      	ldr	r1, [r7, #8]
 8006650:	f002 f99f 	bl	8008992 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	685a      	ldr	r2, [r3, #4]
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800665c:	441a      	add	r2, r3
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	685a      	ldr	r2, [r3, #4]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	429a      	cmp	r2, r3
 800666c:	d32b      	bcc.n	80066c6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	605a      	str	r2, [r3, #4]
 8006676:	e026      	b.n	80066c6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	68d8      	ldr	r0, [r3, #12]
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006680:	461a      	mov	r2, r3
 8006682:	68b9      	ldr	r1, [r7, #8]
 8006684:	f002 f985 	bl	8008992 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	68da      	ldr	r2, [r3, #12]
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006690:	425b      	negs	r3, r3
 8006692:	441a      	add	r2, r3
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	68da      	ldr	r2, [r3, #12]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d207      	bcs.n	80066b4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	689a      	ldr	r2, [r3, #8]
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ac:	425b      	negs	r3, r3
 80066ae:	441a      	add	r2, r3
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2b02      	cmp	r3, #2
 80066b8:	d105      	bne.n	80066c6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d002      	beq.n	80066c6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	3b01      	subs	r3, #1
 80066c4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	1c5a      	adds	r2, r3, #1
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80066ce:	697b      	ldr	r3, [r7, #20]
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3718      	adds	r7, #24
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b082      	sub	sp, #8
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d018      	beq.n	800671c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	68da      	ldr	r2, [r3, #12]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f2:	441a      	add	r2, r3
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	68da      	ldr	r2, [r3, #12]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	429a      	cmp	r2, r3
 8006702:	d303      	bcc.n	800670c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	68d9      	ldr	r1, [r3, #12]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006714:	461a      	mov	r2, r3
 8006716:	6838      	ldr	r0, [r7, #0]
 8006718:	f002 f93b 	bl	8008992 <memcpy>
	}
}
 800671c:	bf00      	nop
 800671e:	3708      	adds	r7, #8
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}

08006724 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b084      	sub	sp, #16
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800672c:	f001 f87a 	bl	8007824 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006736:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006738:	e011      	b.n	800675e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800673e:	2b00      	cmp	r3, #0
 8006740:	d012      	beq.n	8006768 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	3324      	adds	r3, #36	; 0x24
 8006746:	4618      	mov	r0, r3
 8006748:	f000 fc76 	bl	8007038 <xTaskRemoveFromEventList>
 800674c:	4603      	mov	r3, r0
 800674e:	2b00      	cmp	r3, #0
 8006750:	d001      	beq.n	8006756 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006752:	f000 fd4b 	bl	80071ec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006756:	7bfb      	ldrb	r3, [r7, #15]
 8006758:	3b01      	subs	r3, #1
 800675a:	b2db      	uxtb	r3, r3
 800675c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800675e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006762:	2b00      	cmp	r3, #0
 8006764:	dce9      	bgt.n	800673a <prvUnlockQueue+0x16>
 8006766:	e000      	b.n	800676a <prvUnlockQueue+0x46>
					break;
 8006768:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	22ff      	movs	r2, #255	; 0xff
 800676e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006772:	f001 f887 	bl	8007884 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006776:	f001 f855 	bl	8007824 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006780:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006782:	e011      	b.n	80067a8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	691b      	ldr	r3, [r3, #16]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d012      	beq.n	80067b2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	3310      	adds	r3, #16
 8006790:	4618      	mov	r0, r3
 8006792:	f000 fc51 	bl	8007038 <xTaskRemoveFromEventList>
 8006796:	4603      	mov	r3, r0
 8006798:	2b00      	cmp	r3, #0
 800679a:	d001      	beq.n	80067a0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800679c:	f000 fd26 	bl	80071ec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80067a0:	7bbb      	ldrb	r3, [r7, #14]
 80067a2:	3b01      	subs	r3, #1
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80067a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	dce9      	bgt.n	8006784 <prvUnlockQueue+0x60>
 80067b0:	e000      	b.n	80067b4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80067b2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	22ff      	movs	r2, #255	; 0xff
 80067b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80067bc:	f001 f862 	bl	8007884 <vPortExitCritical>
}
 80067c0:	bf00      	nop
 80067c2:	3710      	adds	r7, #16
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}

080067c8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b084      	sub	sp, #16
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80067d0:	f001 f828 	bl	8007824 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d102      	bne.n	80067e2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80067dc:	2301      	movs	r3, #1
 80067de:	60fb      	str	r3, [r7, #12]
 80067e0:	e001      	b.n	80067e6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80067e2:	2300      	movs	r3, #0
 80067e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80067e6:	f001 f84d 	bl	8007884 <vPortExitCritical>

	return xReturn;
 80067ea:	68fb      	ldr	r3, [r7, #12]
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3710      	adds	r7, #16
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}

080067f4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b084      	sub	sp, #16
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80067fc:	f001 f812 	bl	8007824 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006808:	429a      	cmp	r2, r3
 800680a:	d102      	bne.n	8006812 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800680c:	2301      	movs	r3, #1
 800680e:	60fb      	str	r3, [r7, #12]
 8006810:	e001      	b.n	8006816 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006812:	2300      	movs	r3, #0
 8006814:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006816:	f001 f835 	bl	8007884 <vPortExitCritical>

	return xReturn;
 800681a:	68fb      	ldr	r3, [r7, #12]
}
 800681c:	4618      	mov	r0, r3
 800681e:	3710      	adds	r7, #16
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006824:	b580      	push	{r7, lr}
 8006826:	b08e      	sub	sp, #56	; 0x38
 8006828:	af04      	add	r7, sp, #16
 800682a:	60f8      	str	r0, [r7, #12]
 800682c:	60b9      	str	r1, [r7, #8]
 800682e:	607a      	str	r2, [r7, #4]
 8006830:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006834:	2b00      	cmp	r3, #0
 8006836:	d10a      	bne.n	800684e <xTaskCreateStatic+0x2a>
	__asm volatile
 8006838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800683c:	f383 8811 	msr	BASEPRI, r3
 8006840:	f3bf 8f6f 	isb	sy
 8006844:	f3bf 8f4f 	dsb	sy
 8006848:	623b      	str	r3, [r7, #32]
}
 800684a:	bf00      	nop
 800684c:	e7fe      	b.n	800684c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800684e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006850:	2b00      	cmp	r3, #0
 8006852:	d10a      	bne.n	800686a <xTaskCreateStatic+0x46>
	__asm volatile
 8006854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006858:	f383 8811 	msr	BASEPRI, r3
 800685c:	f3bf 8f6f 	isb	sy
 8006860:	f3bf 8f4f 	dsb	sy
 8006864:	61fb      	str	r3, [r7, #28]
}
 8006866:	bf00      	nop
 8006868:	e7fe      	b.n	8006868 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800686a:	2354      	movs	r3, #84	; 0x54
 800686c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	2b54      	cmp	r3, #84	; 0x54
 8006872:	d00a      	beq.n	800688a <xTaskCreateStatic+0x66>
	__asm volatile
 8006874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006878:	f383 8811 	msr	BASEPRI, r3
 800687c:	f3bf 8f6f 	isb	sy
 8006880:	f3bf 8f4f 	dsb	sy
 8006884:	61bb      	str	r3, [r7, #24]
}
 8006886:	bf00      	nop
 8006888:	e7fe      	b.n	8006888 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800688a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800688c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800688e:	2b00      	cmp	r3, #0
 8006890:	d01e      	beq.n	80068d0 <xTaskCreateStatic+0xac>
 8006892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006894:	2b00      	cmp	r3, #0
 8006896:	d01b      	beq.n	80068d0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800689a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800689c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068a0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80068a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a4:	2202      	movs	r2, #2
 80068a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80068aa:	2300      	movs	r3, #0
 80068ac:	9303      	str	r3, [sp, #12]
 80068ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b0:	9302      	str	r3, [sp, #8]
 80068b2:	f107 0314 	add.w	r3, r7, #20
 80068b6:	9301      	str	r3, [sp, #4]
 80068b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ba:	9300      	str	r3, [sp, #0]
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	68b9      	ldr	r1, [r7, #8]
 80068c2:	68f8      	ldr	r0, [r7, #12]
 80068c4:	f000 f850 	bl	8006968 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80068c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80068ca:	f000 f8d5 	bl	8006a78 <prvAddNewTaskToReadyList>
 80068ce:	e001      	b.n	80068d4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80068d0:	2300      	movs	r3, #0
 80068d2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80068d4:	697b      	ldr	r3, [r7, #20]
	}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3728      	adds	r7, #40	; 0x28
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}

080068de <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80068de:	b580      	push	{r7, lr}
 80068e0:	b08c      	sub	sp, #48	; 0x30
 80068e2:	af04      	add	r7, sp, #16
 80068e4:	60f8      	str	r0, [r7, #12]
 80068e6:	60b9      	str	r1, [r7, #8]
 80068e8:	603b      	str	r3, [r7, #0]
 80068ea:	4613      	mov	r3, r2
 80068ec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80068ee:	88fb      	ldrh	r3, [r7, #6]
 80068f0:	009b      	lsls	r3, r3, #2
 80068f2:	4618      	mov	r0, r3
 80068f4:	f001 f878 	bl	80079e8 <pvPortMalloc>
 80068f8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d00e      	beq.n	800691e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006900:	2054      	movs	r0, #84	; 0x54
 8006902:	f001 f871 	bl	80079e8 <pvPortMalloc>
 8006906:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006908:	69fb      	ldr	r3, [r7, #28]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d003      	beq.n	8006916 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800690e:	69fb      	ldr	r3, [r7, #28]
 8006910:	697a      	ldr	r2, [r7, #20]
 8006912:	631a      	str	r2, [r3, #48]	; 0x30
 8006914:	e005      	b.n	8006922 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006916:	6978      	ldr	r0, [r7, #20]
 8006918:	f001 f932 	bl	8007b80 <vPortFree>
 800691c:	e001      	b.n	8006922 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800691e:	2300      	movs	r3, #0
 8006920:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006922:	69fb      	ldr	r3, [r7, #28]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d017      	beq.n	8006958 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006928:	69fb      	ldr	r3, [r7, #28]
 800692a:	2200      	movs	r2, #0
 800692c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006930:	88fa      	ldrh	r2, [r7, #6]
 8006932:	2300      	movs	r3, #0
 8006934:	9303      	str	r3, [sp, #12]
 8006936:	69fb      	ldr	r3, [r7, #28]
 8006938:	9302      	str	r3, [sp, #8]
 800693a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800693c:	9301      	str	r3, [sp, #4]
 800693e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006940:	9300      	str	r3, [sp, #0]
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	68b9      	ldr	r1, [r7, #8]
 8006946:	68f8      	ldr	r0, [r7, #12]
 8006948:	f000 f80e 	bl	8006968 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800694c:	69f8      	ldr	r0, [r7, #28]
 800694e:	f000 f893 	bl	8006a78 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006952:	2301      	movs	r3, #1
 8006954:	61bb      	str	r3, [r7, #24]
 8006956:	e002      	b.n	800695e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006958:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800695c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800695e:	69bb      	ldr	r3, [r7, #24]
	}
 8006960:	4618      	mov	r0, r3
 8006962:	3720      	adds	r7, #32
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b088      	sub	sp, #32
 800696c:	af00      	add	r7, sp, #0
 800696e:	60f8      	str	r0, [r7, #12]
 8006970:	60b9      	str	r1, [r7, #8]
 8006972:	607a      	str	r2, [r7, #4]
 8006974:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006978:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006980:	3b01      	subs	r3, #1
 8006982:	009b      	lsls	r3, r3, #2
 8006984:	4413      	add	r3, r2
 8006986:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006988:	69bb      	ldr	r3, [r7, #24]
 800698a:	f023 0307 	bic.w	r3, r3, #7
 800698e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006990:	69bb      	ldr	r3, [r7, #24]
 8006992:	f003 0307 	and.w	r3, r3, #7
 8006996:	2b00      	cmp	r3, #0
 8006998:	d00a      	beq.n	80069b0 <prvInitialiseNewTask+0x48>
	__asm volatile
 800699a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800699e:	f383 8811 	msr	BASEPRI, r3
 80069a2:	f3bf 8f6f 	isb	sy
 80069a6:	f3bf 8f4f 	dsb	sy
 80069aa:	617b      	str	r3, [r7, #20]
}
 80069ac:	bf00      	nop
 80069ae:	e7fe      	b.n	80069ae <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d01f      	beq.n	80069f6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80069b6:	2300      	movs	r3, #0
 80069b8:	61fb      	str	r3, [r7, #28]
 80069ba:	e012      	b.n	80069e2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80069bc:	68ba      	ldr	r2, [r7, #8]
 80069be:	69fb      	ldr	r3, [r7, #28]
 80069c0:	4413      	add	r3, r2
 80069c2:	7819      	ldrb	r1, [r3, #0]
 80069c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069c6:	69fb      	ldr	r3, [r7, #28]
 80069c8:	4413      	add	r3, r2
 80069ca:	3334      	adds	r3, #52	; 0x34
 80069cc:	460a      	mov	r2, r1
 80069ce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80069d0:	68ba      	ldr	r2, [r7, #8]
 80069d2:	69fb      	ldr	r3, [r7, #28]
 80069d4:	4413      	add	r3, r2
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d006      	beq.n	80069ea <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80069dc:	69fb      	ldr	r3, [r7, #28]
 80069de:	3301      	adds	r3, #1
 80069e0:	61fb      	str	r3, [r7, #28]
 80069e2:	69fb      	ldr	r3, [r7, #28]
 80069e4:	2b0f      	cmp	r3, #15
 80069e6:	d9e9      	bls.n	80069bc <prvInitialiseNewTask+0x54>
 80069e8:	e000      	b.n	80069ec <prvInitialiseNewTask+0x84>
			{
				break;
 80069ea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80069ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ee:	2200      	movs	r2, #0
 80069f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80069f4:	e003      	b.n	80069fe <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80069f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f8:	2200      	movs	r2, #0
 80069fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80069fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a00:	2b06      	cmp	r3, #6
 8006a02:	d901      	bls.n	8006a08 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006a04:	2306      	movs	r3, #6
 8006a06:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a0c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a12:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a16:	2200      	movs	r2, #0
 8006a18:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a1c:	3304      	adds	r3, #4
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f7ff fabc 	bl	8005f9c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a26:	3318      	adds	r3, #24
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f7ff fab7 	bl	8005f9c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a32:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a36:	f1c3 0207 	rsb	r2, r3, #7
 8006a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a3c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a42:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a46:	2200      	movs	r2, #0
 8006a48:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006a52:	683a      	ldr	r2, [r7, #0]
 8006a54:	68f9      	ldr	r1, [r7, #12]
 8006a56:	69b8      	ldr	r0, [r7, #24]
 8006a58:	f000 fdb4 	bl	80075c4 <pxPortInitialiseStack>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a60:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d002      	beq.n	8006a6e <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a6c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a6e:	bf00      	nop
 8006a70:	3720      	adds	r7, #32
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
	...

08006a78 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b082      	sub	sp, #8
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006a80:	f000 fed0 	bl	8007824 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006a84:	4b2a      	ldr	r3, [pc, #168]	; (8006b30 <prvAddNewTaskToReadyList+0xb8>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	3301      	adds	r3, #1
 8006a8a:	4a29      	ldr	r2, [pc, #164]	; (8006b30 <prvAddNewTaskToReadyList+0xb8>)
 8006a8c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006a8e:	4b29      	ldr	r3, [pc, #164]	; (8006b34 <prvAddNewTaskToReadyList+0xbc>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d109      	bne.n	8006aaa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006a96:	4a27      	ldr	r2, [pc, #156]	; (8006b34 <prvAddNewTaskToReadyList+0xbc>)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006a9c:	4b24      	ldr	r3, [pc, #144]	; (8006b30 <prvAddNewTaskToReadyList+0xb8>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d110      	bne.n	8006ac6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006aa4:	f000 fbc6 	bl	8007234 <prvInitialiseTaskLists>
 8006aa8:	e00d      	b.n	8006ac6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006aaa:	4b23      	ldr	r3, [pc, #140]	; (8006b38 <prvAddNewTaskToReadyList+0xc0>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d109      	bne.n	8006ac6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006ab2:	4b20      	ldr	r3, [pc, #128]	; (8006b34 <prvAddNewTaskToReadyList+0xbc>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d802      	bhi.n	8006ac6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006ac0:	4a1c      	ldr	r2, [pc, #112]	; (8006b34 <prvAddNewTaskToReadyList+0xbc>)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006ac6:	4b1d      	ldr	r3, [pc, #116]	; (8006b3c <prvAddNewTaskToReadyList+0xc4>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	3301      	adds	r3, #1
 8006acc:	4a1b      	ldr	r2, [pc, #108]	; (8006b3c <prvAddNewTaskToReadyList+0xc4>)
 8006ace:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	409a      	lsls	r2, r3
 8006ad8:	4b19      	ldr	r3, [pc, #100]	; (8006b40 <prvAddNewTaskToReadyList+0xc8>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4313      	orrs	r3, r2
 8006ade:	4a18      	ldr	r2, [pc, #96]	; (8006b40 <prvAddNewTaskToReadyList+0xc8>)
 8006ae0:	6013      	str	r3, [r2, #0]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ae6:	4613      	mov	r3, r2
 8006ae8:	009b      	lsls	r3, r3, #2
 8006aea:	4413      	add	r3, r2
 8006aec:	009b      	lsls	r3, r3, #2
 8006aee:	4a15      	ldr	r2, [pc, #84]	; (8006b44 <prvAddNewTaskToReadyList+0xcc>)
 8006af0:	441a      	add	r2, r3
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	3304      	adds	r3, #4
 8006af6:	4619      	mov	r1, r3
 8006af8:	4610      	mov	r0, r2
 8006afa:	f7ff fa5c 	bl	8005fb6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006afe:	f000 fec1 	bl	8007884 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006b02:	4b0d      	ldr	r3, [pc, #52]	; (8006b38 <prvAddNewTaskToReadyList+0xc0>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d00e      	beq.n	8006b28 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006b0a:	4b0a      	ldr	r3, [pc, #40]	; (8006b34 <prvAddNewTaskToReadyList+0xbc>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d207      	bcs.n	8006b28 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006b18:	4b0b      	ldr	r3, [pc, #44]	; (8006b48 <prvAddNewTaskToReadyList+0xd0>)
 8006b1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b1e:	601a      	str	r2, [r3, #0]
 8006b20:	f3bf 8f4f 	dsb	sy
 8006b24:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b28:	bf00      	nop
 8006b2a:	3708      	adds	r7, #8
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}
 8006b30:	200006d0 	.word	0x200006d0
 8006b34:	200005d0 	.word	0x200005d0
 8006b38:	200006dc 	.word	0x200006dc
 8006b3c:	200006ec 	.word	0x200006ec
 8006b40:	200006d8 	.word	0x200006d8
 8006b44:	200005d4 	.word	0x200005d4
 8006b48:	e000ed04 	.word	0xe000ed04

08006b4c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b084      	sub	sp, #16
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006b54:	2300      	movs	r3, #0
 8006b56:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d017      	beq.n	8006b8e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006b5e:	4b13      	ldr	r3, [pc, #76]	; (8006bac <vTaskDelay+0x60>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d00a      	beq.n	8006b7c <vTaskDelay+0x30>
	__asm volatile
 8006b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b6a:	f383 8811 	msr	BASEPRI, r3
 8006b6e:	f3bf 8f6f 	isb	sy
 8006b72:	f3bf 8f4f 	dsb	sy
 8006b76:	60bb      	str	r3, [r7, #8]
}
 8006b78:	bf00      	nop
 8006b7a:	e7fe      	b.n	8006b7a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006b7c:	f000 f87a 	bl	8006c74 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006b80:	2100      	movs	r1, #0
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 fcb8 	bl	80074f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006b88:	f000 f882 	bl	8006c90 <xTaskResumeAll>
 8006b8c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d107      	bne.n	8006ba4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006b94:	4b06      	ldr	r3, [pc, #24]	; (8006bb0 <vTaskDelay+0x64>)
 8006b96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b9a:	601a      	str	r2, [r3, #0]
 8006b9c:	f3bf 8f4f 	dsb	sy
 8006ba0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006ba4:	bf00      	nop
 8006ba6:	3710      	adds	r7, #16
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}
 8006bac:	200006f8 	.word	0x200006f8
 8006bb0:	e000ed04 	.word	0xe000ed04

08006bb4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b08a      	sub	sp, #40	; 0x28
 8006bb8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006bc2:	463a      	mov	r2, r7
 8006bc4:	1d39      	adds	r1, r7, #4
 8006bc6:	f107 0308 	add.w	r3, r7, #8
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f7fa f96a 	bl	8000ea4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006bd0:	6839      	ldr	r1, [r7, #0]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	68ba      	ldr	r2, [r7, #8]
 8006bd6:	9202      	str	r2, [sp, #8]
 8006bd8:	9301      	str	r3, [sp, #4]
 8006bda:	2300      	movs	r3, #0
 8006bdc:	9300      	str	r3, [sp, #0]
 8006bde:	2300      	movs	r3, #0
 8006be0:	460a      	mov	r2, r1
 8006be2:	491e      	ldr	r1, [pc, #120]	; (8006c5c <vTaskStartScheduler+0xa8>)
 8006be4:	481e      	ldr	r0, [pc, #120]	; (8006c60 <vTaskStartScheduler+0xac>)
 8006be6:	f7ff fe1d 	bl	8006824 <xTaskCreateStatic>
 8006bea:	4603      	mov	r3, r0
 8006bec:	4a1d      	ldr	r2, [pc, #116]	; (8006c64 <vTaskStartScheduler+0xb0>)
 8006bee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006bf0:	4b1c      	ldr	r3, [pc, #112]	; (8006c64 <vTaskStartScheduler+0xb0>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d002      	beq.n	8006bfe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	617b      	str	r3, [r7, #20]
 8006bfc:	e001      	b.n	8006c02 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d116      	bne.n	8006c36 <vTaskStartScheduler+0x82>
	__asm volatile
 8006c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c0c:	f383 8811 	msr	BASEPRI, r3
 8006c10:	f3bf 8f6f 	isb	sy
 8006c14:	f3bf 8f4f 	dsb	sy
 8006c18:	613b      	str	r3, [r7, #16]
}
 8006c1a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006c1c:	4b12      	ldr	r3, [pc, #72]	; (8006c68 <vTaskStartScheduler+0xb4>)
 8006c1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c22:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006c24:	4b11      	ldr	r3, [pc, #68]	; (8006c6c <vTaskStartScheduler+0xb8>)
 8006c26:	2201      	movs	r2, #1
 8006c28:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006c2a:	4b11      	ldr	r3, [pc, #68]	; (8006c70 <vTaskStartScheduler+0xbc>)
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006c30:	f000 fd56 	bl	80076e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006c34:	e00e      	b.n	8006c54 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c3c:	d10a      	bne.n	8006c54 <vTaskStartScheduler+0xa0>
	__asm volatile
 8006c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c42:	f383 8811 	msr	BASEPRI, r3
 8006c46:	f3bf 8f6f 	isb	sy
 8006c4a:	f3bf 8f4f 	dsb	sy
 8006c4e:	60fb      	str	r3, [r7, #12]
}
 8006c50:	bf00      	nop
 8006c52:	e7fe      	b.n	8006c52 <vTaskStartScheduler+0x9e>
}
 8006c54:	bf00      	nop
 8006c56:	3718      	adds	r7, #24
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}
 8006c5c:	0800a7b8 	.word	0x0800a7b8
 8006c60:	08007205 	.word	0x08007205
 8006c64:	200006f4 	.word	0x200006f4
 8006c68:	200006f0 	.word	0x200006f0
 8006c6c:	200006dc 	.word	0x200006dc
 8006c70:	200006d4 	.word	0x200006d4

08006c74 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006c74:	b480      	push	{r7}
 8006c76:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006c78:	4b04      	ldr	r3, [pc, #16]	; (8006c8c <vTaskSuspendAll+0x18>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	3301      	adds	r3, #1
 8006c7e:	4a03      	ldr	r2, [pc, #12]	; (8006c8c <vTaskSuspendAll+0x18>)
 8006c80:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006c82:	bf00      	nop
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr
 8006c8c:	200006f8 	.word	0x200006f8

08006c90 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b084      	sub	sp, #16
 8006c94:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006c96:	2300      	movs	r3, #0
 8006c98:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006c9e:	4b41      	ldr	r3, [pc, #260]	; (8006da4 <xTaskResumeAll+0x114>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d10a      	bne.n	8006cbc <xTaskResumeAll+0x2c>
	__asm volatile
 8006ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006caa:	f383 8811 	msr	BASEPRI, r3
 8006cae:	f3bf 8f6f 	isb	sy
 8006cb2:	f3bf 8f4f 	dsb	sy
 8006cb6:	603b      	str	r3, [r7, #0]
}
 8006cb8:	bf00      	nop
 8006cba:	e7fe      	b.n	8006cba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006cbc:	f000 fdb2 	bl	8007824 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006cc0:	4b38      	ldr	r3, [pc, #224]	; (8006da4 <xTaskResumeAll+0x114>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	3b01      	subs	r3, #1
 8006cc6:	4a37      	ldr	r2, [pc, #220]	; (8006da4 <xTaskResumeAll+0x114>)
 8006cc8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006cca:	4b36      	ldr	r3, [pc, #216]	; (8006da4 <xTaskResumeAll+0x114>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d161      	bne.n	8006d96 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006cd2:	4b35      	ldr	r3, [pc, #212]	; (8006da8 <xTaskResumeAll+0x118>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d05d      	beq.n	8006d96 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006cda:	e02e      	b.n	8006d3a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cdc:	4b33      	ldr	r3, [pc, #204]	; (8006dac <xTaskResumeAll+0x11c>)
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	68db      	ldr	r3, [r3, #12]
 8006ce2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	3318      	adds	r3, #24
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f7ff f9c1 	bl	8006070 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	3304      	adds	r3, #4
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f7ff f9bc 	bl	8006070 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	409a      	lsls	r2, r3
 8006d00:	4b2b      	ldr	r3, [pc, #172]	; (8006db0 <xTaskResumeAll+0x120>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4313      	orrs	r3, r2
 8006d06:	4a2a      	ldr	r2, [pc, #168]	; (8006db0 <xTaskResumeAll+0x120>)
 8006d08:	6013      	str	r3, [r2, #0]
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d0e:	4613      	mov	r3, r2
 8006d10:	009b      	lsls	r3, r3, #2
 8006d12:	4413      	add	r3, r2
 8006d14:	009b      	lsls	r3, r3, #2
 8006d16:	4a27      	ldr	r2, [pc, #156]	; (8006db4 <xTaskResumeAll+0x124>)
 8006d18:	441a      	add	r2, r3
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	3304      	adds	r3, #4
 8006d1e:	4619      	mov	r1, r3
 8006d20:	4610      	mov	r0, r2
 8006d22:	f7ff f948 	bl	8005fb6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d2a:	4b23      	ldr	r3, [pc, #140]	; (8006db8 <xTaskResumeAll+0x128>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d302      	bcc.n	8006d3a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006d34:	4b21      	ldr	r3, [pc, #132]	; (8006dbc <xTaskResumeAll+0x12c>)
 8006d36:	2201      	movs	r2, #1
 8006d38:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d3a:	4b1c      	ldr	r3, [pc, #112]	; (8006dac <xTaskResumeAll+0x11c>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d1cc      	bne.n	8006cdc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d001      	beq.n	8006d4c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006d48:	f000 fb12 	bl	8007370 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006d4c:	4b1c      	ldr	r3, [pc, #112]	; (8006dc0 <xTaskResumeAll+0x130>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d010      	beq.n	8006d7a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006d58:	f000 f836 	bl	8006dc8 <xTaskIncrementTick>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d002      	beq.n	8006d68 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006d62:	4b16      	ldr	r3, [pc, #88]	; (8006dbc <xTaskResumeAll+0x12c>)
 8006d64:	2201      	movs	r2, #1
 8006d66:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	3b01      	subs	r3, #1
 8006d6c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d1f1      	bne.n	8006d58 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006d74:	4b12      	ldr	r3, [pc, #72]	; (8006dc0 <xTaskResumeAll+0x130>)
 8006d76:	2200      	movs	r2, #0
 8006d78:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006d7a:	4b10      	ldr	r3, [pc, #64]	; (8006dbc <xTaskResumeAll+0x12c>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d009      	beq.n	8006d96 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006d82:	2301      	movs	r3, #1
 8006d84:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006d86:	4b0f      	ldr	r3, [pc, #60]	; (8006dc4 <xTaskResumeAll+0x134>)
 8006d88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d8c:	601a      	str	r2, [r3, #0]
 8006d8e:	f3bf 8f4f 	dsb	sy
 8006d92:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006d96:	f000 fd75 	bl	8007884 <vPortExitCritical>

	return xAlreadyYielded;
 8006d9a:	68bb      	ldr	r3, [r7, #8]
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3710      	adds	r7, #16
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}
 8006da4:	200006f8 	.word	0x200006f8
 8006da8:	200006d0 	.word	0x200006d0
 8006dac:	20000690 	.word	0x20000690
 8006db0:	200006d8 	.word	0x200006d8
 8006db4:	200005d4 	.word	0x200005d4
 8006db8:	200005d0 	.word	0x200005d0
 8006dbc:	200006e4 	.word	0x200006e4
 8006dc0:	200006e0 	.word	0x200006e0
 8006dc4:	e000ed04 	.word	0xe000ed04

08006dc8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b086      	sub	sp, #24
 8006dcc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006dd2:	4b4e      	ldr	r3, [pc, #312]	; (8006f0c <xTaskIncrementTick+0x144>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	f040 808e 	bne.w	8006ef8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006ddc:	4b4c      	ldr	r3, [pc, #304]	; (8006f10 <xTaskIncrementTick+0x148>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	3301      	adds	r3, #1
 8006de2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006de4:	4a4a      	ldr	r2, [pc, #296]	; (8006f10 <xTaskIncrementTick+0x148>)
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d120      	bne.n	8006e32 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006df0:	4b48      	ldr	r3, [pc, #288]	; (8006f14 <xTaskIncrementTick+0x14c>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d00a      	beq.n	8006e10 <xTaskIncrementTick+0x48>
	__asm volatile
 8006dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dfe:	f383 8811 	msr	BASEPRI, r3
 8006e02:	f3bf 8f6f 	isb	sy
 8006e06:	f3bf 8f4f 	dsb	sy
 8006e0a:	603b      	str	r3, [r7, #0]
}
 8006e0c:	bf00      	nop
 8006e0e:	e7fe      	b.n	8006e0e <xTaskIncrementTick+0x46>
 8006e10:	4b40      	ldr	r3, [pc, #256]	; (8006f14 <xTaskIncrementTick+0x14c>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	60fb      	str	r3, [r7, #12]
 8006e16:	4b40      	ldr	r3, [pc, #256]	; (8006f18 <xTaskIncrementTick+0x150>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a3e      	ldr	r2, [pc, #248]	; (8006f14 <xTaskIncrementTick+0x14c>)
 8006e1c:	6013      	str	r3, [r2, #0]
 8006e1e:	4a3e      	ldr	r2, [pc, #248]	; (8006f18 <xTaskIncrementTick+0x150>)
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	6013      	str	r3, [r2, #0]
 8006e24:	4b3d      	ldr	r3, [pc, #244]	; (8006f1c <xTaskIncrementTick+0x154>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	3301      	adds	r3, #1
 8006e2a:	4a3c      	ldr	r2, [pc, #240]	; (8006f1c <xTaskIncrementTick+0x154>)
 8006e2c:	6013      	str	r3, [r2, #0]
 8006e2e:	f000 fa9f 	bl	8007370 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006e32:	4b3b      	ldr	r3, [pc, #236]	; (8006f20 <xTaskIncrementTick+0x158>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	693a      	ldr	r2, [r7, #16]
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d348      	bcc.n	8006ece <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e3c:	4b35      	ldr	r3, [pc, #212]	; (8006f14 <xTaskIncrementTick+0x14c>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d104      	bne.n	8006e50 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e46:	4b36      	ldr	r3, [pc, #216]	; (8006f20 <xTaskIncrementTick+0x158>)
 8006e48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006e4c:	601a      	str	r2, [r3, #0]
					break;
 8006e4e:	e03e      	b.n	8006ece <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e50:	4b30      	ldr	r3, [pc, #192]	; (8006f14 <xTaskIncrementTick+0x14c>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	68db      	ldr	r3, [r3, #12]
 8006e56:	68db      	ldr	r3, [r3, #12]
 8006e58:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006e60:	693a      	ldr	r2, [r7, #16]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d203      	bcs.n	8006e70 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006e68:	4a2d      	ldr	r2, [pc, #180]	; (8006f20 <xTaskIncrementTick+0x158>)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006e6e:	e02e      	b.n	8006ece <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	3304      	adds	r3, #4
 8006e74:	4618      	mov	r0, r3
 8006e76:	f7ff f8fb 	bl	8006070 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d004      	beq.n	8006e8c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	3318      	adds	r3, #24
 8006e86:	4618      	mov	r0, r3
 8006e88:	f7ff f8f2 	bl	8006070 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e90:	2201      	movs	r2, #1
 8006e92:	409a      	lsls	r2, r3
 8006e94:	4b23      	ldr	r3, [pc, #140]	; (8006f24 <xTaskIncrementTick+0x15c>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	4a22      	ldr	r2, [pc, #136]	; (8006f24 <xTaskIncrementTick+0x15c>)
 8006e9c:	6013      	str	r3, [r2, #0]
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ea2:	4613      	mov	r3, r2
 8006ea4:	009b      	lsls	r3, r3, #2
 8006ea6:	4413      	add	r3, r2
 8006ea8:	009b      	lsls	r3, r3, #2
 8006eaa:	4a1f      	ldr	r2, [pc, #124]	; (8006f28 <xTaskIncrementTick+0x160>)
 8006eac:	441a      	add	r2, r3
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	3304      	adds	r3, #4
 8006eb2:	4619      	mov	r1, r3
 8006eb4:	4610      	mov	r0, r2
 8006eb6:	f7ff f87e 	bl	8005fb6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ebe:	4b1b      	ldr	r3, [pc, #108]	; (8006f2c <xTaskIncrementTick+0x164>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d3b9      	bcc.n	8006e3c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ecc:	e7b6      	b.n	8006e3c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006ece:	4b17      	ldr	r3, [pc, #92]	; (8006f2c <xTaskIncrementTick+0x164>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ed4:	4914      	ldr	r1, [pc, #80]	; (8006f28 <xTaskIncrementTick+0x160>)
 8006ed6:	4613      	mov	r3, r2
 8006ed8:	009b      	lsls	r3, r3, #2
 8006eda:	4413      	add	r3, r2
 8006edc:	009b      	lsls	r3, r3, #2
 8006ede:	440b      	add	r3, r1
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	2b01      	cmp	r3, #1
 8006ee4:	d901      	bls.n	8006eea <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006eea:	4b11      	ldr	r3, [pc, #68]	; (8006f30 <xTaskIncrementTick+0x168>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d007      	beq.n	8006f02 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	617b      	str	r3, [r7, #20]
 8006ef6:	e004      	b.n	8006f02 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006ef8:	4b0e      	ldr	r3, [pc, #56]	; (8006f34 <xTaskIncrementTick+0x16c>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	3301      	adds	r3, #1
 8006efe:	4a0d      	ldr	r2, [pc, #52]	; (8006f34 <xTaskIncrementTick+0x16c>)
 8006f00:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006f02:	697b      	ldr	r3, [r7, #20]
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3718      	adds	r7, #24
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}
 8006f0c:	200006f8 	.word	0x200006f8
 8006f10:	200006d4 	.word	0x200006d4
 8006f14:	20000688 	.word	0x20000688
 8006f18:	2000068c 	.word	0x2000068c
 8006f1c:	200006e8 	.word	0x200006e8
 8006f20:	200006f0 	.word	0x200006f0
 8006f24:	200006d8 	.word	0x200006d8
 8006f28:	200005d4 	.word	0x200005d4
 8006f2c:	200005d0 	.word	0x200005d0
 8006f30:	200006e4 	.word	0x200006e4
 8006f34:	200006e0 	.word	0x200006e0

08006f38 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b087      	sub	sp, #28
 8006f3c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006f3e:	4b27      	ldr	r3, [pc, #156]	; (8006fdc <vTaskSwitchContext+0xa4>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d003      	beq.n	8006f4e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006f46:	4b26      	ldr	r3, [pc, #152]	; (8006fe0 <vTaskSwitchContext+0xa8>)
 8006f48:	2201      	movs	r2, #1
 8006f4a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006f4c:	e03f      	b.n	8006fce <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8006f4e:	4b24      	ldr	r3, [pc, #144]	; (8006fe0 <vTaskSwitchContext+0xa8>)
 8006f50:	2200      	movs	r2, #0
 8006f52:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f54:	4b23      	ldr	r3, [pc, #140]	; (8006fe4 <vTaskSwitchContext+0xac>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	fab3 f383 	clz	r3, r3
 8006f60:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006f62:	7afb      	ldrb	r3, [r7, #11]
 8006f64:	f1c3 031f 	rsb	r3, r3, #31
 8006f68:	617b      	str	r3, [r7, #20]
 8006f6a:	491f      	ldr	r1, [pc, #124]	; (8006fe8 <vTaskSwitchContext+0xb0>)
 8006f6c:	697a      	ldr	r2, [r7, #20]
 8006f6e:	4613      	mov	r3, r2
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	4413      	add	r3, r2
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	440b      	add	r3, r1
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d10a      	bne.n	8006f94 <vTaskSwitchContext+0x5c>
	__asm volatile
 8006f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f82:	f383 8811 	msr	BASEPRI, r3
 8006f86:	f3bf 8f6f 	isb	sy
 8006f8a:	f3bf 8f4f 	dsb	sy
 8006f8e:	607b      	str	r3, [r7, #4]
}
 8006f90:	bf00      	nop
 8006f92:	e7fe      	b.n	8006f92 <vTaskSwitchContext+0x5a>
 8006f94:	697a      	ldr	r2, [r7, #20]
 8006f96:	4613      	mov	r3, r2
 8006f98:	009b      	lsls	r3, r3, #2
 8006f9a:	4413      	add	r3, r2
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	4a12      	ldr	r2, [pc, #72]	; (8006fe8 <vTaskSwitchContext+0xb0>)
 8006fa0:	4413      	add	r3, r2
 8006fa2:	613b      	str	r3, [r7, #16]
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	685a      	ldr	r2, [r3, #4]
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	605a      	str	r2, [r3, #4]
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	685a      	ldr	r2, [r3, #4]
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	3308      	adds	r3, #8
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d104      	bne.n	8006fc4 <vTaskSwitchContext+0x8c>
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	685a      	ldr	r2, [r3, #4]
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	605a      	str	r2, [r3, #4]
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	68db      	ldr	r3, [r3, #12]
 8006fca:	4a08      	ldr	r2, [pc, #32]	; (8006fec <vTaskSwitchContext+0xb4>)
 8006fcc:	6013      	str	r3, [r2, #0]
}
 8006fce:	bf00      	nop
 8006fd0:	371c      	adds	r7, #28
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd8:	4770      	bx	lr
 8006fda:	bf00      	nop
 8006fdc:	200006f8 	.word	0x200006f8
 8006fe0:	200006e4 	.word	0x200006e4
 8006fe4:	200006d8 	.word	0x200006d8
 8006fe8:	200005d4 	.word	0x200005d4
 8006fec:	200005d0 	.word	0x200005d0

08006ff0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b084      	sub	sp, #16
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
 8006ff8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d10a      	bne.n	8007016 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007004:	f383 8811 	msr	BASEPRI, r3
 8007008:	f3bf 8f6f 	isb	sy
 800700c:	f3bf 8f4f 	dsb	sy
 8007010:	60fb      	str	r3, [r7, #12]
}
 8007012:	bf00      	nop
 8007014:	e7fe      	b.n	8007014 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007016:	4b07      	ldr	r3, [pc, #28]	; (8007034 <vTaskPlaceOnEventList+0x44>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	3318      	adds	r3, #24
 800701c:	4619      	mov	r1, r3
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f7fe ffed 	bl	8005ffe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007024:	2101      	movs	r1, #1
 8007026:	6838      	ldr	r0, [r7, #0]
 8007028:	f000 fa66 	bl	80074f8 <prvAddCurrentTaskToDelayedList>
}
 800702c:	bf00      	nop
 800702e:	3710      	adds	r7, #16
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}
 8007034:	200005d0 	.word	0x200005d0

08007038 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b086      	sub	sp, #24
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	68db      	ldr	r3, [r3, #12]
 8007044:	68db      	ldr	r3, [r3, #12]
 8007046:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d10a      	bne.n	8007064 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800704e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007052:	f383 8811 	msr	BASEPRI, r3
 8007056:	f3bf 8f6f 	isb	sy
 800705a:	f3bf 8f4f 	dsb	sy
 800705e:	60fb      	str	r3, [r7, #12]
}
 8007060:	bf00      	nop
 8007062:	e7fe      	b.n	8007062 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	3318      	adds	r3, #24
 8007068:	4618      	mov	r0, r3
 800706a:	f7ff f801 	bl	8006070 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800706e:	4b1d      	ldr	r3, [pc, #116]	; (80070e4 <xTaskRemoveFromEventList+0xac>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d11c      	bne.n	80070b0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	3304      	adds	r3, #4
 800707a:	4618      	mov	r0, r3
 800707c:	f7fe fff8 	bl	8006070 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007084:	2201      	movs	r2, #1
 8007086:	409a      	lsls	r2, r3
 8007088:	4b17      	ldr	r3, [pc, #92]	; (80070e8 <xTaskRemoveFromEventList+0xb0>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4313      	orrs	r3, r2
 800708e:	4a16      	ldr	r2, [pc, #88]	; (80070e8 <xTaskRemoveFromEventList+0xb0>)
 8007090:	6013      	str	r3, [r2, #0]
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007096:	4613      	mov	r3, r2
 8007098:	009b      	lsls	r3, r3, #2
 800709a:	4413      	add	r3, r2
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	4a13      	ldr	r2, [pc, #76]	; (80070ec <xTaskRemoveFromEventList+0xb4>)
 80070a0:	441a      	add	r2, r3
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	3304      	adds	r3, #4
 80070a6:	4619      	mov	r1, r3
 80070a8:	4610      	mov	r0, r2
 80070aa:	f7fe ff84 	bl	8005fb6 <vListInsertEnd>
 80070ae:	e005      	b.n	80070bc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	3318      	adds	r3, #24
 80070b4:	4619      	mov	r1, r3
 80070b6:	480e      	ldr	r0, [pc, #56]	; (80070f0 <xTaskRemoveFromEventList+0xb8>)
 80070b8:	f7fe ff7d 	bl	8005fb6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070c0:	4b0c      	ldr	r3, [pc, #48]	; (80070f4 <xTaskRemoveFromEventList+0xbc>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c6:	429a      	cmp	r2, r3
 80070c8:	d905      	bls.n	80070d6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80070ca:	2301      	movs	r3, #1
 80070cc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80070ce:	4b0a      	ldr	r3, [pc, #40]	; (80070f8 <xTaskRemoveFromEventList+0xc0>)
 80070d0:	2201      	movs	r2, #1
 80070d2:	601a      	str	r2, [r3, #0]
 80070d4:	e001      	b.n	80070da <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80070d6:	2300      	movs	r3, #0
 80070d8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80070da:	697b      	ldr	r3, [r7, #20]
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3718      	adds	r7, #24
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}
 80070e4:	200006f8 	.word	0x200006f8
 80070e8:	200006d8 	.word	0x200006d8
 80070ec:	200005d4 	.word	0x200005d4
 80070f0:	20000690 	.word	0x20000690
 80070f4:	200005d0 	.word	0x200005d0
 80070f8:	200006e4 	.word	0x200006e4

080070fc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80070fc:	b480      	push	{r7}
 80070fe:	b083      	sub	sp, #12
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007104:	4b06      	ldr	r3, [pc, #24]	; (8007120 <vTaskInternalSetTimeOutState+0x24>)
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800710c:	4b05      	ldr	r3, [pc, #20]	; (8007124 <vTaskInternalSetTimeOutState+0x28>)
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	605a      	str	r2, [r3, #4]
}
 8007114:	bf00      	nop
 8007116:	370c      	adds	r7, #12
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr
 8007120:	200006e8 	.word	0x200006e8
 8007124:	200006d4 	.word	0x200006d4

08007128 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b088      	sub	sp, #32
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d10a      	bne.n	800714e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800713c:	f383 8811 	msr	BASEPRI, r3
 8007140:	f3bf 8f6f 	isb	sy
 8007144:	f3bf 8f4f 	dsb	sy
 8007148:	613b      	str	r3, [r7, #16]
}
 800714a:	bf00      	nop
 800714c:	e7fe      	b.n	800714c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d10a      	bne.n	800716a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007158:	f383 8811 	msr	BASEPRI, r3
 800715c:	f3bf 8f6f 	isb	sy
 8007160:	f3bf 8f4f 	dsb	sy
 8007164:	60fb      	str	r3, [r7, #12]
}
 8007166:	bf00      	nop
 8007168:	e7fe      	b.n	8007168 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800716a:	f000 fb5b 	bl	8007824 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800716e:	4b1d      	ldr	r3, [pc, #116]	; (80071e4 <xTaskCheckForTimeOut+0xbc>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	69ba      	ldr	r2, [r7, #24]
 800717a:	1ad3      	subs	r3, r2, r3
 800717c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007186:	d102      	bne.n	800718e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007188:	2300      	movs	r3, #0
 800718a:	61fb      	str	r3, [r7, #28]
 800718c:	e023      	b.n	80071d6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	4b15      	ldr	r3, [pc, #84]	; (80071e8 <xTaskCheckForTimeOut+0xc0>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	429a      	cmp	r2, r3
 8007198:	d007      	beq.n	80071aa <xTaskCheckForTimeOut+0x82>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	69ba      	ldr	r2, [r7, #24]
 80071a0:	429a      	cmp	r2, r3
 80071a2:	d302      	bcc.n	80071aa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80071a4:	2301      	movs	r3, #1
 80071a6:	61fb      	str	r3, [r7, #28]
 80071a8:	e015      	b.n	80071d6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	697a      	ldr	r2, [r7, #20]
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d20b      	bcs.n	80071cc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	681a      	ldr	r2, [r3, #0]
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	1ad2      	subs	r2, r2, r3
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f7ff ff9b 	bl	80070fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80071c6:	2300      	movs	r3, #0
 80071c8:	61fb      	str	r3, [r7, #28]
 80071ca:	e004      	b.n	80071d6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	2200      	movs	r2, #0
 80071d0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80071d2:	2301      	movs	r3, #1
 80071d4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80071d6:	f000 fb55 	bl	8007884 <vPortExitCritical>

	return xReturn;
 80071da:	69fb      	ldr	r3, [r7, #28]
}
 80071dc:	4618      	mov	r0, r3
 80071de:	3720      	adds	r7, #32
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}
 80071e4:	200006d4 	.word	0x200006d4
 80071e8:	200006e8 	.word	0x200006e8

080071ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80071ec:	b480      	push	{r7}
 80071ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80071f0:	4b03      	ldr	r3, [pc, #12]	; (8007200 <vTaskMissedYield+0x14>)
 80071f2:	2201      	movs	r2, #1
 80071f4:	601a      	str	r2, [r3, #0]
}
 80071f6:	bf00      	nop
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr
 8007200:	200006e4 	.word	0x200006e4

08007204 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b082      	sub	sp, #8
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800720c:	f000 f852 	bl	80072b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007210:	4b06      	ldr	r3, [pc, #24]	; (800722c <prvIdleTask+0x28>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	2b01      	cmp	r3, #1
 8007216:	d9f9      	bls.n	800720c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007218:	4b05      	ldr	r3, [pc, #20]	; (8007230 <prvIdleTask+0x2c>)
 800721a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800721e:	601a      	str	r2, [r3, #0]
 8007220:	f3bf 8f4f 	dsb	sy
 8007224:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007228:	e7f0      	b.n	800720c <prvIdleTask+0x8>
 800722a:	bf00      	nop
 800722c:	200005d4 	.word	0x200005d4
 8007230:	e000ed04 	.word	0xe000ed04

08007234 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b082      	sub	sp, #8
 8007238:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800723a:	2300      	movs	r3, #0
 800723c:	607b      	str	r3, [r7, #4]
 800723e:	e00c      	b.n	800725a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007240:	687a      	ldr	r2, [r7, #4]
 8007242:	4613      	mov	r3, r2
 8007244:	009b      	lsls	r3, r3, #2
 8007246:	4413      	add	r3, r2
 8007248:	009b      	lsls	r3, r3, #2
 800724a:	4a12      	ldr	r2, [pc, #72]	; (8007294 <prvInitialiseTaskLists+0x60>)
 800724c:	4413      	add	r3, r2
 800724e:	4618      	mov	r0, r3
 8007250:	f7fe fe84 	bl	8005f5c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	3301      	adds	r3, #1
 8007258:	607b      	str	r3, [r7, #4]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2b06      	cmp	r3, #6
 800725e:	d9ef      	bls.n	8007240 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007260:	480d      	ldr	r0, [pc, #52]	; (8007298 <prvInitialiseTaskLists+0x64>)
 8007262:	f7fe fe7b 	bl	8005f5c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007266:	480d      	ldr	r0, [pc, #52]	; (800729c <prvInitialiseTaskLists+0x68>)
 8007268:	f7fe fe78 	bl	8005f5c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800726c:	480c      	ldr	r0, [pc, #48]	; (80072a0 <prvInitialiseTaskLists+0x6c>)
 800726e:	f7fe fe75 	bl	8005f5c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007272:	480c      	ldr	r0, [pc, #48]	; (80072a4 <prvInitialiseTaskLists+0x70>)
 8007274:	f7fe fe72 	bl	8005f5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007278:	480b      	ldr	r0, [pc, #44]	; (80072a8 <prvInitialiseTaskLists+0x74>)
 800727a:	f7fe fe6f 	bl	8005f5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800727e:	4b0b      	ldr	r3, [pc, #44]	; (80072ac <prvInitialiseTaskLists+0x78>)
 8007280:	4a05      	ldr	r2, [pc, #20]	; (8007298 <prvInitialiseTaskLists+0x64>)
 8007282:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007284:	4b0a      	ldr	r3, [pc, #40]	; (80072b0 <prvInitialiseTaskLists+0x7c>)
 8007286:	4a05      	ldr	r2, [pc, #20]	; (800729c <prvInitialiseTaskLists+0x68>)
 8007288:	601a      	str	r2, [r3, #0]
}
 800728a:	bf00      	nop
 800728c:	3708      	adds	r7, #8
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}
 8007292:	bf00      	nop
 8007294:	200005d4 	.word	0x200005d4
 8007298:	20000660 	.word	0x20000660
 800729c:	20000674 	.word	0x20000674
 80072a0:	20000690 	.word	0x20000690
 80072a4:	200006a4 	.word	0x200006a4
 80072a8:	200006bc 	.word	0x200006bc
 80072ac:	20000688 	.word	0x20000688
 80072b0:	2000068c 	.word	0x2000068c

080072b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b082      	sub	sp, #8
 80072b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80072ba:	e019      	b.n	80072f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80072bc:	f000 fab2 	bl	8007824 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072c0:	4b10      	ldr	r3, [pc, #64]	; (8007304 <prvCheckTasksWaitingTermination+0x50>)
 80072c2:	68db      	ldr	r3, [r3, #12]
 80072c4:	68db      	ldr	r3, [r3, #12]
 80072c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	3304      	adds	r3, #4
 80072cc:	4618      	mov	r0, r3
 80072ce:	f7fe fecf 	bl	8006070 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80072d2:	4b0d      	ldr	r3, [pc, #52]	; (8007308 <prvCheckTasksWaitingTermination+0x54>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	3b01      	subs	r3, #1
 80072d8:	4a0b      	ldr	r2, [pc, #44]	; (8007308 <prvCheckTasksWaitingTermination+0x54>)
 80072da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80072dc:	4b0b      	ldr	r3, [pc, #44]	; (800730c <prvCheckTasksWaitingTermination+0x58>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	3b01      	subs	r3, #1
 80072e2:	4a0a      	ldr	r2, [pc, #40]	; (800730c <prvCheckTasksWaitingTermination+0x58>)
 80072e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80072e6:	f000 facd 	bl	8007884 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f000 f810 	bl	8007310 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80072f0:	4b06      	ldr	r3, [pc, #24]	; (800730c <prvCheckTasksWaitingTermination+0x58>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d1e1      	bne.n	80072bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80072f8:	bf00      	nop
 80072fa:	bf00      	nop
 80072fc:	3708      	adds	r7, #8
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}
 8007302:	bf00      	nop
 8007304:	200006a4 	.word	0x200006a4
 8007308:	200006d0 	.word	0x200006d0
 800730c:	200006b8 	.word	0x200006b8

08007310 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007310:	b580      	push	{r7, lr}
 8007312:	b084      	sub	sp, #16
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800731e:	2b00      	cmp	r3, #0
 8007320:	d108      	bne.n	8007334 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007326:	4618      	mov	r0, r3
 8007328:	f000 fc2a 	bl	8007b80 <vPortFree>
				vPortFree( pxTCB );
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f000 fc27 	bl	8007b80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007332:	e018      	b.n	8007366 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800733a:	2b01      	cmp	r3, #1
 800733c:	d103      	bne.n	8007346 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 fc1e 	bl	8007b80 <vPortFree>
	}
 8007344:	e00f      	b.n	8007366 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800734c:	2b02      	cmp	r3, #2
 800734e:	d00a      	beq.n	8007366 <prvDeleteTCB+0x56>
	__asm volatile
 8007350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007354:	f383 8811 	msr	BASEPRI, r3
 8007358:	f3bf 8f6f 	isb	sy
 800735c:	f3bf 8f4f 	dsb	sy
 8007360:	60fb      	str	r3, [r7, #12]
}
 8007362:	bf00      	nop
 8007364:	e7fe      	b.n	8007364 <prvDeleteTCB+0x54>
	}
 8007366:	bf00      	nop
 8007368:	3710      	adds	r7, #16
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}
	...

08007370 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007370:	b480      	push	{r7}
 8007372:	b083      	sub	sp, #12
 8007374:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007376:	4b0c      	ldr	r3, [pc, #48]	; (80073a8 <prvResetNextTaskUnblockTime+0x38>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d104      	bne.n	800738a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007380:	4b0a      	ldr	r3, [pc, #40]	; (80073ac <prvResetNextTaskUnblockTime+0x3c>)
 8007382:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007386:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007388:	e008      	b.n	800739c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800738a:	4b07      	ldr	r3, [pc, #28]	; (80073a8 <prvResetNextTaskUnblockTime+0x38>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	68db      	ldr	r3, [r3, #12]
 8007390:	68db      	ldr	r3, [r3, #12]
 8007392:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	4a04      	ldr	r2, [pc, #16]	; (80073ac <prvResetNextTaskUnblockTime+0x3c>)
 800739a:	6013      	str	r3, [r2, #0]
}
 800739c:	bf00      	nop
 800739e:	370c      	adds	r7, #12
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr
 80073a8:	20000688 	.word	0x20000688
 80073ac:	200006f0 	.word	0x200006f0

080073b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80073b0:	b480      	push	{r7}
 80073b2:	b083      	sub	sp, #12
 80073b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80073b6:	4b0b      	ldr	r3, [pc, #44]	; (80073e4 <xTaskGetSchedulerState+0x34>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d102      	bne.n	80073c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80073be:	2301      	movs	r3, #1
 80073c0:	607b      	str	r3, [r7, #4]
 80073c2:	e008      	b.n	80073d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073c4:	4b08      	ldr	r3, [pc, #32]	; (80073e8 <xTaskGetSchedulerState+0x38>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d102      	bne.n	80073d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80073cc:	2302      	movs	r3, #2
 80073ce:	607b      	str	r3, [r7, #4]
 80073d0:	e001      	b.n	80073d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80073d2:	2300      	movs	r3, #0
 80073d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80073d6:	687b      	ldr	r3, [r7, #4]
	}
 80073d8:	4618      	mov	r0, r3
 80073da:	370c      	adds	r7, #12
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr
 80073e4:	200006dc 	.word	0x200006dc
 80073e8:	200006f8 	.word	0x200006f8

080073ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b086      	sub	sp, #24
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80073f8:	2300      	movs	r3, #0
 80073fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d06e      	beq.n	80074e0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007402:	4b3a      	ldr	r3, [pc, #232]	; (80074ec <xTaskPriorityDisinherit+0x100>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	693a      	ldr	r2, [r7, #16]
 8007408:	429a      	cmp	r2, r3
 800740a:	d00a      	beq.n	8007422 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800740c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007410:	f383 8811 	msr	BASEPRI, r3
 8007414:	f3bf 8f6f 	isb	sy
 8007418:	f3bf 8f4f 	dsb	sy
 800741c:	60fb      	str	r3, [r7, #12]
}
 800741e:	bf00      	nop
 8007420:	e7fe      	b.n	8007420 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007426:	2b00      	cmp	r3, #0
 8007428:	d10a      	bne.n	8007440 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800742a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800742e:	f383 8811 	msr	BASEPRI, r3
 8007432:	f3bf 8f6f 	isb	sy
 8007436:	f3bf 8f4f 	dsb	sy
 800743a:	60bb      	str	r3, [r7, #8]
}
 800743c:	bf00      	nop
 800743e:	e7fe      	b.n	800743e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007444:	1e5a      	subs	r2, r3, #1
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007452:	429a      	cmp	r2, r3
 8007454:	d044      	beq.n	80074e0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800745a:	2b00      	cmp	r3, #0
 800745c:	d140      	bne.n	80074e0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	3304      	adds	r3, #4
 8007462:	4618      	mov	r0, r3
 8007464:	f7fe fe04 	bl	8006070 <uxListRemove>
 8007468:	4603      	mov	r3, r0
 800746a:	2b00      	cmp	r3, #0
 800746c:	d115      	bne.n	800749a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007472:	491f      	ldr	r1, [pc, #124]	; (80074f0 <xTaskPriorityDisinherit+0x104>)
 8007474:	4613      	mov	r3, r2
 8007476:	009b      	lsls	r3, r3, #2
 8007478:	4413      	add	r3, r2
 800747a:	009b      	lsls	r3, r3, #2
 800747c:	440b      	add	r3, r1
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d10a      	bne.n	800749a <xTaskPriorityDisinherit+0xae>
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007488:	2201      	movs	r2, #1
 800748a:	fa02 f303 	lsl.w	r3, r2, r3
 800748e:	43da      	mvns	r2, r3
 8007490:	4b18      	ldr	r3, [pc, #96]	; (80074f4 <xTaskPriorityDisinherit+0x108>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4013      	ands	r3, r2
 8007496:	4a17      	ldr	r2, [pc, #92]	; (80074f4 <xTaskPriorityDisinherit+0x108>)
 8007498:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a6:	f1c3 0207 	rsb	r2, r3, #7
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b2:	2201      	movs	r2, #1
 80074b4:	409a      	lsls	r2, r3
 80074b6:	4b0f      	ldr	r3, [pc, #60]	; (80074f4 <xTaskPriorityDisinherit+0x108>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4313      	orrs	r3, r2
 80074bc:	4a0d      	ldr	r2, [pc, #52]	; (80074f4 <xTaskPriorityDisinherit+0x108>)
 80074be:	6013      	str	r3, [r2, #0]
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074c4:	4613      	mov	r3, r2
 80074c6:	009b      	lsls	r3, r3, #2
 80074c8:	4413      	add	r3, r2
 80074ca:	009b      	lsls	r3, r3, #2
 80074cc:	4a08      	ldr	r2, [pc, #32]	; (80074f0 <xTaskPriorityDisinherit+0x104>)
 80074ce:	441a      	add	r2, r3
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	3304      	adds	r3, #4
 80074d4:	4619      	mov	r1, r3
 80074d6:	4610      	mov	r0, r2
 80074d8:	f7fe fd6d 	bl	8005fb6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80074dc:	2301      	movs	r3, #1
 80074de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80074e0:	697b      	ldr	r3, [r7, #20]
	}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3718      	adds	r7, #24
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}
 80074ea:	bf00      	nop
 80074ec:	200005d0 	.word	0x200005d0
 80074f0:	200005d4 	.word	0x200005d4
 80074f4:	200006d8 	.word	0x200006d8

080074f8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b084      	sub	sp, #16
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007502:	4b29      	ldr	r3, [pc, #164]	; (80075a8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007508:	4b28      	ldr	r3, [pc, #160]	; (80075ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	3304      	adds	r3, #4
 800750e:	4618      	mov	r0, r3
 8007510:	f7fe fdae 	bl	8006070 <uxListRemove>
 8007514:	4603      	mov	r3, r0
 8007516:	2b00      	cmp	r3, #0
 8007518:	d10b      	bne.n	8007532 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800751a:	4b24      	ldr	r3, [pc, #144]	; (80075ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007520:	2201      	movs	r2, #1
 8007522:	fa02 f303 	lsl.w	r3, r2, r3
 8007526:	43da      	mvns	r2, r3
 8007528:	4b21      	ldr	r3, [pc, #132]	; (80075b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4013      	ands	r3, r2
 800752e:	4a20      	ldr	r2, [pc, #128]	; (80075b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007530:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007538:	d10a      	bne.n	8007550 <prvAddCurrentTaskToDelayedList+0x58>
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d007      	beq.n	8007550 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007540:	4b1a      	ldr	r3, [pc, #104]	; (80075ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	3304      	adds	r3, #4
 8007546:	4619      	mov	r1, r3
 8007548:	481a      	ldr	r0, [pc, #104]	; (80075b4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800754a:	f7fe fd34 	bl	8005fb6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800754e:	e026      	b.n	800759e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007550:	68fa      	ldr	r2, [r7, #12]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	4413      	add	r3, r2
 8007556:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007558:	4b14      	ldr	r3, [pc, #80]	; (80075ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	68ba      	ldr	r2, [r7, #8]
 800755e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007560:	68ba      	ldr	r2, [r7, #8]
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	429a      	cmp	r2, r3
 8007566:	d209      	bcs.n	800757c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007568:	4b13      	ldr	r3, [pc, #76]	; (80075b8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800756a:	681a      	ldr	r2, [r3, #0]
 800756c:	4b0f      	ldr	r3, [pc, #60]	; (80075ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	3304      	adds	r3, #4
 8007572:	4619      	mov	r1, r3
 8007574:	4610      	mov	r0, r2
 8007576:	f7fe fd42 	bl	8005ffe <vListInsert>
}
 800757a:	e010      	b.n	800759e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800757c:	4b0f      	ldr	r3, [pc, #60]	; (80075bc <prvAddCurrentTaskToDelayedList+0xc4>)
 800757e:	681a      	ldr	r2, [r3, #0]
 8007580:	4b0a      	ldr	r3, [pc, #40]	; (80075ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	3304      	adds	r3, #4
 8007586:	4619      	mov	r1, r3
 8007588:	4610      	mov	r0, r2
 800758a:	f7fe fd38 	bl	8005ffe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800758e:	4b0c      	ldr	r3, [pc, #48]	; (80075c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	68ba      	ldr	r2, [r7, #8]
 8007594:	429a      	cmp	r2, r3
 8007596:	d202      	bcs.n	800759e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007598:	4a09      	ldr	r2, [pc, #36]	; (80075c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	6013      	str	r3, [r2, #0]
}
 800759e:	bf00      	nop
 80075a0:	3710      	adds	r7, #16
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
 80075a6:	bf00      	nop
 80075a8:	200006d4 	.word	0x200006d4
 80075ac:	200005d0 	.word	0x200005d0
 80075b0:	200006d8 	.word	0x200006d8
 80075b4:	200006bc 	.word	0x200006bc
 80075b8:	2000068c 	.word	0x2000068c
 80075bc:	20000688 	.word	0x20000688
 80075c0:	200006f0 	.word	0x200006f0

080075c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80075c4:	b480      	push	{r7}
 80075c6:	b085      	sub	sp, #20
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	60b9      	str	r1, [r7, #8]
 80075ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	3b04      	subs	r3, #4
 80075d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80075dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	3b04      	subs	r3, #4
 80075e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	f023 0201 	bic.w	r2, r3, #1
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	3b04      	subs	r3, #4
 80075f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80075f4:	4a0c      	ldr	r2, [pc, #48]	; (8007628 <pxPortInitialiseStack+0x64>)
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	3b14      	subs	r3, #20
 80075fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	3b04      	subs	r3, #4
 800760a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f06f 0202 	mvn.w	r2, #2
 8007612:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	3b20      	subs	r3, #32
 8007618:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800761a:	68fb      	ldr	r3, [r7, #12]
}
 800761c:	4618      	mov	r0, r3
 800761e:	3714      	adds	r7, #20
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr
 8007628:	0800762d 	.word	0x0800762d

0800762c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800762c:	b480      	push	{r7}
 800762e:	b085      	sub	sp, #20
 8007630:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007632:	2300      	movs	r3, #0
 8007634:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007636:	4b12      	ldr	r3, [pc, #72]	; (8007680 <prvTaskExitError+0x54>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800763e:	d00a      	beq.n	8007656 <prvTaskExitError+0x2a>
	__asm volatile
 8007640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007644:	f383 8811 	msr	BASEPRI, r3
 8007648:	f3bf 8f6f 	isb	sy
 800764c:	f3bf 8f4f 	dsb	sy
 8007650:	60fb      	str	r3, [r7, #12]
}
 8007652:	bf00      	nop
 8007654:	e7fe      	b.n	8007654 <prvTaskExitError+0x28>
	__asm volatile
 8007656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800765a:	f383 8811 	msr	BASEPRI, r3
 800765e:	f3bf 8f6f 	isb	sy
 8007662:	f3bf 8f4f 	dsb	sy
 8007666:	60bb      	str	r3, [r7, #8]
}
 8007668:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800766a:	bf00      	nop
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d0fc      	beq.n	800766c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007672:	bf00      	nop
 8007674:	bf00      	nop
 8007676:	3714      	adds	r7, #20
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr
 8007680:	2000000c 	.word	0x2000000c
	...

08007690 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007690:	4b07      	ldr	r3, [pc, #28]	; (80076b0 <pxCurrentTCBConst2>)
 8007692:	6819      	ldr	r1, [r3, #0]
 8007694:	6808      	ldr	r0, [r1, #0]
 8007696:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800769a:	f380 8809 	msr	PSP, r0
 800769e:	f3bf 8f6f 	isb	sy
 80076a2:	f04f 0000 	mov.w	r0, #0
 80076a6:	f380 8811 	msr	BASEPRI, r0
 80076aa:	4770      	bx	lr
 80076ac:	f3af 8000 	nop.w

080076b0 <pxCurrentTCBConst2>:
 80076b0:	200005d0 	.word	0x200005d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80076b4:	bf00      	nop
 80076b6:	bf00      	nop

080076b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80076b8:	4808      	ldr	r0, [pc, #32]	; (80076dc <prvPortStartFirstTask+0x24>)
 80076ba:	6800      	ldr	r0, [r0, #0]
 80076bc:	6800      	ldr	r0, [r0, #0]
 80076be:	f380 8808 	msr	MSP, r0
 80076c2:	f04f 0000 	mov.w	r0, #0
 80076c6:	f380 8814 	msr	CONTROL, r0
 80076ca:	b662      	cpsie	i
 80076cc:	b661      	cpsie	f
 80076ce:	f3bf 8f4f 	dsb	sy
 80076d2:	f3bf 8f6f 	isb	sy
 80076d6:	df00      	svc	0
 80076d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80076da:	bf00      	nop
 80076dc:	e000ed08 	.word	0xe000ed08

080076e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b086      	sub	sp, #24
 80076e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80076e6:	4b46      	ldr	r3, [pc, #280]	; (8007800 <xPortStartScheduler+0x120>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a46      	ldr	r2, [pc, #280]	; (8007804 <xPortStartScheduler+0x124>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d10a      	bne.n	8007706 <xPortStartScheduler+0x26>
	__asm volatile
 80076f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f4:	f383 8811 	msr	BASEPRI, r3
 80076f8:	f3bf 8f6f 	isb	sy
 80076fc:	f3bf 8f4f 	dsb	sy
 8007700:	613b      	str	r3, [r7, #16]
}
 8007702:	bf00      	nop
 8007704:	e7fe      	b.n	8007704 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007706:	4b3e      	ldr	r3, [pc, #248]	; (8007800 <xPortStartScheduler+0x120>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a3f      	ldr	r2, [pc, #252]	; (8007808 <xPortStartScheduler+0x128>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d10a      	bne.n	8007726 <xPortStartScheduler+0x46>
	__asm volatile
 8007710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007714:	f383 8811 	msr	BASEPRI, r3
 8007718:	f3bf 8f6f 	isb	sy
 800771c:	f3bf 8f4f 	dsb	sy
 8007720:	60fb      	str	r3, [r7, #12]
}
 8007722:	bf00      	nop
 8007724:	e7fe      	b.n	8007724 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007726:	4b39      	ldr	r3, [pc, #228]	; (800780c <xPortStartScheduler+0x12c>)
 8007728:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	781b      	ldrb	r3, [r3, #0]
 800772e:	b2db      	uxtb	r3, r3
 8007730:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	22ff      	movs	r2, #255	; 0xff
 8007736:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	b2db      	uxtb	r3, r3
 800773e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007740:	78fb      	ldrb	r3, [r7, #3]
 8007742:	b2db      	uxtb	r3, r3
 8007744:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007748:	b2da      	uxtb	r2, r3
 800774a:	4b31      	ldr	r3, [pc, #196]	; (8007810 <xPortStartScheduler+0x130>)
 800774c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800774e:	4b31      	ldr	r3, [pc, #196]	; (8007814 <xPortStartScheduler+0x134>)
 8007750:	2207      	movs	r2, #7
 8007752:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007754:	e009      	b.n	800776a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007756:	4b2f      	ldr	r3, [pc, #188]	; (8007814 <xPortStartScheduler+0x134>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	3b01      	subs	r3, #1
 800775c:	4a2d      	ldr	r2, [pc, #180]	; (8007814 <xPortStartScheduler+0x134>)
 800775e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007760:	78fb      	ldrb	r3, [r7, #3]
 8007762:	b2db      	uxtb	r3, r3
 8007764:	005b      	lsls	r3, r3, #1
 8007766:	b2db      	uxtb	r3, r3
 8007768:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800776a:	78fb      	ldrb	r3, [r7, #3]
 800776c:	b2db      	uxtb	r3, r3
 800776e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007772:	2b80      	cmp	r3, #128	; 0x80
 8007774:	d0ef      	beq.n	8007756 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007776:	4b27      	ldr	r3, [pc, #156]	; (8007814 <xPortStartScheduler+0x134>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f1c3 0307 	rsb	r3, r3, #7
 800777e:	2b04      	cmp	r3, #4
 8007780:	d00a      	beq.n	8007798 <xPortStartScheduler+0xb8>
	__asm volatile
 8007782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007786:	f383 8811 	msr	BASEPRI, r3
 800778a:	f3bf 8f6f 	isb	sy
 800778e:	f3bf 8f4f 	dsb	sy
 8007792:	60bb      	str	r3, [r7, #8]
}
 8007794:	bf00      	nop
 8007796:	e7fe      	b.n	8007796 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007798:	4b1e      	ldr	r3, [pc, #120]	; (8007814 <xPortStartScheduler+0x134>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	021b      	lsls	r3, r3, #8
 800779e:	4a1d      	ldr	r2, [pc, #116]	; (8007814 <xPortStartScheduler+0x134>)
 80077a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80077a2:	4b1c      	ldr	r3, [pc, #112]	; (8007814 <xPortStartScheduler+0x134>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80077aa:	4a1a      	ldr	r2, [pc, #104]	; (8007814 <xPortStartScheduler+0x134>)
 80077ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	b2da      	uxtb	r2, r3
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80077b6:	4b18      	ldr	r3, [pc, #96]	; (8007818 <xPortStartScheduler+0x138>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a17      	ldr	r2, [pc, #92]	; (8007818 <xPortStartScheduler+0x138>)
 80077bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80077c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80077c2:	4b15      	ldr	r3, [pc, #84]	; (8007818 <xPortStartScheduler+0x138>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4a14      	ldr	r2, [pc, #80]	; (8007818 <xPortStartScheduler+0x138>)
 80077c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80077cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80077ce:	f000 f8dd 	bl	800798c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80077d2:	4b12      	ldr	r3, [pc, #72]	; (800781c <xPortStartScheduler+0x13c>)
 80077d4:	2200      	movs	r2, #0
 80077d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80077d8:	f000 f8fc 	bl	80079d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80077dc:	4b10      	ldr	r3, [pc, #64]	; (8007820 <xPortStartScheduler+0x140>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a0f      	ldr	r2, [pc, #60]	; (8007820 <xPortStartScheduler+0x140>)
 80077e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80077e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80077e8:	f7ff ff66 	bl	80076b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80077ec:	f7ff fba4 	bl	8006f38 <vTaskSwitchContext>
	prvTaskExitError();
 80077f0:	f7ff ff1c 	bl	800762c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80077f4:	2300      	movs	r3, #0
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3718      	adds	r7, #24
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}
 80077fe:	bf00      	nop
 8007800:	e000ed00 	.word	0xe000ed00
 8007804:	410fc271 	.word	0x410fc271
 8007808:	410fc270 	.word	0x410fc270
 800780c:	e000e400 	.word	0xe000e400
 8007810:	200006fc 	.word	0x200006fc
 8007814:	20000700 	.word	0x20000700
 8007818:	e000ed20 	.word	0xe000ed20
 800781c:	2000000c 	.word	0x2000000c
 8007820:	e000ef34 	.word	0xe000ef34

08007824 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007824:	b480      	push	{r7}
 8007826:	b083      	sub	sp, #12
 8007828:	af00      	add	r7, sp, #0
	__asm volatile
 800782a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800782e:	f383 8811 	msr	BASEPRI, r3
 8007832:	f3bf 8f6f 	isb	sy
 8007836:	f3bf 8f4f 	dsb	sy
 800783a:	607b      	str	r3, [r7, #4]
}
 800783c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800783e:	4b0f      	ldr	r3, [pc, #60]	; (800787c <vPortEnterCritical+0x58>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	3301      	adds	r3, #1
 8007844:	4a0d      	ldr	r2, [pc, #52]	; (800787c <vPortEnterCritical+0x58>)
 8007846:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007848:	4b0c      	ldr	r3, [pc, #48]	; (800787c <vPortEnterCritical+0x58>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	2b01      	cmp	r3, #1
 800784e:	d10f      	bne.n	8007870 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007850:	4b0b      	ldr	r3, [pc, #44]	; (8007880 <vPortEnterCritical+0x5c>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	b2db      	uxtb	r3, r3
 8007856:	2b00      	cmp	r3, #0
 8007858:	d00a      	beq.n	8007870 <vPortEnterCritical+0x4c>
	__asm volatile
 800785a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800785e:	f383 8811 	msr	BASEPRI, r3
 8007862:	f3bf 8f6f 	isb	sy
 8007866:	f3bf 8f4f 	dsb	sy
 800786a:	603b      	str	r3, [r7, #0]
}
 800786c:	bf00      	nop
 800786e:	e7fe      	b.n	800786e <vPortEnterCritical+0x4a>
	}
}
 8007870:	bf00      	nop
 8007872:	370c      	adds	r7, #12
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr
 800787c:	2000000c 	.word	0x2000000c
 8007880:	e000ed04 	.word	0xe000ed04

08007884 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007884:	b480      	push	{r7}
 8007886:	b083      	sub	sp, #12
 8007888:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800788a:	4b12      	ldr	r3, [pc, #72]	; (80078d4 <vPortExitCritical+0x50>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d10a      	bne.n	80078a8 <vPortExitCritical+0x24>
	__asm volatile
 8007892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007896:	f383 8811 	msr	BASEPRI, r3
 800789a:	f3bf 8f6f 	isb	sy
 800789e:	f3bf 8f4f 	dsb	sy
 80078a2:	607b      	str	r3, [r7, #4]
}
 80078a4:	bf00      	nop
 80078a6:	e7fe      	b.n	80078a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80078a8:	4b0a      	ldr	r3, [pc, #40]	; (80078d4 <vPortExitCritical+0x50>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	3b01      	subs	r3, #1
 80078ae:	4a09      	ldr	r2, [pc, #36]	; (80078d4 <vPortExitCritical+0x50>)
 80078b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80078b2:	4b08      	ldr	r3, [pc, #32]	; (80078d4 <vPortExitCritical+0x50>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d105      	bne.n	80078c6 <vPortExitCritical+0x42>
 80078ba:	2300      	movs	r3, #0
 80078bc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80078c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80078c6:	bf00      	nop
 80078c8:	370c      	adds	r7, #12
 80078ca:	46bd      	mov	sp, r7
 80078cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d0:	4770      	bx	lr
 80078d2:	bf00      	nop
 80078d4:	2000000c 	.word	0x2000000c
	...

080078e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80078e0:	f3ef 8009 	mrs	r0, PSP
 80078e4:	f3bf 8f6f 	isb	sy
 80078e8:	4b15      	ldr	r3, [pc, #84]	; (8007940 <pxCurrentTCBConst>)
 80078ea:	681a      	ldr	r2, [r3, #0]
 80078ec:	f01e 0f10 	tst.w	lr, #16
 80078f0:	bf08      	it	eq
 80078f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80078f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078fa:	6010      	str	r0, [r2, #0]
 80078fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007900:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007904:	f380 8811 	msr	BASEPRI, r0
 8007908:	f3bf 8f4f 	dsb	sy
 800790c:	f3bf 8f6f 	isb	sy
 8007910:	f7ff fb12 	bl	8006f38 <vTaskSwitchContext>
 8007914:	f04f 0000 	mov.w	r0, #0
 8007918:	f380 8811 	msr	BASEPRI, r0
 800791c:	bc09      	pop	{r0, r3}
 800791e:	6819      	ldr	r1, [r3, #0]
 8007920:	6808      	ldr	r0, [r1, #0]
 8007922:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007926:	f01e 0f10 	tst.w	lr, #16
 800792a:	bf08      	it	eq
 800792c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007930:	f380 8809 	msr	PSP, r0
 8007934:	f3bf 8f6f 	isb	sy
 8007938:	4770      	bx	lr
 800793a:	bf00      	nop
 800793c:	f3af 8000 	nop.w

08007940 <pxCurrentTCBConst>:
 8007940:	200005d0 	.word	0x200005d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007944:	bf00      	nop
 8007946:	bf00      	nop

08007948 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b082      	sub	sp, #8
 800794c:	af00      	add	r7, sp, #0
	__asm volatile
 800794e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007952:	f383 8811 	msr	BASEPRI, r3
 8007956:	f3bf 8f6f 	isb	sy
 800795a:	f3bf 8f4f 	dsb	sy
 800795e:	607b      	str	r3, [r7, #4]
}
 8007960:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007962:	f7ff fa31 	bl	8006dc8 <xTaskIncrementTick>
 8007966:	4603      	mov	r3, r0
 8007968:	2b00      	cmp	r3, #0
 800796a:	d003      	beq.n	8007974 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800796c:	4b06      	ldr	r3, [pc, #24]	; (8007988 <xPortSysTickHandler+0x40>)
 800796e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007972:	601a      	str	r2, [r3, #0]
 8007974:	2300      	movs	r3, #0
 8007976:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	f383 8811 	msr	BASEPRI, r3
}
 800797e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007980:	bf00      	nop
 8007982:	3708      	adds	r7, #8
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}
 8007988:	e000ed04 	.word	0xe000ed04

0800798c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800798c:	b480      	push	{r7}
 800798e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007990:	4b0b      	ldr	r3, [pc, #44]	; (80079c0 <vPortSetupTimerInterrupt+0x34>)
 8007992:	2200      	movs	r2, #0
 8007994:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007996:	4b0b      	ldr	r3, [pc, #44]	; (80079c4 <vPortSetupTimerInterrupt+0x38>)
 8007998:	2200      	movs	r2, #0
 800799a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800799c:	4b0a      	ldr	r3, [pc, #40]	; (80079c8 <vPortSetupTimerInterrupt+0x3c>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a0a      	ldr	r2, [pc, #40]	; (80079cc <vPortSetupTimerInterrupt+0x40>)
 80079a2:	fba2 2303 	umull	r2, r3, r2, r3
 80079a6:	099b      	lsrs	r3, r3, #6
 80079a8:	4a09      	ldr	r2, [pc, #36]	; (80079d0 <vPortSetupTimerInterrupt+0x44>)
 80079aa:	3b01      	subs	r3, #1
 80079ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80079ae:	4b04      	ldr	r3, [pc, #16]	; (80079c0 <vPortSetupTimerInterrupt+0x34>)
 80079b0:	2207      	movs	r2, #7
 80079b2:	601a      	str	r2, [r3, #0]
}
 80079b4:	bf00      	nop
 80079b6:	46bd      	mov	sp, r7
 80079b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079bc:	4770      	bx	lr
 80079be:	bf00      	nop
 80079c0:	e000e010 	.word	0xe000e010
 80079c4:	e000e018 	.word	0xe000e018
 80079c8:	20000000 	.word	0x20000000
 80079cc:	10624dd3 	.word	0x10624dd3
 80079d0:	e000e014 	.word	0xe000e014

080079d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80079d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80079e4 <vPortEnableVFP+0x10>
 80079d8:	6801      	ldr	r1, [r0, #0]
 80079da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80079de:	6001      	str	r1, [r0, #0]
 80079e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80079e2:	bf00      	nop
 80079e4:	e000ed88 	.word	0xe000ed88

080079e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b08a      	sub	sp, #40	; 0x28
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80079f0:	2300      	movs	r3, #0
 80079f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80079f4:	f7ff f93e 	bl	8006c74 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80079f8:	4b5b      	ldr	r3, [pc, #364]	; (8007b68 <pvPortMalloc+0x180>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d101      	bne.n	8007a04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007a00:	f000 f920 	bl	8007c44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007a04:	4b59      	ldr	r3, [pc, #356]	; (8007b6c <pvPortMalloc+0x184>)
 8007a06:	681a      	ldr	r2, [r3, #0]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	4013      	ands	r3, r2
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	f040 8093 	bne.w	8007b38 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d01d      	beq.n	8007a54 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007a18:	2208      	movs	r2, #8
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	4413      	add	r3, r2
 8007a1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f003 0307 	and.w	r3, r3, #7
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d014      	beq.n	8007a54 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f023 0307 	bic.w	r3, r3, #7
 8007a30:	3308      	adds	r3, #8
 8007a32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f003 0307 	and.w	r3, r3, #7
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d00a      	beq.n	8007a54 <pvPortMalloc+0x6c>
	__asm volatile
 8007a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a42:	f383 8811 	msr	BASEPRI, r3
 8007a46:	f3bf 8f6f 	isb	sy
 8007a4a:	f3bf 8f4f 	dsb	sy
 8007a4e:	617b      	str	r3, [r7, #20]
}
 8007a50:	bf00      	nop
 8007a52:	e7fe      	b.n	8007a52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d06e      	beq.n	8007b38 <pvPortMalloc+0x150>
 8007a5a:	4b45      	ldr	r3, [pc, #276]	; (8007b70 <pvPortMalloc+0x188>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	687a      	ldr	r2, [r7, #4]
 8007a60:	429a      	cmp	r2, r3
 8007a62:	d869      	bhi.n	8007b38 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007a64:	4b43      	ldr	r3, [pc, #268]	; (8007b74 <pvPortMalloc+0x18c>)
 8007a66:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007a68:	4b42      	ldr	r3, [pc, #264]	; (8007b74 <pvPortMalloc+0x18c>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007a6e:	e004      	b.n	8007a7a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a72:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	687a      	ldr	r2, [r7, #4]
 8007a80:	429a      	cmp	r2, r3
 8007a82:	d903      	bls.n	8007a8c <pvPortMalloc+0xa4>
 8007a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d1f1      	bne.n	8007a70 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007a8c:	4b36      	ldr	r3, [pc, #216]	; (8007b68 <pvPortMalloc+0x180>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a92:	429a      	cmp	r2, r3
 8007a94:	d050      	beq.n	8007b38 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007a96:	6a3b      	ldr	r3, [r7, #32]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	2208      	movs	r2, #8
 8007a9c:	4413      	add	r3, r2
 8007a9e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa2:	681a      	ldr	r2, [r3, #0]
 8007aa4:	6a3b      	ldr	r3, [r7, #32]
 8007aa6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aaa:	685a      	ldr	r2, [r3, #4]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	1ad2      	subs	r2, r2, r3
 8007ab0:	2308      	movs	r3, #8
 8007ab2:	005b      	lsls	r3, r3, #1
 8007ab4:	429a      	cmp	r2, r3
 8007ab6:	d91f      	bls.n	8007af8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007ab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	4413      	add	r3, r2
 8007abe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ac0:	69bb      	ldr	r3, [r7, #24]
 8007ac2:	f003 0307 	and.w	r3, r3, #7
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d00a      	beq.n	8007ae0 <pvPortMalloc+0xf8>
	__asm volatile
 8007aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ace:	f383 8811 	msr	BASEPRI, r3
 8007ad2:	f3bf 8f6f 	isb	sy
 8007ad6:	f3bf 8f4f 	dsb	sy
 8007ada:	613b      	str	r3, [r7, #16]
}
 8007adc:	bf00      	nop
 8007ade:	e7fe      	b.n	8007ade <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae2:	685a      	ldr	r2, [r3, #4]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	1ad2      	subs	r2, r2, r3
 8007ae8:	69bb      	ldr	r3, [r7, #24]
 8007aea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aee:	687a      	ldr	r2, [r7, #4]
 8007af0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007af2:	69b8      	ldr	r0, [r7, #24]
 8007af4:	f000 f908 	bl	8007d08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007af8:	4b1d      	ldr	r3, [pc, #116]	; (8007b70 <pvPortMalloc+0x188>)
 8007afa:	681a      	ldr	r2, [r3, #0]
 8007afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	1ad3      	subs	r3, r2, r3
 8007b02:	4a1b      	ldr	r2, [pc, #108]	; (8007b70 <pvPortMalloc+0x188>)
 8007b04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007b06:	4b1a      	ldr	r3, [pc, #104]	; (8007b70 <pvPortMalloc+0x188>)
 8007b08:	681a      	ldr	r2, [r3, #0]
 8007b0a:	4b1b      	ldr	r3, [pc, #108]	; (8007b78 <pvPortMalloc+0x190>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	d203      	bcs.n	8007b1a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007b12:	4b17      	ldr	r3, [pc, #92]	; (8007b70 <pvPortMalloc+0x188>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4a18      	ldr	r2, [pc, #96]	; (8007b78 <pvPortMalloc+0x190>)
 8007b18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b1c:	685a      	ldr	r2, [r3, #4]
 8007b1e:	4b13      	ldr	r3, [pc, #76]	; (8007b6c <pvPortMalloc+0x184>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	431a      	orrs	r2, r3
 8007b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007b2e:	4b13      	ldr	r3, [pc, #76]	; (8007b7c <pvPortMalloc+0x194>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	3301      	adds	r3, #1
 8007b34:	4a11      	ldr	r2, [pc, #68]	; (8007b7c <pvPortMalloc+0x194>)
 8007b36:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007b38:	f7ff f8aa 	bl	8006c90 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b3c:	69fb      	ldr	r3, [r7, #28]
 8007b3e:	f003 0307 	and.w	r3, r3, #7
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d00a      	beq.n	8007b5c <pvPortMalloc+0x174>
	__asm volatile
 8007b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b4a:	f383 8811 	msr	BASEPRI, r3
 8007b4e:	f3bf 8f6f 	isb	sy
 8007b52:	f3bf 8f4f 	dsb	sy
 8007b56:	60fb      	str	r3, [r7, #12]
}
 8007b58:	bf00      	nop
 8007b5a:	e7fe      	b.n	8007b5a <pvPortMalloc+0x172>
	return pvReturn;
 8007b5c:	69fb      	ldr	r3, [r7, #28]
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3728      	adds	r7, #40	; 0x28
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}
 8007b66:	bf00      	nop
 8007b68:	20002e1c 	.word	0x20002e1c
 8007b6c:	20002e30 	.word	0x20002e30
 8007b70:	20002e20 	.word	0x20002e20
 8007b74:	20002e14 	.word	0x20002e14
 8007b78:	20002e24 	.word	0x20002e24
 8007b7c:	20002e28 	.word	0x20002e28

08007b80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b086      	sub	sp, #24
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d04d      	beq.n	8007c2e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007b92:	2308      	movs	r3, #8
 8007b94:	425b      	negs	r3, r3
 8007b96:	697a      	ldr	r2, [r7, #20]
 8007b98:	4413      	add	r3, r2
 8007b9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	685a      	ldr	r2, [r3, #4]
 8007ba4:	4b24      	ldr	r3, [pc, #144]	; (8007c38 <vPortFree+0xb8>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4013      	ands	r3, r2
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d10a      	bne.n	8007bc4 <vPortFree+0x44>
	__asm volatile
 8007bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb2:	f383 8811 	msr	BASEPRI, r3
 8007bb6:	f3bf 8f6f 	isb	sy
 8007bba:	f3bf 8f4f 	dsb	sy
 8007bbe:	60fb      	str	r3, [r7, #12]
}
 8007bc0:	bf00      	nop
 8007bc2:	e7fe      	b.n	8007bc2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d00a      	beq.n	8007be2 <vPortFree+0x62>
	__asm volatile
 8007bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd0:	f383 8811 	msr	BASEPRI, r3
 8007bd4:	f3bf 8f6f 	isb	sy
 8007bd8:	f3bf 8f4f 	dsb	sy
 8007bdc:	60bb      	str	r3, [r7, #8]
}
 8007bde:	bf00      	nop
 8007be0:	e7fe      	b.n	8007be0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	685a      	ldr	r2, [r3, #4]
 8007be6:	4b14      	ldr	r3, [pc, #80]	; (8007c38 <vPortFree+0xb8>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4013      	ands	r3, r2
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d01e      	beq.n	8007c2e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d11a      	bne.n	8007c2e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	685a      	ldr	r2, [r3, #4]
 8007bfc:	4b0e      	ldr	r3, [pc, #56]	; (8007c38 <vPortFree+0xb8>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	43db      	mvns	r3, r3
 8007c02:	401a      	ands	r2, r3
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007c08:	f7ff f834 	bl	8006c74 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	685a      	ldr	r2, [r3, #4]
 8007c10:	4b0a      	ldr	r3, [pc, #40]	; (8007c3c <vPortFree+0xbc>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4413      	add	r3, r2
 8007c16:	4a09      	ldr	r2, [pc, #36]	; (8007c3c <vPortFree+0xbc>)
 8007c18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007c1a:	6938      	ldr	r0, [r7, #16]
 8007c1c:	f000 f874 	bl	8007d08 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007c20:	4b07      	ldr	r3, [pc, #28]	; (8007c40 <vPortFree+0xc0>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	3301      	adds	r3, #1
 8007c26:	4a06      	ldr	r2, [pc, #24]	; (8007c40 <vPortFree+0xc0>)
 8007c28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007c2a:	f7ff f831 	bl	8006c90 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007c2e:	bf00      	nop
 8007c30:	3718      	adds	r7, #24
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}
 8007c36:	bf00      	nop
 8007c38:	20002e30 	.word	0x20002e30
 8007c3c:	20002e20 	.word	0x20002e20
 8007c40:	20002e2c 	.word	0x20002e2c

08007c44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007c44:	b480      	push	{r7}
 8007c46:	b085      	sub	sp, #20
 8007c48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007c4a:	f242 7310 	movw	r3, #10000	; 0x2710
 8007c4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007c50:	4b27      	ldr	r3, [pc, #156]	; (8007cf0 <prvHeapInit+0xac>)
 8007c52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f003 0307 	and.w	r3, r3, #7
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d00c      	beq.n	8007c78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	3307      	adds	r3, #7
 8007c62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f023 0307 	bic.w	r3, r3, #7
 8007c6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007c6c:	68ba      	ldr	r2, [r7, #8]
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	1ad3      	subs	r3, r2, r3
 8007c72:	4a1f      	ldr	r2, [pc, #124]	; (8007cf0 <prvHeapInit+0xac>)
 8007c74:	4413      	add	r3, r2
 8007c76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007c7c:	4a1d      	ldr	r2, [pc, #116]	; (8007cf4 <prvHeapInit+0xb0>)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007c82:	4b1c      	ldr	r3, [pc, #112]	; (8007cf4 <prvHeapInit+0xb0>)
 8007c84:	2200      	movs	r2, #0
 8007c86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	68ba      	ldr	r2, [r7, #8]
 8007c8c:	4413      	add	r3, r2
 8007c8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007c90:	2208      	movs	r2, #8
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	1a9b      	subs	r3, r3, r2
 8007c96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f023 0307 	bic.w	r3, r3, #7
 8007c9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	4a15      	ldr	r2, [pc, #84]	; (8007cf8 <prvHeapInit+0xb4>)
 8007ca4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007ca6:	4b14      	ldr	r3, [pc, #80]	; (8007cf8 <prvHeapInit+0xb4>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	2200      	movs	r2, #0
 8007cac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007cae:	4b12      	ldr	r3, [pc, #72]	; (8007cf8 <prvHeapInit+0xb4>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	68fa      	ldr	r2, [r7, #12]
 8007cbe:	1ad2      	subs	r2, r2, r3
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007cc4:	4b0c      	ldr	r3, [pc, #48]	; (8007cf8 <prvHeapInit+0xb4>)
 8007cc6:	681a      	ldr	r2, [r3, #0]
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	685b      	ldr	r3, [r3, #4]
 8007cd0:	4a0a      	ldr	r2, [pc, #40]	; (8007cfc <prvHeapInit+0xb8>)
 8007cd2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	4a09      	ldr	r2, [pc, #36]	; (8007d00 <prvHeapInit+0xbc>)
 8007cda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007cdc:	4b09      	ldr	r3, [pc, #36]	; (8007d04 <prvHeapInit+0xc0>)
 8007cde:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007ce2:	601a      	str	r2, [r3, #0]
}
 8007ce4:	bf00      	nop
 8007ce6:	3714      	adds	r7, #20
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cee:	4770      	bx	lr
 8007cf0:	20000704 	.word	0x20000704
 8007cf4:	20002e14 	.word	0x20002e14
 8007cf8:	20002e1c 	.word	0x20002e1c
 8007cfc:	20002e24 	.word	0x20002e24
 8007d00:	20002e20 	.word	0x20002e20
 8007d04:	20002e30 	.word	0x20002e30

08007d08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b085      	sub	sp, #20
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007d10:	4b28      	ldr	r3, [pc, #160]	; (8007db4 <prvInsertBlockIntoFreeList+0xac>)
 8007d12:	60fb      	str	r3, [r7, #12]
 8007d14:	e002      	b.n	8007d1c <prvInsertBlockIntoFreeList+0x14>
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	60fb      	str	r3, [r7, #12]
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	687a      	ldr	r2, [r7, #4]
 8007d22:	429a      	cmp	r2, r3
 8007d24:	d8f7      	bhi.n	8007d16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	68ba      	ldr	r2, [r7, #8]
 8007d30:	4413      	add	r3, r2
 8007d32:	687a      	ldr	r2, [r7, #4]
 8007d34:	429a      	cmp	r2, r3
 8007d36:	d108      	bne.n	8007d4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	685a      	ldr	r2, [r3, #4]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	441a      	add	r2, r3
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	685b      	ldr	r3, [r3, #4]
 8007d52:	68ba      	ldr	r2, [r7, #8]
 8007d54:	441a      	add	r2, r3
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	d118      	bne.n	8007d90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681a      	ldr	r2, [r3, #0]
 8007d62:	4b15      	ldr	r3, [pc, #84]	; (8007db8 <prvInsertBlockIntoFreeList+0xb0>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	429a      	cmp	r2, r3
 8007d68:	d00d      	beq.n	8007d86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	685a      	ldr	r2, [r3, #4]
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	441a      	add	r2, r3
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	681a      	ldr	r2, [r3, #0]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	601a      	str	r2, [r3, #0]
 8007d84:	e008      	b.n	8007d98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007d86:	4b0c      	ldr	r3, [pc, #48]	; (8007db8 <prvInsertBlockIntoFreeList+0xb0>)
 8007d88:	681a      	ldr	r2, [r3, #0]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	601a      	str	r2, [r3, #0]
 8007d8e:	e003      	b.n	8007d98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681a      	ldr	r2, [r3, #0]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007d98:	68fa      	ldr	r2, [r7, #12]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	d002      	beq.n	8007da6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	687a      	ldr	r2, [r7, #4]
 8007da4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007da6:	bf00      	nop
 8007da8:	3714      	adds	r7, #20
 8007daa:	46bd      	mov	sp, r7
 8007dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db0:	4770      	bx	lr
 8007db2:	bf00      	nop
 8007db4:	20002e14 	.word	0x20002e14
 8007db8:	20002e1c 	.word	0x20002e1c

08007dbc <__cvt>:
 8007dbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007dc0:	ec55 4b10 	vmov	r4, r5, d0
 8007dc4:	2d00      	cmp	r5, #0
 8007dc6:	460e      	mov	r6, r1
 8007dc8:	4619      	mov	r1, r3
 8007dca:	462b      	mov	r3, r5
 8007dcc:	bfbb      	ittet	lt
 8007dce:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007dd2:	461d      	movlt	r5, r3
 8007dd4:	2300      	movge	r3, #0
 8007dd6:	232d      	movlt	r3, #45	; 0x2d
 8007dd8:	700b      	strb	r3, [r1, #0]
 8007dda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ddc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007de0:	4691      	mov	r9, r2
 8007de2:	f023 0820 	bic.w	r8, r3, #32
 8007de6:	bfbc      	itt	lt
 8007de8:	4622      	movlt	r2, r4
 8007dea:	4614      	movlt	r4, r2
 8007dec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007df0:	d005      	beq.n	8007dfe <__cvt+0x42>
 8007df2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007df6:	d100      	bne.n	8007dfa <__cvt+0x3e>
 8007df8:	3601      	adds	r6, #1
 8007dfa:	2102      	movs	r1, #2
 8007dfc:	e000      	b.n	8007e00 <__cvt+0x44>
 8007dfe:	2103      	movs	r1, #3
 8007e00:	ab03      	add	r3, sp, #12
 8007e02:	9301      	str	r3, [sp, #4]
 8007e04:	ab02      	add	r3, sp, #8
 8007e06:	9300      	str	r3, [sp, #0]
 8007e08:	ec45 4b10 	vmov	d0, r4, r5
 8007e0c:	4653      	mov	r3, sl
 8007e0e:	4632      	mov	r2, r6
 8007e10:	f000 fe56 	bl	8008ac0 <_dtoa_r>
 8007e14:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007e18:	4607      	mov	r7, r0
 8007e1a:	d102      	bne.n	8007e22 <__cvt+0x66>
 8007e1c:	f019 0f01 	tst.w	r9, #1
 8007e20:	d022      	beq.n	8007e68 <__cvt+0xac>
 8007e22:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007e26:	eb07 0906 	add.w	r9, r7, r6
 8007e2a:	d110      	bne.n	8007e4e <__cvt+0x92>
 8007e2c:	783b      	ldrb	r3, [r7, #0]
 8007e2e:	2b30      	cmp	r3, #48	; 0x30
 8007e30:	d10a      	bne.n	8007e48 <__cvt+0x8c>
 8007e32:	2200      	movs	r2, #0
 8007e34:	2300      	movs	r3, #0
 8007e36:	4620      	mov	r0, r4
 8007e38:	4629      	mov	r1, r5
 8007e3a:	f7f8 fe45 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e3e:	b918      	cbnz	r0, 8007e48 <__cvt+0x8c>
 8007e40:	f1c6 0601 	rsb	r6, r6, #1
 8007e44:	f8ca 6000 	str.w	r6, [sl]
 8007e48:	f8da 3000 	ldr.w	r3, [sl]
 8007e4c:	4499      	add	r9, r3
 8007e4e:	2200      	movs	r2, #0
 8007e50:	2300      	movs	r3, #0
 8007e52:	4620      	mov	r0, r4
 8007e54:	4629      	mov	r1, r5
 8007e56:	f7f8 fe37 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e5a:	b108      	cbz	r0, 8007e60 <__cvt+0xa4>
 8007e5c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007e60:	2230      	movs	r2, #48	; 0x30
 8007e62:	9b03      	ldr	r3, [sp, #12]
 8007e64:	454b      	cmp	r3, r9
 8007e66:	d307      	bcc.n	8007e78 <__cvt+0xbc>
 8007e68:	9b03      	ldr	r3, [sp, #12]
 8007e6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007e6c:	1bdb      	subs	r3, r3, r7
 8007e6e:	4638      	mov	r0, r7
 8007e70:	6013      	str	r3, [r2, #0]
 8007e72:	b004      	add	sp, #16
 8007e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e78:	1c59      	adds	r1, r3, #1
 8007e7a:	9103      	str	r1, [sp, #12]
 8007e7c:	701a      	strb	r2, [r3, #0]
 8007e7e:	e7f0      	b.n	8007e62 <__cvt+0xa6>

08007e80 <__exponent>:
 8007e80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e82:	4603      	mov	r3, r0
 8007e84:	2900      	cmp	r1, #0
 8007e86:	bfb8      	it	lt
 8007e88:	4249      	neglt	r1, r1
 8007e8a:	f803 2b02 	strb.w	r2, [r3], #2
 8007e8e:	bfb4      	ite	lt
 8007e90:	222d      	movlt	r2, #45	; 0x2d
 8007e92:	222b      	movge	r2, #43	; 0x2b
 8007e94:	2909      	cmp	r1, #9
 8007e96:	7042      	strb	r2, [r0, #1]
 8007e98:	dd2a      	ble.n	8007ef0 <__exponent+0x70>
 8007e9a:	f10d 0207 	add.w	r2, sp, #7
 8007e9e:	4617      	mov	r7, r2
 8007ea0:	260a      	movs	r6, #10
 8007ea2:	4694      	mov	ip, r2
 8007ea4:	fb91 f5f6 	sdiv	r5, r1, r6
 8007ea8:	fb06 1415 	mls	r4, r6, r5, r1
 8007eac:	3430      	adds	r4, #48	; 0x30
 8007eae:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007eb2:	460c      	mov	r4, r1
 8007eb4:	2c63      	cmp	r4, #99	; 0x63
 8007eb6:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8007eba:	4629      	mov	r1, r5
 8007ebc:	dcf1      	bgt.n	8007ea2 <__exponent+0x22>
 8007ebe:	3130      	adds	r1, #48	; 0x30
 8007ec0:	f1ac 0402 	sub.w	r4, ip, #2
 8007ec4:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007ec8:	1c41      	adds	r1, r0, #1
 8007eca:	4622      	mov	r2, r4
 8007ecc:	42ba      	cmp	r2, r7
 8007ece:	d30a      	bcc.n	8007ee6 <__exponent+0x66>
 8007ed0:	f10d 0209 	add.w	r2, sp, #9
 8007ed4:	eba2 020c 	sub.w	r2, r2, ip
 8007ed8:	42bc      	cmp	r4, r7
 8007eda:	bf88      	it	hi
 8007edc:	2200      	movhi	r2, #0
 8007ede:	4413      	add	r3, r2
 8007ee0:	1a18      	subs	r0, r3, r0
 8007ee2:	b003      	add	sp, #12
 8007ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ee6:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007eea:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007eee:	e7ed      	b.n	8007ecc <__exponent+0x4c>
 8007ef0:	2330      	movs	r3, #48	; 0x30
 8007ef2:	3130      	adds	r1, #48	; 0x30
 8007ef4:	7083      	strb	r3, [r0, #2]
 8007ef6:	70c1      	strb	r1, [r0, #3]
 8007ef8:	1d03      	adds	r3, r0, #4
 8007efa:	e7f1      	b.n	8007ee0 <__exponent+0x60>

08007efc <_printf_float>:
 8007efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f00:	ed2d 8b02 	vpush	{d8}
 8007f04:	b08d      	sub	sp, #52	; 0x34
 8007f06:	460c      	mov	r4, r1
 8007f08:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007f0c:	4616      	mov	r6, r2
 8007f0e:	461f      	mov	r7, r3
 8007f10:	4605      	mov	r5, r0
 8007f12:	f000 fcc7 	bl	80088a4 <_localeconv_r>
 8007f16:	f8d0 a000 	ldr.w	sl, [r0]
 8007f1a:	4650      	mov	r0, sl
 8007f1c:	f7f8 f9a8 	bl	8000270 <strlen>
 8007f20:	2300      	movs	r3, #0
 8007f22:	930a      	str	r3, [sp, #40]	; 0x28
 8007f24:	6823      	ldr	r3, [r4, #0]
 8007f26:	9305      	str	r3, [sp, #20]
 8007f28:	f8d8 3000 	ldr.w	r3, [r8]
 8007f2c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007f30:	3307      	adds	r3, #7
 8007f32:	f023 0307 	bic.w	r3, r3, #7
 8007f36:	f103 0208 	add.w	r2, r3, #8
 8007f3a:	f8c8 2000 	str.w	r2, [r8]
 8007f3e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007f42:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007f46:	9307      	str	r3, [sp, #28]
 8007f48:	f8cd 8018 	str.w	r8, [sp, #24]
 8007f4c:	ee08 0a10 	vmov	s16, r0
 8007f50:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007f54:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f58:	4b9e      	ldr	r3, [pc, #632]	; (80081d4 <_printf_float+0x2d8>)
 8007f5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007f5e:	f7f8 fde5 	bl	8000b2c <__aeabi_dcmpun>
 8007f62:	bb88      	cbnz	r0, 8007fc8 <_printf_float+0xcc>
 8007f64:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f68:	4b9a      	ldr	r3, [pc, #616]	; (80081d4 <_printf_float+0x2d8>)
 8007f6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007f6e:	f7f8 fdbf 	bl	8000af0 <__aeabi_dcmple>
 8007f72:	bb48      	cbnz	r0, 8007fc8 <_printf_float+0xcc>
 8007f74:	2200      	movs	r2, #0
 8007f76:	2300      	movs	r3, #0
 8007f78:	4640      	mov	r0, r8
 8007f7a:	4649      	mov	r1, r9
 8007f7c:	f7f8 fdae 	bl	8000adc <__aeabi_dcmplt>
 8007f80:	b110      	cbz	r0, 8007f88 <_printf_float+0x8c>
 8007f82:	232d      	movs	r3, #45	; 0x2d
 8007f84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f88:	4a93      	ldr	r2, [pc, #588]	; (80081d8 <_printf_float+0x2dc>)
 8007f8a:	4b94      	ldr	r3, [pc, #592]	; (80081dc <_printf_float+0x2e0>)
 8007f8c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007f90:	bf94      	ite	ls
 8007f92:	4690      	movls	r8, r2
 8007f94:	4698      	movhi	r8, r3
 8007f96:	2303      	movs	r3, #3
 8007f98:	6123      	str	r3, [r4, #16]
 8007f9a:	9b05      	ldr	r3, [sp, #20]
 8007f9c:	f023 0304 	bic.w	r3, r3, #4
 8007fa0:	6023      	str	r3, [r4, #0]
 8007fa2:	f04f 0900 	mov.w	r9, #0
 8007fa6:	9700      	str	r7, [sp, #0]
 8007fa8:	4633      	mov	r3, r6
 8007faa:	aa0b      	add	r2, sp, #44	; 0x2c
 8007fac:	4621      	mov	r1, r4
 8007fae:	4628      	mov	r0, r5
 8007fb0:	f000 f9da 	bl	8008368 <_printf_common>
 8007fb4:	3001      	adds	r0, #1
 8007fb6:	f040 8090 	bne.w	80080da <_printf_float+0x1de>
 8007fba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007fbe:	b00d      	add	sp, #52	; 0x34
 8007fc0:	ecbd 8b02 	vpop	{d8}
 8007fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fc8:	4642      	mov	r2, r8
 8007fca:	464b      	mov	r3, r9
 8007fcc:	4640      	mov	r0, r8
 8007fce:	4649      	mov	r1, r9
 8007fd0:	f7f8 fdac 	bl	8000b2c <__aeabi_dcmpun>
 8007fd4:	b140      	cbz	r0, 8007fe8 <_printf_float+0xec>
 8007fd6:	464b      	mov	r3, r9
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	bfbc      	itt	lt
 8007fdc:	232d      	movlt	r3, #45	; 0x2d
 8007fde:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007fe2:	4a7f      	ldr	r2, [pc, #508]	; (80081e0 <_printf_float+0x2e4>)
 8007fe4:	4b7f      	ldr	r3, [pc, #508]	; (80081e4 <_printf_float+0x2e8>)
 8007fe6:	e7d1      	b.n	8007f8c <_printf_float+0x90>
 8007fe8:	6863      	ldr	r3, [r4, #4]
 8007fea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007fee:	9206      	str	r2, [sp, #24]
 8007ff0:	1c5a      	adds	r2, r3, #1
 8007ff2:	d13f      	bne.n	8008074 <_printf_float+0x178>
 8007ff4:	2306      	movs	r3, #6
 8007ff6:	6063      	str	r3, [r4, #4]
 8007ff8:	9b05      	ldr	r3, [sp, #20]
 8007ffa:	6861      	ldr	r1, [r4, #4]
 8007ffc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008000:	2300      	movs	r3, #0
 8008002:	9303      	str	r3, [sp, #12]
 8008004:	ab0a      	add	r3, sp, #40	; 0x28
 8008006:	e9cd b301 	strd	fp, r3, [sp, #4]
 800800a:	ab09      	add	r3, sp, #36	; 0x24
 800800c:	ec49 8b10 	vmov	d0, r8, r9
 8008010:	9300      	str	r3, [sp, #0]
 8008012:	6022      	str	r2, [r4, #0]
 8008014:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008018:	4628      	mov	r0, r5
 800801a:	f7ff fecf 	bl	8007dbc <__cvt>
 800801e:	9b06      	ldr	r3, [sp, #24]
 8008020:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008022:	2b47      	cmp	r3, #71	; 0x47
 8008024:	4680      	mov	r8, r0
 8008026:	d108      	bne.n	800803a <_printf_float+0x13e>
 8008028:	1cc8      	adds	r0, r1, #3
 800802a:	db02      	blt.n	8008032 <_printf_float+0x136>
 800802c:	6863      	ldr	r3, [r4, #4]
 800802e:	4299      	cmp	r1, r3
 8008030:	dd41      	ble.n	80080b6 <_printf_float+0x1ba>
 8008032:	f1ab 0302 	sub.w	r3, fp, #2
 8008036:	fa5f fb83 	uxtb.w	fp, r3
 800803a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800803e:	d820      	bhi.n	8008082 <_printf_float+0x186>
 8008040:	3901      	subs	r1, #1
 8008042:	465a      	mov	r2, fp
 8008044:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008048:	9109      	str	r1, [sp, #36]	; 0x24
 800804a:	f7ff ff19 	bl	8007e80 <__exponent>
 800804e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008050:	1813      	adds	r3, r2, r0
 8008052:	2a01      	cmp	r2, #1
 8008054:	4681      	mov	r9, r0
 8008056:	6123      	str	r3, [r4, #16]
 8008058:	dc02      	bgt.n	8008060 <_printf_float+0x164>
 800805a:	6822      	ldr	r2, [r4, #0]
 800805c:	07d2      	lsls	r2, r2, #31
 800805e:	d501      	bpl.n	8008064 <_printf_float+0x168>
 8008060:	3301      	adds	r3, #1
 8008062:	6123      	str	r3, [r4, #16]
 8008064:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008068:	2b00      	cmp	r3, #0
 800806a:	d09c      	beq.n	8007fa6 <_printf_float+0xaa>
 800806c:	232d      	movs	r3, #45	; 0x2d
 800806e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008072:	e798      	b.n	8007fa6 <_printf_float+0xaa>
 8008074:	9a06      	ldr	r2, [sp, #24]
 8008076:	2a47      	cmp	r2, #71	; 0x47
 8008078:	d1be      	bne.n	8007ff8 <_printf_float+0xfc>
 800807a:	2b00      	cmp	r3, #0
 800807c:	d1bc      	bne.n	8007ff8 <_printf_float+0xfc>
 800807e:	2301      	movs	r3, #1
 8008080:	e7b9      	b.n	8007ff6 <_printf_float+0xfa>
 8008082:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008086:	d118      	bne.n	80080ba <_printf_float+0x1be>
 8008088:	2900      	cmp	r1, #0
 800808a:	6863      	ldr	r3, [r4, #4]
 800808c:	dd0b      	ble.n	80080a6 <_printf_float+0x1aa>
 800808e:	6121      	str	r1, [r4, #16]
 8008090:	b913      	cbnz	r3, 8008098 <_printf_float+0x19c>
 8008092:	6822      	ldr	r2, [r4, #0]
 8008094:	07d0      	lsls	r0, r2, #31
 8008096:	d502      	bpl.n	800809e <_printf_float+0x1a2>
 8008098:	3301      	adds	r3, #1
 800809a:	440b      	add	r3, r1
 800809c:	6123      	str	r3, [r4, #16]
 800809e:	65a1      	str	r1, [r4, #88]	; 0x58
 80080a0:	f04f 0900 	mov.w	r9, #0
 80080a4:	e7de      	b.n	8008064 <_printf_float+0x168>
 80080a6:	b913      	cbnz	r3, 80080ae <_printf_float+0x1b2>
 80080a8:	6822      	ldr	r2, [r4, #0]
 80080aa:	07d2      	lsls	r2, r2, #31
 80080ac:	d501      	bpl.n	80080b2 <_printf_float+0x1b6>
 80080ae:	3302      	adds	r3, #2
 80080b0:	e7f4      	b.n	800809c <_printf_float+0x1a0>
 80080b2:	2301      	movs	r3, #1
 80080b4:	e7f2      	b.n	800809c <_printf_float+0x1a0>
 80080b6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80080ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080bc:	4299      	cmp	r1, r3
 80080be:	db05      	blt.n	80080cc <_printf_float+0x1d0>
 80080c0:	6823      	ldr	r3, [r4, #0]
 80080c2:	6121      	str	r1, [r4, #16]
 80080c4:	07d8      	lsls	r0, r3, #31
 80080c6:	d5ea      	bpl.n	800809e <_printf_float+0x1a2>
 80080c8:	1c4b      	adds	r3, r1, #1
 80080ca:	e7e7      	b.n	800809c <_printf_float+0x1a0>
 80080cc:	2900      	cmp	r1, #0
 80080ce:	bfd4      	ite	le
 80080d0:	f1c1 0202 	rsble	r2, r1, #2
 80080d4:	2201      	movgt	r2, #1
 80080d6:	4413      	add	r3, r2
 80080d8:	e7e0      	b.n	800809c <_printf_float+0x1a0>
 80080da:	6823      	ldr	r3, [r4, #0]
 80080dc:	055a      	lsls	r2, r3, #21
 80080de:	d407      	bmi.n	80080f0 <_printf_float+0x1f4>
 80080e0:	6923      	ldr	r3, [r4, #16]
 80080e2:	4642      	mov	r2, r8
 80080e4:	4631      	mov	r1, r6
 80080e6:	4628      	mov	r0, r5
 80080e8:	47b8      	blx	r7
 80080ea:	3001      	adds	r0, #1
 80080ec:	d12c      	bne.n	8008148 <_printf_float+0x24c>
 80080ee:	e764      	b.n	8007fba <_printf_float+0xbe>
 80080f0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80080f4:	f240 80e0 	bls.w	80082b8 <_printf_float+0x3bc>
 80080f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80080fc:	2200      	movs	r2, #0
 80080fe:	2300      	movs	r3, #0
 8008100:	f7f8 fce2 	bl	8000ac8 <__aeabi_dcmpeq>
 8008104:	2800      	cmp	r0, #0
 8008106:	d034      	beq.n	8008172 <_printf_float+0x276>
 8008108:	4a37      	ldr	r2, [pc, #220]	; (80081e8 <_printf_float+0x2ec>)
 800810a:	2301      	movs	r3, #1
 800810c:	4631      	mov	r1, r6
 800810e:	4628      	mov	r0, r5
 8008110:	47b8      	blx	r7
 8008112:	3001      	adds	r0, #1
 8008114:	f43f af51 	beq.w	8007fba <_printf_float+0xbe>
 8008118:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800811c:	429a      	cmp	r2, r3
 800811e:	db02      	blt.n	8008126 <_printf_float+0x22a>
 8008120:	6823      	ldr	r3, [r4, #0]
 8008122:	07d8      	lsls	r0, r3, #31
 8008124:	d510      	bpl.n	8008148 <_printf_float+0x24c>
 8008126:	ee18 3a10 	vmov	r3, s16
 800812a:	4652      	mov	r2, sl
 800812c:	4631      	mov	r1, r6
 800812e:	4628      	mov	r0, r5
 8008130:	47b8      	blx	r7
 8008132:	3001      	adds	r0, #1
 8008134:	f43f af41 	beq.w	8007fba <_printf_float+0xbe>
 8008138:	f04f 0800 	mov.w	r8, #0
 800813c:	f104 091a 	add.w	r9, r4, #26
 8008140:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008142:	3b01      	subs	r3, #1
 8008144:	4543      	cmp	r3, r8
 8008146:	dc09      	bgt.n	800815c <_printf_float+0x260>
 8008148:	6823      	ldr	r3, [r4, #0]
 800814a:	079b      	lsls	r3, r3, #30
 800814c:	f100 8107 	bmi.w	800835e <_printf_float+0x462>
 8008150:	68e0      	ldr	r0, [r4, #12]
 8008152:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008154:	4298      	cmp	r0, r3
 8008156:	bfb8      	it	lt
 8008158:	4618      	movlt	r0, r3
 800815a:	e730      	b.n	8007fbe <_printf_float+0xc2>
 800815c:	2301      	movs	r3, #1
 800815e:	464a      	mov	r2, r9
 8008160:	4631      	mov	r1, r6
 8008162:	4628      	mov	r0, r5
 8008164:	47b8      	blx	r7
 8008166:	3001      	adds	r0, #1
 8008168:	f43f af27 	beq.w	8007fba <_printf_float+0xbe>
 800816c:	f108 0801 	add.w	r8, r8, #1
 8008170:	e7e6      	b.n	8008140 <_printf_float+0x244>
 8008172:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008174:	2b00      	cmp	r3, #0
 8008176:	dc39      	bgt.n	80081ec <_printf_float+0x2f0>
 8008178:	4a1b      	ldr	r2, [pc, #108]	; (80081e8 <_printf_float+0x2ec>)
 800817a:	2301      	movs	r3, #1
 800817c:	4631      	mov	r1, r6
 800817e:	4628      	mov	r0, r5
 8008180:	47b8      	blx	r7
 8008182:	3001      	adds	r0, #1
 8008184:	f43f af19 	beq.w	8007fba <_printf_float+0xbe>
 8008188:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800818c:	4313      	orrs	r3, r2
 800818e:	d102      	bne.n	8008196 <_printf_float+0x29a>
 8008190:	6823      	ldr	r3, [r4, #0]
 8008192:	07d9      	lsls	r1, r3, #31
 8008194:	d5d8      	bpl.n	8008148 <_printf_float+0x24c>
 8008196:	ee18 3a10 	vmov	r3, s16
 800819a:	4652      	mov	r2, sl
 800819c:	4631      	mov	r1, r6
 800819e:	4628      	mov	r0, r5
 80081a0:	47b8      	blx	r7
 80081a2:	3001      	adds	r0, #1
 80081a4:	f43f af09 	beq.w	8007fba <_printf_float+0xbe>
 80081a8:	f04f 0900 	mov.w	r9, #0
 80081ac:	f104 0a1a 	add.w	sl, r4, #26
 80081b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081b2:	425b      	negs	r3, r3
 80081b4:	454b      	cmp	r3, r9
 80081b6:	dc01      	bgt.n	80081bc <_printf_float+0x2c0>
 80081b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081ba:	e792      	b.n	80080e2 <_printf_float+0x1e6>
 80081bc:	2301      	movs	r3, #1
 80081be:	4652      	mov	r2, sl
 80081c0:	4631      	mov	r1, r6
 80081c2:	4628      	mov	r0, r5
 80081c4:	47b8      	blx	r7
 80081c6:	3001      	adds	r0, #1
 80081c8:	f43f aef7 	beq.w	8007fba <_printf_float+0xbe>
 80081cc:	f109 0901 	add.w	r9, r9, #1
 80081d0:	e7ee      	b.n	80081b0 <_printf_float+0x2b4>
 80081d2:	bf00      	nop
 80081d4:	7fefffff 	.word	0x7fefffff
 80081d8:	0800a808 	.word	0x0800a808
 80081dc:	0800a80c 	.word	0x0800a80c
 80081e0:	0800a810 	.word	0x0800a810
 80081e4:	0800a814 	.word	0x0800a814
 80081e8:	0800a818 	.word	0x0800a818
 80081ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80081f0:	429a      	cmp	r2, r3
 80081f2:	bfa8      	it	ge
 80081f4:	461a      	movge	r2, r3
 80081f6:	2a00      	cmp	r2, #0
 80081f8:	4691      	mov	r9, r2
 80081fa:	dc37      	bgt.n	800826c <_printf_float+0x370>
 80081fc:	f04f 0b00 	mov.w	fp, #0
 8008200:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008204:	f104 021a 	add.w	r2, r4, #26
 8008208:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800820a:	9305      	str	r3, [sp, #20]
 800820c:	eba3 0309 	sub.w	r3, r3, r9
 8008210:	455b      	cmp	r3, fp
 8008212:	dc33      	bgt.n	800827c <_printf_float+0x380>
 8008214:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008218:	429a      	cmp	r2, r3
 800821a:	db3b      	blt.n	8008294 <_printf_float+0x398>
 800821c:	6823      	ldr	r3, [r4, #0]
 800821e:	07da      	lsls	r2, r3, #31
 8008220:	d438      	bmi.n	8008294 <_printf_float+0x398>
 8008222:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008226:	eba2 0903 	sub.w	r9, r2, r3
 800822a:	9b05      	ldr	r3, [sp, #20]
 800822c:	1ad2      	subs	r2, r2, r3
 800822e:	4591      	cmp	r9, r2
 8008230:	bfa8      	it	ge
 8008232:	4691      	movge	r9, r2
 8008234:	f1b9 0f00 	cmp.w	r9, #0
 8008238:	dc35      	bgt.n	80082a6 <_printf_float+0x3aa>
 800823a:	f04f 0800 	mov.w	r8, #0
 800823e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008242:	f104 0a1a 	add.w	sl, r4, #26
 8008246:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800824a:	1a9b      	subs	r3, r3, r2
 800824c:	eba3 0309 	sub.w	r3, r3, r9
 8008250:	4543      	cmp	r3, r8
 8008252:	f77f af79 	ble.w	8008148 <_printf_float+0x24c>
 8008256:	2301      	movs	r3, #1
 8008258:	4652      	mov	r2, sl
 800825a:	4631      	mov	r1, r6
 800825c:	4628      	mov	r0, r5
 800825e:	47b8      	blx	r7
 8008260:	3001      	adds	r0, #1
 8008262:	f43f aeaa 	beq.w	8007fba <_printf_float+0xbe>
 8008266:	f108 0801 	add.w	r8, r8, #1
 800826a:	e7ec      	b.n	8008246 <_printf_float+0x34a>
 800826c:	4613      	mov	r3, r2
 800826e:	4631      	mov	r1, r6
 8008270:	4642      	mov	r2, r8
 8008272:	4628      	mov	r0, r5
 8008274:	47b8      	blx	r7
 8008276:	3001      	adds	r0, #1
 8008278:	d1c0      	bne.n	80081fc <_printf_float+0x300>
 800827a:	e69e      	b.n	8007fba <_printf_float+0xbe>
 800827c:	2301      	movs	r3, #1
 800827e:	4631      	mov	r1, r6
 8008280:	4628      	mov	r0, r5
 8008282:	9205      	str	r2, [sp, #20]
 8008284:	47b8      	blx	r7
 8008286:	3001      	adds	r0, #1
 8008288:	f43f ae97 	beq.w	8007fba <_printf_float+0xbe>
 800828c:	9a05      	ldr	r2, [sp, #20]
 800828e:	f10b 0b01 	add.w	fp, fp, #1
 8008292:	e7b9      	b.n	8008208 <_printf_float+0x30c>
 8008294:	ee18 3a10 	vmov	r3, s16
 8008298:	4652      	mov	r2, sl
 800829a:	4631      	mov	r1, r6
 800829c:	4628      	mov	r0, r5
 800829e:	47b8      	blx	r7
 80082a0:	3001      	adds	r0, #1
 80082a2:	d1be      	bne.n	8008222 <_printf_float+0x326>
 80082a4:	e689      	b.n	8007fba <_printf_float+0xbe>
 80082a6:	9a05      	ldr	r2, [sp, #20]
 80082a8:	464b      	mov	r3, r9
 80082aa:	4442      	add	r2, r8
 80082ac:	4631      	mov	r1, r6
 80082ae:	4628      	mov	r0, r5
 80082b0:	47b8      	blx	r7
 80082b2:	3001      	adds	r0, #1
 80082b4:	d1c1      	bne.n	800823a <_printf_float+0x33e>
 80082b6:	e680      	b.n	8007fba <_printf_float+0xbe>
 80082b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80082ba:	2a01      	cmp	r2, #1
 80082bc:	dc01      	bgt.n	80082c2 <_printf_float+0x3c6>
 80082be:	07db      	lsls	r3, r3, #31
 80082c0:	d53a      	bpl.n	8008338 <_printf_float+0x43c>
 80082c2:	2301      	movs	r3, #1
 80082c4:	4642      	mov	r2, r8
 80082c6:	4631      	mov	r1, r6
 80082c8:	4628      	mov	r0, r5
 80082ca:	47b8      	blx	r7
 80082cc:	3001      	adds	r0, #1
 80082ce:	f43f ae74 	beq.w	8007fba <_printf_float+0xbe>
 80082d2:	ee18 3a10 	vmov	r3, s16
 80082d6:	4652      	mov	r2, sl
 80082d8:	4631      	mov	r1, r6
 80082da:	4628      	mov	r0, r5
 80082dc:	47b8      	blx	r7
 80082de:	3001      	adds	r0, #1
 80082e0:	f43f ae6b 	beq.w	8007fba <_printf_float+0xbe>
 80082e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80082e8:	2200      	movs	r2, #0
 80082ea:	2300      	movs	r3, #0
 80082ec:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80082f0:	f7f8 fbea 	bl	8000ac8 <__aeabi_dcmpeq>
 80082f4:	b9d8      	cbnz	r0, 800832e <_printf_float+0x432>
 80082f6:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80082fa:	f108 0201 	add.w	r2, r8, #1
 80082fe:	4631      	mov	r1, r6
 8008300:	4628      	mov	r0, r5
 8008302:	47b8      	blx	r7
 8008304:	3001      	adds	r0, #1
 8008306:	d10e      	bne.n	8008326 <_printf_float+0x42a>
 8008308:	e657      	b.n	8007fba <_printf_float+0xbe>
 800830a:	2301      	movs	r3, #1
 800830c:	4652      	mov	r2, sl
 800830e:	4631      	mov	r1, r6
 8008310:	4628      	mov	r0, r5
 8008312:	47b8      	blx	r7
 8008314:	3001      	adds	r0, #1
 8008316:	f43f ae50 	beq.w	8007fba <_printf_float+0xbe>
 800831a:	f108 0801 	add.w	r8, r8, #1
 800831e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008320:	3b01      	subs	r3, #1
 8008322:	4543      	cmp	r3, r8
 8008324:	dcf1      	bgt.n	800830a <_printf_float+0x40e>
 8008326:	464b      	mov	r3, r9
 8008328:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800832c:	e6da      	b.n	80080e4 <_printf_float+0x1e8>
 800832e:	f04f 0800 	mov.w	r8, #0
 8008332:	f104 0a1a 	add.w	sl, r4, #26
 8008336:	e7f2      	b.n	800831e <_printf_float+0x422>
 8008338:	2301      	movs	r3, #1
 800833a:	4642      	mov	r2, r8
 800833c:	e7df      	b.n	80082fe <_printf_float+0x402>
 800833e:	2301      	movs	r3, #1
 8008340:	464a      	mov	r2, r9
 8008342:	4631      	mov	r1, r6
 8008344:	4628      	mov	r0, r5
 8008346:	47b8      	blx	r7
 8008348:	3001      	adds	r0, #1
 800834a:	f43f ae36 	beq.w	8007fba <_printf_float+0xbe>
 800834e:	f108 0801 	add.w	r8, r8, #1
 8008352:	68e3      	ldr	r3, [r4, #12]
 8008354:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008356:	1a5b      	subs	r3, r3, r1
 8008358:	4543      	cmp	r3, r8
 800835a:	dcf0      	bgt.n	800833e <_printf_float+0x442>
 800835c:	e6f8      	b.n	8008150 <_printf_float+0x254>
 800835e:	f04f 0800 	mov.w	r8, #0
 8008362:	f104 0919 	add.w	r9, r4, #25
 8008366:	e7f4      	b.n	8008352 <_printf_float+0x456>

08008368 <_printf_common>:
 8008368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800836c:	4616      	mov	r6, r2
 800836e:	4699      	mov	r9, r3
 8008370:	688a      	ldr	r2, [r1, #8]
 8008372:	690b      	ldr	r3, [r1, #16]
 8008374:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008378:	4293      	cmp	r3, r2
 800837a:	bfb8      	it	lt
 800837c:	4613      	movlt	r3, r2
 800837e:	6033      	str	r3, [r6, #0]
 8008380:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008384:	4607      	mov	r7, r0
 8008386:	460c      	mov	r4, r1
 8008388:	b10a      	cbz	r2, 800838e <_printf_common+0x26>
 800838a:	3301      	adds	r3, #1
 800838c:	6033      	str	r3, [r6, #0]
 800838e:	6823      	ldr	r3, [r4, #0]
 8008390:	0699      	lsls	r1, r3, #26
 8008392:	bf42      	ittt	mi
 8008394:	6833      	ldrmi	r3, [r6, #0]
 8008396:	3302      	addmi	r3, #2
 8008398:	6033      	strmi	r3, [r6, #0]
 800839a:	6825      	ldr	r5, [r4, #0]
 800839c:	f015 0506 	ands.w	r5, r5, #6
 80083a0:	d106      	bne.n	80083b0 <_printf_common+0x48>
 80083a2:	f104 0a19 	add.w	sl, r4, #25
 80083a6:	68e3      	ldr	r3, [r4, #12]
 80083a8:	6832      	ldr	r2, [r6, #0]
 80083aa:	1a9b      	subs	r3, r3, r2
 80083ac:	42ab      	cmp	r3, r5
 80083ae:	dc26      	bgt.n	80083fe <_printf_common+0x96>
 80083b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80083b4:	1e13      	subs	r3, r2, #0
 80083b6:	6822      	ldr	r2, [r4, #0]
 80083b8:	bf18      	it	ne
 80083ba:	2301      	movne	r3, #1
 80083bc:	0692      	lsls	r2, r2, #26
 80083be:	d42b      	bmi.n	8008418 <_printf_common+0xb0>
 80083c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80083c4:	4649      	mov	r1, r9
 80083c6:	4638      	mov	r0, r7
 80083c8:	47c0      	blx	r8
 80083ca:	3001      	adds	r0, #1
 80083cc:	d01e      	beq.n	800840c <_printf_common+0xa4>
 80083ce:	6823      	ldr	r3, [r4, #0]
 80083d0:	6922      	ldr	r2, [r4, #16]
 80083d2:	f003 0306 	and.w	r3, r3, #6
 80083d6:	2b04      	cmp	r3, #4
 80083d8:	bf02      	ittt	eq
 80083da:	68e5      	ldreq	r5, [r4, #12]
 80083dc:	6833      	ldreq	r3, [r6, #0]
 80083de:	1aed      	subeq	r5, r5, r3
 80083e0:	68a3      	ldr	r3, [r4, #8]
 80083e2:	bf0c      	ite	eq
 80083e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80083e8:	2500      	movne	r5, #0
 80083ea:	4293      	cmp	r3, r2
 80083ec:	bfc4      	itt	gt
 80083ee:	1a9b      	subgt	r3, r3, r2
 80083f0:	18ed      	addgt	r5, r5, r3
 80083f2:	2600      	movs	r6, #0
 80083f4:	341a      	adds	r4, #26
 80083f6:	42b5      	cmp	r5, r6
 80083f8:	d11a      	bne.n	8008430 <_printf_common+0xc8>
 80083fa:	2000      	movs	r0, #0
 80083fc:	e008      	b.n	8008410 <_printf_common+0xa8>
 80083fe:	2301      	movs	r3, #1
 8008400:	4652      	mov	r2, sl
 8008402:	4649      	mov	r1, r9
 8008404:	4638      	mov	r0, r7
 8008406:	47c0      	blx	r8
 8008408:	3001      	adds	r0, #1
 800840a:	d103      	bne.n	8008414 <_printf_common+0xac>
 800840c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008414:	3501      	adds	r5, #1
 8008416:	e7c6      	b.n	80083a6 <_printf_common+0x3e>
 8008418:	18e1      	adds	r1, r4, r3
 800841a:	1c5a      	adds	r2, r3, #1
 800841c:	2030      	movs	r0, #48	; 0x30
 800841e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008422:	4422      	add	r2, r4
 8008424:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008428:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800842c:	3302      	adds	r3, #2
 800842e:	e7c7      	b.n	80083c0 <_printf_common+0x58>
 8008430:	2301      	movs	r3, #1
 8008432:	4622      	mov	r2, r4
 8008434:	4649      	mov	r1, r9
 8008436:	4638      	mov	r0, r7
 8008438:	47c0      	blx	r8
 800843a:	3001      	adds	r0, #1
 800843c:	d0e6      	beq.n	800840c <_printf_common+0xa4>
 800843e:	3601      	adds	r6, #1
 8008440:	e7d9      	b.n	80083f6 <_printf_common+0x8e>
	...

08008444 <_printf_i>:
 8008444:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008448:	7e0f      	ldrb	r7, [r1, #24]
 800844a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800844c:	2f78      	cmp	r7, #120	; 0x78
 800844e:	4691      	mov	r9, r2
 8008450:	4680      	mov	r8, r0
 8008452:	460c      	mov	r4, r1
 8008454:	469a      	mov	sl, r3
 8008456:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800845a:	d807      	bhi.n	800846c <_printf_i+0x28>
 800845c:	2f62      	cmp	r7, #98	; 0x62
 800845e:	d80a      	bhi.n	8008476 <_printf_i+0x32>
 8008460:	2f00      	cmp	r7, #0
 8008462:	f000 80d4 	beq.w	800860e <_printf_i+0x1ca>
 8008466:	2f58      	cmp	r7, #88	; 0x58
 8008468:	f000 80c0 	beq.w	80085ec <_printf_i+0x1a8>
 800846c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008470:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008474:	e03a      	b.n	80084ec <_printf_i+0xa8>
 8008476:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800847a:	2b15      	cmp	r3, #21
 800847c:	d8f6      	bhi.n	800846c <_printf_i+0x28>
 800847e:	a101      	add	r1, pc, #4	; (adr r1, 8008484 <_printf_i+0x40>)
 8008480:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008484:	080084dd 	.word	0x080084dd
 8008488:	080084f1 	.word	0x080084f1
 800848c:	0800846d 	.word	0x0800846d
 8008490:	0800846d 	.word	0x0800846d
 8008494:	0800846d 	.word	0x0800846d
 8008498:	0800846d 	.word	0x0800846d
 800849c:	080084f1 	.word	0x080084f1
 80084a0:	0800846d 	.word	0x0800846d
 80084a4:	0800846d 	.word	0x0800846d
 80084a8:	0800846d 	.word	0x0800846d
 80084ac:	0800846d 	.word	0x0800846d
 80084b0:	080085f5 	.word	0x080085f5
 80084b4:	0800851d 	.word	0x0800851d
 80084b8:	080085af 	.word	0x080085af
 80084bc:	0800846d 	.word	0x0800846d
 80084c0:	0800846d 	.word	0x0800846d
 80084c4:	08008617 	.word	0x08008617
 80084c8:	0800846d 	.word	0x0800846d
 80084cc:	0800851d 	.word	0x0800851d
 80084d0:	0800846d 	.word	0x0800846d
 80084d4:	0800846d 	.word	0x0800846d
 80084d8:	080085b7 	.word	0x080085b7
 80084dc:	682b      	ldr	r3, [r5, #0]
 80084de:	1d1a      	adds	r2, r3, #4
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	602a      	str	r2, [r5, #0]
 80084e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80084e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80084ec:	2301      	movs	r3, #1
 80084ee:	e09f      	b.n	8008630 <_printf_i+0x1ec>
 80084f0:	6820      	ldr	r0, [r4, #0]
 80084f2:	682b      	ldr	r3, [r5, #0]
 80084f4:	0607      	lsls	r7, r0, #24
 80084f6:	f103 0104 	add.w	r1, r3, #4
 80084fa:	6029      	str	r1, [r5, #0]
 80084fc:	d501      	bpl.n	8008502 <_printf_i+0xbe>
 80084fe:	681e      	ldr	r6, [r3, #0]
 8008500:	e003      	b.n	800850a <_printf_i+0xc6>
 8008502:	0646      	lsls	r6, r0, #25
 8008504:	d5fb      	bpl.n	80084fe <_printf_i+0xba>
 8008506:	f9b3 6000 	ldrsh.w	r6, [r3]
 800850a:	2e00      	cmp	r6, #0
 800850c:	da03      	bge.n	8008516 <_printf_i+0xd2>
 800850e:	232d      	movs	r3, #45	; 0x2d
 8008510:	4276      	negs	r6, r6
 8008512:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008516:	485a      	ldr	r0, [pc, #360]	; (8008680 <_printf_i+0x23c>)
 8008518:	230a      	movs	r3, #10
 800851a:	e012      	b.n	8008542 <_printf_i+0xfe>
 800851c:	682b      	ldr	r3, [r5, #0]
 800851e:	6820      	ldr	r0, [r4, #0]
 8008520:	1d19      	adds	r1, r3, #4
 8008522:	6029      	str	r1, [r5, #0]
 8008524:	0605      	lsls	r5, r0, #24
 8008526:	d501      	bpl.n	800852c <_printf_i+0xe8>
 8008528:	681e      	ldr	r6, [r3, #0]
 800852a:	e002      	b.n	8008532 <_printf_i+0xee>
 800852c:	0641      	lsls	r1, r0, #25
 800852e:	d5fb      	bpl.n	8008528 <_printf_i+0xe4>
 8008530:	881e      	ldrh	r6, [r3, #0]
 8008532:	4853      	ldr	r0, [pc, #332]	; (8008680 <_printf_i+0x23c>)
 8008534:	2f6f      	cmp	r7, #111	; 0x6f
 8008536:	bf0c      	ite	eq
 8008538:	2308      	moveq	r3, #8
 800853a:	230a      	movne	r3, #10
 800853c:	2100      	movs	r1, #0
 800853e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008542:	6865      	ldr	r5, [r4, #4]
 8008544:	60a5      	str	r5, [r4, #8]
 8008546:	2d00      	cmp	r5, #0
 8008548:	bfa2      	ittt	ge
 800854a:	6821      	ldrge	r1, [r4, #0]
 800854c:	f021 0104 	bicge.w	r1, r1, #4
 8008550:	6021      	strge	r1, [r4, #0]
 8008552:	b90e      	cbnz	r6, 8008558 <_printf_i+0x114>
 8008554:	2d00      	cmp	r5, #0
 8008556:	d04b      	beq.n	80085f0 <_printf_i+0x1ac>
 8008558:	4615      	mov	r5, r2
 800855a:	fbb6 f1f3 	udiv	r1, r6, r3
 800855e:	fb03 6711 	mls	r7, r3, r1, r6
 8008562:	5dc7      	ldrb	r7, [r0, r7]
 8008564:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008568:	4637      	mov	r7, r6
 800856a:	42bb      	cmp	r3, r7
 800856c:	460e      	mov	r6, r1
 800856e:	d9f4      	bls.n	800855a <_printf_i+0x116>
 8008570:	2b08      	cmp	r3, #8
 8008572:	d10b      	bne.n	800858c <_printf_i+0x148>
 8008574:	6823      	ldr	r3, [r4, #0]
 8008576:	07de      	lsls	r6, r3, #31
 8008578:	d508      	bpl.n	800858c <_printf_i+0x148>
 800857a:	6923      	ldr	r3, [r4, #16]
 800857c:	6861      	ldr	r1, [r4, #4]
 800857e:	4299      	cmp	r1, r3
 8008580:	bfde      	ittt	le
 8008582:	2330      	movle	r3, #48	; 0x30
 8008584:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008588:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800858c:	1b52      	subs	r2, r2, r5
 800858e:	6122      	str	r2, [r4, #16]
 8008590:	f8cd a000 	str.w	sl, [sp]
 8008594:	464b      	mov	r3, r9
 8008596:	aa03      	add	r2, sp, #12
 8008598:	4621      	mov	r1, r4
 800859a:	4640      	mov	r0, r8
 800859c:	f7ff fee4 	bl	8008368 <_printf_common>
 80085a0:	3001      	adds	r0, #1
 80085a2:	d14a      	bne.n	800863a <_printf_i+0x1f6>
 80085a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80085a8:	b004      	add	sp, #16
 80085aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085ae:	6823      	ldr	r3, [r4, #0]
 80085b0:	f043 0320 	orr.w	r3, r3, #32
 80085b4:	6023      	str	r3, [r4, #0]
 80085b6:	4833      	ldr	r0, [pc, #204]	; (8008684 <_printf_i+0x240>)
 80085b8:	2778      	movs	r7, #120	; 0x78
 80085ba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80085be:	6823      	ldr	r3, [r4, #0]
 80085c0:	6829      	ldr	r1, [r5, #0]
 80085c2:	061f      	lsls	r7, r3, #24
 80085c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80085c8:	d402      	bmi.n	80085d0 <_printf_i+0x18c>
 80085ca:	065f      	lsls	r7, r3, #25
 80085cc:	bf48      	it	mi
 80085ce:	b2b6      	uxthmi	r6, r6
 80085d0:	07df      	lsls	r7, r3, #31
 80085d2:	bf48      	it	mi
 80085d4:	f043 0320 	orrmi.w	r3, r3, #32
 80085d8:	6029      	str	r1, [r5, #0]
 80085da:	bf48      	it	mi
 80085dc:	6023      	strmi	r3, [r4, #0]
 80085de:	b91e      	cbnz	r6, 80085e8 <_printf_i+0x1a4>
 80085e0:	6823      	ldr	r3, [r4, #0]
 80085e2:	f023 0320 	bic.w	r3, r3, #32
 80085e6:	6023      	str	r3, [r4, #0]
 80085e8:	2310      	movs	r3, #16
 80085ea:	e7a7      	b.n	800853c <_printf_i+0xf8>
 80085ec:	4824      	ldr	r0, [pc, #144]	; (8008680 <_printf_i+0x23c>)
 80085ee:	e7e4      	b.n	80085ba <_printf_i+0x176>
 80085f0:	4615      	mov	r5, r2
 80085f2:	e7bd      	b.n	8008570 <_printf_i+0x12c>
 80085f4:	682b      	ldr	r3, [r5, #0]
 80085f6:	6826      	ldr	r6, [r4, #0]
 80085f8:	6961      	ldr	r1, [r4, #20]
 80085fa:	1d18      	adds	r0, r3, #4
 80085fc:	6028      	str	r0, [r5, #0]
 80085fe:	0635      	lsls	r5, r6, #24
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	d501      	bpl.n	8008608 <_printf_i+0x1c4>
 8008604:	6019      	str	r1, [r3, #0]
 8008606:	e002      	b.n	800860e <_printf_i+0x1ca>
 8008608:	0670      	lsls	r0, r6, #25
 800860a:	d5fb      	bpl.n	8008604 <_printf_i+0x1c0>
 800860c:	8019      	strh	r1, [r3, #0]
 800860e:	2300      	movs	r3, #0
 8008610:	6123      	str	r3, [r4, #16]
 8008612:	4615      	mov	r5, r2
 8008614:	e7bc      	b.n	8008590 <_printf_i+0x14c>
 8008616:	682b      	ldr	r3, [r5, #0]
 8008618:	1d1a      	adds	r2, r3, #4
 800861a:	602a      	str	r2, [r5, #0]
 800861c:	681d      	ldr	r5, [r3, #0]
 800861e:	6862      	ldr	r2, [r4, #4]
 8008620:	2100      	movs	r1, #0
 8008622:	4628      	mov	r0, r5
 8008624:	f7f7 fdd4 	bl	80001d0 <memchr>
 8008628:	b108      	cbz	r0, 800862e <_printf_i+0x1ea>
 800862a:	1b40      	subs	r0, r0, r5
 800862c:	6060      	str	r0, [r4, #4]
 800862e:	6863      	ldr	r3, [r4, #4]
 8008630:	6123      	str	r3, [r4, #16]
 8008632:	2300      	movs	r3, #0
 8008634:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008638:	e7aa      	b.n	8008590 <_printf_i+0x14c>
 800863a:	6923      	ldr	r3, [r4, #16]
 800863c:	462a      	mov	r2, r5
 800863e:	4649      	mov	r1, r9
 8008640:	4640      	mov	r0, r8
 8008642:	47d0      	blx	sl
 8008644:	3001      	adds	r0, #1
 8008646:	d0ad      	beq.n	80085a4 <_printf_i+0x160>
 8008648:	6823      	ldr	r3, [r4, #0]
 800864a:	079b      	lsls	r3, r3, #30
 800864c:	d413      	bmi.n	8008676 <_printf_i+0x232>
 800864e:	68e0      	ldr	r0, [r4, #12]
 8008650:	9b03      	ldr	r3, [sp, #12]
 8008652:	4298      	cmp	r0, r3
 8008654:	bfb8      	it	lt
 8008656:	4618      	movlt	r0, r3
 8008658:	e7a6      	b.n	80085a8 <_printf_i+0x164>
 800865a:	2301      	movs	r3, #1
 800865c:	4632      	mov	r2, r6
 800865e:	4649      	mov	r1, r9
 8008660:	4640      	mov	r0, r8
 8008662:	47d0      	blx	sl
 8008664:	3001      	adds	r0, #1
 8008666:	d09d      	beq.n	80085a4 <_printf_i+0x160>
 8008668:	3501      	adds	r5, #1
 800866a:	68e3      	ldr	r3, [r4, #12]
 800866c:	9903      	ldr	r1, [sp, #12]
 800866e:	1a5b      	subs	r3, r3, r1
 8008670:	42ab      	cmp	r3, r5
 8008672:	dcf2      	bgt.n	800865a <_printf_i+0x216>
 8008674:	e7eb      	b.n	800864e <_printf_i+0x20a>
 8008676:	2500      	movs	r5, #0
 8008678:	f104 0619 	add.w	r6, r4, #25
 800867c:	e7f5      	b.n	800866a <_printf_i+0x226>
 800867e:	bf00      	nop
 8008680:	0800a81a 	.word	0x0800a81a
 8008684:	0800a82b 	.word	0x0800a82b

08008688 <std>:
 8008688:	2300      	movs	r3, #0
 800868a:	b510      	push	{r4, lr}
 800868c:	4604      	mov	r4, r0
 800868e:	e9c0 3300 	strd	r3, r3, [r0]
 8008692:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008696:	6083      	str	r3, [r0, #8]
 8008698:	8181      	strh	r1, [r0, #12]
 800869a:	6643      	str	r3, [r0, #100]	; 0x64
 800869c:	81c2      	strh	r2, [r0, #14]
 800869e:	6183      	str	r3, [r0, #24]
 80086a0:	4619      	mov	r1, r3
 80086a2:	2208      	movs	r2, #8
 80086a4:	305c      	adds	r0, #92	; 0x5c
 80086a6:	f000 f8f4 	bl	8008892 <memset>
 80086aa:	4b0d      	ldr	r3, [pc, #52]	; (80086e0 <std+0x58>)
 80086ac:	6263      	str	r3, [r4, #36]	; 0x24
 80086ae:	4b0d      	ldr	r3, [pc, #52]	; (80086e4 <std+0x5c>)
 80086b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80086b2:	4b0d      	ldr	r3, [pc, #52]	; (80086e8 <std+0x60>)
 80086b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80086b6:	4b0d      	ldr	r3, [pc, #52]	; (80086ec <std+0x64>)
 80086b8:	6323      	str	r3, [r4, #48]	; 0x30
 80086ba:	4b0d      	ldr	r3, [pc, #52]	; (80086f0 <std+0x68>)
 80086bc:	6224      	str	r4, [r4, #32]
 80086be:	429c      	cmp	r4, r3
 80086c0:	d006      	beq.n	80086d0 <std+0x48>
 80086c2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80086c6:	4294      	cmp	r4, r2
 80086c8:	d002      	beq.n	80086d0 <std+0x48>
 80086ca:	33d0      	adds	r3, #208	; 0xd0
 80086cc:	429c      	cmp	r4, r3
 80086ce:	d105      	bne.n	80086dc <std+0x54>
 80086d0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80086d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086d8:	f000 b958 	b.w	800898c <__retarget_lock_init_recursive>
 80086dc:	bd10      	pop	{r4, pc}
 80086de:	bf00      	nop
 80086e0:	0800880d 	.word	0x0800880d
 80086e4:	0800882f 	.word	0x0800882f
 80086e8:	08008867 	.word	0x08008867
 80086ec:	0800888b 	.word	0x0800888b
 80086f0:	20002e34 	.word	0x20002e34

080086f4 <stdio_exit_handler>:
 80086f4:	4a02      	ldr	r2, [pc, #8]	; (8008700 <stdio_exit_handler+0xc>)
 80086f6:	4903      	ldr	r1, [pc, #12]	; (8008704 <stdio_exit_handler+0x10>)
 80086f8:	4803      	ldr	r0, [pc, #12]	; (8008708 <stdio_exit_handler+0x14>)
 80086fa:	f000 b869 	b.w	80087d0 <_fwalk_sglue>
 80086fe:	bf00      	nop
 8008700:	20000010 	.word	0x20000010
 8008704:	0800a0a9 	.word	0x0800a0a9
 8008708:	2000001c 	.word	0x2000001c

0800870c <cleanup_stdio>:
 800870c:	6841      	ldr	r1, [r0, #4]
 800870e:	4b0c      	ldr	r3, [pc, #48]	; (8008740 <cleanup_stdio+0x34>)
 8008710:	4299      	cmp	r1, r3
 8008712:	b510      	push	{r4, lr}
 8008714:	4604      	mov	r4, r0
 8008716:	d001      	beq.n	800871c <cleanup_stdio+0x10>
 8008718:	f001 fcc6 	bl	800a0a8 <_fflush_r>
 800871c:	68a1      	ldr	r1, [r4, #8]
 800871e:	4b09      	ldr	r3, [pc, #36]	; (8008744 <cleanup_stdio+0x38>)
 8008720:	4299      	cmp	r1, r3
 8008722:	d002      	beq.n	800872a <cleanup_stdio+0x1e>
 8008724:	4620      	mov	r0, r4
 8008726:	f001 fcbf 	bl	800a0a8 <_fflush_r>
 800872a:	68e1      	ldr	r1, [r4, #12]
 800872c:	4b06      	ldr	r3, [pc, #24]	; (8008748 <cleanup_stdio+0x3c>)
 800872e:	4299      	cmp	r1, r3
 8008730:	d004      	beq.n	800873c <cleanup_stdio+0x30>
 8008732:	4620      	mov	r0, r4
 8008734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008738:	f001 bcb6 	b.w	800a0a8 <_fflush_r>
 800873c:	bd10      	pop	{r4, pc}
 800873e:	bf00      	nop
 8008740:	20002e34 	.word	0x20002e34
 8008744:	20002e9c 	.word	0x20002e9c
 8008748:	20002f04 	.word	0x20002f04

0800874c <global_stdio_init.part.0>:
 800874c:	b510      	push	{r4, lr}
 800874e:	4b0b      	ldr	r3, [pc, #44]	; (800877c <global_stdio_init.part.0+0x30>)
 8008750:	4c0b      	ldr	r4, [pc, #44]	; (8008780 <global_stdio_init.part.0+0x34>)
 8008752:	4a0c      	ldr	r2, [pc, #48]	; (8008784 <global_stdio_init.part.0+0x38>)
 8008754:	601a      	str	r2, [r3, #0]
 8008756:	4620      	mov	r0, r4
 8008758:	2200      	movs	r2, #0
 800875a:	2104      	movs	r1, #4
 800875c:	f7ff ff94 	bl	8008688 <std>
 8008760:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008764:	2201      	movs	r2, #1
 8008766:	2109      	movs	r1, #9
 8008768:	f7ff ff8e 	bl	8008688 <std>
 800876c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008770:	2202      	movs	r2, #2
 8008772:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008776:	2112      	movs	r1, #18
 8008778:	f7ff bf86 	b.w	8008688 <std>
 800877c:	20002f6c 	.word	0x20002f6c
 8008780:	20002e34 	.word	0x20002e34
 8008784:	080086f5 	.word	0x080086f5

08008788 <__sfp_lock_acquire>:
 8008788:	4801      	ldr	r0, [pc, #4]	; (8008790 <__sfp_lock_acquire+0x8>)
 800878a:	f000 b900 	b.w	800898e <__retarget_lock_acquire_recursive>
 800878e:	bf00      	nop
 8008790:	20002f75 	.word	0x20002f75

08008794 <__sfp_lock_release>:
 8008794:	4801      	ldr	r0, [pc, #4]	; (800879c <__sfp_lock_release+0x8>)
 8008796:	f000 b8fb 	b.w	8008990 <__retarget_lock_release_recursive>
 800879a:	bf00      	nop
 800879c:	20002f75 	.word	0x20002f75

080087a0 <__sinit>:
 80087a0:	b510      	push	{r4, lr}
 80087a2:	4604      	mov	r4, r0
 80087a4:	f7ff fff0 	bl	8008788 <__sfp_lock_acquire>
 80087a8:	6a23      	ldr	r3, [r4, #32]
 80087aa:	b11b      	cbz	r3, 80087b4 <__sinit+0x14>
 80087ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087b0:	f7ff bff0 	b.w	8008794 <__sfp_lock_release>
 80087b4:	4b04      	ldr	r3, [pc, #16]	; (80087c8 <__sinit+0x28>)
 80087b6:	6223      	str	r3, [r4, #32]
 80087b8:	4b04      	ldr	r3, [pc, #16]	; (80087cc <__sinit+0x2c>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d1f5      	bne.n	80087ac <__sinit+0xc>
 80087c0:	f7ff ffc4 	bl	800874c <global_stdio_init.part.0>
 80087c4:	e7f2      	b.n	80087ac <__sinit+0xc>
 80087c6:	bf00      	nop
 80087c8:	0800870d 	.word	0x0800870d
 80087cc:	20002f6c 	.word	0x20002f6c

080087d0 <_fwalk_sglue>:
 80087d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087d4:	4607      	mov	r7, r0
 80087d6:	4688      	mov	r8, r1
 80087d8:	4614      	mov	r4, r2
 80087da:	2600      	movs	r6, #0
 80087dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80087e0:	f1b9 0901 	subs.w	r9, r9, #1
 80087e4:	d505      	bpl.n	80087f2 <_fwalk_sglue+0x22>
 80087e6:	6824      	ldr	r4, [r4, #0]
 80087e8:	2c00      	cmp	r4, #0
 80087ea:	d1f7      	bne.n	80087dc <_fwalk_sglue+0xc>
 80087ec:	4630      	mov	r0, r6
 80087ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087f2:	89ab      	ldrh	r3, [r5, #12]
 80087f4:	2b01      	cmp	r3, #1
 80087f6:	d907      	bls.n	8008808 <_fwalk_sglue+0x38>
 80087f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80087fc:	3301      	adds	r3, #1
 80087fe:	d003      	beq.n	8008808 <_fwalk_sglue+0x38>
 8008800:	4629      	mov	r1, r5
 8008802:	4638      	mov	r0, r7
 8008804:	47c0      	blx	r8
 8008806:	4306      	orrs	r6, r0
 8008808:	3568      	adds	r5, #104	; 0x68
 800880a:	e7e9      	b.n	80087e0 <_fwalk_sglue+0x10>

0800880c <__sread>:
 800880c:	b510      	push	{r4, lr}
 800880e:	460c      	mov	r4, r1
 8008810:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008814:	f000 f86c 	bl	80088f0 <_read_r>
 8008818:	2800      	cmp	r0, #0
 800881a:	bfab      	itete	ge
 800881c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800881e:	89a3      	ldrhlt	r3, [r4, #12]
 8008820:	181b      	addge	r3, r3, r0
 8008822:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008826:	bfac      	ite	ge
 8008828:	6563      	strge	r3, [r4, #84]	; 0x54
 800882a:	81a3      	strhlt	r3, [r4, #12]
 800882c:	bd10      	pop	{r4, pc}

0800882e <__swrite>:
 800882e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008832:	461f      	mov	r7, r3
 8008834:	898b      	ldrh	r3, [r1, #12]
 8008836:	05db      	lsls	r3, r3, #23
 8008838:	4605      	mov	r5, r0
 800883a:	460c      	mov	r4, r1
 800883c:	4616      	mov	r6, r2
 800883e:	d505      	bpl.n	800884c <__swrite+0x1e>
 8008840:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008844:	2302      	movs	r3, #2
 8008846:	2200      	movs	r2, #0
 8008848:	f000 f840 	bl	80088cc <_lseek_r>
 800884c:	89a3      	ldrh	r3, [r4, #12]
 800884e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008852:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008856:	81a3      	strh	r3, [r4, #12]
 8008858:	4632      	mov	r2, r6
 800885a:	463b      	mov	r3, r7
 800885c:	4628      	mov	r0, r5
 800885e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008862:	f000 b857 	b.w	8008914 <_write_r>

08008866 <__sseek>:
 8008866:	b510      	push	{r4, lr}
 8008868:	460c      	mov	r4, r1
 800886a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800886e:	f000 f82d 	bl	80088cc <_lseek_r>
 8008872:	1c43      	adds	r3, r0, #1
 8008874:	89a3      	ldrh	r3, [r4, #12]
 8008876:	bf15      	itete	ne
 8008878:	6560      	strne	r0, [r4, #84]	; 0x54
 800887a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800887e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008882:	81a3      	strheq	r3, [r4, #12]
 8008884:	bf18      	it	ne
 8008886:	81a3      	strhne	r3, [r4, #12]
 8008888:	bd10      	pop	{r4, pc}

0800888a <__sclose>:
 800888a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800888e:	f000 b80d 	b.w	80088ac <_close_r>

08008892 <memset>:
 8008892:	4402      	add	r2, r0
 8008894:	4603      	mov	r3, r0
 8008896:	4293      	cmp	r3, r2
 8008898:	d100      	bne.n	800889c <memset+0xa>
 800889a:	4770      	bx	lr
 800889c:	f803 1b01 	strb.w	r1, [r3], #1
 80088a0:	e7f9      	b.n	8008896 <memset+0x4>
	...

080088a4 <_localeconv_r>:
 80088a4:	4800      	ldr	r0, [pc, #0]	; (80088a8 <_localeconv_r+0x4>)
 80088a6:	4770      	bx	lr
 80088a8:	2000015c 	.word	0x2000015c

080088ac <_close_r>:
 80088ac:	b538      	push	{r3, r4, r5, lr}
 80088ae:	4d06      	ldr	r5, [pc, #24]	; (80088c8 <_close_r+0x1c>)
 80088b0:	2300      	movs	r3, #0
 80088b2:	4604      	mov	r4, r0
 80088b4:	4608      	mov	r0, r1
 80088b6:	602b      	str	r3, [r5, #0]
 80088b8:	f7f9 f849 	bl	800194e <_close>
 80088bc:	1c43      	adds	r3, r0, #1
 80088be:	d102      	bne.n	80088c6 <_close_r+0x1a>
 80088c0:	682b      	ldr	r3, [r5, #0]
 80088c2:	b103      	cbz	r3, 80088c6 <_close_r+0x1a>
 80088c4:	6023      	str	r3, [r4, #0]
 80088c6:	bd38      	pop	{r3, r4, r5, pc}
 80088c8:	20002f70 	.word	0x20002f70

080088cc <_lseek_r>:
 80088cc:	b538      	push	{r3, r4, r5, lr}
 80088ce:	4d07      	ldr	r5, [pc, #28]	; (80088ec <_lseek_r+0x20>)
 80088d0:	4604      	mov	r4, r0
 80088d2:	4608      	mov	r0, r1
 80088d4:	4611      	mov	r1, r2
 80088d6:	2200      	movs	r2, #0
 80088d8:	602a      	str	r2, [r5, #0]
 80088da:	461a      	mov	r2, r3
 80088dc:	f7f9 f85e 	bl	800199c <_lseek>
 80088e0:	1c43      	adds	r3, r0, #1
 80088e2:	d102      	bne.n	80088ea <_lseek_r+0x1e>
 80088e4:	682b      	ldr	r3, [r5, #0]
 80088e6:	b103      	cbz	r3, 80088ea <_lseek_r+0x1e>
 80088e8:	6023      	str	r3, [r4, #0]
 80088ea:	bd38      	pop	{r3, r4, r5, pc}
 80088ec:	20002f70 	.word	0x20002f70

080088f0 <_read_r>:
 80088f0:	b538      	push	{r3, r4, r5, lr}
 80088f2:	4d07      	ldr	r5, [pc, #28]	; (8008910 <_read_r+0x20>)
 80088f4:	4604      	mov	r4, r0
 80088f6:	4608      	mov	r0, r1
 80088f8:	4611      	mov	r1, r2
 80088fa:	2200      	movs	r2, #0
 80088fc:	602a      	str	r2, [r5, #0]
 80088fe:	461a      	mov	r2, r3
 8008900:	f7f8 ffec 	bl	80018dc <_read>
 8008904:	1c43      	adds	r3, r0, #1
 8008906:	d102      	bne.n	800890e <_read_r+0x1e>
 8008908:	682b      	ldr	r3, [r5, #0]
 800890a:	b103      	cbz	r3, 800890e <_read_r+0x1e>
 800890c:	6023      	str	r3, [r4, #0]
 800890e:	bd38      	pop	{r3, r4, r5, pc}
 8008910:	20002f70 	.word	0x20002f70

08008914 <_write_r>:
 8008914:	b538      	push	{r3, r4, r5, lr}
 8008916:	4d07      	ldr	r5, [pc, #28]	; (8008934 <_write_r+0x20>)
 8008918:	4604      	mov	r4, r0
 800891a:	4608      	mov	r0, r1
 800891c:	4611      	mov	r1, r2
 800891e:	2200      	movs	r2, #0
 8008920:	602a      	str	r2, [r5, #0]
 8008922:	461a      	mov	r2, r3
 8008924:	f7f8 fff7 	bl	8001916 <_write>
 8008928:	1c43      	adds	r3, r0, #1
 800892a:	d102      	bne.n	8008932 <_write_r+0x1e>
 800892c:	682b      	ldr	r3, [r5, #0]
 800892e:	b103      	cbz	r3, 8008932 <_write_r+0x1e>
 8008930:	6023      	str	r3, [r4, #0]
 8008932:	bd38      	pop	{r3, r4, r5, pc}
 8008934:	20002f70 	.word	0x20002f70

08008938 <__errno>:
 8008938:	4b01      	ldr	r3, [pc, #4]	; (8008940 <__errno+0x8>)
 800893a:	6818      	ldr	r0, [r3, #0]
 800893c:	4770      	bx	lr
 800893e:	bf00      	nop
 8008940:	20000068 	.word	0x20000068

08008944 <__libc_init_array>:
 8008944:	b570      	push	{r4, r5, r6, lr}
 8008946:	4d0d      	ldr	r5, [pc, #52]	; (800897c <__libc_init_array+0x38>)
 8008948:	4c0d      	ldr	r4, [pc, #52]	; (8008980 <__libc_init_array+0x3c>)
 800894a:	1b64      	subs	r4, r4, r5
 800894c:	10a4      	asrs	r4, r4, #2
 800894e:	2600      	movs	r6, #0
 8008950:	42a6      	cmp	r6, r4
 8008952:	d109      	bne.n	8008968 <__libc_init_array+0x24>
 8008954:	4d0b      	ldr	r5, [pc, #44]	; (8008984 <__libc_init_array+0x40>)
 8008956:	4c0c      	ldr	r4, [pc, #48]	; (8008988 <__libc_init_array+0x44>)
 8008958:	f001 feec 	bl	800a734 <_init>
 800895c:	1b64      	subs	r4, r4, r5
 800895e:	10a4      	asrs	r4, r4, #2
 8008960:	2600      	movs	r6, #0
 8008962:	42a6      	cmp	r6, r4
 8008964:	d105      	bne.n	8008972 <__libc_init_array+0x2e>
 8008966:	bd70      	pop	{r4, r5, r6, pc}
 8008968:	f855 3b04 	ldr.w	r3, [r5], #4
 800896c:	4798      	blx	r3
 800896e:	3601      	adds	r6, #1
 8008970:	e7ee      	b.n	8008950 <__libc_init_array+0xc>
 8008972:	f855 3b04 	ldr.w	r3, [r5], #4
 8008976:	4798      	blx	r3
 8008978:	3601      	adds	r6, #1
 800897a:	e7f2      	b.n	8008962 <__libc_init_array+0x1e>
 800897c:	0800ab84 	.word	0x0800ab84
 8008980:	0800ab84 	.word	0x0800ab84
 8008984:	0800ab84 	.word	0x0800ab84
 8008988:	0800ab88 	.word	0x0800ab88

0800898c <__retarget_lock_init_recursive>:
 800898c:	4770      	bx	lr

0800898e <__retarget_lock_acquire_recursive>:
 800898e:	4770      	bx	lr

08008990 <__retarget_lock_release_recursive>:
 8008990:	4770      	bx	lr

08008992 <memcpy>:
 8008992:	440a      	add	r2, r1
 8008994:	4291      	cmp	r1, r2
 8008996:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800899a:	d100      	bne.n	800899e <memcpy+0xc>
 800899c:	4770      	bx	lr
 800899e:	b510      	push	{r4, lr}
 80089a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80089a8:	4291      	cmp	r1, r2
 80089aa:	d1f9      	bne.n	80089a0 <memcpy+0xe>
 80089ac:	bd10      	pop	{r4, pc}

080089ae <quorem>:
 80089ae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089b2:	6903      	ldr	r3, [r0, #16]
 80089b4:	690c      	ldr	r4, [r1, #16]
 80089b6:	42a3      	cmp	r3, r4
 80089b8:	4607      	mov	r7, r0
 80089ba:	db7e      	blt.n	8008aba <quorem+0x10c>
 80089bc:	3c01      	subs	r4, #1
 80089be:	f101 0814 	add.w	r8, r1, #20
 80089c2:	f100 0514 	add.w	r5, r0, #20
 80089c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80089ca:	9301      	str	r3, [sp, #4]
 80089cc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80089d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80089d4:	3301      	adds	r3, #1
 80089d6:	429a      	cmp	r2, r3
 80089d8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80089dc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80089e0:	fbb2 f6f3 	udiv	r6, r2, r3
 80089e4:	d331      	bcc.n	8008a4a <quorem+0x9c>
 80089e6:	f04f 0e00 	mov.w	lr, #0
 80089ea:	4640      	mov	r0, r8
 80089ec:	46ac      	mov	ip, r5
 80089ee:	46f2      	mov	sl, lr
 80089f0:	f850 2b04 	ldr.w	r2, [r0], #4
 80089f4:	b293      	uxth	r3, r2
 80089f6:	fb06 e303 	mla	r3, r6, r3, lr
 80089fa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80089fe:	0c1a      	lsrs	r2, r3, #16
 8008a00:	b29b      	uxth	r3, r3
 8008a02:	ebaa 0303 	sub.w	r3, sl, r3
 8008a06:	f8dc a000 	ldr.w	sl, [ip]
 8008a0a:	fa13 f38a 	uxtah	r3, r3, sl
 8008a0e:	fb06 220e 	mla	r2, r6, lr, r2
 8008a12:	9300      	str	r3, [sp, #0]
 8008a14:	9b00      	ldr	r3, [sp, #0]
 8008a16:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008a1a:	b292      	uxth	r2, r2
 8008a1c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008a20:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008a24:	f8bd 3000 	ldrh.w	r3, [sp]
 8008a28:	4581      	cmp	r9, r0
 8008a2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a2e:	f84c 3b04 	str.w	r3, [ip], #4
 8008a32:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008a36:	d2db      	bcs.n	80089f0 <quorem+0x42>
 8008a38:	f855 300b 	ldr.w	r3, [r5, fp]
 8008a3c:	b92b      	cbnz	r3, 8008a4a <quorem+0x9c>
 8008a3e:	9b01      	ldr	r3, [sp, #4]
 8008a40:	3b04      	subs	r3, #4
 8008a42:	429d      	cmp	r5, r3
 8008a44:	461a      	mov	r2, r3
 8008a46:	d32c      	bcc.n	8008aa2 <quorem+0xf4>
 8008a48:	613c      	str	r4, [r7, #16]
 8008a4a:	4638      	mov	r0, r7
 8008a4c:	f001 f9a6 	bl	8009d9c <__mcmp>
 8008a50:	2800      	cmp	r0, #0
 8008a52:	db22      	blt.n	8008a9a <quorem+0xec>
 8008a54:	3601      	adds	r6, #1
 8008a56:	4629      	mov	r1, r5
 8008a58:	2000      	movs	r0, #0
 8008a5a:	f858 2b04 	ldr.w	r2, [r8], #4
 8008a5e:	f8d1 c000 	ldr.w	ip, [r1]
 8008a62:	b293      	uxth	r3, r2
 8008a64:	1ac3      	subs	r3, r0, r3
 8008a66:	0c12      	lsrs	r2, r2, #16
 8008a68:	fa13 f38c 	uxtah	r3, r3, ip
 8008a6c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008a70:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008a74:	b29b      	uxth	r3, r3
 8008a76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a7a:	45c1      	cmp	r9, r8
 8008a7c:	f841 3b04 	str.w	r3, [r1], #4
 8008a80:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008a84:	d2e9      	bcs.n	8008a5a <quorem+0xac>
 8008a86:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a8a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a8e:	b922      	cbnz	r2, 8008a9a <quorem+0xec>
 8008a90:	3b04      	subs	r3, #4
 8008a92:	429d      	cmp	r5, r3
 8008a94:	461a      	mov	r2, r3
 8008a96:	d30a      	bcc.n	8008aae <quorem+0x100>
 8008a98:	613c      	str	r4, [r7, #16]
 8008a9a:	4630      	mov	r0, r6
 8008a9c:	b003      	add	sp, #12
 8008a9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aa2:	6812      	ldr	r2, [r2, #0]
 8008aa4:	3b04      	subs	r3, #4
 8008aa6:	2a00      	cmp	r2, #0
 8008aa8:	d1ce      	bne.n	8008a48 <quorem+0x9a>
 8008aaa:	3c01      	subs	r4, #1
 8008aac:	e7c9      	b.n	8008a42 <quorem+0x94>
 8008aae:	6812      	ldr	r2, [r2, #0]
 8008ab0:	3b04      	subs	r3, #4
 8008ab2:	2a00      	cmp	r2, #0
 8008ab4:	d1f0      	bne.n	8008a98 <quorem+0xea>
 8008ab6:	3c01      	subs	r4, #1
 8008ab8:	e7eb      	b.n	8008a92 <quorem+0xe4>
 8008aba:	2000      	movs	r0, #0
 8008abc:	e7ee      	b.n	8008a9c <quorem+0xee>
	...

08008ac0 <_dtoa_r>:
 8008ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ac4:	ed2d 8b04 	vpush	{d8-d9}
 8008ac8:	69c5      	ldr	r5, [r0, #28]
 8008aca:	b093      	sub	sp, #76	; 0x4c
 8008acc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008ad0:	ec57 6b10 	vmov	r6, r7, d0
 8008ad4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008ad8:	9107      	str	r1, [sp, #28]
 8008ada:	4604      	mov	r4, r0
 8008adc:	920a      	str	r2, [sp, #40]	; 0x28
 8008ade:	930d      	str	r3, [sp, #52]	; 0x34
 8008ae0:	b975      	cbnz	r5, 8008b00 <_dtoa_r+0x40>
 8008ae2:	2010      	movs	r0, #16
 8008ae4:	f000 fe2a 	bl	800973c <malloc>
 8008ae8:	4602      	mov	r2, r0
 8008aea:	61e0      	str	r0, [r4, #28]
 8008aec:	b920      	cbnz	r0, 8008af8 <_dtoa_r+0x38>
 8008aee:	4bae      	ldr	r3, [pc, #696]	; (8008da8 <_dtoa_r+0x2e8>)
 8008af0:	21ef      	movs	r1, #239	; 0xef
 8008af2:	48ae      	ldr	r0, [pc, #696]	; (8008dac <_dtoa_r+0x2ec>)
 8008af4:	f001 fb10 	bl	800a118 <__assert_func>
 8008af8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008afc:	6005      	str	r5, [r0, #0]
 8008afe:	60c5      	str	r5, [r0, #12]
 8008b00:	69e3      	ldr	r3, [r4, #28]
 8008b02:	6819      	ldr	r1, [r3, #0]
 8008b04:	b151      	cbz	r1, 8008b1c <_dtoa_r+0x5c>
 8008b06:	685a      	ldr	r2, [r3, #4]
 8008b08:	604a      	str	r2, [r1, #4]
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	4093      	lsls	r3, r2
 8008b0e:	608b      	str	r3, [r1, #8]
 8008b10:	4620      	mov	r0, r4
 8008b12:	f000 ff07 	bl	8009924 <_Bfree>
 8008b16:	69e3      	ldr	r3, [r4, #28]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	601a      	str	r2, [r3, #0]
 8008b1c:	1e3b      	subs	r3, r7, #0
 8008b1e:	bfbb      	ittet	lt
 8008b20:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008b24:	9303      	strlt	r3, [sp, #12]
 8008b26:	2300      	movge	r3, #0
 8008b28:	2201      	movlt	r2, #1
 8008b2a:	bfac      	ite	ge
 8008b2c:	f8c8 3000 	strge.w	r3, [r8]
 8008b30:	f8c8 2000 	strlt.w	r2, [r8]
 8008b34:	4b9e      	ldr	r3, [pc, #632]	; (8008db0 <_dtoa_r+0x2f0>)
 8008b36:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008b3a:	ea33 0308 	bics.w	r3, r3, r8
 8008b3e:	d11b      	bne.n	8008b78 <_dtoa_r+0xb8>
 8008b40:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008b42:	f242 730f 	movw	r3, #9999	; 0x270f
 8008b46:	6013      	str	r3, [r2, #0]
 8008b48:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008b4c:	4333      	orrs	r3, r6
 8008b4e:	f000 8593 	beq.w	8009678 <_dtoa_r+0xbb8>
 8008b52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b54:	b963      	cbnz	r3, 8008b70 <_dtoa_r+0xb0>
 8008b56:	4b97      	ldr	r3, [pc, #604]	; (8008db4 <_dtoa_r+0x2f4>)
 8008b58:	e027      	b.n	8008baa <_dtoa_r+0xea>
 8008b5a:	4b97      	ldr	r3, [pc, #604]	; (8008db8 <_dtoa_r+0x2f8>)
 8008b5c:	9300      	str	r3, [sp, #0]
 8008b5e:	3308      	adds	r3, #8
 8008b60:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008b62:	6013      	str	r3, [r2, #0]
 8008b64:	9800      	ldr	r0, [sp, #0]
 8008b66:	b013      	add	sp, #76	; 0x4c
 8008b68:	ecbd 8b04 	vpop	{d8-d9}
 8008b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b70:	4b90      	ldr	r3, [pc, #576]	; (8008db4 <_dtoa_r+0x2f4>)
 8008b72:	9300      	str	r3, [sp, #0]
 8008b74:	3303      	adds	r3, #3
 8008b76:	e7f3      	b.n	8008b60 <_dtoa_r+0xa0>
 8008b78:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	ec51 0b17 	vmov	r0, r1, d7
 8008b82:	eeb0 8a47 	vmov.f32	s16, s14
 8008b86:	eef0 8a67 	vmov.f32	s17, s15
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	f7f7 ff9c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b90:	4681      	mov	r9, r0
 8008b92:	b160      	cbz	r0, 8008bae <_dtoa_r+0xee>
 8008b94:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008b96:	2301      	movs	r3, #1
 8008b98:	6013      	str	r3, [r2, #0]
 8008b9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	f000 8568 	beq.w	8009672 <_dtoa_r+0xbb2>
 8008ba2:	4b86      	ldr	r3, [pc, #536]	; (8008dbc <_dtoa_r+0x2fc>)
 8008ba4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008ba6:	6013      	str	r3, [r2, #0]
 8008ba8:	3b01      	subs	r3, #1
 8008baa:	9300      	str	r3, [sp, #0]
 8008bac:	e7da      	b.n	8008b64 <_dtoa_r+0xa4>
 8008bae:	aa10      	add	r2, sp, #64	; 0x40
 8008bb0:	a911      	add	r1, sp, #68	; 0x44
 8008bb2:	4620      	mov	r0, r4
 8008bb4:	eeb0 0a48 	vmov.f32	s0, s16
 8008bb8:	eef0 0a68 	vmov.f32	s1, s17
 8008bbc:	f001 f994 	bl	8009ee8 <__d2b>
 8008bc0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008bc4:	4682      	mov	sl, r0
 8008bc6:	2d00      	cmp	r5, #0
 8008bc8:	d07f      	beq.n	8008cca <_dtoa_r+0x20a>
 8008bca:	ee18 3a90 	vmov	r3, s17
 8008bce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008bd2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008bd6:	ec51 0b18 	vmov	r0, r1, d8
 8008bda:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008bde:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008be2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008be6:	4619      	mov	r1, r3
 8008be8:	2200      	movs	r2, #0
 8008bea:	4b75      	ldr	r3, [pc, #468]	; (8008dc0 <_dtoa_r+0x300>)
 8008bec:	f7f7 fb4c 	bl	8000288 <__aeabi_dsub>
 8008bf0:	a367      	add	r3, pc, #412	; (adr r3, 8008d90 <_dtoa_r+0x2d0>)
 8008bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bf6:	f7f7 fcff 	bl	80005f8 <__aeabi_dmul>
 8008bfa:	a367      	add	r3, pc, #412	; (adr r3, 8008d98 <_dtoa_r+0x2d8>)
 8008bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c00:	f7f7 fb44 	bl	800028c <__adddf3>
 8008c04:	4606      	mov	r6, r0
 8008c06:	4628      	mov	r0, r5
 8008c08:	460f      	mov	r7, r1
 8008c0a:	f7f7 fc8b 	bl	8000524 <__aeabi_i2d>
 8008c0e:	a364      	add	r3, pc, #400	; (adr r3, 8008da0 <_dtoa_r+0x2e0>)
 8008c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c14:	f7f7 fcf0 	bl	80005f8 <__aeabi_dmul>
 8008c18:	4602      	mov	r2, r0
 8008c1a:	460b      	mov	r3, r1
 8008c1c:	4630      	mov	r0, r6
 8008c1e:	4639      	mov	r1, r7
 8008c20:	f7f7 fb34 	bl	800028c <__adddf3>
 8008c24:	4606      	mov	r6, r0
 8008c26:	460f      	mov	r7, r1
 8008c28:	f7f7 ff96 	bl	8000b58 <__aeabi_d2iz>
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	4683      	mov	fp, r0
 8008c30:	2300      	movs	r3, #0
 8008c32:	4630      	mov	r0, r6
 8008c34:	4639      	mov	r1, r7
 8008c36:	f7f7 ff51 	bl	8000adc <__aeabi_dcmplt>
 8008c3a:	b148      	cbz	r0, 8008c50 <_dtoa_r+0x190>
 8008c3c:	4658      	mov	r0, fp
 8008c3e:	f7f7 fc71 	bl	8000524 <__aeabi_i2d>
 8008c42:	4632      	mov	r2, r6
 8008c44:	463b      	mov	r3, r7
 8008c46:	f7f7 ff3f 	bl	8000ac8 <__aeabi_dcmpeq>
 8008c4a:	b908      	cbnz	r0, 8008c50 <_dtoa_r+0x190>
 8008c4c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8008c50:	f1bb 0f16 	cmp.w	fp, #22
 8008c54:	d857      	bhi.n	8008d06 <_dtoa_r+0x246>
 8008c56:	4b5b      	ldr	r3, [pc, #364]	; (8008dc4 <_dtoa_r+0x304>)
 8008c58:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c60:	ec51 0b18 	vmov	r0, r1, d8
 8008c64:	f7f7 ff3a 	bl	8000adc <__aeabi_dcmplt>
 8008c68:	2800      	cmp	r0, #0
 8008c6a:	d04e      	beq.n	8008d0a <_dtoa_r+0x24a>
 8008c6c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8008c70:	2300      	movs	r3, #0
 8008c72:	930c      	str	r3, [sp, #48]	; 0x30
 8008c74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008c76:	1b5b      	subs	r3, r3, r5
 8008c78:	1e5a      	subs	r2, r3, #1
 8008c7a:	bf45      	ittet	mi
 8008c7c:	f1c3 0301 	rsbmi	r3, r3, #1
 8008c80:	9305      	strmi	r3, [sp, #20]
 8008c82:	2300      	movpl	r3, #0
 8008c84:	2300      	movmi	r3, #0
 8008c86:	9206      	str	r2, [sp, #24]
 8008c88:	bf54      	ite	pl
 8008c8a:	9305      	strpl	r3, [sp, #20]
 8008c8c:	9306      	strmi	r3, [sp, #24]
 8008c8e:	f1bb 0f00 	cmp.w	fp, #0
 8008c92:	db3c      	blt.n	8008d0e <_dtoa_r+0x24e>
 8008c94:	9b06      	ldr	r3, [sp, #24]
 8008c96:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008c9a:	445b      	add	r3, fp
 8008c9c:	9306      	str	r3, [sp, #24]
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	9308      	str	r3, [sp, #32]
 8008ca2:	9b07      	ldr	r3, [sp, #28]
 8008ca4:	2b09      	cmp	r3, #9
 8008ca6:	d868      	bhi.n	8008d7a <_dtoa_r+0x2ba>
 8008ca8:	2b05      	cmp	r3, #5
 8008caa:	bfc4      	itt	gt
 8008cac:	3b04      	subgt	r3, #4
 8008cae:	9307      	strgt	r3, [sp, #28]
 8008cb0:	9b07      	ldr	r3, [sp, #28]
 8008cb2:	f1a3 0302 	sub.w	r3, r3, #2
 8008cb6:	bfcc      	ite	gt
 8008cb8:	2500      	movgt	r5, #0
 8008cba:	2501      	movle	r5, #1
 8008cbc:	2b03      	cmp	r3, #3
 8008cbe:	f200 8085 	bhi.w	8008dcc <_dtoa_r+0x30c>
 8008cc2:	e8df f003 	tbb	[pc, r3]
 8008cc6:	3b2e      	.short	0x3b2e
 8008cc8:	5839      	.short	0x5839
 8008cca:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008cce:	441d      	add	r5, r3
 8008cd0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008cd4:	2b20      	cmp	r3, #32
 8008cd6:	bfc1      	itttt	gt
 8008cd8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008cdc:	fa08 f803 	lslgt.w	r8, r8, r3
 8008ce0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8008ce4:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008ce8:	bfd6      	itet	le
 8008cea:	f1c3 0320 	rsble	r3, r3, #32
 8008cee:	ea48 0003 	orrgt.w	r0, r8, r3
 8008cf2:	fa06 f003 	lslle.w	r0, r6, r3
 8008cf6:	f7f7 fc05 	bl	8000504 <__aeabi_ui2d>
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008d00:	3d01      	subs	r5, #1
 8008d02:	920e      	str	r2, [sp, #56]	; 0x38
 8008d04:	e76f      	b.n	8008be6 <_dtoa_r+0x126>
 8008d06:	2301      	movs	r3, #1
 8008d08:	e7b3      	b.n	8008c72 <_dtoa_r+0x1b2>
 8008d0a:	900c      	str	r0, [sp, #48]	; 0x30
 8008d0c:	e7b2      	b.n	8008c74 <_dtoa_r+0x1b4>
 8008d0e:	9b05      	ldr	r3, [sp, #20]
 8008d10:	eba3 030b 	sub.w	r3, r3, fp
 8008d14:	9305      	str	r3, [sp, #20]
 8008d16:	f1cb 0300 	rsb	r3, fp, #0
 8008d1a:	9308      	str	r3, [sp, #32]
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d20:	e7bf      	b.n	8008ca2 <_dtoa_r+0x1e2>
 8008d22:	2300      	movs	r3, #0
 8008d24:	9309      	str	r3, [sp, #36]	; 0x24
 8008d26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	dc52      	bgt.n	8008dd2 <_dtoa_r+0x312>
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	9301      	str	r3, [sp, #4]
 8008d30:	9304      	str	r3, [sp, #16]
 8008d32:	461a      	mov	r2, r3
 8008d34:	920a      	str	r2, [sp, #40]	; 0x28
 8008d36:	e00b      	b.n	8008d50 <_dtoa_r+0x290>
 8008d38:	2301      	movs	r3, #1
 8008d3a:	e7f3      	b.n	8008d24 <_dtoa_r+0x264>
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	9309      	str	r3, [sp, #36]	; 0x24
 8008d40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d42:	445b      	add	r3, fp
 8008d44:	9301      	str	r3, [sp, #4]
 8008d46:	3301      	adds	r3, #1
 8008d48:	2b01      	cmp	r3, #1
 8008d4a:	9304      	str	r3, [sp, #16]
 8008d4c:	bfb8      	it	lt
 8008d4e:	2301      	movlt	r3, #1
 8008d50:	69e0      	ldr	r0, [r4, #28]
 8008d52:	2100      	movs	r1, #0
 8008d54:	2204      	movs	r2, #4
 8008d56:	f102 0614 	add.w	r6, r2, #20
 8008d5a:	429e      	cmp	r6, r3
 8008d5c:	d93d      	bls.n	8008dda <_dtoa_r+0x31a>
 8008d5e:	6041      	str	r1, [r0, #4]
 8008d60:	4620      	mov	r0, r4
 8008d62:	f000 fd9f 	bl	80098a4 <_Balloc>
 8008d66:	9000      	str	r0, [sp, #0]
 8008d68:	2800      	cmp	r0, #0
 8008d6a:	d139      	bne.n	8008de0 <_dtoa_r+0x320>
 8008d6c:	4b16      	ldr	r3, [pc, #88]	; (8008dc8 <_dtoa_r+0x308>)
 8008d6e:	4602      	mov	r2, r0
 8008d70:	f240 11af 	movw	r1, #431	; 0x1af
 8008d74:	e6bd      	b.n	8008af2 <_dtoa_r+0x32>
 8008d76:	2301      	movs	r3, #1
 8008d78:	e7e1      	b.n	8008d3e <_dtoa_r+0x27e>
 8008d7a:	2501      	movs	r5, #1
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	9307      	str	r3, [sp, #28]
 8008d80:	9509      	str	r5, [sp, #36]	; 0x24
 8008d82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008d86:	9301      	str	r3, [sp, #4]
 8008d88:	9304      	str	r3, [sp, #16]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	2312      	movs	r3, #18
 8008d8e:	e7d1      	b.n	8008d34 <_dtoa_r+0x274>
 8008d90:	636f4361 	.word	0x636f4361
 8008d94:	3fd287a7 	.word	0x3fd287a7
 8008d98:	8b60c8b3 	.word	0x8b60c8b3
 8008d9c:	3fc68a28 	.word	0x3fc68a28
 8008da0:	509f79fb 	.word	0x509f79fb
 8008da4:	3fd34413 	.word	0x3fd34413
 8008da8:	0800a849 	.word	0x0800a849
 8008dac:	0800a860 	.word	0x0800a860
 8008db0:	7ff00000 	.word	0x7ff00000
 8008db4:	0800a845 	.word	0x0800a845
 8008db8:	0800a83c 	.word	0x0800a83c
 8008dbc:	0800a819 	.word	0x0800a819
 8008dc0:	3ff80000 	.word	0x3ff80000
 8008dc4:	0800a950 	.word	0x0800a950
 8008dc8:	0800a8b8 	.word	0x0800a8b8
 8008dcc:	2301      	movs	r3, #1
 8008dce:	9309      	str	r3, [sp, #36]	; 0x24
 8008dd0:	e7d7      	b.n	8008d82 <_dtoa_r+0x2c2>
 8008dd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dd4:	9301      	str	r3, [sp, #4]
 8008dd6:	9304      	str	r3, [sp, #16]
 8008dd8:	e7ba      	b.n	8008d50 <_dtoa_r+0x290>
 8008dda:	3101      	adds	r1, #1
 8008ddc:	0052      	lsls	r2, r2, #1
 8008dde:	e7ba      	b.n	8008d56 <_dtoa_r+0x296>
 8008de0:	69e3      	ldr	r3, [r4, #28]
 8008de2:	9a00      	ldr	r2, [sp, #0]
 8008de4:	601a      	str	r2, [r3, #0]
 8008de6:	9b04      	ldr	r3, [sp, #16]
 8008de8:	2b0e      	cmp	r3, #14
 8008dea:	f200 80a8 	bhi.w	8008f3e <_dtoa_r+0x47e>
 8008dee:	2d00      	cmp	r5, #0
 8008df0:	f000 80a5 	beq.w	8008f3e <_dtoa_r+0x47e>
 8008df4:	f1bb 0f00 	cmp.w	fp, #0
 8008df8:	dd38      	ble.n	8008e6c <_dtoa_r+0x3ac>
 8008dfa:	4bc0      	ldr	r3, [pc, #768]	; (80090fc <_dtoa_r+0x63c>)
 8008dfc:	f00b 020f 	and.w	r2, fp, #15
 8008e00:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e04:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008e08:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008e0c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008e10:	d019      	beq.n	8008e46 <_dtoa_r+0x386>
 8008e12:	4bbb      	ldr	r3, [pc, #748]	; (8009100 <_dtoa_r+0x640>)
 8008e14:	ec51 0b18 	vmov	r0, r1, d8
 8008e18:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008e1c:	f7f7 fd16 	bl	800084c <__aeabi_ddiv>
 8008e20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e24:	f008 080f 	and.w	r8, r8, #15
 8008e28:	2503      	movs	r5, #3
 8008e2a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009100 <_dtoa_r+0x640>
 8008e2e:	f1b8 0f00 	cmp.w	r8, #0
 8008e32:	d10a      	bne.n	8008e4a <_dtoa_r+0x38a>
 8008e34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e38:	4632      	mov	r2, r6
 8008e3a:	463b      	mov	r3, r7
 8008e3c:	f7f7 fd06 	bl	800084c <__aeabi_ddiv>
 8008e40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e44:	e02b      	b.n	8008e9e <_dtoa_r+0x3de>
 8008e46:	2502      	movs	r5, #2
 8008e48:	e7ef      	b.n	8008e2a <_dtoa_r+0x36a>
 8008e4a:	f018 0f01 	tst.w	r8, #1
 8008e4e:	d008      	beq.n	8008e62 <_dtoa_r+0x3a2>
 8008e50:	4630      	mov	r0, r6
 8008e52:	4639      	mov	r1, r7
 8008e54:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008e58:	f7f7 fbce 	bl	80005f8 <__aeabi_dmul>
 8008e5c:	3501      	adds	r5, #1
 8008e5e:	4606      	mov	r6, r0
 8008e60:	460f      	mov	r7, r1
 8008e62:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008e66:	f109 0908 	add.w	r9, r9, #8
 8008e6a:	e7e0      	b.n	8008e2e <_dtoa_r+0x36e>
 8008e6c:	f000 809f 	beq.w	8008fae <_dtoa_r+0x4ee>
 8008e70:	f1cb 0600 	rsb	r6, fp, #0
 8008e74:	4ba1      	ldr	r3, [pc, #644]	; (80090fc <_dtoa_r+0x63c>)
 8008e76:	4fa2      	ldr	r7, [pc, #648]	; (8009100 <_dtoa_r+0x640>)
 8008e78:	f006 020f 	and.w	r2, r6, #15
 8008e7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e84:	ec51 0b18 	vmov	r0, r1, d8
 8008e88:	f7f7 fbb6 	bl	80005f8 <__aeabi_dmul>
 8008e8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e90:	1136      	asrs	r6, r6, #4
 8008e92:	2300      	movs	r3, #0
 8008e94:	2502      	movs	r5, #2
 8008e96:	2e00      	cmp	r6, #0
 8008e98:	d17e      	bne.n	8008f98 <_dtoa_r+0x4d8>
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d1d0      	bne.n	8008e40 <_dtoa_r+0x380>
 8008e9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ea0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	f000 8084 	beq.w	8008fb2 <_dtoa_r+0x4f2>
 8008eaa:	4b96      	ldr	r3, [pc, #600]	; (8009104 <_dtoa_r+0x644>)
 8008eac:	2200      	movs	r2, #0
 8008eae:	4640      	mov	r0, r8
 8008eb0:	4649      	mov	r1, r9
 8008eb2:	f7f7 fe13 	bl	8000adc <__aeabi_dcmplt>
 8008eb6:	2800      	cmp	r0, #0
 8008eb8:	d07b      	beq.n	8008fb2 <_dtoa_r+0x4f2>
 8008eba:	9b04      	ldr	r3, [sp, #16]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d078      	beq.n	8008fb2 <_dtoa_r+0x4f2>
 8008ec0:	9b01      	ldr	r3, [sp, #4]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	dd39      	ble.n	8008f3a <_dtoa_r+0x47a>
 8008ec6:	4b90      	ldr	r3, [pc, #576]	; (8009108 <_dtoa_r+0x648>)
 8008ec8:	2200      	movs	r2, #0
 8008eca:	4640      	mov	r0, r8
 8008ecc:	4649      	mov	r1, r9
 8008ece:	f7f7 fb93 	bl	80005f8 <__aeabi_dmul>
 8008ed2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ed6:	9e01      	ldr	r6, [sp, #4]
 8008ed8:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8008edc:	3501      	adds	r5, #1
 8008ede:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008ee2:	4628      	mov	r0, r5
 8008ee4:	f7f7 fb1e 	bl	8000524 <__aeabi_i2d>
 8008ee8:	4642      	mov	r2, r8
 8008eea:	464b      	mov	r3, r9
 8008eec:	f7f7 fb84 	bl	80005f8 <__aeabi_dmul>
 8008ef0:	4b86      	ldr	r3, [pc, #536]	; (800910c <_dtoa_r+0x64c>)
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	f7f7 f9ca 	bl	800028c <__adddf3>
 8008ef8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008efc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f00:	9303      	str	r3, [sp, #12]
 8008f02:	2e00      	cmp	r6, #0
 8008f04:	d158      	bne.n	8008fb8 <_dtoa_r+0x4f8>
 8008f06:	4b82      	ldr	r3, [pc, #520]	; (8009110 <_dtoa_r+0x650>)
 8008f08:	2200      	movs	r2, #0
 8008f0a:	4640      	mov	r0, r8
 8008f0c:	4649      	mov	r1, r9
 8008f0e:	f7f7 f9bb 	bl	8000288 <__aeabi_dsub>
 8008f12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f16:	4680      	mov	r8, r0
 8008f18:	4689      	mov	r9, r1
 8008f1a:	f7f7 fdfd 	bl	8000b18 <__aeabi_dcmpgt>
 8008f1e:	2800      	cmp	r0, #0
 8008f20:	f040 8296 	bne.w	8009450 <_dtoa_r+0x990>
 8008f24:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008f28:	4640      	mov	r0, r8
 8008f2a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008f2e:	4649      	mov	r1, r9
 8008f30:	f7f7 fdd4 	bl	8000adc <__aeabi_dcmplt>
 8008f34:	2800      	cmp	r0, #0
 8008f36:	f040 8289 	bne.w	800944c <_dtoa_r+0x98c>
 8008f3a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008f3e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	f2c0 814e 	blt.w	80091e2 <_dtoa_r+0x722>
 8008f46:	f1bb 0f0e 	cmp.w	fp, #14
 8008f4a:	f300 814a 	bgt.w	80091e2 <_dtoa_r+0x722>
 8008f4e:	4b6b      	ldr	r3, [pc, #428]	; (80090fc <_dtoa_r+0x63c>)
 8008f50:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008f54:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008f58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	f280 80dc 	bge.w	8009118 <_dtoa_r+0x658>
 8008f60:	9b04      	ldr	r3, [sp, #16]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	f300 80d8 	bgt.w	8009118 <_dtoa_r+0x658>
 8008f68:	f040 826f 	bne.w	800944a <_dtoa_r+0x98a>
 8008f6c:	4b68      	ldr	r3, [pc, #416]	; (8009110 <_dtoa_r+0x650>)
 8008f6e:	2200      	movs	r2, #0
 8008f70:	4640      	mov	r0, r8
 8008f72:	4649      	mov	r1, r9
 8008f74:	f7f7 fb40 	bl	80005f8 <__aeabi_dmul>
 8008f78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f7c:	f7f7 fdc2 	bl	8000b04 <__aeabi_dcmpge>
 8008f80:	9e04      	ldr	r6, [sp, #16]
 8008f82:	4637      	mov	r7, r6
 8008f84:	2800      	cmp	r0, #0
 8008f86:	f040 8245 	bne.w	8009414 <_dtoa_r+0x954>
 8008f8a:	9d00      	ldr	r5, [sp, #0]
 8008f8c:	2331      	movs	r3, #49	; 0x31
 8008f8e:	f805 3b01 	strb.w	r3, [r5], #1
 8008f92:	f10b 0b01 	add.w	fp, fp, #1
 8008f96:	e241      	b.n	800941c <_dtoa_r+0x95c>
 8008f98:	07f2      	lsls	r2, r6, #31
 8008f9a:	d505      	bpl.n	8008fa8 <_dtoa_r+0x4e8>
 8008f9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fa0:	f7f7 fb2a 	bl	80005f8 <__aeabi_dmul>
 8008fa4:	3501      	adds	r5, #1
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	1076      	asrs	r6, r6, #1
 8008faa:	3708      	adds	r7, #8
 8008fac:	e773      	b.n	8008e96 <_dtoa_r+0x3d6>
 8008fae:	2502      	movs	r5, #2
 8008fb0:	e775      	b.n	8008e9e <_dtoa_r+0x3de>
 8008fb2:	9e04      	ldr	r6, [sp, #16]
 8008fb4:	465f      	mov	r7, fp
 8008fb6:	e792      	b.n	8008ede <_dtoa_r+0x41e>
 8008fb8:	9900      	ldr	r1, [sp, #0]
 8008fba:	4b50      	ldr	r3, [pc, #320]	; (80090fc <_dtoa_r+0x63c>)
 8008fbc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008fc0:	4431      	add	r1, r6
 8008fc2:	9102      	str	r1, [sp, #8]
 8008fc4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008fc6:	eeb0 9a47 	vmov.f32	s18, s14
 8008fca:	eef0 9a67 	vmov.f32	s19, s15
 8008fce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008fd2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008fd6:	2900      	cmp	r1, #0
 8008fd8:	d044      	beq.n	8009064 <_dtoa_r+0x5a4>
 8008fda:	494e      	ldr	r1, [pc, #312]	; (8009114 <_dtoa_r+0x654>)
 8008fdc:	2000      	movs	r0, #0
 8008fde:	f7f7 fc35 	bl	800084c <__aeabi_ddiv>
 8008fe2:	ec53 2b19 	vmov	r2, r3, d9
 8008fe6:	f7f7 f94f 	bl	8000288 <__aeabi_dsub>
 8008fea:	9d00      	ldr	r5, [sp, #0]
 8008fec:	ec41 0b19 	vmov	d9, r0, r1
 8008ff0:	4649      	mov	r1, r9
 8008ff2:	4640      	mov	r0, r8
 8008ff4:	f7f7 fdb0 	bl	8000b58 <__aeabi_d2iz>
 8008ff8:	4606      	mov	r6, r0
 8008ffa:	f7f7 fa93 	bl	8000524 <__aeabi_i2d>
 8008ffe:	4602      	mov	r2, r0
 8009000:	460b      	mov	r3, r1
 8009002:	4640      	mov	r0, r8
 8009004:	4649      	mov	r1, r9
 8009006:	f7f7 f93f 	bl	8000288 <__aeabi_dsub>
 800900a:	3630      	adds	r6, #48	; 0x30
 800900c:	f805 6b01 	strb.w	r6, [r5], #1
 8009010:	ec53 2b19 	vmov	r2, r3, d9
 8009014:	4680      	mov	r8, r0
 8009016:	4689      	mov	r9, r1
 8009018:	f7f7 fd60 	bl	8000adc <__aeabi_dcmplt>
 800901c:	2800      	cmp	r0, #0
 800901e:	d164      	bne.n	80090ea <_dtoa_r+0x62a>
 8009020:	4642      	mov	r2, r8
 8009022:	464b      	mov	r3, r9
 8009024:	4937      	ldr	r1, [pc, #220]	; (8009104 <_dtoa_r+0x644>)
 8009026:	2000      	movs	r0, #0
 8009028:	f7f7 f92e 	bl	8000288 <__aeabi_dsub>
 800902c:	ec53 2b19 	vmov	r2, r3, d9
 8009030:	f7f7 fd54 	bl	8000adc <__aeabi_dcmplt>
 8009034:	2800      	cmp	r0, #0
 8009036:	f040 80b6 	bne.w	80091a6 <_dtoa_r+0x6e6>
 800903a:	9b02      	ldr	r3, [sp, #8]
 800903c:	429d      	cmp	r5, r3
 800903e:	f43f af7c 	beq.w	8008f3a <_dtoa_r+0x47a>
 8009042:	4b31      	ldr	r3, [pc, #196]	; (8009108 <_dtoa_r+0x648>)
 8009044:	ec51 0b19 	vmov	r0, r1, d9
 8009048:	2200      	movs	r2, #0
 800904a:	f7f7 fad5 	bl	80005f8 <__aeabi_dmul>
 800904e:	4b2e      	ldr	r3, [pc, #184]	; (8009108 <_dtoa_r+0x648>)
 8009050:	ec41 0b19 	vmov	d9, r0, r1
 8009054:	2200      	movs	r2, #0
 8009056:	4640      	mov	r0, r8
 8009058:	4649      	mov	r1, r9
 800905a:	f7f7 facd 	bl	80005f8 <__aeabi_dmul>
 800905e:	4680      	mov	r8, r0
 8009060:	4689      	mov	r9, r1
 8009062:	e7c5      	b.n	8008ff0 <_dtoa_r+0x530>
 8009064:	ec51 0b17 	vmov	r0, r1, d7
 8009068:	f7f7 fac6 	bl	80005f8 <__aeabi_dmul>
 800906c:	9b02      	ldr	r3, [sp, #8]
 800906e:	9d00      	ldr	r5, [sp, #0]
 8009070:	930f      	str	r3, [sp, #60]	; 0x3c
 8009072:	ec41 0b19 	vmov	d9, r0, r1
 8009076:	4649      	mov	r1, r9
 8009078:	4640      	mov	r0, r8
 800907a:	f7f7 fd6d 	bl	8000b58 <__aeabi_d2iz>
 800907e:	4606      	mov	r6, r0
 8009080:	f7f7 fa50 	bl	8000524 <__aeabi_i2d>
 8009084:	3630      	adds	r6, #48	; 0x30
 8009086:	4602      	mov	r2, r0
 8009088:	460b      	mov	r3, r1
 800908a:	4640      	mov	r0, r8
 800908c:	4649      	mov	r1, r9
 800908e:	f7f7 f8fb 	bl	8000288 <__aeabi_dsub>
 8009092:	f805 6b01 	strb.w	r6, [r5], #1
 8009096:	9b02      	ldr	r3, [sp, #8]
 8009098:	429d      	cmp	r5, r3
 800909a:	4680      	mov	r8, r0
 800909c:	4689      	mov	r9, r1
 800909e:	f04f 0200 	mov.w	r2, #0
 80090a2:	d124      	bne.n	80090ee <_dtoa_r+0x62e>
 80090a4:	4b1b      	ldr	r3, [pc, #108]	; (8009114 <_dtoa_r+0x654>)
 80090a6:	ec51 0b19 	vmov	r0, r1, d9
 80090aa:	f7f7 f8ef 	bl	800028c <__adddf3>
 80090ae:	4602      	mov	r2, r0
 80090b0:	460b      	mov	r3, r1
 80090b2:	4640      	mov	r0, r8
 80090b4:	4649      	mov	r1, r9
 80090b6:	f7f7 fd2f 	bl	8000b18 <__aeabi_dcmpgt>
 80090ba:	2800      	cmp	r0, #0
 80090bc:	d173      	bne.n	80091a6 <_dtoa_r+0x6e6>
 80090be:	ec53 2b19 	vmov	r2, r3, d9
 80090c2:	4914      	ldr	r1, [pc, #80]	; (8009114 <_dtoa_r+0x654>)
 80090c4:	2000      	movs	r0, #0
 80090c6:	f7f7 f8df 	bl	8000288 <__aeabi_dsub>
 80090ca:	4602      	mov	r2, r0
 80090cc:	460b      	mov	r3, r1
 80090ce:	4640      	mov	r0, r8
 80090d0:	4649      	mov	r1, r9
 80090d2:	f7f7 fd03 	bl	8000adc <__aeabi_dcmplt>
 80090d6:	2800      	cmp	r0, #0
 80090d8:	f43f af2f 	beq.w	8008f3a <_dtoa_r+0x47a>
 80090dc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80090de:	1e6b      	subs	r3, r5, #1
 80090e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80090e2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80090e6:	2b30      	cmp	r3, #48	; 0x30
 80090e8:	d0f8      	beq.n	80090dc <_dtoa_r+0x61c>
 80090ea:	46bb      	mov	fp, r7
 80090ec:	e04a      	b.n	8009184 <_dtoa_r+0x6c4>
 80090ee:	4b06      	ldr	r3, [pc, #24]	; (8009108 <_dtoa_r+0x648>)
 80090f0:	f7f7 fa82 	bl	80005f8 <__aeabi_dmul>
 80090f4:	4680      	mov	r8, r0
 80090f6:	4689      	mov	r9, r1
 80090f8:	e7bd      	b.n	8009076 <_dtoa_r+0x5b6>
 80090fa:	bf00      	nop
 80090fc:	0800a950 	.word	0x0800a950
 8009100:	0800a928 	.word	0x0800a928
 8009104:	3ff00000 	.word	0x3ff00000
 8009108:	40240000 	.word	0x40240000
 800910c:	401c0000 	.word	0x401c0000
 8009110:	40140000 	.word	0x40140000
 8009114:	3fe00000 	.word	0x3fe00000
 8009118:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800911c:	9d00      	ldr	r5, [sp, #0]
 800911e:	4642      	mov	r2, r8
 8009120:	464b      	mov	r3, r9
 8009122:	4630      	mov	r0, r6
 8009124:	4639      	mov	r1, r7
 8009126:	f7f7 fb91 	bl	800084c <__aeabi_ddiv>
 800912a:	f7f7 fd15 	bl	8000b58 <__aeabi_d2iz>
 800912e:	9001      	str	r0, [sp, #4]
 8009130:	f7f7 f9f8 	bl	8000524 <__aeabi_i2d>
 8009134:	4642      	mov	r2, r8
 8009136:	464b      	mov	r3, r9
 8009138:	f7f7 fa5e 	bl	80005f8 <__aeabi_dmul>
 800913c:	4602      	mov	r2, r0
 800913e:	460b      	mov	r3, r1
 8009140:	4630      	mov	r0, r6
 8009142:	4639      	mov	r1, r7
 8009144:	f7f7 f8a0 	bl	8000288 <__aeabi_dsub>
 8009148:	9e01      	ldr	r6, [sp, #4]
 800914a:	9f04      	ldr	r7, [sp, #16]
 800914c:	3630      	adds	r6, #48	; 0x30
 800914e:	f805 6b01 	strb.w	r6, [r5], #1
 8009152:	9e00      	ldr	r6, [sp, #0]
 8009154:	1bae      	subs	r6, r5, r6
 8009156:	42b7      	cmp	r7, r6
 8009158:	4602      	mov	r2, r0
 800915a:	460b      	mov	r3, r1
 800915c:	d134      	bne.n	80091c8 <_dtoa_r+0x708>
 800915e:	f7f7 f895 	bl	800028c <__adddf3>
 8009162:	4642      	mov	r2, r8
 8009164:	464b      	mov	r3, r9
 8009166:	4606      	mov	r6, r0
 8009168:	460f      	mov	r7, r1
 800916a:	f7f7 fcd5 	bl	8000b18 <__aeabi_dcmpgt>
 800916e:	b9c8      	cbnz	r0, 80091a4 <_dtoa_r+0x6e4>
 8009170:	4642      	mov	r2, r8
 8009172:	464b      	mov	r3, r9
 8009174:	4630      	mov	r0, r6
 8009176:	4639      	mov	r1, r7
 8009178:	f7f7 fca6 	bl	8000ac8 <__aeabi_dcmpeq>
 800917c:	b110      	cbz	r0, 8009184 <_dtoa_r+0x6c4>
 800917e:	9b01      	ldr	r3, [sp, #4]
 8009180:	07db      	lsls	r3, r3, #31
 8009182:	d40f      	bmi.n	80091a4 <_dtoa_r+0x6e4>
 8009184:	4651      	mov	r1, sl
 8009186:	4620      	mov	r0, r4
 8009188:	f000 fbcc 	bl	8009924 <_Bfree>
 800918c:	2300      	movs	r3, #0
 800918e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009190:	702b      	strb	r3, [r5, #0]
 8009192:	f10b 0301 	add.w	r3, fp, #1
 8009196:	6013      	str	r3, [r2, #0]
 8009198:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800919a:	2b00      	cmp	r3, #0
 800919c:	f43f ace2 	beq.w	8008b64 <_dtoa_r+0xa4>
 80091a0:	601d      	str	r5, [r3, #0]
 80091a2:	e4df      	b.n	8008b64 <_dtoa_r+0xa4>
 80091a4:	465f      	mov	r7, fp
 80091a6:	462b      	mov	r3, r5
 80091a8:	461d      	mov	r5, r3
 80091aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80091ae:	2a39      	cmp	r2, #57	; 0x39
 80091b0:	d106      	bne.n	80091c0 <_dtoa_r+0x700>
 80091b2:	9a00      	ldr	r2, [sp, #0]
 80091b4:	429a      	cmp	r2, r3
 80091b6:	d1f7      	bne.n	80091a8 <_dtoa_r+0x6e8>
 80091b8:	9900      	ldr	r1, [sp, #0]
 80091ba:	2230      	movs	r2, #48	; 0x30
 80091bc:	3701      	adds	r7, #1
 80091be:	700a      	strb	r2, [r1, #0]
 80091c0:	781a      	ldrb	r2, [r3, #0]
 80091c2:	3201      	adds	r2, #1
 80091c4:	701a      	strb	r2, [r3, #0]
 80091c6:	e790      	b.n	80090ea <_dtoa_r+0x62a>
 80091c8:	4ba3      	ldr	r3, [pc, #652]	; (8009458 <_dtoa_r+0x998>)
 80091ca:	2200      	movs	r2, #0
 80091cc:	f7f7 fa14 	bl	80005f8 <__aeabi_dmul>
 80091d0:	2200      	movs	r2, #0
 80091d2:	2300      	movs	r3, #0
 80091d4:	4606      	mov	r6, r0
 80091d6:	460f      	mov	r7, r1
 80091d8:	f7f7 fc76 	bl	8000ac8 <__aeabi_dcmpeq>
 80091dc:	2800      	cmp	r0, #0
 80091de:	d09e      	beq.n	800911e <_dtoa_r+0x65e>
 80091e0:	e7d0      	b.n	8009184 <_dtoa_r+0x6c4>
 80091e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80091e4:	2a00      	cmp	r2, #0
 80091e6:	f000 80ca 	beq.w	800937e <_dtoa_r+0x8be>
 80091ea:	9a07      	ldr	r2, [sp, #28]
 80091ec:	2a01      	cmp	r2, #1
 80091ee:	f300 80ad 	bgt.w	800934c <_dtoa_r+0x88c>
 80091f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80091f4:	2a00      	cmp	r2, #0
 80091f6:	f000 80a5 	beq.w	8009344 <_dtoa_r+0x884>
 80091fa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80091fe:	9e08      	ldr	r6, [sp, #32]
 8009200:	9d05      	ldr	r5, [sp, #20]
 8009202:	9a05      	ldr	r2, [sp, #20]
 8009204:	441a      	add	r2, r3
 8009206:	9205      	str	r2, [sp, #20]
 8009208:	9a06      	ldr	r2, [sp, #24]
 800920a:	2101      	movs	r1, #1
 800920c:	441a      	add	r2, r3
 800920e:	4620      	mov	r0, r4
 8009210:	9206      	str	r2, [sp, #24]
 8009212:	f000 fc3d 	bl	8009a90 <__i2b>
 8009216:	4607      	mov	r7, r0
 8009218:	b165      	cbz	r5, 8009234 <_dtoa_r+0x774>
 800921a:	9b06      	ldr	r3, [sp, #24]
 800921c:	2b00      	cmp	r3, #0
 800921e:	dd09      	ble.n	8009234 <_dtoa_r+0x774>
 8009220:	42ab      	cmp	r3, r5
 8009222:	9a05      	ldr	r2, [sp, #20]
 8009224:	bfa8      	it	ge
 8009226:	462b      	movge	r3, r5
 8009228:	1ad2      	subs	r2, r2, r3
 800922a:	9205      	str	r2, [sp, #20]
 800922c:	9a06      	ldr	r2, [sp, #24]
 800922e:	1aed      	subs	r5, r5, r3
 8009230:	1ad3      	subs	r3, r2, r3
 8009232:	9306      	str	r3, [sp, #24]
 8009234:	9b08      	ldr	r3, [sp, #32]
 8009236:	b1f3      	cbz	r3, 8009276 <_dtoa_r+0x7b6>
 8009238:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800923a:	2b00      	cmp	r3, #0
 800923c:	f000 80a3 	beq.w	8009386 <_dtoa_r+0x8c6>
 8009240:	2e00      	cmp	r6, #0
 8009242:	dd10      	ble.n	8009266 <_dtoa_r+0x7a6>
 8009244:	4639      	mov	r1, r7
 8009246:	4632      	mov	r2, r6
 8009248:	4620      	mov	r0, r4
 800924a:	f000 fce1 	bl	8009c10 <__pow5mult>
 800924e:	4652      	mov	r2, sl
 8009250:	4601      	mov	r1, r0
 8009252:	4607      	mov	r7, r0
 8009254:	4620      	mov	r0, r4
 8009256:	f000 fc31 	bl	8009abc <__multiply>
 800925a:	4651      	mov	r1, sl
 800925c:	4680      	mov	r8, r0
 800925e:	4620      	mov	r0, r4
 8009260:	f000 fb60 	bl	8009924 <_Bfree>
 8009264:	46c2      	mov	sl, r8
 8009266:	9b08      	ldr	r3, [sp, #32]
 8009268:	1b9a      	subs	r2, r3, r6
 800926a:	d004      	beq.n	8009276 <_dtoa_r+0x7b6>
 800926c:	4651      	mov	r1, sl
 800926e:	4620      	mov	r0, r4
 8009270:	f000 fcce 	bl	8009c10 <__pow5mult>
 8009274:	4682      	mov	sl, r0
 8009276:	2101      	movs	r1, #1
 8009278:	4620      	mov	r0, r4
 800927a:	f000 fc09 	bl	8009a90 <__i2b>
 800927e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009280:	2b00      	cmp	r3, #0
 8009282:	4606      	mov	r6, r0
 8009284:	f340 8081 	ble.w	800938a <_dtoa_r+0x8ca>
 8009288:	461a      	mov	r2, r3
 800928a:	4601      	mov	r1, r0
 800928c:	4620      	mov	r0, r4
 800928e:	f000 fcbf 	bl	8009c10 <__pow5mult>
 8009292:	9b07      	ldr	r3, [sp, #28]
 8009294:	2b01      	cmp	r3, #1
 8009296:	4606      	mov	r6, r0
 8009298:	dd7a      	ble.n	8009390 <_dtoa_r+0x8d0>
 800929a:	f04f 0800 	mov.w	r8, #0
 800929e:	6933      	ldr	r3, [r6, #16]
 80092a0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80092a4:	6918      	ldr	r0, [r3, #16]
 80092a6:	f000 fba5 	bl	80099f4 <__hi0bits>
 80092aa:	f1c0 0020 	rsb	r0, r0, #32
 80092ae:	9b06      	ldr	r3, [sp, #24]
 80092b0:	4418      	add	r0, r3
 80092b2:	f010 001f 	ands.w	r0, r0, #31
 80092b6:	f000 8094 	beq.w	80093e2 <_dtoa_r+0x922>
 80092ba:	f1c0 0320 	rsb	r3, r0, #32
 80092be:	2b04      	cmp	r3, #4
 80092c0:	f340 8085 	ble.w	80093ce <_dtoa_r+0x90e>
 80092c4:	9b05      	ldr	r3, [sp, #20]
 80092c6:	f1c0 001c 	rsb	r0, r0, #28
 80092ca:	4403      	add	r3, r0
 80092cc:	9305      	str	r3, [sp, #20]
 80092ce:	9b06      	ldr	r3, [sp, #24]
 80092d0:	4403      	add	r3, r0
 80092d2:	4405      	add	r5, r0
 80092d4:	9306      	str	r3, [sp, #24]
 80092d6:	9b05      	ldr	r3, [sp, #20]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	dd05      	ble.n	80092e8 <_dtoa_r+0x828>
 80092dc:	4651      	mov	r1, sl
 80092de:	461a      	mov	r2, r3
 80092e0:	4620      	mov	r0, r4
 80092e2:	f000 fcef 	bl	8009cc4 <__lshift>
 80092e6:	4682      	mov	sl, r0
 80092e8:	9b06      	ldr	r3, [sp, #24]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	dd05      	ble.n	80092fa <_dtoa_r+0x83a>
 80092ee:	4631      	mov	r1, r6
 80092f0:	461a      	mov	r2, r3
 80092f2:	4620      	mov	r0, r4
 80092f4:	f000 fce6 	bl	8009cc4 <__lshift>
 80092f8:	4606      	mov	r6, r0
 80092fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d072      	beq.n	80093e6 <_dtoa_r+0x926>
 8009300:	4631      	mov	r1, r6
 8009302:	4650      	mov	r0, sl
 8009304:	f000 fd4a 	bl	8009d9c <__mcmp>
 8009308:	2800      	cmp	r0, #0
 800930a:	da6c      	bge.n	80093e6 <_dtoa_r+0x926>
 800930c:	2300      	movs	r3, #0
 800930e:	4651      	mov	r1, sl
 8009310:	220a      	movs	r2, #10
 8009312:	4620      	mov	r0, r4
 8009314:	f000 fb28 	bl	8009968 <__multadd>
 8009318:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800931a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800931e:	4682      	mov	sl, r0
 8009320:	2b00      	cmp	r3, #0
 8009322:	f000 81b0 	beq.w	8009686 <_dtoa_r+0xbc6>
 8009326:	2300      	movs	r3, #0
 8009328:	4639      	mov	r1, r7
 800932a:	220a      	movs	r2, #10
 800932c:	4620      	mov	r0, r4
 800932e:	f000 fb1b 	bl	8009968 <__multadd>
 8009332:	9b01      	ldr	r3, [sp, #4]
 8009334:	2b00      	cmp	r3, #0
 8009336:	4607      	mov	r7, r0
 8009338:	f300 8096 	bgt.w	8009468 <_dtoa_r+0x9a8>
 800933c:	9b07      	ldr	r3, [sp, #28]
 800933e:	2b02      	cmp	r3, #2
 8009340:	dc59      	bgt.n	80093f6 <_dtoa_r+0x936>
 8009342:	e091      	b.n	8009468 <_dtoa_r+0x9a8>
 8009344:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009346:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800934a:	e758      	b.n	80091fe <_dtoa_r+0x73e>
 800934c:	9b04      	ldr	r3, [sp, #16]
 800934e:	1e5e      	subs	r6, r3, #1
 8009350:	9b08      	ldr	r3, [sp, #32]
 8009352:	42b3      	cmp	r3, r6
 8009354:	bfbf      	itttt	lt
 8009356:	9b08      	ldrlt	r3, [sp, #32]
 8009358:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800935a:	9608      	strlt	r6, [sp, #32]
 800935c:	1af3      	sublt	r3, r6, r3
 800935e:	bfb4      	ite	lt
 8009360:	18d2      	addlt	r2, r2, r3
 8009362:	1b9e      	subge	r6, r3, r6
 8009364:	9b04      	ldr	r3, [sp, #16]
 8009366:	bfbc      	itt	lt
 8009368:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800936a:	2600      	movlt	r6, #0
 800936c:	2b00      	cmp	r3, #0
 800936e:	bfb7      	itett	lt
 8009370:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8009374:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009378:	1a9d      	sublt	r5, r3, r2
 800937a:	2300      	movlt	r3, #0
 800937c:	e741      	b.n	8009202 <_dtoa_r+0x742>
 800937e:	9e08      	ldr	r6, [sp, #32]
 8009380:	9d05      	ldr	r5, [sp, #20]
 8009382:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009384:	e748      	b.n	8009218 <_dtoa_r+0x758>
 8009386:	9a08      	ldr	r2, [sp, #32]
 8009388:	e770      	b.n	800926c <_dtoa_r+0x7ac>
 800938a:	9b07      	ldr	r3, [sp, #28]
 800938c:	2b01      	cmp	r3, #1
 800938e:	dc19      	bgt.n	80093c4 <_dtoa_r+0x904>
 8009390:	9b02      	ldr	r3, [sp, #8]
 8009392:	b9bb      	cbnz	r3, 80093c4 <_dtoa_r+0x904>
 8009394:	9b03      	ldr	r3, [sp, #12]
 8009396:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800939a:	b99b      	cbnz	r3, 80093c4 <_dtoa_r+0x904>
 800939c:	9b03      	ldr	r3, [sp, #12]
 800939e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80093a2:	0d1b      	lsrs	r3, r3, #20
 80093a4:	051b      	lsls	r3, r3, #20
 80093a6:	b183      	cbz	r3, 80093ca <_dtoa_r+0x90a>
 80093a8:	9b05      	ldr	r3, [sp, #20]
 80093aa:	3301      	adds	r3, #1
 80093ac:	9305      	str	r3, [sp, #20]
 80093ae:	9b06      	ldr	r3, [sp, #24]
 80093b0:	3301      	adds	r3, #1
 80093b2:	9306      	str	r3, [sp, #24]
 80093b4:	f04f 0801 	mov.w	r8, #1
 80093b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	f47f af6f 	bne.w	800929e <_dtoa_r+0x7de>
 80093c0:	2001      	movs	r0, #1
 80093c2:	e774      	b.n	80092ae <_dtoa_r+0x7ee>
 80093c4:	f04f 0800 	mov.w	r8, #0
 80093c8:	e7f6      	b.n	80093b8 <_dtoa_r+0x8f8>
 80093ca:	4698      	mov	r8, r3
 80093cc:	e7f4      	b.n	80093b8 <_dtoa_r+0x8f8>
 80093ce:	d082      	beq.n	80092d6 <_dtoa_r+0x816>
 80093d0:	9a05      	ldr	r2, [sp, #20]
 80093d2:	331c      	adds	r3, #28
 80093d4:	441a      	add	r2, r3
 80093d6:	9205      	str	r2, [sp, #20]
 80093d8:	9a06      	ldr	r2, [sp, #24]
 80093da:	441a      	add	r2, r3
 80093dc:	441d      	add	r5, r3
 80093de:	9206      	str	r2, [sp, #24]
 80093e0:	e779      	b.n	80092d6 <_dtoa_r+0x816>
 80093e2:	4603      	mov	r3, r0
 80093e4:	e7f4      	b.n	80093d0 <_dtoa_r+0x910>
 80093e6:	9b04      	ldr	r3, [sp, #16]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	dc37      	bgt.n	800945c <_dtoa_r+0x99c>
 80093ec:	9b07      	ldr	r3, [sp, #28]
 80093ee:	2b02      	cmp	r3, #2
 80093f0:	dd34      	ble.n	800945c <_dtoa_r+0x99c>
 80093f2:	9b04      	ldr	r3, [sp, #16]
 80093f4:	9301      	str	r3, [sp, #4]
 80093f6:	9b01      	ldr	r3, [sp, #4]
 80093f8:	b963      	cbnz	r3, 8009414 <_dtoa_r+0x954>
 80093fa:	4631      	mov	r1, r6
 80093fc:	2205      	movs	r2, #5
 80093fe:	4620      	mov	r0, r4
 8009400:	f000 fab2 	bl	8009968 <__multadd>
 8009404:	4601      	mov	r1, r0
 8009406:	4606      	mov	r6, r0
 8009408:	4650      	mov	r0, sl
 800940a:	f000 fcc7 	bl	8009d9c <__mcmp>
 800940e:	2800      	cmp	r0, #0
 8009410:	f73f adbb 	bgt.w	8008f8a <_dtoa_r+0x4ca>
 8009414:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009416:	9d00      	ldr	r5, [sp, #0]
 8009418:	ea6f 0b03 	mvn.w	fp, r3
 800941c:	f04f 0800 	mov.w	r8, #0
 8009420:	4631      	mov	r1, r6
 8009422:	4620      	mov	r0, r4
 8009424:	f000 fa7e 	bl	8009924 <_Bfree>
 8009428:	2f00      	cmp	r7, #0
 800942a:	f43f aeab 	beq.w	8009184 <_dtoa_r+0x6c4>
 800942e:	f1b8 0f00 	cmp.w	r8, #0
 8009432:	d005      	beq.n	8009440 <_dtoa_r+0x980>
 8009434:	45b8      	cmp	r8, r7
 8009436:	d003      	beq.n	8009440 <_dtoa_r+0x980>
 8009438:	4641      	mov	r1, r8
 800943a:	4620      	mov	r0, r4
 800943c:	f000 fa72 	bl	8009924 <_Bfree>
 8009440:	4639      	mov	r1, r7
 8009442:	4620      	mov	r0, r4
 8009444:	f000 fa6e 	bl	8009924 <_Bfree>
 8009448:	e69c      	b.n	8009184 <_dtoa_r+0x6c4>
 800944a:	2600      	movs	r6, #0
 800944c:	4637      	mov	r7, r6
 800944e:	e7e1      	b.n	8009414 <_dtoa_r+0x954>
 8009450:	46bb      	mov	fp, r7
 8009452:	4637      	mov	r7, r6
 8009454:	e599      	b.n	8008f8a <_dtoa_r+0x4ca>
 8009456:	bf00      	nop
 8009458:	40240000 	.word	0x40240000
 800945c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800945e:	2b00      	cmp	r3, #0
 8009460:	f000 80c8 	beq.w	80095f4 <_dtoa_r+0xb34>
 8009464:	9b04      	ldr	r3, [sp, #16]
 8009466:	9301      	str	r3, [sp, #4]
 8009468:	2d00      	cmp	r5, #0
 800946a:	dd05      	ble.n	8009478 <_dtoa_r+0x9b8>
 800946c:	4639      	mov	r1, r7
 800946e:	462a      	mov	r2, r5
 8009470:	4620      	mov	r0, r4
 8009472:	f000 fc27 	bl	8009cc4 <__lshift>
 8009476:	4607      	mov	r7, r0
 8009478:	f1b8 0f00 	cmp.w	r8, #0
 800947c:	d05b      	beq.n	8009536 <_dtoa_r+0xa76>
 800947e:	6879      	ldr	r1, [r7, #4]
 8009480:	4620      	mov	r0, r4
 8009482:	f000 fa0f 	bl	80098a4 <_Balloc>
 8009486:	4605      	mov	r5, r0
 8009488:	b928      	cbnz	r0, 8009496 <_dtoa_r+0x9d6>
 800948a:	4b83      	ldr	r3, [pc, #524]	; (8009698 <_dtoa_r+0xbd8>)
 800948c:	4602      	mov	r2, r0
 800948e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009492:	f7ff bb2e 	b.w	8008af2 <_dtoa_r+0x32>
 8009496:	693a      	ldr	r2, [r7, #16]
 8009498:	3202      	adds	r2, #2
 800949a:	0092      	lsls	r2, r2, #2
 800949c:	f107 010c 	add.w	r1, r7, #12
 80094a0:	300c      	adds	r0, #12
 80094a2:	f7ff fa76 	bl	8008992 <memcpy>
 80094a6:	2201      	movs	r2, #1
 80094a8:	4629      	mov	r1, r5
 80094aa:	4620      	mov	r0, r4
 80094ac:	f000 fc0a 	bl	8009cc4 <__lshift>
 80094b0:	9b00      	ldr	r3, [sp, #0]
 80094b2:	3301      	adds	r3, #1
 80094b4:	9304      	str	r3, [sp, #16]
 80094b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80094ba:	4413      	add	r3, r2
 80094bc:	9308      	str	r3, [sp, #32]
 80094be:	9b02      	ldr	r3, [sp, #8]
 80094c0:	f003 0301 	and.w	r3, r3, #1
 80094c4:	46b8      	mov	r8, r7
 80094c6:	9306      	str	r3, [sp, #24]
 80094c8:	4607      	mov	r7, r0
 80094ca:	9b04      	ldr	r3, [sp, #16]
 80094cc:	4631      	mov	r1, r6
 80094ce:	3b01      	subs	r3, #1
 80094d0:	4650      	mov	r0, sl
 80094d2:	9301      	str	r3, [sp, #4]
 80094d4:	f7ff fa6b 	bl	80089ae <quorem>
 80094d8:	4641      	mov	r1, r8
 80094da:	9002      	str	r0, [sp, #8]
 80094dc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80094e0:	4650      	mov	r0, sl
 80094e2:	f000 fc5b 	bl	8009d9c <__mcmp>
 80094e6:	463a      	mov	r2, r7
 80094e8:	9005      	str	r0, [sp, #20]
 80094ea:	4631      	mov	r1, r6
 80094ec:	4620      	mov	r0, r4
 80094ee:	f000 fc71 	bl	8009dd4 <__mdiff>
 80094f2:	68c2      	ldr	r2, [r0, #12]
 80094f4:	4605      	mov	r5, r0
 80094f6:	bb02      	cbnz	r2, 800953a <_dtoa_r+0xa7a>
 80094f8:	4601      	mov	r1, r0
 80094fa:	4650      	mov	r0, sl
 80094fc:	f000 fc4e 	bl	8009d9c <__mcmp>
 8009500:	4602      	mov	r2, r0
 8009502:	4629      	mov	r1, r5
 8009504:	4620      	mov	r0, r4
 8009506:	9209      	str	r2, [sp, #36]	; 0x24
 8009508:	f000 fa0c 	bl	8009924 <_Bfree>
 800950c:	9b07      	ldr	r3, [sp, #28]
 800950e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009510:	9d04      	ldr	r5, [sp, #16]
 8009512:	ea43 0102 	orr.w	r1, r3, r2
 8009516:	9b06      	ldr	r3, [sp, #24]
 8009518:	4319      	orrs	r1, r3
 800951a:	d110      	bne.n	800953e <_dtoa_r+0xa7e>
 800951c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009520:	d029      	beq.n	8009576 <_dtoa_r+0xab6>
 8009522:	9b05      	ldr	r3, [sp, #20]
 8009524:	2b00      	cmp	r3, #0
 8009526:	dd02      	ble.n	800952e <_dtoa_r+0xa6e>
 8009528:	9b02      	ldr	r3, [sp, #8]
 800952a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800952e:	9b01      	ldr	r3, [sp, #4]
 8009530:	f883 9000 	strb.w	r9, [r3]
 8009534:	e774      	b.n	8009420 <_dtoa_r+0x960>
 8009536:	4638      	mov	r0, r7
 8009538:	e7ba      	b.n	80094b0 <_dtoa_r+0x9f0>
 800953a:	2201      	movs	r2, #1
 800953c:	e7e1      	b.n	8009502 <_dtoa_r+0xa42>
 800953e:	9b05      	ldr	r3, [sp, #20]
 8009540:	2b00      	cmp	r3, #0
 8009542:	db04      	blt.n	800954e <_dtoa_r+0xa8e>
 8009544:	9907      	ldr	r1, [sp, #28]
 8009546:	430b      	orrs	r3, r1
 8009548:	9906      	ldr	r1, [sp, #24]
 800954a:	430b      	orrs	r3, r1
 800954c:	d120      	bne.n	8009590 <_dtoa_r+0xad0>
 800954e:	2a00      	cmp	r2, #0
 8009550:	dded      	ble.n	800952e <_dtoa_r+0xa6e>
 8009552:	4651      	mov	r1, sl
 8009554:	2201      	movs	r2, #1
 8009556:	4620      	mov	r0, r4
 8009558:	f000 fbb4 	bl	8009cc4 <__lshift>
 800955c:	4631      	mov	r1, r6
 800955e:	4682      	mov	sl, r0
 8009560:	f000 fc1c 	bl	8009d9c <__mcmp>
 8009564:	2800      	cmp	r0, #0
 8009566:	dc03      	bgt.n	8009570 <_dtoa_r+0xab0>
 8009568:	d1e1      	bne.n	800952e <_dtoa_r+0xa6e>
 800956a:	f019 0f01 	tst.w	r9, #1
 800956e:	d0de      	beq.n	800952e <_dtoa_r+0xa6e>
 8009570:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009574:	d1d8      	bne.n	8009528 <_dtoa_r+0xa68>
 8009576:	9a01      	ldr	r2, [sp, #4]
 8009578:	2339      	movs	r3, #57	; 0x39
 800957a:	7013      	strb	r3, [r2, #0]
 800957c:	462b      	mov	r3, r5
 800957e:	461d      	mov	r5, r3
 8009580:	3b01      	subs	r3, #1
 8009582:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009586:	2a39      	cmp	r2, #57	; 0x39
 8009588:	d06c      	beq.n	8009664 <_dtoa_r+0xba4>
 800958a:	3201      	adds	r2, #1
 800958c:	701a      	strb	r2, [r3, #0]
 800958e:	e747      	b.n	8009420 <_dtoa_r+0x960>
 8009590:	2a00      	cmp	r2, #0
 8009592:	dd07      	ble.n	80095a4 <_dtoa_r+0xae4>
 8009594:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009598:	d0ed      	beq.n	8009576 <_dtoa_r+0xab6>
 800959a:	9a01      	ldr	r2, [sp, #4]
 800959c:	f109 0301 	add.w	r3, r9, #1
 80095a0:	7013      	strb	r3, [r2, #0]
 80095a2:	e73d      	b.n	8009420 <_dtoa_r+0x960>
 80095a4:	9b04      	ldr	r3, [sp, #16]
 80095a6:	9a08      	ldr	r2, [sp, #32]
 80095a8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d043      	beq.n	8009638 <_dtoa_r+0xb78>
 80095b0:	4651      	mov	r1, sl
 80095b2:	2300      	movs	r3, #0
 80095b4:	220a      	movs	r2, #10
 80095b6:	4620      	mov	r0, r4
 80095b8:	f000 f9d6 	bl	8009968 <__multadd>
 80095bc:	45b8      	cmp	r8, r7
 80095be:	4682      	mov	sl, r0
 80095c0:	f04f 0300 	mov.w	r3, #0
 80095c4:	f04f 020a 	mov.w	r2, #10
 80095c8:	4641      	mov	r1, r8
 80095ca:	4620      	mov	r0, r4
 80095cc:	d107      	bne.n	80095de <_dtoa_r+0xb1e>
 80095ce:	f000 f9cb 	bl	8009968 <__multadd>
 80095d2:	4680      	mov	r8, r0
 80095d4:	4607      	mov	r7, r0
 80095d6:	9b04      	ldr	r3, [sp, #16]
 80095d8:	3301      	adds	r3, #1
 80095da:	9304      	str	r3, [sp, #16]
 80095dc:	e775      	b.n	80094ca <_dtoa_r+0xa0a>
 80095de:	f000 f9c3 	bl	8009968 <__multadd>
 80095e2:	4639      	mov	r1, r7
 80095e4:	4680      	mov	r8, r0
 80095e6:	2300      	movs	r3, #0
 80095e8:	220a      	movs	r2, #10
 80095ea:	4620      	mov	r0, r4
 80095ec:	f000 f9bc 	bl	8009968 <__multadd>
 80095f0:	4607      	mov	r7, r0
 80095f2:	e7f0      	b.n	80095d6 <_dtoa_r+0xb16>
 80095f4:	9b04      	ldr	r3, [sp, #16]
 80095f6:	9301      	str	r3, [sp, #4]
 80095f8:	9d00      	ldr	r5, [sp, #0]
 80095fa:	4631      	mov	r1, r6
 80095fc:	4650      	mov	r0, sl
 80095fe:	f7ff f9d6 	bl	80089ae <quorem>
 8009602:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009606:	9b00      	ldr	r3, [sp, #0]
 8009608:	f805 9b01 	strb.w	r9, [r5], #1
 800960c:	1aea      	subs	r2, r5, r3
 800960e:	9b01      	ldr	r3, [sp, #4]
 8009610:	4293      	cmp	r3, r2
 8009612:	dd07      	ble.n	8009624 <_dtoa_r+0xb64>
 8009614:	4651      	mov	r1, sl
 8009616:	2300      	movs	r3, #0
 8009618:	220a      	movs	r2, #10
 800961a:	4620      	mov	r0, r4
 800961c:	f000 f9a4 	bl	8009968 <__multadd>
 8009620:	4682      	mov	sl, r0
 8009622:	e7ea      	b.n	80095fa <_dtoa_r+0xb3a>
 8009624:	9b01      	ldr	r3, [sp, #4]
 8009626:	2b00      	cmp	r3, #0
 8009628:	bfc8      	it	gt
 800962a:	461d      	movgt	r5, r3
 800962c:	9b00      	ldr	r3, [sp, #0]
 800962e:	bfd8      	it	le
 8009630:	2501      	movle	r5, #1
 8009632:	441d      	add	r5, r3
 8009634:	f04f 0800 	mov.w	r8, #0
 8009638:	4651      	mov	r1, sl
 800963a:	2201      	movs	r2, #1
 800963c:	4620      	mov	r0, r4
 800963e:	f000 fb41 	bl	8009cc4 <__lshift>
 8009642:	4631      	mov	r1, r6
 8009644:	4682      	mov	sl, r0
 8009646:	f000 fba9 	bl	8009d9c <__mcmp>
 800964a:	2800      	cmp	r0, #0
 800964c:	dc96      	bgt.n	800957c <_dtoa_r+0xabc>
 800964e:	d102      	bne.n	8009656 <_dtoa_r+0xb96>
 8009650:	f019 0f01 	tst.w	r9, #1
 8009654:	d192      	bne.n	800957c <_dtoa_r+0xabc>
 8009656:	462b      	mov	r3, r5
 8009658:	461d      	mov	r5, r3
 800965a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800965e:	2a30      	cmp	r2, #48	; 0x30
 8009660:	d0fa      	beq.n	8009658 <_dtoa_r+0xb98>
 8009662:	e6dd      	b.n	8009420 <_dtoa_r+0x960>
 8009664:	9a00      	ldr	r2, [sp, #0]
 8009666:	429a      	cmp	r2, r3
 8009668:	d189      	bne.n	800957e <_dtoa_r+0xabe>
 800966a:	f10b 0b01 	add.w	fp, fp, #1
 800966e:	2331      	movs	r3, #49	; 0x31
 8009670:	e796      	b.n	80095a0 <_dtoa_r+0xae0>
 8009672:	4b0a      	ldr	r3, [pc, #40]	; (800969c <_dtoa_r+0xbdc>)
 8009674:	f7ff ba99 	b.w	8008baa <_dtoa_r+0xea>
 8009678:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800967a:	2b00      	cmp	r3, #0
 800967c:	f47f aa6d 	bne.w	8008b5a <_dtoa_r+0x9a>
 8009680:	4b07      	ldr	r3, [pc, #28]	; (80096a0 <_dtoa_r+0xbe0>)
 8009682:	f7ff ba92 	b.w	8008baa <_dtoa_r+0xea>
 8009686:	9b01      	ldr	r3, [sp, #4]
 8009688:	2b00      	cmp	r3, #0
 800968a:	dcb5      	bgt.n	80095f8 <_dtoa_r+0xb38>
 800968c:	9b07      	ldr	r3, [sp, #28]
 800968e:	2b02      	cmp	r3, #2
 8009690:	f73f aeb1 	bgt.w	80093f6 <_dtoa_r+0x936>
 8009694:	e7b0      	b.n	80095f8 <_dtoa_r+0xb38>
 8009696:	bf00      	nop
 8009698:	0800a8b8 	.word	0x0800a8b8
 800969c:	0800a818 	.word	0x0800a818
 80096a0:	0800a83c 	.word	0x0800a83c

080096a4 <_free_r>:
 80096a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80096a6:	2900      	cmp	r1, #0
 80096a8:	d044      	beq.n	8009734 <_free_r+0x90>
 80096aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096ae:	9001      	str	r0, [sp, #4]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	f1a1 0404 	sub.w	r4, r1, #4
 80096b6:	bfb8      	it	lt
 80096b8:	18e4      	addlt	r4, r4, r3
 80096ba:	f000 f8e7 	bl	800988c <__malloc_lock>
 80096be:	4a1e      	ldr	r2, [pc, #120]	; (8009738 <_free_r+0x94>)
 80096c0:	9801      	ldr	r0, [sp, #4]
 80096c2:	6813      	ldr	r3, [r2, #0]
 80096c4:	b933      	cbnz	r3, 80096d4 <_free_r+0x30>
 80096c6:	6063      	str	r3, [r4, #4]
 80096c8:	6014      	str	r4, [r2, #0]
 80096ca:	b003      	add	sp, #12
 80096cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80096d0:	f000 b8e2 	b.w	8009898 <__malloc_unlock>
 80096d4:	42a3      	cmp	r3, r4
 80096d6:	d908      	bls.n	80096ea <_free_r+0x46>
 80096d8:	6825      	ldr	r5, [r4, #0]
 80096da:	1961      	adds	r1, r4, r5
 80096dc:	428b      	cmp	r3, r1
 80096de:	bf01      	itttt	eq
 80096e0:	6819      	ldreq	r1, [r3, #0]
 80096e2:	685b      	ldreq	r3, [r3, #4]
 80096e4:	1949      	addeq	r1, r1, r5
 80096e6:	6021      	streq	r1, [r4, #0]
 80096e8:	e7ed      	b.n	80096c6 <_free_r+0x22>
 80096ea:	461a      	mov	r2, r3
 80096ec:	685b      	ldr	r3, [r3, #4]
 80096ee:	b10b      	cbz	r3, 80096f4 <_free_r+0x50>
 80096f0:	42a3      	cmp	r3, r4
 80096f2:	d9fa      	bls.n	80096ea <_free_r+0x46>
 80096f4:	6811      	ldr	r1, [r2, #0]
 80096f6:	1855      	adds	r5, r2, r1
 80096f8:	42a5      	cmp	r5, r4
 80096fa:	d10b      	bne.n	8009714 <_free_r+0x70>
 80096fc:	6824      	ldr	r4, [r4, #0]
 80096fe:	4421      	add	r1, r4
 8009700:	1854      	adds	r4, r2, r1
 8009702:	42a3      	cmp	r3, r4
 8009704:	6011      	str	r1, [r2, #0]
 8009706:	d1e0      	bne.n	80096ca <_free_r+0x26>
 8009708:	681c      	ldr	r4, [r3, #0]
 800970a:	685b      	ldr	r3, [r3, #4]
 800970c:	6053      	str	r3, [r2, #4]
 800970e:	440c      	add	r4, r1
 8009710:	6014      	str	r4, [r2, #0]
 8009712:	e7da      	b.n	80096ca <_free_r+0x26>
 8009714:	d902      	bls.n	800971c <_free_r+0x78>
 8009716:	230c      	movs	r3, #12
 8009718:	6003      	str	r3, [r0, #0]
 800971a:	e7d6      	b.n	80096ca <_free_r+0x26>
 800971c:	6825      	ldr	r5, [r4, #0]
 800971e:	1961      	adds	r1, r4, r5
 8009720:	428b      	cmp	r3, r1
 8009722:	bf04      	itt	eq
 8009724:	6819      	ldreq	r1, [r3, #0]
 8009726:	685b      	ldreq	r3, [r3, #4]
 8009728:	6063      	str	r3, [r4, #4]
 800972a:	bf04      	itt	eq
 800972c:	1949      	addeq	r1, r1, r5
 800972e:	6021      	streq	r1, [r4, #0]
 8009730:	6054      	str	r4, [r2, #4]
 8009732:	e7ca      	b.n	80096ca <_free_r+0x26>
 8009734:	b003      	add	sp, #12
 8009736:	bd30      	pop	{r4, r5, pc}
 8009738:	20002f78 	.word	0x20002f78

0800973c <malloc>:
 800973c:	4b02      	ldr	r3, [pc, #8]	; (8009748 <malloc+0xc>)
 800973e:	4601      	mov	r1, r0
 8009740:	6818      	ldr	r0, [r3, #0]
 8009742:	f000 b823 	b.w	800978c <_malloc_r>
 8009746:	bf00      	nop
 8009748:	20000068 	.word	0x20000068

0800974c <sbrk_aligned>:
 800974c:	b570      	push	{r4, r5, r6, lr}
 800974e:	4e0e      	ldr	r6, [pc, #56]	; (8009788 <sbrk_aligned+0x3c>)
 8009750:	460c      	mov	r4, r1
 8009752:	6831      	ldr	r1, [r6, #0]
 8009754:	4605      	mov	r5, r0
 8009756:	b911      	cbnz	r1, 800975e <sbrk_aligned+0x12>
 8009758:	f000 fcce 	bl	800a0f8 <_sbrk_r>
 800975c:	6030      	str	r0, [r6, #0]
 800975e:	4621      	mov	r1, r4
 8009760:	4628      	mov	r0, r5
 8009762:	f000 fcc9 	bl	800a0f8 <_sbrk_r>
 8009766:	1c43      	adds	r3, r0, #1
 8009768:	d00a      	beq.n	8009780 <sbrk_aligned+0x34>
 800976a:	1cc4      	adds	r4, r0, #3
 800976c:	f024 0403 	bic.w	r4, r4, #3
 8009770:	42a0      	cmp	r0, r4
 8009772:	d007      	beq.n	8009784 <sbrk_aligned+0x38>
 8009774:	1a21      	subs	r1, r4, r0
 8009776:	4628      	mov	r0, r5
 8009778:	f000 fcbe 	bl	800a0f8 <_sbrk_r>
 800977c:	3001      	adds	r0, #1
 800977e:	d101      	bne.n	8009784 <sbrk_aligned+0x38>
 8009780:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009784:	4620      	mov	r0, r4
 8009786:	bd70      	pop	{r4, r5, r6, pc}
 8009788:	20002f7c 	.word	0x20002f7c

0800978c <_malloc_r>:
 800978c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009790:	1ccd      	adds	r5, r1, #3
 8009792:	f025 0503 	bic.w	r5, r5, #3
 8009796:	3508      	adds	r5, #8
 8009798:	2d0c      	cmp	r5, #12
 800979a:	bf38      	it	cc
 800979c:	250c      	movcc	r5, #12
 800979e:	2d00      	cmp	r5, #0
 80097a0:	4607      	mov	r7, r0
 80097a2:	db01      	blt.n	80097a8 <_malloc_r+0x1c>
 80097a4:	42a9      	cmp	r1, r5
 80097a6:	d905      	bls.n	80097b4 <_malloc_r+0x28>
 80097a8:	230c      	movs	r3, #12
 80097aa:	603b      	str	r3, [r7, #0]
 80097ac:	2600      	movs	r6, #0
 80097ae:	4630      	mov	r0, r6
 80097b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097b4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009888 <_malloc_r+0xfc>
 80097b8:	f000 f868 	bl	800988c <__malloc_lock>
 80097bc:	f8d8 3000 	ldr.w	r3, [r8]
 80097c0:	461c      	mov	r4, r3
 80097c2:	bb5c      	cbnz	r4, 800981c <_malloc_r+0x90>
 80097c4:	4629      	mov	r1, r5
 80097c6:	4638      	mov	r0, r7
 80097c8:	f7ff ffc0 	bl	800974c <sbrk_aligned>
 80097cc:	1c43      	adds	r3, r0, #1
 80097ce:	4604      	mov	r4, r0
 80097d0:	d155      	bne.n	800987e <_malloc_r+0xf2>
 80097d2:	f8d8 4000 	ldr.w	r4, [r8]
 80097d6:	4626      	mov	r6, r4
 80097d8:	2e00      	cmp	r6, #0
 80097da:	d145      	bne.n	8009868 <_malloc_r+0xdc>
 80097dc:	2c00      	cmp	r4, #0
 80097de:	d048      	beq.n	8009872 <_malloc_r+0xe6>
 80097e0:	6823      	ldr	r3, [r4, #0]
 80097e2:	4631      	mov	r1, r6
 80097e4:	4638      	mov	r0, r7
 80097e6:	eb04 0903 	add.w	r9, r4, r3
 80097ea:	f000 fc85 	bl	800a0f8 <_sbrk_r>
 80097ee:	4581      	cmp	r9, r0
 80097f0:	d13f      	bne.n	8009872 <_malloc_r+0xe6>
 80097f2:	6821      	ldr	r1, [r4, #0]
 80097f4:	1a6d      	subs	r5, r5, r1
 80097f6:	4629      	mov	r1, r5
 80097f8:	4638      	mov	r0, r7
 80097fa:	f7ff ffa7 	bl	800974c <sbrk_aligned>
 80097fe:	3001      	adds	r0, #1
 8009800:	d037      	beq.n	8009872 <_malloc_r+0xe6>
 8009802:	6823      	ldr	r3, [r4, #0]
 8009804:	442b      	add	r3, r5
 8009806:	6023      	str	r3, [r4, #0]
 8009808:	f8d8 3000 	ldr.w	r3, [r8]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d038      	beq.n	8009882 <_malloc_r+0xf6>
 8009810:	685a      	ldr	r2, [r3, #4]
 8009812:	42a2      	cmp	r2, r4
 8009814:	d12b      	bne.n	800986e <_malloc_r+0xe2>
 8009816:	2200      	movs	r2, #0
 8009818:	605a      	str	r2, [r3, #4]
 800981a:	e00f      	b.n	800983c <_malloc_r+0xb0>
 800981c:	6822      	ldr	r2, [r4, #0]
 800981e:	1b52      	subs	r2, r2, r5
 8009820:	d41f      	bmi.n	8009862 <_malloc_r+0xd6>
 8009822:	2a0b      	cmp	r2, #11
 8009824:	d917      	bls.n	8009856 <_malloc_r+0xca>
 8009826:	1961      	adds	r1, r4, r5
 8009828:	42a3      	cmp	r3, r4
 800982a:	6025      	str	r5, [r4, #0]
 800982c:	bf18      	it	ne
 800982e:	6059      	strne	r1, [r3, #4]
 8009830:	6863      	ldr	r3, [r4, #4]
 8009832:	bf08      	it	eq
 8009834:	f8c8 1000 	streq.w	r1, [r8]
 8009838:	5162      	str	r2, [r4, r5]
 800983a:	604b      	str	r3, [r1, #4]
 800983c:	4638      	mov	r0, r7
 800983e:	f104 060b 	add.w	r6, r4, #11
 8009842:	f000 f829 	bl	8009898 <__malloc_unlock>
 8009846:	f026 0607 	bic.w	r6, r6, #7
 800984a:	1d23      	adds	r3, r4, #4
 800984c:	1af2      	subs	r2, r6, r3
 800984e:	d0ae      	beq.n	80097ae <_malloc_r+0x22>
 8009850:	1b9b      	subs	r3, r3, r6
 8009852:	50a3      	str	r3, [r4, r2]
 8009854:	e7ab      	b.n	80097ae <_malloc_r+0x22>
 8009856:	42a3      	cmp	r3, r4
 8009858:	6862      	ldr	r2, [r4, #4]
 800985a:	d1dd      	bne.n	8009818 <_malloc_r+0x8c>
 800985c:	f8c8 2000 	str.w	r2, [r8]
 8009860:	e7ec      	b.n	800983c <_malloc_r+0xb0>
 8009862:	4623      	mov	r3, r4
 8009864:	6864      	ldr	r4, [r4, #4]
 8009866:	e7ac      	b.n	80097c2 <_malloc_r+0x36>
 8009868:	4634      	mov	r4, r6
 800986a:	6876      	ldr	r6, [r6, #4]
 800986c:	e7b4      	b.n	80097d8 <_malloc_r+0x4c>
 800986e:	4613      	mov	r3, r2
 8009870:	e7cc      	b.n	800980c <_malloc_r+0x80>
 8009872:	230c      	movs	r3, #12
 8009874:	603b      	str	r3, [r7, #0]
 8009876:	4638      	mov	r0, r7
 8009878:	f000 f80e 	bl	8009898 <__malloc_unlock>
 800987c:	e797      	b.n	80097ae <_malloc_r+0x22>
 800987e:	6025      	str	r5, [r4, #0]
 8009880:	e7dc      	b.n	800983c <_malloc_r+0xb0>
 8009882:	605b      	str	r3, [r3, #4]
 8009884:	deff      	udf	#255	; 0xff
 8009886:	bf00      	nop
 8009888:	20002f78 	.word	0x20002f78

0800988c <__malloc_lock>:
 800988c:	4801      	ldr	r0, [pc, #4]	; (8009894 <__malloc_lock+0x8>)
 800988e:	f7ff b87e 	b.w	800898e <__retarget_lock_acquire_recursive>
 8009892:	bf00      	nop
 8009894:	20002f74 	.word	0x20002f74

08009898 <__malloc_unlock>:
 8009898:	4801      	ldr	r0, [pc, #4]	; (80098a0 <__malloc_unlock+0x8>)
 800989a:	f7ff b879 	b.w	8008990 <__retarget_lock_release_recursive>
 800989e:	bf00      	nop
 80098a0:	20002f74 	.word	0x20002f74

080098a4 <_Balloc>:
 80098a4:	b570      	push	{r4, r5, r6, lr}
 80098a6:	69c6      	ldr	r6, [r0, #28]
 80098a8:	4604      	mov	r4, r0
 80098aa:	460d      	mov	r5, r1
 80098ac:	b976      	cbnz	r6, 80098cc <_Balloc+0x28>
 80098ae:	2010      	movs	r0, #16
 80098b0:	f7ff ff44 	bl	800973c <malloc>
 80098b4:	4602      	mov	r2, r0
 80098b6:	61e0      	str	r0, [r4, #28]
 80098b8:	b920      	cbnz	r0, 80098c4 <_Balloc+0x20>
 80098ba:	4b18      	ldr	r3, [pc, #96]	; (800991c <_Balloc+0x78>)
 80098bc:	4818      	ldr	r0, [pc, #96]	; (8009920 <_Balloc+0x7c>)
 80098be:	216b      	movs	r1, #107	; 0x6b
 80098c0:	f000 fc2a 	bl	800a118 <__assert_func>
 80098c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80098c8:	6006      	str	r6, [r0, #0]
 80098ca:	60c6      	str	r6, [r0, #12]
 80098cc:	69e6      	ldr	r6, [r4, #28]
 80098ce:	68f3      	ldr	r3, [r6, #12]
 80098d0:	b183      	cbz	r3, 80098f4 <_Balloc+0x50>
 80098d2:	69e3      	ldr	r3, [r4, #28]
 80098d4:	68db      	ldr	r3, [r3, #12]
 80098d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80098da:	b9b8      	cbnz	r0, 800990c <_Balloc+0x68>
 80098dc:	2101      	movs	r1, #1
 80098de:	fa01 f605 	lsl.w	r6, r1, r5
 80098e2:	1d72      	adds	r2, r6, #5
 80098e4:	0092      	lsls	r2, r2, #2
 80098e6:	4620      	mov	r0, r4
 80098e8:	f000 fc34 	bl	800a154 <_calloc_r>
 80098ec:	b160      	cbz	r0, 8009908 <_Balloc+0x64>
 80098ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80098f2:	e00e      	b.n	8009912 <_Balloc+0x6e>
 80098f4:	2221      	movs	r2, #33	; 0x21
 80098f6:	2104      	movs	r1, #4
 80098f8:	4620      	mov	r0, r4
 80098fa:	f000 fc2b 	bl	800a154 <_calloc_r>
 80098fe:	69e3      	ldr	r3, [r4, #28]
 8009900:	60f0      	str	r0, [r6, #12]
 8009902:	68db      	ldr	r3, [r3, #12]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d1e4      	bne.n	80098d2 <_Balloc+0x2e>
 8009908:	2000      	movs	r0, #0
 800990a:	bd70      	pop	{r4, r5, r6, pc}
 800990c:	6802      	ldr	r2, [r0, #0]
 800990e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009912:	2300      	movs	r3, #0
 8009914:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009918:	e7f7      	b.n	800990a <_Balloc+0x66>
 800991a:	bf00      	nop
 800991c:	0800a849 	.word	0x0800a849
 8009920:	0800a8c9 	.word	0x0800a8c9

08009924 <_Bfree>:
 8009924:	b570      	push	{r4, r5, r6, lr}
 8009926:	69c6      	ldr	r6, [r0, #28]
 8009928:	4605      	mov	r5, r0
 800992a:	460c      	mov	r4, r1
 800992c:	b976      	cbnz	r6, 800994c <_Bfree+0x28>
 800992e:	2010      	movs	r0, #16
 8009930:	f7ff ff04 	bl	800973c <malloc>
 8009934:	4602      	mov	r2, r0
 8009936:	61e8      	str	r0, [r5, #28]
 8009938:	b920      	cbnz	r0, 8009944 <_Bfree+0x20>
 800993a:	4b09      	ldr	r3, [pc, #36]	; (8009960 <_Bfree+0x3c>)
 800993c:	4809      	ldr	r0, [pc, #36]	; (8009964 <_Bfree+0x40>)
 800993e:	218f      	movs	r1, #143	; 0x8f
 8009940:	f000 fbea 	bl	800a118 <__assert_func>
 8009944:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009948:	6006      	str	r6, [r0, #0]
 800994a:	60c6      	str	r6, [r0, #12]
 800994c:	b13c      	cbz	r4, 800995e <_Bfree+0x3a>
 800994e:	69eb      	ldr	r3, [r5, #28]
 8009950:	6862      	ldr	r2, [r4, #4]
 8009952:	68db      	ldr	r3, [r3, #12]
 8009954:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009958:	6021      	str	r1, [r4, #0]
 800995a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800995e:	bd70      	pop	{r4, r5, r6, pc}
 8009960:	0800a849 	.word	0x0800a849
 8009964:	0800a8c9 	.word	0x0800a8c9

08009968 <__multadd>:
 8009968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800996c:	690d      	ldr	r5, [r1, #16]
 800996e:	4607      	mov	r7, r0
 8009970:	460c      	mov	r4, r1
 8009972:	461e      	mov	r6, r3
 8009974:	f101 0c14 	add.w	ip, r1, #20
 8009978:	2000      	movs	r0, #0
 800997a:	f8dc 3000 	ldr.w	r3, [ip]
 800997e:	b299      	uxth	r1, r3
 8009980:	fb02 6101 	mla	r1, r2, r1, r6
 8009984:	0c1e      	lsrs	r6, r3, #16
 8009986:	0c0b      	lsrs	r3, r1, #16
 8009988:	fb02 3306 	mla	r3, r2, r6, r3
 800998c:	b289      	uxth	r1, r1
 800998e:	3001      	adds	r0, #1
 8009990:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009994:	4285      	cmp	r5, r0
 8009996:	f84c 1b04 	str.w	r1, [ip], #4
 800999a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800999e:	dcec      	bgt.n	800997a <__multadd+0x12>
 80099a0:	b30e      	cbz	r6, 80099e6 <__multadd+0x7e>
 80099a2:	68a3      	ldr	r3, [r4, #8]
 80099a4:	42ab      	cmp	r3, r5
 80099a6:	dc19      	bgt.n	80099dc <__multadd+0x74>
 80099a8:	6861      	ldr	r1, [r4, #4]
 80099aa:	4638      	mov	r0, r7
 80099ac:	3101      	adds	r1, #1
 80099ae:	f7ff ff79 	bl	80098a4 <_Balloc>
 80099b2:	4680      	mov	r8, r0
 80099b4:	b928      	cbnz	r0, 80099c2 <__multadd+0x5a>
 80099b6:	4602      	mov	r2, r0
 80099b8:	4b0c      	ldr	r3, [pc, #48]	; (80099ec <__multadd+0x84>)
 80099ba:	480d      	ldr	r0, [pc, #52]	; (80099f0 <__multadd+0x88>)
 80099bc:	21ba      	movs	r1, #186	; 0xba
 80099be:	f000 fbab 	bl	800a118 <__assert_func>
 80099c2:	6922      	ldr	r2, [r4, #16]
 80099c4:	3202      	adds	r2, #2
 80099c6:	f104 010c 	add.w	r1, r4, #12
 80099ca:	0092      	lsls	r2, r2, #2
 80099cc:	300c      	adds	r0, #12
 80099ce:	f7fe ffe0 	bl	8008992 <memcpy>
 80099d2:	4621      	mov	r1, r4
 80099d4:	4638      	mov	r0, r7
 80099d6:	f7ff ffa5 	bl	8009924 <_Bfree>
 80099da:	4644      	mov	r4, r8
 80099dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80099e0:	3501      	adds	r5, #1
 80099e2:	615e      	str	r6, [r3, #20]
 80099e4:	6125      	str	r5, [r4, #16]
 80099e6:	4620      	mov	r0, r4
 80099e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099ec:	0800a8b8 	.word	0x0800a8b8
 80099f0:	0800a8c9 	.word	0x0800a8c9

080099f4 <__hi0bits>:
 80099f4:	0c03      	lsrs	r3, r0, #16
 80099f6:	041b      	lsls	r3, r3, #16
 80099f8:	b9d3      	cbnz	r3, 8009a30 <__hi0bits+0x3c>
 80099fa:	0400      	lsls	r0, r0, #16
 80099fc:	2310      	movs	r3, #16
 80099fe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009a02:	bf04      	itt	eq
 8009a04:	0200      	lsleq	r0, r0, #8
 8009a06:	3308      	addeq	r3, #8
 8009a08:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009a0c:	bf04      	itt	eq
 8009a0e:	0100      	lsleq	r0, r0, #4
 8009a10:	3304      	addeq	r3, #4
 8009a12:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009a16:	bf04      	itt	eq
 8009a18:	0080      	lsleq	r0, r0, #2
 8009a1a:	3302      	addeq	r3, #2
 8009a1c:	2800      	cmp	r0, #0
 8009a1e:	db05      	blt.n	8009a2c <__hi0bits+0x38>
 8009a20:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009a24:	f103 0301 	add.w	r3, r3, #1
 8009a28:	bf08      	it	eq
 8009a2a:	2320      	moveq	r3, #32
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	4770      	bx	lr
 8009a30:	2300      	movs	r3, #0
 8009a32:	e7e4      	b.n	80099fe <__hi0bits+0xa>

08009a34 <__lo0bits>:
 8009a34:	6803      	ldr	r3, [r0, #0]
 8009a36:	f013 0207 	ands.w	r2, r3, #7
 8009a3a:	d00c      	beq.n	8009a56 <__lo0bits+0x22>
 8009a3c:	07d9      	lsls	r1, r3, #31
 8009a3e:	d422      	bmi.n	8009a86 <__lo0bits+0x52>
 8009a40:	079a      	lsls	r2, r3, #30
 8009a42:	bf49      	itett	mi
 8009a44:	085b      	lsrmi	r3, r3, #1
 8009a46:	089b      	lsrpl	r3, r3, #2
 8009a48:	6003      	strmi	r3, [r0, #0]
 8009a4a:	2201      	movmi	r2, #1
 8009a4c:	bf5c      	itt	pl
 8009a4e:	6003      	strpl	r3, [r0, #0]
 8009a50:	2202      	movpl	r2, #2
 8009a52:	4610      	mov	r0, r2
 8009a54:	4770      	bx	lr
 8009a56:	b299      	uxth	r1, r3
 8009a58:	b909      	cbnz	r1, 8009a5e <__lo0bits+0x2a>
 8009a5a:	0c1b      	lsrs	r3, r3, #16
 8009a5c:	2210      	movs	r2, #16
 8009a5e:	b2d9      	uxtb	r1, r3
 8009a60:	b909      	cbnz	r1, 8009a66 <__lo0bits+0x32>
 8009a62:	3208      	adds	r2, #8
 8009a64:	0a1b      	lsrs	r3, r3, #8
 8009a66:	0719      	lsls	r1, r3, #28
 8009a68:	bf04      	itt	eq
 8009a6a:	091b      	lsreq	r3, r3, #4
 8009a6c:	3204      	addeq	r2, #4
 8009a6e:	0799      	lsls	r1, r3, #30
 8009a70:	bf04      	itt	eq
 8009a72:	089b      	lsreq	r3, r3, #2
 8009a74:	3202      	addeq	r2, #2
 8009a76:	07d9      	lsls	r1, r3, #31
 8009a78:	d403      	bmi.n	8009a82 <__lo0bits+0x4e>
 8009a7a:	085b      	lsrs	r3, r3, #1
 8009a7c:	f102 0201 	add.w	r2, r2, #1
 8009a80:	d003      	beq.n	8009a8a <__lo0bits+0x56>
 8009a82:	6003      	str	r3, [r0, #0]
 8009a84:	e7e5      	b.n	8009a52 <__lo0bits+0x1e>
 8009a86:	2200      	movs	r2, #0
 8009a88:	e7e3      	b.n	8009a52 <__lo0bits+0x1e>
 8009a8a:	2220      	movs	r2, #32
 8009a8c:	e7e1      	b.n	8009a52 <__lo0bits+0x1e>
	...

08009a90 <__i2b>:
 8009a90:	b510      	push	{r4, lr}
 8009a92:	460c      	mov	r4, r1
 8009a94:	2101      	movs	r1, #1
 8009a96:	f7ff ff05 	bl	80098a4 <_Balloc>
 8009a9a:	4602      	mov	r2, r0
 8009a9c:	b928      	cbnz	r0, 8009aaa <__i2b+0x1a>
 8009a9e:	4b05      	ldr	r3, [pc, #20]	; (8009ab4 <__i2b+0x24>)
 8009aa0:	4805      	ldr	r0, [pc, #20]	; (8009ab8 <__i2b+0x28>)
 8009aa2:	f240 1145 	movw	r1, #325	; 0x145
 8009aa6:	f000 fb37 	bl	800a118 <__assert_func>
 8009aaa:	2301      	movs	r3, #1
 8009aac:	6144      	str	r4, [r0, #20]
 8009aae:	6103      	str	r3, [r0, #16]
 8009ab0:	bd10      	pop	{r4, pc}
 8009ab2:	bf00      	nop
 8009ab4:	0800a8b8 	.word	0x0800a8b8
 8009ab8:	0800a8c9 	.word	0x0800a8c9

08009abc <__multiply>:
 8009abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ac0:	4691      	mov	r9, r2
 8009ac2:	690a      	ldr	r2, [r1, #16]
 8009ac4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009ac8:	429a      	cmp	r2, r3
 8009aca:	bfb8      	it	lt
 8009acc:	460b      	movlt	r3, r1
 8009ace:	460c      	mov	r4, r1
 8009ad0:	bfbc      	itt	lt
 8009ad2:	464c      	movlt	r4, r9
 8009ad4:	4699      	movlt	r9, r3
 8009ad6:	6927      	ldr	r7, [r4, #16]
 8009ad8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009adc:	68a3      	ldr	r3, [r4, #8]
 8009ade:	6861      	ldr	r1, [r4, #4]
 8009ae0:	eb07 060a 	add.w	r6, r7, sl
 8009ae4:	42b3      	cmp	r3, r6
 8009ae6:	b085      	sub	sp, #20
 8009ae8:	bfb8      	it	lt
 8009aea:	3101      	addlt	r1, #1
 8009aec:	f7ff feda 	bl	80098a4 <_Balloc>
 8009af0:	b930      	cbnz	r0, 8009b00 <__multiply+0x44>
 8009af2:	4602      	mov	r2, r0
 8009af4:	4b44      	ldr	r3, [pc, #272]	; (8009c08 <__multiply+0x14c>)
 8009af6:	4845      	ldr	r0, [pc, #276]	; (8009c0c <__multiply+0x150>)
 8009af8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009afc:	f000 fb0c 	bl	800a118 <__assert_func>
 8009b00:	f100 0514 	add.w	r5, r0, #20
 8009b04:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009b08:	462b      	mov	r3, r5
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	4543      	cmp	r3, r8
 8009b0e:	d321      	bcc.n	8009b54 <__multiply+0x98>
 8009b10:	f104 0314 	add.w	r3, r4, #20
 8009b14:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009b18:	f109 0314 	add.w	r3, r9, #20
 8009b1c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009b20:	9202      	str	r2, [sp, #8]
 8009b22:	1b3a      	subs	r2, r7, r4
 8009b24:	3a15      	subs	r2, #21
 8009b26:	f022 0203 	bic.w	r2, r2, #3
 8009b2a:	3204      	adds	r2, #4
 8009b2c:	f104 0115 	add.w	r1, r4, #21
 8009b30:	428f      	cmp	r7, r1
 8009b32:	bf38      	it	cc
 8009b34:	2204      	movcc	r2, #4
 8009b36:	9201      	str	r2, [sp, #4]
 8009b38:	9a02      	ldr	r2, [sp, #8]
 8009b3a:	9303      	str	r3, [sp, #12]
 8009b3c:	429a      	cmp	r2, r3
 8009b3e:	d80c      	bhi.n	8009b5a <__multiply+0x9e>
 8009b40:	2e00      	cmp	r6, #0
 8009b42:	dd03      	ble.n	8009b4c <__multiply+0x90>
 8009b44:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d05b      	beq.n	8009c04 <__multiply+0x148>
 8009b4c:	6106      	str	r6, [r0, #16]
 8009b4e:	b005      	add	sp, #20
 8009b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b54:	f843 2b04 	str.w	r2, [r3], #4
 8009b58:	e7d8      	b.n	8009b0c <__multiply+0x50>
 8009b5a:	f8b3 a000 	ldrh.w	sl, [r3]
 8009b5e:	f1ba 0f00 	cmp.w	sl, #0
 8009b62:	d024      	beq.n	8009bae <__multiply+0xf2>
 8009b64:	f104 0e14 	add.w	lr, r4, #20
 8009b68:	46a9      	mov	r9, r5
 8009b6a:	f04f 0c00 	mov.w	ip, #0
 8009b6e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009b72:	f8d9 1000 	ldr.w	r1, [r9]
 8009b76:	fa1f fb82 	uxth.w	fp, r2
 8009b7a:	b289      	uxth	r1, r1
 8009b7c:	fb0a 110b 	mla	r1, sl, fp, r1
 8009b80:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009b84:	f8d9 2000 	ldr.w	r2, [r9]
 8009b88:	4461      	add	r1, ip
 8009b8a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009b8e:	fb0a c20b 	mla	r2, sl, fp, ip
 8009b92:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009b96:	b289      	uxth	r1, r1
 8009b98:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009b9c:	4577      	cmp	r7, lr
 8009b9e:	f849 1b04 	str.w	r1, [r9], #4
 8009ba2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009ba6:	d8e2      	bhi.n	8009b6e <__multiply+0xb2>
 8009ba8:	9a01      	ldr	r2, [sp, #4]
 8009baa:	f845 c002 	str.w	ip, [r5, r2]
 8009bae:	9a03      	ldr	r2, [sp, #12]
 8009bb0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009bb4:	3304      	adds	r3, #4
 8009bb6:	f1b9 0f00 	cmp.w	r9, #0
 8009bba:	d021      	beq.n	8009c00 <__multiply+0x144>
 8009bbc:	6829      	ldr	r1, [r5, #0]
 8009bbe:	f104 0c14 	add.w	ip, r4, #20
 8009bc2:	46ae      	mov	lr, r5
 8009bc4:	f04f 0a00 	mov.w	sl, #0
 8009bc8:	f8bc b000 	ldrh.w	fp, [ip]
 8009bcc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009bd0:	fb09 220b 	mla	r2, r9, fp, r2
 8009bd4:	4452      	add	r2, sl
 8009bd6:	b289      	uxth	r1, r1
 8009bd8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009bdc:	f84e 1b04 	str.w	r1, [lr], #4
 8009be0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009be4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009be8:	f8be 1000 	ldrh.w	r1, [lr]
 8009bec:	fb09 110a 	mla	r1, r9, sl, r1
 8009bf0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009bf4:	4567      	cmp	r7, ip
 8009bf6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009bfa:	d8e5      	bhi.n	8009bc8 <__multiply+0x10c>
 8009bfc:	9a01      	ldr	r2, [sp, #4]
 8009bfe:	50a9      	str	r1, [r5, r2]
 8009c00:	3504      	adds	r5, #4
 8009c02:	e799      	b.n	8009b38 <__multiply+0x7c>
 8009c04:	3e01      	subs	r6, #1
 8009c06:	e79b      	b.n	8009b40 <__multiply+0x84>
 8009c08:	0800a8b8 	.word	0x0800a8b8
 8009c0c:	0800a8c9 	.word	0x0800a8c9

08009c10 <__pow5mult>:
 8009c10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c14:	4615      	mov	r5, r2
 8009c16:	f012 0203 	ands.w	r2, r2, #3
 8009c1a:	4606      	mov	r6, r0
 8009c1c:	460f      	mov	r7, r1
 8009c1e:	d007      	beq.n	8009c30 <__pow5mult+0x20>
 8009c20:	4c25      	ldr	r4, [pc, #148]	; (8009cb8 <__pow5mult+0xa8>)
 8009c22:	3a01      	subs	r2, #1
 8009c24:	2300      	movs	r3, #0
 8009c26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009c2a:	f7ff fe9d 	bl	8009968 <__multadd>
 8009c2e:	4607      	mov	r7, r0
 8009c30:	10ad      	asrs	r5, r5, #2
 8009c32:	d03d      	beq.n	8009cb0 <__pow5mult+0xa0>
 8009c34:	69f4      	ldr	r4, [r6, #28]
 8009c36:	b97c      	cbnz	r4, 8009c58 <__pow5mult+0x48>
 8009c38:	2010      	movs	r0, #16
 8009c3a:	f7ff fd7f 	bl	800973c <malloc>
 8009c3e:	4602      	mov	r2, r0
 8009c40:	61f0      	str	r0, [r6, #28]
 8009c42:	b928      	cbnz	r0, 8009c50 <__pow5mult+0x40>
 8009c44:	4b1d      	ldr	r3, [pc, #116]	; (8009cbc <__pow5mult+0xac>)
 8009c46:	481e      	ldr	r0, [pc, #120]	; (8009cc0 <__pow5mult+0xb0>)
 8009c48:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009c4c:	f000 fa64 	bl	800a118 <__assert_func>
 8009c50:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009c54:	6004      	str	r4, [r0, #0]
 8009c56:	60c4      	str	r4, [r0, #12]
 8009c58:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009c5c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009c60:	b94c      	cbnz	r4, 8009c76 <__pow5mult+0x66>
 8009c62:	f240 2171 	movw	r1, #625	; 0x271
 8009c66:	4630      	mov	r0, r6
 8009c68:	f7ff ff12 	bl	8009a90 <__i2b>
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009c72:	4604      	mov	r4, r0
 8009c74:	6003      	str	r3, [r0, #0]
 8009c76:	f04f 0900 	mov.w	r9, #0
 8009c7a:	07eb      	lsls	r3, r5, #31
 8009c7c:	d50a      	bpl.n	8009c94 <__pow5mult+0x84>
 8009c7e:	4639      	mov	r1, r7
 8009c80:	4622      	mov	r2, r4
 8009c82:	4630      	mov	r0, r6
 8009c84:	f7ff ff1a 	bl	8009abc <__multiply>
 8009c88:	4639      	mov	r1, r7
 8009c8a:	4680      	mov	r8, r0
 8009c8c:	4630      	mov	r0, r6
 8009c8e:	f7ff fe49 	bl	8009924 <_Bfree>
 8009c92:	4647      	mov	r7, r8
 8009c94:	106d      	asrs	r5, r5, #1
 8009c96:	d00b      	beq.n	8009cb0 <__pow5mult+0xa0>
 8009c98:	6820      	ldr	r0, [r4, #0]
 8009c9a:	b938      	cbnz	r0, 8009cac <__pow5mult+0x9c>
 8009c9c:	4622      	mov	r2, r4
 8009c9e:	4621      	mov	r1, r4
 8009ca0:	4630      	mov	r0, r6
 8009ca2:	f7ff ff0b 	bl	8009abc <__multiply>
 8009ca6:	6020      	str	r0, [r4, #0]
 8009ca8:	f8c0 9000 	str.w	r9, [r0]
 8009cac:	4604      	mov	r4, r0
 8009cae:	e7e4      	b.n	8009c7a <__pow5mult+0x6a>
 8009cb0:	4638      	mov	r0, r7
 8009cb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009cb6:	bf00      	nop
 8009cb8:	0800aa18 	.word	0x0800aa18
 8009cbc:	0800a849 	.word	0x0800a849
 8009cc0:	0800a8c9 	.word	0x0800a8c9

08009cc4 <__lshift>:
 8009cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cc8:	460c      	mov	r4, r1
 8009cca:	6849      	ldr	r1, [r1, #4]
 8009ccc:	6923      	ldr	r3, [r4, #16]
 8009cce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009cd2:	68a3      	ldr	r3, [r4, #8]
 8009cd4:	4607      	mov	r7, r0
 8009cd6:	4691      	mov	r9, r2
 8009cd8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009cdc:	f108 0601 	add.w	r6, r8, #1
 8009ce0:	42b3      	cmp	r3, r6
 8009ce2:	db0b      	blt.n	8009cfc <__lshift+0x38>
 8009ce4:	4638      	mov	r0, r7
 8009ce6:	f7ff fddd 	bl	80098a4 <_Balloc>
 8009cea:	4605      	mov	r5, r0
 8009cec:	b948      	cbnz	r0, 8009d02 <__lshift+0x3e>
 8009cee:	4602      	mov	r2, r0
 8009cf0:	4b28      	ldr	r3, [pc, #160]	; (8009d94 <__lshift+0xd0>)
 8009cf2:	4829      	ldr	r0, [pc, #164]	; (8009d98 <__lshift+0xd4>)
 8009cf4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009cf8:	f000 fa0e 	bl	800a118 <__assert_func>
 8009cfc:	3101      	adds	r1, #1
 8009cfe:	005b      	lsls	r3, r3, #1
 8009d00:	e7ee      	b.n	8009ce0 <__lshift+0x1c>
 8009d02:	2300      	movs	r3, #0
 8009d04:	f100 0114 	add.w	r1, r0, #20
 8009d08:	f100 0210 	add.w	r2, r0, #16
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	4553      	cmp	r3, sl
 8009d10:	db33      	blt.n	8009d7a <__lshift+0xb6>
 8009d12:	6920      	ldr	r0, [r4, #16]
 8009d14:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009d18:	f104 0314 	add.w	r3, r4, #20
 8009d1c:	f019 091f 	ands.w	r9, r9, #31
 8009d20:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009d24:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009d28:	d02b      	beq.n	8009d82 <__lshift+0xbe>
 8009d2a:	f1c9 0e20 	rsb	lr, r9, #32
 8009d2e:	468a      	mov	sl, r1
 8009d30:	2200      	movs	r2, #0
 8009d32:	6818      	ldr	r0, [r3, #0]
 8009d34:	fa00 f009 	lsl.w	r0, r0, r9
 8009d38:	4310      	orrs	r0, r2
 8009d3a:	f84a 0b04 	str.w	r0, [sl], #4
 8009d3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d42:	459c      	cmp	ip, r3
 8009d44:	fa22 f20e 	lsr.w	r2, r2, lr
 8009d48:	d8f3      	bhi.n	8009d32 <__lshift+0x6e>
 8009d4a:	ebac 0304 	sub.w	r3, ip, r4
 8009d4e:	3b15      	subs	r3, #21
 8009d50:	f023 0303 	bic.w	r3, r3, #3
 8009d54:	3304      	adds	r3, #4
 8009d56:	f104 0015 	add.w	r0, r4, #21
 8009d5a:	4584      	cmp	ip, r0
 8009d5c:	bf38      	it	cc
 8009d5e:	2304      	movcc	r3, #4
 8009d60:	50ca      	str	r2, [r1, r3]
 8009d62:	b10a      	cbz	r2, 8009d68 <__lshift+0xa4>
 8009d64:	f108 0602 	add.w	r6, r8, #2
 8009d68:	3e01      	subs	r6, #1
 8009d6a:	4638      	mov	r0, r7
 8009d6c:	612e      	str	r6, [r5, #16]
 8009d6e:	4621      	mov	r1, r4
 8009d70:	f7ff fdd8 	bl	8009924 <_Bfree>
 8009d74:	4628      	mov	r0, r5
 8009d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d7a:	f842 0f04 	str.w	r0, [r2, #4]!
 8009d7e:	3301      	adds	r3, #1
 8009d80:	e7c5      	b.n	8009d0e <__lshift+0x4a>
 8009d82:	3904      	subs	r1, #4
 8009d84:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d88:	f841 2f04 	str.w	r2, [r1, #4]!
 8009d8c:	459c      	cmp	ip, r3
 8009d8e:	d8f9      	bhi.n	8009d84 <__lshift+0xc0>
 8009d90:	e7ea      	b.n	8009d68 <__lshift+0xa4>
 8009d92:	bf00      	nop
 8009d94:	0800a8b8 	.word	0x0800a8b8
 8009d98:	0800a8c9 	.word	0x0800a8c9

08009d9c <__mcmp>:
 8009d9c:	b530      	push	{r4, r5, lr}
 8009d9e:	6902      	ldr	r2, [r0, #16]
 8009da0:	690c      	ldr	r4, [r1, #16]
 8009da2:	1b12      	subs	r2, r2, r4
 8009da4:	d10e      	bne.n	8009dc4 <__mcmp+0x28>
 8009da6:	f100 0314 	add.w	r3, r0, #20
 8009daa:	3114      	adds	r1, #20
 8009dac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009db0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009db4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009db8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009dbc:	42a5      	cmp	r5, r4
 8009dbe:	d003      	beq.n	8009dc8 <__mcmp+0x2c>
 8009dc0:	d305      	bcc.n	8009dce <__mcmp+0x32>
 8009dc2:	2201      	movs	r2, #1
 8009dc4:	4610      	mov	r0, r2
 8009dc6:	bd30      	pop	{r4, r5, pc}
 8009dc8:	4283      	cmp	r3, r0
 8009dca:	d3f3      	bcc.n	8009db4 <__mcmp+0x18>
 8009dcc:	e7fa      	b.n	8009dc4 <__mcmp+0x28>
 8009dce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009dd2:	e7f7      	b.n	8009dc4 <__mcmp+0x28>

08009dd4 <__mdiff>:
 8009dd4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dd8:	460c      	mov	r4, r1
 8009dda:	4606      	mov	r6, r0
 8009ddc:	4611      	mov	r1, r2
 8009dde:	4620      	mov	r0, r4
 8009de0:	4690      	mov	r8, r2
 8009de2:	f7ff ffdb 	bl	8009d9c <__mcmp>
 8009de6:	1e05      	subs	r5, r0, #0
 8009de8:	d110      	bne.n	8009e0c <__mdiff+0x38>
 8009dea:	4629      	mov	r1, r5
 8009dec:	4630      	mov	r0, r6
 8009dee:	f7ff fd59 	bl	80098a4 <_Balloc>
 8009df2:	b930      	cbnz	r0, 8009e02 <__mdiff+0x2e>
 8009df4:	4b3a      	ldr	r3, [pc, #232]	; (8009ee0 <__mdiff+0x10c>)
 8009df6:	4602      	mov	r2, r0
 8009df8:	f240 2137 	movw	r1, #567	; 0x237
 8009dfc:	4839      	ldr	r0, [pc, #228]	; (8009ee4 <__mdiff+0x110>)
 8009dfe:	f000 f98b 	bl	800a118 <__assert_func>
 8009e02:	2301      	movs	r3, #1
 8009e04:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009e08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e0c:	bfa4      	itt	ge
 8009e0e:	4643      	movge	r3, r8
 8009e10:	46a0      	movge	r8, r4
 8009e12:	4630      	mov	r0, r6
 8009e14:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009e18:	bfa6      	itte	ge
 8009e1a:	461c      	movge	r4, r3
 8009e1c:	2500      	movge	r5, #0
 8009e1e:	2501      	movlt	r5, #1
 8009e20:	f7ff fd40 	bl	80098a4 <_Balloc>
 8009e24:	b920      	cbnz	r0, 8009e30 <__mdiff+0x5c>
 8009e26:	4b2e      	ldr	r3, [pc, #184]	; (8009ee0 <__mdiff+0x10c>)
 8009e28:	4602      	mov	r2, r0
 8009e2a:	f240 2145 	movw	r1, #581	; 0x245
 8009e2e:	e7e5      	b.n	8009dfc <__mdiff+0x28>
 8009e30:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009e34:	6926      	ldr	r6, [r4, #16]
 8009e36:	60c5      	str	r5, [r0, #12]
 8009e38:	f104 0914 	add.w	r9, r4, #20
 8009e3c:	f108 0514 	add.w	r5, r8, #20
 8009e40:	f100 0e14 	add.w	lr, r0, #20
 8009e44:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009e48:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009e4c:	f108 0210 	add.w	r2, r8, #16
 8009e50:	46f2      	mov	sl, lr
 8009e52:	2100      	movs	r1, #0
 8009e54:	f859 3b04 	ldr.w	r3, [r9], #4
 8009e58:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009e5c:	fa11 f88b 	uxtah	r8, r1, fp
 8009e60:	b299      	uxth	r1, r3
 8009e62:	0c1b      	lsrs	r3, r3, #16
 8009e64:	eba8 0801 	sub.w	r8, r8, r1
 8009e68:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009e6c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009e70:	fa1f f888 	uxth.w	r8, r8
 8009e74:	1419      	asrs	r1, r3, #16
 8009e76:	454e      	cmp	r6, r9
 8009e78:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009e7c:	f84a 3b04 	str.w	r3, [sl], #4
 8009e80:	d8e8      	bhi.n	8009e54 <__mdiff+0x80>
 8009e82:	1b33      	subs	r3, r6, r4
 8009e84:	3b15      	subs	r3, #21
 8009e86:	f023 0303 	bic.w	r3, r3, #3
 8009e8a:	3304      	adds	r3, #4
 8009e8c:	3415      	adds	r4, #21
 8009e8e:	42a6      	cmp	r6, r4
 8009e90:	bf38      	it	cc
 8009e92:	2304      	movcc	r3, #4
 8009e94:	441d      	add	r5, r3
 8009e96:	4473      	add	r3, lr
 8009e98:	469e      	mov	lr, r3
 8009e9a:	462e      	mov	r6, r5
 8009e9c:	4566      	cmp	r6, ip
 8009e9e:	d30e      	bcc.n	8009ebe <__mdiff+0xea>
 8009ea0:	f10c 0203 	add.w	r2, ip, #3
 8009ea4:	1b52      	subs	r2, r2, r5
 8009ea6:	f022 0203 	bic.w	r2, r2, #3
 8009eaa:	3d03      	subs	r5, #3
 8009eac:	45ac      	cmp	ip, r5
 8009eae:	bf38      	it	cc
 8009eb0:	2200      	movcc	r2, #0
 8009eb2:	4413      	add	r3, r2
 8009eb4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009eb8:	b17a      	cbz	r2, 8009eda <__mdiff+0x106>
 8009eba:	6107      	str	r7, [r0, #16]
 8009ebc:	e7a4      	b.n	8009e08 <__mdiff+0x34>
 8009ebe:	f856 8b04 	ldr.w	r8, [r6], #4
 8009ec2:	fa11 f288 	uxtah	r2, r1, r8
 8009ec6:	1414      	asrs	r4, r2, #16
 8009ec8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009ecc:	b292      	uxth	r2, r2
 8009ece:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009ed2:	f84e 2b04 	str.w	r2, [lr], #4
 8009ed6:	1421      	asrs	r1, r4, #16
 8009ed8:	e7e0      	b.n	8009e9c <__mdiff+0xc8>
 8009eda:	3f01      	subs	r7, #1
 8009edc:	e7ea      	b.n	8009eb4 <__mdiff+0xe0>
 8009ede:	bf00      	nop
 8009ee0:	0800a8b8 	.word	0x0800a8b8
 8009ee4:	0800a8c9 	.word	0x0800a8c9

08009ee8 <__d2b>:
 8009ee8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009eec:	460f      	mov	r7, r1
 8009eee:	2101      	movs	r1, #1
 8009ef0:	ec59 8b10 	vmov	r8, r9, d0
 8009ef4:	4616      	mov	r6, r2
 8009ef6:	f7ff fcd5 	bl	80098a4 <_Balloc>
 8009efa:	4604      	mov	r4, r0
 8009efc:	b930      	cbnz	r0, 8009f0c <__d2b+0x24>
 8009efe:	4602      	mov	r2, r0
 8009f00:	4b24      	ldr	r3, [pc, #144]	; (8009f94 <__d2b+0xac>)
 8009f02:	4825      	ldr	r0, [pc, #148]	; (8009f98 <__d2b+0xb0>)
 8009f04:	f240 310f 	movw	r1, #783	; 0x30f
 8009f08:	f000 f906 	bl	800a118 <__assert_func>
 8009f0c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009f10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009f14:	bb2d      	cbnz	r5, 8009f62 <__d2b+0x7a>
 8009f16:	9301      	str	r3, [sp, #4]
 8009f18:	f1b8 0300 	subs.w	r3, r8, #0
 8009f1c:	d026      	beq.n	8009f6c <__d2b+0x84>
 8009f1e:	4668      	mov	r0, sp
 8009f20:	9300      	str	r3, [sp, #0]
 8009f22:	f7ff fd87 	bl	8009a34 <__lo0bits>
 8009f26:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009f2a:	b1e8      	cbz	r0, 8009f68 <__d2b+0x80>
 8009f2c:	f1c0 0320 	rsb	r3, r0, #32
 8009f30:	fa02 f303 	lsl.w	r3, r2, r3
 8009f34:	430b      	orrs	r3, r1
 8009f36:	40c2      	lsrs	r2, r0
 8009f38:	6163      	str	r3, [r4, #20]
 8009f3a:	9201      	str	r2, [sp, #4]
 8009f3c:	9b01      	ldr	r3, [sp, #4]
 8009f3e:	61a3      	str	r3, [r4, #24]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	bf14      	ite	ne
 8009f44:	2202      	movne	r2, #2
 8009f46:	2201      	moveq	r2, #1
 8009f48:	6122      	str	r2, [r4, #16]
 8009f4a:	b1bd      	cbz	r5, 8009f7c <__d2b+0x94>
 8009f4c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009f50:	4405      	add	r5, r0
 8009f52:	603d      	str	r5, [r7, #0]
 8009f54:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009f58:	6030      	str	r0, [r6, #0]
 8009f5a:	4620      	mov	r0, r4
 8009f5c:	b003      	add	sp, #12
 8009f5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009f66:	e7d6      	b.n	8009f16 <__d2b+0x2e>
 8009f68:	6161      	str	r1, [r4, #20]
 8009f6a:	e7e7      	b.n	8009f3c <__d2b+0x54>
 8009f6c:	a801      	add	r0, sp, #4
 8009f6e:	f7ff fd61 	bl	8009a34 <__lo0bits>
 8009f72:	9b01      	ldr	r3, [sp, #4]
 8009f74:	6163      	str	r3, [r4, #20]
 8009f76:	3020      	adds	r0, #32
 8009f78:	2201      	movs	r2, #1
 8009f7a:	e7e5      	b.n	8009f48 <__d2b+0x60>
 8009f7c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009f80:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009f84:	6038      	str	r0, [r7, #0]
 8009f86:	6918      	ldr	r0, [r3, #16]
 8009f88:	f7ff fd34 	bl	80099f4 <__hi0bits>
 8009f8c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009f90:	e7e2      	b.n	8009f58 <__d2b+0x70>
 8009f92:	bf00      	nop
 8009f94:	0800a8b8 	.word	0x0800a8b8
 8009f98:	0800a8c9 	.word	0x0800a8c9

08009f9c <__sflush_r>:
 8009f9c:	898a      	ldrh	r2, [r1, #12]
 8009f9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fa2:	4605      	mov	r5, r0
 8009fa4:	0710      	lsls	r0, r2, #28
 8009fa6:	460c      	mov	r4, r1
 8009fa8:	d458      	bmi.n	800a05c <__sflush_r+0xc0>
 8009faa:	684b      	ldr	r3, [r1, #4]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	dc05      	bgt.n	8009fbc <__sflush_r+0x20>
 8009fb0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	dc02      	bgt.n	8009fbc <__sflush_r+0x20>
 8009fb6:	2000      	movs	r0, #0
 8009fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009fbe:	2e00      	cmp	r6, #0
 8009fc0:	d0f9      	beq.n	8009fb6 <__sflush_r+0x1a>
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009fc8:	682f      	ldr	r7, [r5, #0]
 8009fca:	6a21      	ldr	r1, [r4, #32]
 8009fcc:	602b      	str	r3, [r5, #0]
 8009fce:	d032      	beq.n	800a036 <__sflush_r+0x9a>
 8009fd0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009fd2:	89a3      	ldrh	r3, [r4, #12]
 8009fd4:	075a      	lsls	r2, r3, #29
 8009fd6:	d505      	bpl.n	8009fe4 <__sflush_r+0x48>
 8009fd8:	6863      	ldr	r3, [r4, #4]
 8009fda:	1ac0      	subs	r0, r0, r3
 8009fdc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009fde:	b10b      	cbz	r3, 8009fe4 <__sflush_r+0x48>
 8009fe0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009fe2:	1ac0      	subs	r0, r0, r3
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	4602      	mov	r2, r0
 8009fe8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009fea:	6a21      	ldr	r1, [r4, #32]
 8009fec:	4628      	mov	r0, r5
 8009fee:	47b0      	blx	r6
 8009ff0:	1c43      	adds	r3, r0, #1
 8009ff2:	89a3      	ldrh	r3, [r4, #12]
 8009ff4:	d106      	bne.n	800a004 <__sflush_r+0x68>
 8009ff6:	6829      	ldr	r1, [r5, #0]
 8009ff8:	291d      	cmp	r1, #29
 8009ffa:	d82b      	bhi.n	800a054 <__sflush_r+0xb8>
 8009ffc:	4a29      	ldr	r2, [pc, #164]	; (800a0a4 <__sflush_r+0x108>)
 8009ffe:	410a      	asrs	r2, r1
 800a000:	07d6      	lsls	r6, r2, #31
 800a002:	d427      	bmi.n	800a054 <__sflush_r+0xb8>
 800a004:	2200      	movs	r2, #0
 800a006:	6062      	str	r2, [r4, #4]
 800a008:	04d9      	lsls	r1, r3, #19
 800a00a:	6922      	ldr	r2, [r4, #16]
 800a00c:	6022      	str	r2, [r4, #0]
 800a00e:	d504      	bpl.n	800a01a <__sflush_r+0x7e>
 800a010:	1c42      	adds	r2, r0, #1
 800a012:	d101      	bne.n	800a018 <__sflush_r+0x7c>
 800a014:	682b      	ldr	r3, [r5, #0]
 800a016:	b903      	cbnz	r3, 800a01a <__sflush_r+0x7e>
 800a018:	6560      	str	r0, [r4, #84]	; 0x54
 800a01a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a01c:	602f      	str	r7, [r5, #0]
 800a01e:	2900      	cmp	r1, #0
 800a020:	d0c9      	beq.n	8009fb6 <__sflush_r+0x1a>
 800a022:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a026:	4299      	cmp	r1, r3
 800a028:	d002      	beq.n	800a030 <__sflush_r+0x94>
 800a02a:	4628      	mov	r0, r5
 800a02c:	f7ff fb3a 	bl	80096a4 <_free_r>
 800a030:	2000      	movs	r0, #0
 800a032:	6360      	str	r0, [r4, #52]	; 0x34
 800a034:	e7c0      	b.n	8009fb8 <__sflush_r+0x1c>
 800a036:	2301      	movs	r3, #1
 800a038:	4628      	mov	r0, r5
 800a03a:	47b0      	blx	r6
 800a03c:	1c41      	adds	r1, r0, #1
 800a03e:	d1c8      	bne.n	8009fd2 <__sflush_r+0x36>
 800a040:	682b      	ldr	r3, [r5, #0]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d0c5      	beq.n	8009fd2 <__sflush_r+0x36>
 800a046:	2b1d      	cmp	r3, #29
 800a048:	d001      	beq.n	800a04e <__sflush_r+0xb2>
 800a04a:	2b16      	cmp	r3, #22
 800a04c:	d101      	bne.n	800a052 <__sflush_r+0xb6>
 800a04e:	602f      	str	r7, [r5, #0]
 800a050:	e7b1      	b.n	8009fb6 <__sflush_r+0x1a>
 800a052:	89a3      	ldrh	r3, [r4, #12]
 800a054:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a058:	81a3      	strh	r3, [r4, #12]
 800a05a:	e7ad      	b.n	8009fb8 <__sflush_r+0x1c>
 800a05c:	690f      	ldr	r7, [r1, #16]
 800a05e:	2f00      	cmp	r7, #0
 800a060:	d0a9      	beq.n	8009fb6 <__sflush_r+0x1a>
 800a062:	0793      	lsls	r3, r2, #30
 800a064:	680e      	ldr	r6, [r1, #0]
 800a066:	bf08      	it	eq
 800a068:	694b      	ldreq	r3, [r1, #20]
 800a06a:	600f      	str	r7, [r1, #0]
 800a06c:	bf18      	it	ne
 800a06e:	2300      	movne	r3, #0
 800a070:	eba6 0807 	sub.w	r8, r6, r7
 800a074:	608b      	str	r3, [r1, #8]
 800a076:	f1b8 0f00 	cmp.w	r8, #0
 800a07a:	dd9c      	ble.n	8009fb6 <__sflush_r+0x1a>
 800a07c:	6a21      	ldr	r1, [r4, #32]
 800a07e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a080:	4643      	mov	r3, r8
 800a082:	463a      	mov	r2, r7
 800a084:	4628      	mov	r0, r5
 800a086:	47b0      	blx	r6
 800a088:	2800      	cmp	r0, #0
 800a08a:	dc06      	bgt.n	800a09a <__sflush_r+0xfe>
 800a08c:	89a3      	ldrh	r3, [r4, #12]
 800a08e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a092:	81a3      	strh	r3, [r4, #12]
 800a094:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a098:	e78e      	b.n	8009fb8 <__sflush_r+0x1c>
 800a09a:	4407      	add	r7, r0
 800a09c:	eba8 0800 	sub.w	r8, r8, r0
 800a0a0:	e7e9      	b.n	800a076 <__sflush_r+0xda>
 800a0a2:	bf00      	nop
 800a0a4:	dfbffffe 	.word	0xdfbffffe

0800a0a8 <_fflush_r>:
 800a0a8:	b538      	push	{r3, r4, r5, lr}
 800a0aa:	690b      	ldr	r3, [r1, #16]
 800a0ac:	4605      	mov	r5, r0
 800a0ae:	460c      	mov	r4, r1
 800a0b0:	b913      	cbnz	r3, 800a0b8 <_fflush_r+0x10>
 800a0b2:	2500      	movs	r5, #0
 800a0b4:	4628      	mov	r0, r5
 800a0b6:	bd38      	pop	{r3, r4, r5, pc}
 800a0b8:	b118      	cbz	r0, 800a0c2 <_fflush_r+0x1a>
 800a0ba:	6a03      	ldr	r3, [r0, #32]
 800a0bc:	b90b      	cbnz	r3, 800a0c2 <_fflush_r+0x1a>
 800a0be:	f7fe fb6f 	bl	80087a0 <__sinit>
 800a0c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d0f3      	beq.n	800a0b2 <_fflush_r+0xa>
 800a0ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a0cc:	07d0      	lsls	r0, r2, #31
 800a0ce:	d404      	bmi.n	800a0da <_fflush_r+0x32>
 800a0d0:	0599      	lsls	r1, r3, #22
 800a0d2:	d402      	bmi.n	800a0da <_fflush_r+0x32>
 800a0d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a0d6:	f7fe fc5a 	bl	800898e <__retarget_lock_acquire_recursive>
 800a0da:	4628      	mov	r0, r5
 800a0dc:	4621      	mov	r1, r4
 800a0de:	f7ff ff5d 	bl	8009f9c <__sflush_r>
 800a0e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a0e4:	07da      	lsls	r2, r3, #31
 800a0e6:	4605      	mov	r5, r0
 800a0e8:	d4e4      	bmi.n	800a0b4 <_fflush_r+0xc>
 800a0ea:	89a3      	ldrh	r3, [r4, #12]
 800a0ec:	059b      	lsls	r3, r3, #22
 800a0ee:	d4e1      	bmi.n	800a0b4 <_fflush_r+0xc>
 800a0f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a0f2:	f7fe fc4d 	bl	8008990 <__retarget_lock_release_recursive>
 800a0f6:	e7dd      	b.n	800a0b4 <_fflush_r+0xc>

0800a0f8 <_sbrk_r>:
 800a0f8:	b538      	push	{r3, r4, r5, lr}
 800a0fa:	4d06      	ldr	r5, [pc, #24]	; (800a114 <_sbrk_r+0x1c>)
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	4604      	mov	r4, r0
 800a100:	4608      	mov	r0, r1
 800a102:	602b      	str	r3, [r5, #0]
 800a104:	f7f7 fc58 	bl	80019b8 <_sbrk>
 800a108:	1c43      	adds	r3, r0, #1
 800a10a:	d102      	bne.n	800a112 <_sbrk_r+0x1a>
 800a10c:	682b      	ldr	r3, [r5, #0]
 800a10e:	b103      	cbz	r3, 800a112 <_sbrk_r+0x1a>
 800a110:	6023      	str	r3, [r4, #0]
 800a112:	bd38      	pop	{r3, r4, r5, pc}
 800a114:	20002f70 	.word	0x20002f70

0800a118 <__assert_func>:
 800a118:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a11a:	4614      	mov	r4, r2
 800a11c:	461a      	mov	r2, r3
 800a11e:	4b09      	ldr	r3, [pc, #36]	; (800a144 <__assert_func+0x2c>)
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	4605      	mov	r5, r0
 800a124:	68d8      	ldr	r0, [r3, #12]
 800a126:	b14c      	cbz	r4, 800a13c <__assert_func+0x24>
 800a128:	4b07      	ldr	r3, [pc, #28]	; (800a148 <__assert_func+0x30>)
 800a12a:	9100      	str	r1, [sp, #0]
 800a12c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a130:	4906      	ldr	r1, [pc, #24]	; (800a14c <__assert_func+0x34>)
 800a132:	462b      	mov	r3, r5
 800a134:	f000 f844 	bl	800a1c0 <fiprintf>
 800a138:	f000 f854 	bl	800a1e4 <abort>
 800a13c:	4b04      	ldr	r3, [pc, #16]	; (800a150 <__assert_func+0x38>)
 800a13e:	461c      	mov	r4, r3
 800a140:	e7f3      	b.n	800a12a <__assert_func+0x12>
 800a142:	bf00      	nop
 800a144:	20000068 	.word	0x20000068
 800a148:	0800aa2e 	.word	0x0800aa2e
 800a14c:	0800aa3b 	.word	0x0800aa3b
 800a150:	0800aa69 	.word	0x0800aa69

0800a154 <_calloc_r>:
 800a154:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a156:	fba1 2402 	umull	r2, r4, r1, r2
 800a15a:	b94c      	cbnz	r4, 800a170 <_calloc_r+0x1c>
 800a15c:	4611      	mov	r1, r2
 800a15e:	9201      	str	r2, [sp, #4]
 800a160:	f7ff fb14 	bl	800978c <_malloc_r>
 800a164:	9a01      	ldr	r2, [sp, #4]
 800a166:	4605      	mov	r5, r0
 800a168:	b930      	cbnz	r0, 800a178 <_calloc_r+0x24>
 800a16a:	4628      	mov	r0, r5
 800a16c:	b003      	add	sp, #12
 800a16e:	bd30      	pop	{r4, r5, pc}
 800a170:	220c      	movs	r2, #12
 800a172:	6002      	str	r2, [r0, #0]
 800a174:	2500      	movs	r5, #0
 800a176:	e7f8      	b.n	800a16a <_calloc_r+0x16>
 800a178:	4621      	mov	r1, r4
 800a17a:	f7fe fb8a 	bl	8008892 <memset>
 800a17e:	e7f4      	b.n	800a16a <_calloc_r+0x16>

0800a180 <__ascii_mbtowc>:
 800a180:	b082      	sub	sp, #8
 800a182:	b901      	cbnz	r1, 800a186 <__ascii_mbtowc+0x6>
 800a184:	a901      	add	r1, sp, #4
 800a186:	b142      	cbz	r2, 800a19a <__ascii_mbtowc+0x1a>
 800a188:	b14b      	cbz	r3, 800a19e <__ascii_mbtowc+0x1e>
 800a18a:	7813      	ldrb	r3, [r2, #0]
 800a18c:	600b      	str	r3, [r1, #0]
 800a18e:	7812      	ldrb	r2, [r2, #0]
 800a190:	1e10      	subs	r0, r2, #0
 800a192:	bf18      	it	ne
 800a194:	2001      	movne	r0, #1
 800a196:	b002      	add	sp, #8
 800a198:	4770      	bx	lr
 800a19a:	4610      	mov	r0, r2
 800a19c:	e7fb      	b.n	800a196 <__ascii_mbtowc+0x16>
 800a19e:	f06f 0001 	mvn.w	r0, #1
 800a1a2:	e7f8      	b.n	800a196 <__ascii_mbtowc+0x16>

0800a1a4 <__ascii_wctomb>:
 800a1a4:	b149      	cbz	r1, 800a1ba <__ascii_wctomb+0x16>
 800a1a6:	2aff      	cmp	r2, #255	; 0xff
 800a1a8:	bf85      	ittet	hi
 800a1aa:	238a      	movhi	r3, #138	; 0x8a
 800a1ac:	6003      	strhi	r3, [r0, #0]
 800a1ae:	700a      	strbls	r2, [r1, #0]
 800a1b0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800a1b4:	bf98      	it	ls
 800a1b6:	2001      	movls	r0, #1
 800a1b8:	4770      	bx	lr
 800a1ba:	4608      	mov	r0, r1
 800a1bc:	4770      	bx	lr
	...

0800a1c0 <fiprintf>:
 800a1c0:	b40e      	push	{r1, r2, r3}
 800a1c2:	b503      	push	{r0, r1, lr}
 800a1c4:	4601      	mov	r1, r0
 800a1c6:	ab03      	add	r3, sp, #12
 800a1c8:	4805      	ldr	r0, [pc, #20]	; (800a1e0 <fiprintf+0x20>)
 800a1ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1ce:	6800      	ldr	r0, [r0, #0]
 800a1d0:	9301      	str	r3, [sp, #4]
 800a1d2:	f000 f837 	bl	800a244 <_vfiprintf_r>
 800a1d6:	b002      	add	sp, #8
 800a1d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a1dc:	b003      	add	sp, #12
 800a1de:	4770      	bx	lr
 800a1e0:	20000068 	.word	0x20000068

0800a1e4 <abort>:
 800a1e4:	b508      	push	{r3, lr}
 800a1e6:	2006      	movs	r0, #6
 800a1e8:	f000 fa04 	bl	800a5f4 <raise>
 800a1ec:	2001      	movs	r0, #1
 800a1ee:	f7f7 fb6b 	bl	80018c8 <_exit>

0800a1f2 <__sfputc_r>:
 800a1f2:	6893      	ldr	r3, [r2, #8]
 800a1f4:	3b01      	subs	r3, #1
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	b410      	push	{r4}
 800a1fa:	6093      	str	r3, [r2, #8]
 800a1fc:	da08      	bge.n	800a210 <__sfputc_r+0x1e>
 800a1fe:	6994      	ldr	r4, [r2, #24]
 800a200:	42a3      	cmp	r3, r4
 800a202:	db01      	blt.n	800a208 <__sfputc_r+0x16>
 800a204:	290a      	cmp	r1, #10
 800a206:	d103      	bne.n	800a210 <__sfputc_r+0x1e>
 800a208:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a20c:	f000 b934 	b.w	800a478 <__swbuf_r>
 800a210:	6813      	ldr	r3, [r2, #0]
 800a212:	1c58      	adds	r0, r3, #1
 800a214:	6010      	str	r0, [r2, #0]
 800a216:	7019      	strb	r1, [r3, #0]
 800a218:	4608      	mov	r0, r1
 800a21a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a21e:	4770      	bx	lr

0800a220 <__sfputs_r>:
 800a220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a222:	4606      	mov	r6, r0
 800a224:	460f      	mov	r7, r1
 800a226:	4614      	mov	r4, r2
 800a228:	18d5      	adds	r5, r2, r3
 800a22a:	42ac      	cmp	r4, r5
 800a22c:	d101      	bne.n	800a232 <__sfputs_r+0x12>
 800a22e:	2000      	movs	r0, #0
 800a230:	e007      	b.n	800a242 <__sfputs_r+0x22>
 800a232:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a236:	463a      	mov	r2, r7
 800a238:	4630      	mov	r0, r6
 800a23a:	f7ff ffda 	bl	800a1f2 <__sfputc_r>
 800a23e:	1c43      	adds	r3, r0, #1
 800a240:	d1f3      	bne.n	800a22a <__sfputs_r+0xa>
 800a242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a244 <_vfiprintf_r>:
 800a244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a248:	460d      	mov	r5, r1
 800a24a:	b09d      	sub	sp, #116	; 0x74
 800a24c:	4614      	mov	r4, r2
 800a24e:	4698      	mov	r8, r3
 800a250:	4606      	mov	r6, r0
 800a252:	b118      	cbz	r0, 800a25c <_vfiprintf_r+0x18>
 800a254:	6a03      	ldr	r3, [r0, #32]
 800a256:	b90b      	cbnz	r3, 800a25c <_vfiprintf_r+0x18>
 800a258:	f7fe faa2 	bl	80087a0 <__sinit>
 800a25c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a25e:	07d9      	lsls	r1, r3, #31
 800a260:	d405      	bmi.n	800a26e <_vfiprintf_r+0x2a>
 800a262:	89ab      	ldrh	r3, [r5, #12]
 800a264:	059a      	lsls	r2, r3, #22
 800a266:	d402      	bmi.n	800a26e <_vfiprintf_r+0x2a>
 800a268:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a26a:	f7fe fb90 	bl	800898e <__retarget_lock_acquire_recursive>
 800a26e:	89ab      	ldrh	r3, [r5, #12]
 800a270:	071b      	lsls	r3, r3, #28
 800a272:	d501      	bpl.n	800a278 <_vfiprintf_r+0x34>
 800a274:	692b      	ldr	r3, [r5, #16]
 800a276:	b99b      	cbnz	r3, 800a2a0 <_vfiprintf_r+0x5c>
 800a278:	4629      	mov	r1, r5
 800a27a:	4630      	mov	r0, r6
 800a27c:	f000 f93a 	bl	800a4f4 <__swsetup_r>
 800a280:	b170      	cbz	r0, 800a2a0 <_vfiprintf_r+0x5c>
 800a282:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a284:	07dc      	lsls	r4, r3, #31
 800a286:	d504      	bpl.n	800a292 <_vfiprintf_r+0x4e>
 800a288:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a28c:	b01d      	add	sp, #116	; 0x74
 800a28e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a292:	89ab      	ldrh	r3, [r5, #12]
 800a294:	0598      	lsls	r0, r3, #22
 800a296:	d4f7      	bmi.n	800a288 <_vfiprintf_r+0x44>
 800a298:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a29a:	f7fe fb79 	bl	8008990 <__retarget_lock_release_recursive>
 800a29e:	e7f3      	b.n	800a288 <_vfiprintf_r+0x44>
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	9309      	str	r3, [sp, #36]	; 0x24
 800a2a4:	2320      	movs	r3, #32
 800a2a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a2aa:	f8cd 800c 	str.w	r8, [sp, #12]
 800a2ae:	2330      	movs	r3, #48	; 0x30
 800a2b0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a464 <_vfiprintf_r+0x220>
 800a2b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a2b8:	f04f 0901 	mov.w	r9, #1
 800a2bc:	4623      	mov	r3, r4
 800a2be:	469a      	mov	sl, r3
 800a2c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a2c4:	b10a      	cbz	r2, 800a2ca <_vfiprintf_r+0x86>
 800a2c6:	2a25      	cmp	r2, #37	; 0x25
 800a2c8:	d1f9      	bne.n	800a2be <_vfiprintf_r+0x7a>
 800a2ca:	ebba 0b04 	subs.w	fp, sl, r4
 800a2ce:	d00b      	beq.n	800a2e8 <_vfiprintf_r+0xa4>
 800a2d0:	465b      	mov	r3, fp
 800a2d2:	4622      	mov	r2, r4
 800a2d4:	4629      	mov	r1, r5
 800a2d6:	4630      	mov	r0, r6
 800a2d8:	f7ff ffa2 	bl	800a220 <__sfputs_r>
 800a2dc:	3001      	adds	r0, #1
 800a2de:	f000 80a9 	beq.w	800a434 <_vfiprintf_r+0x1f0>
 800a2e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a2e4:	445a      	add	r2, fp
 800a2e6:	9209      	str	r2, [sp, #36]	; 0x24
 800a2e8:	f89a 3000 	ldrb.w	r3, [sl]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	f000 80a1 	beq.w	800a434 <_vfiprintf_r+0x1f0>
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a2f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a2fc:	f10a 0a01 	add.w	sl, sl, #1
 800a300:	9304      	str	r3, [sp, #16]
 800a302:	9307      	str	r3, [sp, #28]
 800a304:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a308:	931a      	str	r3, [sp, #104]	; 0x68
 800a30a:	4654      	mov	r4, sl
 800a30c:	2205      	movs	r2, #5
 800a30e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a312:	4854      	ldr	r0, [pc, #336]	; (800a464 <_vfiprintf_r+0x220>)
 800a314:	f7f5 ff5c 	bl	80001d0 <memchr>
 800a318:	9a04      	ldr	r2, [sp, #16]
 800a31a:	b9d8      	cbnz	r0, 800a354 <_vfiprintf_r+0x110>
 800a31c:	06d1      	lsls	r1, r2, #27
 800a31e:	bf44      	itt	mi
 800a320:	2320      	movmi	r3, #32
 800a322:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a326:	0713      	lsls	r3, r2, #28
 800a328:	bf44      	itt	mi
 800a32a:	232b      	movmi	r3, #43	; 0x2b
 800a32c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a330:	f89a 3000 	ldrb.w	r3, [sl]
 800a334:	2b2a      	cmp	r3, #42	; 0x2a
 800a336:	d015      	beq.n	800a364 <_vfiprintf_r+0x120>
 800a338:	9a07      	ldr	r2, [sp, #28]
 800a33a:	4654      	mov	r4, sl
 800a33c:	2000      	movs	r0, #0
 800a33e:	f04f 0c0a 	mov.w	ip, #10
 800a342:	4621      	mov	r1, r4
 800a344:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a348:	3b30      	subs	r3, #48	; 0x30
 800a34a:	2b09      	cmp	r3, #9
 800a34c:	d94d      	bls.n	800a3ea <_vfiprintf_r+0x1a6>
 800a34e:	b1b0      	cbz	r0, 800a37e <_vfiprintf_r+0x13a>
 800a350:	9207      	str	r2, [sp, #28]
 800a352:	e014      	b.n	800a37e <_vfiprintf_r+0x13a>
 800a354:	eba0 0308 	sub.w	r3, r0, r8
 800a358:	fa09 f303 	lsl.w	r3, r9, r3
 800a35c:	4313      	orrs	r3, r2
 800a35e:	9304      	str	r3, [sp, #16]
 800a360:	46a2      	mov	sl, r4
 800a362:	e7d2      	b.n	800a30a <_vfiprintf_r+0xc6>
 800a364:	9b03      	ldr	r3, [sp, #12]
 800a366:	1d19      	adds	r1, r3, #4
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	9103      	str	r1, [sp, #12]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	bfbb      	ittet	lt
 800a370:	425b      	neglt	r3, r3
 800a372:	f042 0202 	orrlt.w	r2, r2, #2
 800a376:	9307      	strge	r3, [sp, #28]
 800a378:	9307      	strlt	r3, [sp, #28]
 800a37a:	bfb8      	it	lt
 800a37c:	9204      	strlt	r2, [sp, #16]
 800a37e:	7823      	ldrb	r3, [r4, #0]
 800a380:	2b2e      	cmp	r3, #46	; 0x2e
 800a382:	d10c      	bne.n	800a39e <_vfiprintf_r+0x15a>
 800a384:	7863      	ldrb	r3, [r4, #1]
 800a386:	2b2a      	cmp	r3, #42	; 0x2a
 800a388:	d134      	bne.n	800a3f4 <_vfiprintf_r+0x1b0>
 800a38a:	9b03      	ldr	r3, [sp, #12]
 800a38c:	1d1a      	adds	r2, r3, #4
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	9203      	str	r2, [sp, #12]
 800a392:	2b00      	cmp	r3, #0
 800a394:	bfb8      	it	lt
 800a396:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a39a:	3402      	adds	r4, #2
 800a39c:	9305      	str	r3, [sp, #20]
 800a39e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a474 <_vfiprintf_r+0x230>
 800a3a2:	7821      	ldrb	r1, [r4, #0]
 800a3a4:	2203      	movs	r2, #3
 800a3a6:	4650      	mov	r0, sl
 800a3a8:	f7f5 ff12 	bl	80001d0 <memchr>
 800a3ac:	b138      	cbz	r0, 800a3be <_vfiprintf_r+0x17a>
 800a3ae:	9b04      	ldr	r3, [sp, #16]
 800a3b0:	eba0 000a 	sub.w	r0, r0, sl
 800a3b4:	2240      	movs	r2, #64	; 0x40
 800a3b6:	4082      	lsls	r2, r0
 800a3b8:	4313      	orrs	r3, r2
 800a3ba:	3401      	adds	r4, #1
 800a3bc:	9304      	str	r3, [sp, #16]
 800a3be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3c2:	4829      	ldr	r0, [pc, #164]	; (800a468 <_vfiprintf_r+0x224>)
 800a3c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a3c8:	2206      	movs	r2, #6
 800a3ca:	f7f5 ff01 	bl	80001d0 <memchr>
 800a3ce:	2800      	cmp	r0, #0
 800a3d0:	d03f      	beq.n	800a452 <_vfiprintf_r+0x20e>
 800a3d2:	4b26      	ldr	r3, [pc, #152]	; (800a46c <_vfiprintf_r+0x228>)
 800a3d4:	bb1b      	cbnz	r3, 800a41e <_vfiprintf_r+0x1da>
 800a3d6:	9b03      	ldr	r3, [sp, #12]
 800a3d8:	3307      	adds	r3, #7
 800a3da:	f023 0307 	bic.w	r3, r3, #7
 800a3de:	3308      	adds	r3, #8
 800a3e0:	9303      	str	r3, [sp, #12]
 800a3e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3e4:	443b      	add	r3, r7
 800a3e6:	9309      	str	r3, [sp, #36]	; 0x24
 800a3e8:	e768      	b.n	800a2bc <_vfiprintf_r+0x78>
 800a3ea:	fb0c 3202 	mla	r2, ip, r2, r3
 800a3ee:	460c      	mov	r4, r1
 800a3f0:	2001      	movs	r0, #1
 800a3f2:	e7a6      	b.n	800a342 <_vfiprintf_r+0xfe>
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	3401      	adds	r4, #1
 800a3f8:	9305      	str	r3, [sp, #20]
 800a3fa:	4619      	mov	r1, r3
 800a3fc:	f04f 0c0a 	mov.w	ip, #10
 800a400:	4620      	mov	r0, r4
 800a402:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a406:	3a30      	subs	r2, #48	; 0x30
 800a408:	2a09      	cmp	r2, #9
 800a40a:	d903      	bls.n	800a414 <_vfiprintf_r+0x1d0>
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d0c6      	beq.n	800a39e <_vfiprintf_r+0x15a>
 800a410:	9105      	str	r1, [sp, #20]
 800a412:	e7c4      	b.n	800a39e <_vfiprintf_r+0x15a>
 800a414:	fb0c 2101 	mla	r1, ip, r1, r2
 800a418:	4604      	mov	r4, r0
 800a41a:	2301      	movs	r3, #1
 800a41c:	e7f0      	b.n	800a400 <_vfiprintf_r+0x1bc>
 800a41e:	ab03      	add	r3, sp, #12
 800a420:	9300      	str	r3, [sp, #0]
 800a422:	462a      	mov	r2, r5
 800a424:	4b12      	ldr	r3, [pc, #72]	; (800a470 <_vfiprintf_r+0x22c>)
 800a426:	a904      	add	r1, sp, #16
 800a428:	4630      	mov	r0, r6
 800a42a:	f7fd fd67 	bl	8007efc <_printf_float>
 800a42e:	4607      	mov	r7, r0
 800a430:	1c78      	adds	r0, r7, #1
 800a432:	d1d6      	bne.n	800a3e2 <_vfiprintf_r+0x19e>
 800a434:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a436:	07d9      	lsls	r1, r3, #31
 800a438:	d405      	bmi.n	800a446 <_vfiprintf_r+0x202>
 800a43a:	89ab      	ldrh	r3, [r5, #12]
 800a43c:	059a      	lsls	r2, r3, #22
 800a43e:	d402      	bmi.n	800a446 <_vfiprintf_r+0x202>
 800a440:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a442:	f7fe faa5 	bl	8008990 <__retarget_lock_release_recursive>
 800a446:	89ab      	ldrh	r3, [r5, #12]
 800a448:	065b      	lsls	r3, r3, #25
 800a44a:	f53f af1d 	bmi.w	800a288 <_vfiprintf_r+0x44>
 800a44e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a450:	e71c      	b.n	800a28c <_vfiprintf_r+0x48>
 800a452:	ab03      	add	r3, sp, #12
 800a454:	9300      	str	r3, [sp, #0]
 800a456:	462a      	mov	r2, r5
 800a458:	4b05      	ldr	r3, [pc, #20]	; (800a470 <_vfiprintf_r+0x22c>)
 800a45a:	a904      	add	r1, sp, #16
 800a45c:	4630      	mov	r0, r6
 800a45e:	f7fd fff1 	bl	8008444 <_printf_i>
 800a462:	e7e4      	b.n	800a42e <_vfiprintf_r+0x1ea>
 800a464:	0800ab6b 	.word	0x0800ab6b
 800a468:	0800ab75 	.word	0x0800ab75
 800a46c:	08007efd 	.word	0x08007efd
 800a470:	0800a221 	.word	0x0800a221
 800a474:	0800ab71 	.word	0x0800ab71

0800a478 <__swbuf_r>:
 800a478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a47a:	460e      	mov	r6, r1
 800a47c:	4614      	mov	r4, r2
 800a47e:	4605      	mov	r5, r0
 800a480:	b118      	cbz	r0, 800a48a <__swbuf_r+0x12>
 800a482:	6a03      	ldr	r3, [r0, #32]
 800a484:	b90b      	cbnz	r3, 800a48a <__swbuf_r+0x12>
 800a486:	f7fe f98b 	bl	80087a0 <__sinit>
 800a48a:	69a3      	ldr	r3, [r4, #24]
 800a48c:	60a3      	str	r3, [r4, #8]
 800a48e:	89a3      	ldrh	r3, [r4, #12]
 800a490:	071a      	lsls	r2, r3, #28
 800a492:	d525      	bpl.n	800a4e0 <__swbuf_r+0x68>
 800a494:	6923      	ldr	r3, [r4, #16]
 800a496:	b31b      	cbz	r3, 800a4e0 <__swbuf_r+0x68>
 800a498:	6823      	ldr	r3, [r4, #0]
 800a49a:	6922      	ldr	r2, [r4, #16]
 800a49c:	1a98      	subs	r0, r3, r2
 800a49e:	6963      	ldr	r3, [r4, #20]
 800a4a0:	b2f6      	uxtb	r6, r6
 800a4a2:	4283      	cmp	r3, r0
 800a4a4:	4637      	mov	r7, r6
 800a4a6:	dc04      	bgt.n	800a4b2 <__swbuf_r+0x3a>
 800a4a8:	4621      	mov	r1, r4
 800a4aa:	4628      	mov	r0, r5
 800a4ac:	f7ff fdfc 	bl	800a0a8 <_fflush_r>
 800a4b0:	b9e0      	cbnz	r0, 800a4ec <__swbuf_r+0x74>
 800a4b2:	68a3      	ldr	r3, [r4, #8]
 800a4b4:	3b01      	subs	r3, #1
 800a4b6:	60a3      	str	r3, [r4, #8]
 800a4b8:	6823      	ldr	r3, [r4, #0]
 800a4ba:	1c5a      	adds	r2, r3, #1
 800a4bc:	6022      	str	r2, [r4, #0]
 800a4be:	701e      	strb	r6, [r3, #0]
 800a4c0:	6962      	ldr	r2, [r4, #20]
 800a4c2:	1c43      	adds	r3, r0, #1
 800a4c4:	429a      	cmp	r2, r3
 800a4c6:	d004      	beq.n	800a4d2 <__swbuf_r+0x5a>
 800a4c8:	89a3      	ldrh	r3, [r4, #12]
 800a4ca:	07db      	lsls	r3, r3, #31
 800a4cc:	d506      	bpl.n	800a4dc <__swbuf_r+0x64>
 800a4ce:	2e0a      	cmp	r6, #10
 800a4d0:	d104      	bne.n	800a4dc <__swbuf_r+0x64>
 800a4d2:	4621      	mov	r1, r4
 800a4d4:	4628      	mov	r0, r5
 800a4d6:	f7ff fde7 	bl	800a0a8 <_fflush_r>
 800a4da:	b938      	cbnz	r0, 800a4ec <__swbuf_r+0x74>
 800a4dc:	4638      	mov	r0, r7
 800a4de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4e0:	4621      	mov	r1, r4
 800a4e2:	4628      	mov	r0, r5
 800a4e4:	f000 f806 	bl	800a4f4 <__swsetup_r>
 800a4e8:	2800      	cmp	r0, #0
 800a4ea:	d0d5      	beq.n	800a498 <__swbuf_r+0x20>
 800a4ec:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a4f0:	e7f4      	b.n	800a4dc <__swbuf_r+0x64>
	...

0800a4f4 <__swsetup_r>:
 800a4f4:	b538      	push	{r3, r4, r5, lr}
 800a4f6:	4b2a      	ldr	r3, [pc, #168]	; (800a5a0 <__swsetup_r+0xac>)
 800a4f8:	4605      	mov	r5, r0
 800a4fa:	6818      	ldr	r0, [r3, #0]
 800a4fc:	460c      	mov	r4, r1
 800a4fe:	b118      	cbz	r0, 800a508 <__swsetup_r+0x14>
 800a500:	6a03      	ldr	r3, [r0, #32]
 800a502:	b90b      	cbnz	r3, 800a508 <__swsetup_r+0x14>
 800a504:	f7fe f94c 	bl	80087a0 <__sinit>
 800a508:	89a3      	ldrh	r3, [r4, #12]
 800a50a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a50e:	0718      	lsls	r0, r3, #28
 800a510:	d422      	bmi.n	800a558 <__swsetup_r+0x64>
 800a512:	06d9      	lsls	r1, r3, #27
 800a514:	d407      	bmi.n	800a526 <__swsetup_r+0x32>
 800a516:	2309      	movs	r3, #9
 800a518:	602b      	str	r3, [r5, #0]
 800a51a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a51e:	81a3      	strh	r3, [r4, #12]
 800a520:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a524:	e034      	b.n	800a590 <__swsetup_r+0x9c>
 800a526:	0758      	lsls	r0, r3, #29
 800a528:	d512      	bpl.n	800a550 <__swsetup_r+0x5c>
 800a52a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a52c:	b141      	cbz	r1, 800a540 <__swsetup_r+0x4c>
 800a52e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a532:	4299      	cmp	r1, r3
 800a534:	d002      	beq.n	800a53c <__swsetup_r+0x48>
 800a536:	4628      	mov	r0, r5
 800a538:	f7ff f8b4 	bl	80096a4 <_free_r>
 800a53c:	2300      	movs	r3, #0
 800a53e:	6363      	str	r3, [r4, #52]	; 0x34
 800a540:	89a3      	ldrh	r3, [r4, #12]
 800a542:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a546:	81a3      	strh	r3, [r4, #12]
 800a548:	2300      	movs	r3, #0
 800a54a:	6063      	str	r3, [r4, #4]
 800a54c:	6923      	ldr	r3, [r4, #16]
 800a54e:	6023      	str	r3, [r4, #0]
 800a550:	89a3      	ldrh	r3, [r4, #12]
 800a552:	f043 0308 	orr.w	r3, r3, #8
 800a556:	81a3      	strh	r3, [r4, #12]
 800a558:	6923      	ldr	r3, [r4, #16]
 800a55a:	b94b      	cbnz	r3, 800a570 <__swsetup_r+0x7c>
 800a55c:	89a3      	ldrh	r3, [r4, #12]
 800a55e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a562:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a566:	d003      	beq.n	800a570 <__swsetup_r+0x7c>
 800a568:	4621      	mov	r1, r4
 800a56a:	4628      	mov	r0, r5
 800a56c:	f000 f884 	bl	800a678 <__smakebuf_r>
 800a570:	89a0      	ldrh	r0, [r4, #12]
 800a572:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a576:	f010 0301 	ands.w	r3, r0, #1
 800a57a:	d00a      	beq.n	800a592 <__swsetup_r+0x9e>
 800a57c:	2300      	movs	r3, #0
 800a57e:	60a3      	str	r3, [r4, #8]
 800a580:	6963      	ldr	r3, [r4, #20]
 800a582:	425b      	negs	r3, r3
 800a584:	61a3      	str	r3, [r4, #24]
 800a586:	6923      	ldr	r3, [r4, #16]
 800a588:	b943      	cbnz	r3, 800a59c <__swsetup_r+0xa8>
 800a58a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a58e:	d1c4      	bne.n	800a51a <__swsetup_r+0x26>
 800a590:	bd38      	pop	{r3, r4, r5, pc}
 800a592:	0781      	lsls	r1, r0, #30
 800a594:	bf58      	it	pl
 800a596:	6963      	ldrpl	r3, [r4, #20]
 800a598:	60a3      	str	r3, [r4, #8]
 800a59a:	e7f4      	b.n	800a586 <__swsetup_r+0x92>
 800a59c:	2000      	movs	r0, #0
 800a59e:	e7f7      	b.n	800a590 <__swsetup_r+0x9c>
 800a5a0:	20000068 	.word	0x20000068

0800a5a4 <_raise_r>:
 800a5a4:	291f      	cmp	r1, #31
 800a5a6:	b538      	push	{r3, r4, r5, lr}
 800a5a8:	4604      	mov	r4, r0
 800a5aa:	460d      	mov	r5, r1
 800a5ac:	d904      	bls.n	800a5b8 <_raise_r+0x14>
 800a5ae:	2316      	movs	r3, #22
 800a5b0:	6003      	str	r3, [r0, #0]
 800a5b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a5b6:	bd38      	pop	{r3, r4, r5, pc}
 800a5b8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a5ba:	b112      	cbz	r2, 800a5c2 <_raise_r+0x1e>
 800a5bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a5c0:	b94b      	cbnz	r3, 800a5d6 <_raise_r+0x32>
 800a5c2:	4620      	mov	r0, r4
 800a5c4:	f000 f830 	bl	800a628 <_getpid_r>
 800a5c8:	462a      	mov	r2, r5
 800a5ca:	4601      	mov	r1, r0
 800a5cc:	4620      	mov	r0, r4
 800a5ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a5d2:	f000 b817 	b.w	800a604 <_kill_r>
 800a5d6:	2b01      	cmp	r3, #1
 800a5d8:	d00a      	beq.n	800a5f0 <_raise_r+0x4c>
 800a5da:	1c59      	adds	r1, r3, #1
 800a5dc:	d103      	bne.n	800a5e6 <_raise_r+0x42>
 800a5de:	2316      	movs	r3, #22
 800a5e0:	6003      	str	r3, [r0, #0]
 800a5e2:	2001      	movs	r0, #1
 800a5e4:	e7e7      	b.n	800a5b6 <_raise_r+0x12>
 800a5e6:	2400      	movs	r4, #0
 800a5e8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a5ec:	4628      	mov	r0, r5
 800a5ee:	4798      	blx	r3
 800a5f0:	2000      	movs	r0, #0
 800a5f2:	e7e0      	b.n	800a5b6 <_raise_r+0x12>

0800a5f4 <raise>:
 800a5f4:	4b02      	ldr	r3, [pc, #8]	; (800a600 <raise+0xc>)
 800a5f6:	4601      	mov	r1, r0
 800a5f8:	6818      	ldr	r0, [r3, #0]
 800a5fa:	f7ff bfd3 	b.w	800a5a4 <_raise_r>
 800a5fe:	bf00      	nop
 800a600:	20000068 	.word	0x20000068

0800a604 <_kill_r>:
 800a604:	b538      	push	{r3, r4, r5, lr}
 800a606:	4d07      	ldr	r5, [pc, #28]	; (800a624 <_kill_r+0x20>)
 800a608:	2300      	movs	r3, #0
 800a60a:	4604      	mov	r4, r0
 800a60c:	4608      	mov	r0, r1
 800a60e:	4611      	mov	r1, r2
 800a610:	602b      	str	r3, [r5, #0]
 800a612:	f7f7 f949 	bl	80018a8 <_kill>
 800a616:	1c43      	adds	r3, r0, #1
 800a618:	d102      	bne.n	800a620 <_kill_r+0x1c>
 800a61a:	682b      	ldr	r3, [r5, #0]
 800a61c:	b103      	cbz	r3, 800a620 <_kill_r+0x1c>
 800a61e:	6023      	str	r3, [r4, #0]
 800a620:	bd38      	pop	{r3, r4, r5, pc}
 800a622:	bf00      	nop
 800a624:	20002f70 	.word	0x20002f70

0800a628 <_getpid_r>:
 800a628:	f7f7 b936 	b.w	8001898 <_getpid>

0800a62c <__swhatbuf_r>:
 800a62c:	b570      	push	{r4, r5, r6, lr}
 800a62e:	460c      	mov	r4, r1
 800a630:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a634:	2900      	cmp	r1, #0
 800a636:	b096      	sub	sp, #88	; 0x58
 800a638:	4615      	mov	r5, r2
 800a63a:	461e      	mov	r6, r3
 800a63c:	da0d      	bge.n	800a65a <__swhatbuf_r+0x2e>
 800a63e:	89a3      	ldrh	r3, [r4, #12]
 800a640:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a644:	f04f 0100 	mov.w	r1, #0
 800a648:	bf0c      	ite	eq
 800a64a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a64e:	2340      	movne	r3, #64	; 0x40
 800a650:	2000      	movs	r0, #0
 800a652:	6031      	str	r1, [r6, #0]
 800a654:	602b      	str	r3, [r5, #0]
 800a656:	b016      	add	sp, #88	; 0x58
 800a658:	bd70      	pop	{r4, r5, r6, pc}
 800a65a:	466a      	mov	r2, sp
 800a65c:	f000 f848 	bl	800a6f0 <_fstat_r>
 800a660:	2800      	cmp	r0, #0
 800a662:	dbec      	blt.n	800a63e <__swhatbuf_r+0x12>
 800a664:	9901      	ldr	r1, [sp, #4]
 800a666:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a66a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a66e:	4259      	negs	r1, r3
 800a670:	4159      	adcs	r1, r3
 800a672:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a676:	e7eb      	b.n	800a650 <__swhatbuf_r+0x24>

0800a678 <__smakebuf_r>:
 800a678:	898b      	ldrh	r3, [r1, #12]
 800a67a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a67c:	079d      	lsls	r5, r3, #30
 800a67e:	4606      	mov	r6, r0
 800a680:	460c      	mov	r4, r1
 800a682:	d507      	bpl.n	800a694 <__smakebuf_r+0x1c>
 800a684:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a688:	6023      	str	r3, [r4, #0]
 800a68a:	6123      	str	r3, [r4, #16]
 800a68c:	2301      	movs	r3, #1
 800a68e:	6163      	str	r3, [r4, #20]
 800a690:	b002      	add	sp, #8
 800a692:	bd70      	pop	{r4, r5, r6, pc}
 800a694:	ab01      	add	r3, sp, #4
 800a696:	466a      	mov	r2, sp
 800a698:	f7ff ffc8 	bl	800a62c <__swhatbuf_r>
 800a69c:	9900      	ldr	r1, [sp, #0]
 800a69e:	4605      	mov	r5, r0
 800a6a0:	4630      	mov	r0, r6
 800a6a2:	f7ff f873 	bl	800978c <_malloc_r>
 800a6a6:	b948      	cbnz	r0, 800a6bc <__smakebuf_r+0x44>
 800a6a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6ac:	059a      	lsls	r2, r3, #22
 800a6ae:	d4ef      	bmi.n	800a690 <__smakebuf_r+0x18>
 800a6b0:	f023 0303 	bic.w	r3, r3, #3
 800a6b4:	f043 0302 	orr.w	r3, r3, #2
 800a6b8:	81a3      	strh	r3, [r4, #12]
 800a6ba:	e7e3      	b.n	800a684 <__smakebuf_r+0xc>
 800a6bc:	89a3      	ldrh	r3, [r4, #12]
 800a6be:	6020      	str	r0, [r4, #0]
 800a6c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6c4:	81a3      	strh	r3, [r4, #12]
 800a6c6:	9b00      	ldr	r3, [sp, #0]
 800a6c8:	6163      	str	r3, [r4, #20]
 800a6ca:	9b01      	ldr	r3, [sp, #4]
 800a6cc:	6120      	str	r0, [r4, #16]
 800a6ce:	b15b      	cbz	r3, 800a6e8 <__smakebuf_r+0x70>
 800a6d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a6d4:	4630      	mov	r0, r6
 800a6d6:	f000 f81d 	bl	800a714 <_isatty_r>
 800a6da:	b128      	cbz	r0, 800a6e8 <__smakebuf_r+0x70>
 800a6dc:	89a3      	ldrh	r3, [r4, #12]
 800a6de:	f023 0303 	bic.w	r3, r3, #3
 800a6e2:	f043 0301 	orr.w	r3, r3, #1
 800a6e6:	81a3      	strh	r3, [r4, #12]
 800a6e8:	89a3      	ldrh	r3, [r4, #12]
 800a6ea:	431d      	orrs	r5, r3
 800a6ec:	81a5      	strh	r5, [r4, #12]
 800a6ee:	e7cf      	b.n	800a690 <__smakebuf_r+0x18>

0800a6f0 <_fstat_r>:
 800a6f0:	b538      	push	{r3, r4, r5, lr}
 800a6f2:	4d07      	ldr	r5, [pc, #28]	; (800a710 <_fstat_r+0x20>)
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	4604      	mov	r4, r0
 800a6f8:	4608      	mov	r0, r1
 800a6fa:	4611      	mov	r1, r2
 800a6fc:	602b      	str	r3, [r5, #0]
 800a6fe:	f7f7 f932 	bl	8001966 <_fstat>
 800a702:	1c43      	adds	r3, r0, #1
 800a704:	d102      	bne.n	800a70c <_fstat_r+0x1c>
 800a706:	682b      	ldr	r3, [r5, #0]
 800a708:	b103      	cbz	r3, 800a70c <_fstat_r+0x1c>
 800a70a:	6023      	str	r3, [r4, #0]
 800a70c:	bd38      	pop	{r3, r4, r5, pc}
 800a70e:	bf00      	nop
 800a710:	20002f70 	.word	0x20002f70

0800a714 <_isatty_r>:
 800a714:	b538      	push	{r3, r4, r5, lr}
 800a716:	4d06      	ldr	r5, [pc, #24]	; (800a730 <_isatty_r+0x1c>)
 800a718:	2300      	movs	r3, #0
 800a71a:	4604      	mov	r4, r0
 800a71c:	4608      	mov	r0, r1
 800a71e:	602b      	str	r3, [r5, #0]
 800a720:	f7f7 f931 	bl	8001986 <_isatty>
 800a724:	1c43      	adds	r3, r0, #1
 800a726:	d102      	bne.n	800a72e <_isatty_r+0x1a>
 800a728:	682b      	ldr	r3, [r5, #0]
 800a72a:	b103      	cbz	r3, 800a72e <_isatty_r+0x1a>
 800a72c:	6023      	str	r3, [r4, #0]
 800a72e:	bd38      	pop	{r3, r4, r5, pc}
 800a730:	20002f70 	.word	0x20002f70

0800a734 <_init>:
 800a734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a736:	bf00      	nop
 800a738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a73a:	bc08      	pop	{r3}
 800a73c:	469e      	mov	lr, r3
 800a73e:	4770      	bx	lr

0800a740 <_fini>:
 800a740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a742:	bf00      	nop
 800a744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a746:	bc08      	pop	{r3}
 800a748:	469e      	mov	lr, r3
 800a74a:	4770      	bx	lr
