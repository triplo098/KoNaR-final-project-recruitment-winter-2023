
KoNaR_final_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c24  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08006db4  08006db4  00016db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e84  08006e84  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08006e84  08006e84  00016e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e8c  08006e8c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e8c  08006e8c  00016e8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e90  08006e90  00016e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08006e94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002d4c  20000060  08006ef4  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002dac  08006ef4  00022dac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015e3c  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000314c  00000000  00000000  00035f0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001458  00000000  00000000  00039060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fd0  00000000  00000000  0003a4b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002894a  00000000  00000000  0003b488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000165c3  00000000  00000000  00063dd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fb267  00000000  00000000  0007a395  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000059f8  00000000  00000000  001755fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0017aff4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006d9c 	.word	0x08006d9c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08006d9c 	.word	0x08006d9c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800057c:	b480      	push	{r7}
 800057e:	b085      	sub	sp, #20
 8000580:	af00      	add	r7, sp, #0
 8000582:	60f8      	str	r0, [r7, #12]
 8000584:	60b9      	str	r1, [r7, #8]
 8000586:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	4a07      	ldr	r2, [pc, #28]	; (80005a8 <vApplicationGetIdleTaskMemory+0x2c>)
 800058c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800058e:	68bb      	ldr	r3, [r7, #8]
 8000590:	4a06      	ldr	r2, [pc, #24]	; (80005ac <vApplicationGetIdleTaskMemory+0x30>)
 8000592:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	2280      	movs	r2, #128	; 0x80
 8000598:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800059a:	bf00      	nop
 800059c:	3714      	adds	r7, #20
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	2000007c 	.word	0x2000007c
 80005ac:	200000d0 	.word	0x200000d0

080005b0 <HAL_TIM_PeriodElapsedCallback>:
//static volatile bool transmitCompleteFlag = false;
static volatile bool blinkFlag = false;
static volatile bool buttonFlag = false;
static volatile bool sensorFlag = false;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]

	if (htim == &htim2) {
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	4a0a      	ldr	r2, [pc, #40]	; (80005e4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80005bc:	4293      	cmp	r3, r2
 80005be:	d103      	bne.n	80005c8 <HAL_TIM_PeriodElapsedCallback+0x18>

		blinkFlag = true;
 80005c0:	4b09      	ldr	r3, [pc, #36]	; (80005e8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80005c2:	2201      	movs	r2, #1
 80005c4:	701a      	strb	r2, [r3, #0]

		sensorFlag = true;

	}

}
 80005c6:	e006      	b.n	80005d6 <HAL_TIM_PeriodElapsedCallback+0x26>
	} else if (htim == &htim3) {
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	4a08      	ldr	r2, [pc, #32]	; (80005ec <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80005cc:	4293      	cmp	r3, r2
 80005ce:	d102      	bne.n	80005d6 <HAL_TIM_PeriodElapsedCallback+0x26>
		sensorFlag = true;
 80005d0:	4b07      	ldr	r3, [pc, #28]	; (80005f0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80005d2:	2201      	movs	r2, #1
 80005d4:	701a      	strb	r2, [r3, #0]
}
 80005d6:	bf00      	nop
 80005d8:	370c      	adds	r7, #12
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	200002d0 	.word	0x200002d0
 80005e8:	200003f4 	.word	0x200003f4
 80005ec:	2000031c 	.word	0x2000031c
 80005f0:	200003f6 	.word	0x200003f6

080005f4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	80fb      	strh	r3, [r7, #6]


	if (GPIO_Pin == B1_Pin) {
 80005fe:	88fb      	ldrh	r3, [r7, #6]
 8000600:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000604:	d102      	bne.n	800060c <HAL_GPIO_EXTI_Callback+0x18>

		buttonFlag = true;
 8000606:	4b04      	ldr	r3, [pc, #16]	; (8000618 <HAL_GPIO_EXTI_Callback+0x24>)
 8000608:	2201      	movs	r2, #1
 800060a:	701a      	strb	r2, [r3, #0]

	}
}
 800060c:	bf00      	nop
 800060e:	370c      	adds	r7, #12
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr
 8000618:	200003f5 	.word	0x200003f5

0800061c <blink>:
//		transmitCompleteFlag = true;
//	}
//
//}

void blink(void *param) {
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]

	while(1) {

		if (blinkFlag == true) {
 8000624:	4b06      	ldr	r3, [pc, #24]	; (8000640 <blink+0x24>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	b2db      	uxtb	r3, r3
 800062a:	2b00      	cmp	r3, #0
 800062c:	d0fa      	beq.n	8000624 <blink+0x8>

			blinkFlag = false;
 800062e:	4b04      	ldr	r3, [pc, #16]	; (8000640 <blink+0x24>)
 8000630:	2200      	movs	r2, #0
 8000632:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(DIODE_GPIO_Port, DIODE_Pin);
 8000634:	2110      	movs	r1, #16
 8000636:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800063a:	f000 ffc1 	bl	80015c0 <HAL_GPIO_TogglePin>
		if (blinkFlag == true) {
 800063e:	e7f1      	b.n	8000624 <blink+0x8>
 8000640:	200003f4 	.word	0x200003f4

08000644 <button>:

	}

}

void button(void *param) {
 8000644:	b580      	push	{r7, lr}
 8000646:	b092      	sub	sp, #72	; 0x48
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]

	char buffer[64] = {0};
 800064c:	2300      	movs	r3, #0
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	f107 030c 	add.w	r3, r7, #12
 8000654:	223c      	movs	r2, #60	; 0x3c
 8000656:	2100      	movs	r1, #0
 8000658:	4618      	mov	r0, r3
 800065a:	f005 ff1b 	bl	8006494 <memset>

	while (1) {

		if (buttonFlag == true) {
 800065e:	4b0e      	ldr	r3, [pc, #56]	; (8000698 <button+0x54>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	b2db      	uxtb	r3, r3
 8000664:	2b00      	cmp	r3, #0
 8000666:	d0fa      	beq.n	800065e <button+0x1a>

			buttonFlag = false;
 8000668:	4b0b      	ldr	r3, [pc, #44]	; (8000698 <button+0x54>)
 800066a:	2200      	movs	r2, #0
 800066c:	701a      	strb	r2, [r3, #0]
			snprintf((char*) buffer, sizeof(buffer), "Button Pressed!\r\n");
 800066e:	f107 0308 	add.w	r3, r7, #8
 8000672:	4a0a      	ldr	r2, [pc, #40]	; (800069c <button+0x58>)
 8000674:	2140      	movs	r1, #64	; 0x40
 8000676:	4618      	mov	r0, r3
 8000678:	f005 fed8 	bl	800642c <sniprintf>
			HAL_UART_Transmit_IT(&huart2, (uint8_t*) buffer, strlen((char*)buffer));
 800067c:	f107 0308 	add.w	r3, r7, #8
 8000680:	4618      	mov	r0, r3
 8000682:	f7ff fda5 	bl	80001d0 <strlen>
 8000686:	4603      	mov	r3, r0
 8000688:	b29a      	uxth	r2, r3
 800068a:	f107 0308 	add.w	r3, r7, #8
 800068e:	4619      	mov	r1, r3
 8000690:	4803      	ldr	r0, [pc, #12]	; (80006a0 <button+0x5c>)
 8000692:	f003 fb21 	bl	8003cd8 <HAL_UART_Transmit_IT>
		if (buttonFlag == true) {
 8000696:	e7e2      	b.n	800065e <button+0x1a>
 8000698:	200003f5 	.word	0x200003f5
 800069c:	08006db4 	.word	0x08006db4
 80006a0:	20000368 	.word	0x20000368

080006a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a4:	b5b0      	push	{r4, r5, r7, lr}
 80006a6:	b08a      	sub	sp, #40	; 0x28
 80006a8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006aa:	f000 fbbb 	bl	8000e24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ae:	f000 f843 	bl	8000738 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b2:	f000 f975 	bl	80009a0 <MX_GPIO_Init>
  MX_TIM2_Init();
 80006b6:	f000 f891 	bl	80007dc <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80006ba:	f000 f941 	bl	8000940 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80006be:	f000 f8e7 	bl	8000890 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */


  //starting timer for LED blink 13 Hz
  HAL_TIM_Base_Start_IT(&htim2);
 80006c2:	4816      	ldr	r0, [pc, #88]	; (800071c <main+0x78>)
 80006c4:	f002 face 	bl	8002c64 <HAL_TIM_Base_Start_IT>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80006c8:	4b15      	ldr	r3, [pc, #84]	; (8000720 <main+0x7c>)
 80006ca:	1d3c      	adds	r4, r7, #4
 80006cc:	461d      	mov	r5, r3
 80006ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006d2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80006da:	1d3b      	adds	r3, r7, #4
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f004 fc54 	bl	8004f8c <osThreadCreate>
 80006e4:	4603      	mov	r3, r0
 80006e6:	4a0f      	ldr	r2, [pc, #60]	; (8000724 <main+0x80>)
 80006e8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006ea:	f004 fc48 	bl	8004f7e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  xTaskCreate(blink, "blink", 512, NULL, 5, NULL);
 80006ee:	2300      	movs	r3, #0
 80006f0:	9301      	str	r3, [sp, #4]
 80006f2:	2305      	movs	r3, #5
 80006f4:	9300      	str	r3, [sp, #0]
 80006f6:	2300      	movs	r3, #0
 80006f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006fc:	490a      	ldr	r1, [pc, #40]	; (8000728 <main+0x84>)
 80006fe:	480b      	ldr	r0, [pc, #44]	; (800072c <main+0x88>)
 8000700:	f004 fdb5 	bl	800526e <xTaskCreate>
  xTaskCreate(button, "button", 512, NULL, 5, NULL);
 8000704:	2300      	movs	r3, #0
 8000706:	9301      	str	r3, [sp, #4]
 8000708:	2305      	movs	r3, #5
 800070a:	9300      	str	r3, [sp, #0]
 800070c:	2300      	movs	r3, #0
 800070e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000712:	4907      	ldr	r1, [pc, #28]	; (8000730 <main+0x8c>)
 8000714:	4807      	ldr	r0, [pc, #28]	; (8000734 <main+0x90>)
 8000716:	f004 fdaa 	bl	800526e <xTaskCreate>


  while (1)
 800071a:	e7fe      	b.n	800071a <main+0x76>
 800071c:	200002d0 	.word	0x200002d0
 8000720:	08006de4 	.word	0x08006de4
 8000724:	200003f0 	.word	0x200003f0
 8000728:	08006dc8 	.word	0x08006dc8
 800072c:	0800061d 	.word	0x0800061d
 8000730:	08006dd0 	.word	0x08006dd0
 8000734:	08000645 	.word	0x08000645

08000738 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b096      	sub	sp, #88	; 0x58
 800073c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073e:	f107 0314 	add.w	r3, r7, #20
 8000742:	2244      	movs	r2, #68	; 0x44
 8000744:	2100      	movs	r1, #0
 8000746:	4618      	mov	r0, r3
 8000748:	f005 fea4 	bl	8006494 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800074c:	463b      	mov	r3, r7
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]
 8000754:	609a      	str	r2, [r3, #8]
 8000756:	60da      	str	r2, [r3, #12]
 8000758:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800075a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800075e:	f000 ff6f 	bl	8001640 <HAL_PWREx_ControlVoltageScaling>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000768:	f000 f990 	bl	8000a8c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800076c:	2302      	movs	r3, #2
 800076e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000770:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000774:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000776:	2310      	movs	r3, #16
 8000778:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800077a:	2302      	movs	r3, #2
 800077c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800077e:	2302      	movs	r3, #2
 8000780:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000782:	2301      	movs	r3, #1
 8000784:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000786:	230a      	movs	r3, #10
 8000788:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800078a:	2307      	movs	r3, #7
 800078c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800078e:	2302      	movs	r3, #2
 8000790:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000792:	2302      	movs	r3, #2
 8000794:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000796:	f107 0314 	add.w	r3, r7, #20
 800079a:	4618      	mov	r0, r3
 800079c:	f000 ffa6 	bl	80016ec <HAL_RCC_OscConfig>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <SystemClock_Config+0x72>
  {
    Error_Handler();
 80007a6:	f000 f971 	bl	8000a8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007aa:	230f      	movs	r3, #15
 80007ac:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ae:	2303      	movs	r3, #3
 80007b0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b2:	2300      	movs	r3, #0
 80007b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007b6:	2300      	movs	r3, #0
 80007b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ba:	2300      	movs	r3, #0
 80007bc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007be:	463b      	mov	r3, r7
 80007c0:	2104      	movs	r1, #4
 80007c2:	4618      	mov	r0, r3
 80007c4:	f001 fb6e 	bl	8001ea4 <HAL_RCC_ClockConfig>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007ce:	f000 f95d 	bl	8000a8c <Error_Handler>
  }
}
 80007d2:	bf00      	nop
 80007d4:	3758      	adds	r7, #88	; 0x58
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
	...

080007dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08a      	sub	sp, #40	; 0x28
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007e2:	f107 031c 	add.w	r3, r7, #28
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007ee:	463b      	mov	r3, r7
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]
 80007fa:	611a      	str	r2, [r3, #16]
 80007fc:	615a      	str	r2, [r3, #20]
 80007fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000800:	4b22      	ldr	r3, [pc, #136]	; (800088c <MX_TIM2_Init+0xb0>)
 8000802:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000806:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1108;
 8000808:	4b20      	ldr	r3, [pc, #128]	; (800088c <MX_TIM2_Init+0xb0>)
 800080a:	f240 4254 	movw	r2, #1108	; 0x454
 800080e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000810:	4b1e      	ldr	r3, [pc, #120]	; (800088c <MX_TIM2_Init+0xb0>)
 8000812:	2200      	movs	r2, #0
 8000814:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5548;
 8000816:	4b1d      	ldr	r3, [pc, #116]	; (800088c <MX_TIM2_Init+0xb0>)
 8000818:	f241 52ac 	movw	r2, #5548	; 0x15ac
 800081c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800081e:	4b1b      	ldr	r3, [pc, #108]	; (800088c <MX_TIM2_Init+0xb0>)
 8000820:	2200      	movs	r2, #0
 8000822:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000824:	4b19      	ldr	r3, [pc, #100]	; (800088c <MX_TIM2_Init+0xb0>)
 8000826:	2200      	movs	r2, #0
 8000828:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800082a:	4818      	ldr	r0, [pc, #96]	; (800088c <MX_TIM2_Init+0xb0>)
 800082c:	f002 fae1 	bl	8002df2 <HAL_TIM_PWM_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 8000836:	f000 f929 	bl	8000a8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800083a:	2300      	movs	r3, #0
 800083c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800083e:	2300      	movs	r3, #0
 8000840:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000842:	f107 031c 	add.w	r3, r7, #28
 8000846:	4619      	mov	r1, r3
 8000848:	4810      	ldr	r0, [pc, #64]	; (800088c <MX_TIM2_Init+0xb0>)
 800084a:	f003 f951 	bl	8003af0 <HAL_TIMEx_MasterConfigSynchronization>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000854:	f000 f91a 	bl	8000a8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000858:	2360      	movs	r3, #96	; 0x60
 800085a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800085c:	2300      	movs	r3, #0
 800085e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000860:	2300      	movs	r3, #0
 8000862:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000864:	2300      	movs	r3, #0
 8000866:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000868:	463b      	mov	r3, r7
 800086a:	2200      	movs	r2, #0
 800086c:	4619      	mov	r1, r3
 800086e:	4807      	ldr	r0, [pc, #28]	; (800088c <MX_TIM2_Init+0xb0>)
 8000870:	f002 fc92 	bl	8003198 <HAL_TIM_PWM_ConfigChannel>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 800087a:	f000 f907 	bl	8000a8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800087e:	4803      	ldr	r0, [pc, #12]	; (800088c <MX_TIM2_Init+0xb0>)
 8000880:	f000 f97c 	bl	8000b7c <HAL_TIM_MspPostInit>

}
 8000884:	bf00      	nop
 8000886:	3728      	adds	r7, #40	; 0x28
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	200002d0 	.word	0x200002d0

08000890 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b08a      	sub	sp, #40	; 0x28
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000896:	f107 031c 	add.w	r3, r7, #28
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	605a      	str	r2, [r3, #4]
 80008a0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008a2:	463b      	mov	r3, r7
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	609a      	str	r2, [r3, #8]
 80008ac:	60da      	str	r2, [r3, #12]
 80008ae:	611a      	str	r2, [r3, #16]
 80008b0:	615a      	str	r2, [r3, #20]
 80008b2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008b4:	4b20      	ldr	r3, [pc, #128]	; (8000938 <MX_TIM3_Init+0xa8>)
 80008b6:	4a21      	ldr	r2, [pc, #132]	; (800093c <MX_TIM3_Init+0xac>)
 80008b8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 55516;
 80008ba:	4b1f      	ldr	r3, [pc, #124]	; (8000938 <MX_TIM3_Init+0xa8>)
 80008bc:	f64d 02dc 	movw	r2, #55516	; 0xd8dc
 80008c0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c2:	4b1d      	ldr	r3, [pc, #116]	; (8000938 <MX_TIM3_Init+0xa8>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80008c8:	4b1b      	ldr	r3, [pc, #108]	; (8000938 <MX_TIM3_Init+0xa8>)
 80008ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008ce:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008d0:	4b19      	ldr	r3, [pc, #100]	; (8000938 <MX_TIM3_Init+0xa8>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008d6:	4b18      	ldr	r3, [pc, #96]	; (8000938 <MX_TIM3_Init+0xa8>)
 80008d8:	2200      	movs	r2, #0
 80008da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80008dc:	4816      	ldr	r0, [pc, #88]	; (8000938 <MX_TIM3_Init+0xa8>)
 80008de:	f002 fa31 	bl	8002d44 <HAL_TIM_OC_Init>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 80008e8:	f000 f8d0 	bl	8000a8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ec:	2300      	movs	r3, #0
 80008ee:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008f0:	2300      	movs	r3, #0
 80008f2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008f4:	f107 031c 	add.w	r3, r7, #28
 80008f8:	4619      	mov	r1, r3
 80008fa:	480f      	ldr	r0, [pc, #60]	; (8000938 <MX_TIM3_Init+0xa8>)
 80008fc:	f003 f8f8 	bl	8003af0 <HAL_TIMEx_MasterConfigSynchronization>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8000906:	f000 f8c1 	bl	8000a8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800090a:	2300      	movs	r3, #0
 800090c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800090e:	2300      	movs	r3, #0
 8000910:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000912:	2300      	movs	r3, #0
 8000914:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000916:	2300      	movs	r3, #0
 8000918:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800091a:	463b      	mov	r3, r7
 800091c:	2200      	movs	r2, #0
 800091e:	4619      	mov	r1, r3
 8000920:	4805      	ldr	r0, [pc, #20]	; (8000938 <MX_TIM3_Init+0xa8>)
 8000922:	f002 fbbf 	bl	80030a4 <HAL_TIM_OC_ConfigChannel>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 800092c:	f000 f8ae 	bl	8000a8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000930:	bf00      	nop
 8000932:	3728      	adds	r7, #40	; 0x28
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	2000031c 	.word	0x2000031c
 800093c:	40000400 	.word	0x40000400

08000940 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000944:	4b14      	ldr	r3, [pc, #80]	; (8000998 <MX_USART2_UART_Init+0x58>)
 8000946:	4a15      	ldr	r2, [pc, #84]	; (800099c <MX_USART2_UART_Init+0x5c>)
 8000948:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800094a:	4b13      	ldr	r3, [pc, #76]	; (8000998 <MX_USART2_UART_Init+0x58>)
 800094c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000950:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000952:	4b11      	ldr	r3, [pc, #68]	; (8000998 <MX_USART2_UART_Init+0x58>)
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000958:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <MX_USART2_UART_Init+0x58>)
 800095a:	2200      	movs	r2, #0
 800095c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800095e:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <MX_USART2_UART_Init+0x58>)
 8000960:	2200      	movs	r2, #0
 8000962:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000964:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <MX_USART2_UART_Init+0x58>)
 8000966:	220c      	movs	r2, #12
 8000968:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800096a:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <MX_USART2_UART_Init+0x58>)
 800096c:	2200      	movs	r2, #0
 800096e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000970:	4b09      	ldr	r3, [pc, #36]	; (8000998 <MX_USART2_UART_Init+0x58>)
 8000972:	2200      	movs	r2, #0
 8000974:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000976:	4b08      	ldr	r3, [pc, #32]	; (8000998 <MX_USART2_UART_Init+0x58>)
 8000978:	2200      	movs	r2, #0
 800097a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800097c:	4b06      	ldr	r3, [pc, #24]	; (8000998 <MX_USART2_UART_Init+0x58>)
 800097e:	2200      	movs	r2, #0
 8000980:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000982:	4805      	ldr	r0, [pc, #20]	; (8000998 <MX_USART2_UART_Init+0x58>)
 8000984:	f003 f95a 	bl	8003c3c <HAL_UART_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800098e:	f000 f87d 	bl	8000a8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20000368 	.word	0x20000368
 800099c:	40004400 	.word	0x40004400

080009a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08a      	sub	sp, #40	; 0x28
 80009a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a6:	f107 0314 	add.w	r3, r7, #20
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]
 80009b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009b6:	4b2f      	ldr	r3, [pc, #188]	; (8000a74 <MX_GPIO_Init+0xd4>)
 80009b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ba:	4a2e      	ldr	r2, [pc, #184]	; (8000a74 <MX_GPIO_Init+0xd4>)
 80009bc:	f043 0304 	orr.w	r3, r3, #4
 80009c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009c2:	4b2c      	ldr	r3, [pc, #176]	; (8000a74 <MX_GPIO_Init+0xd4>)
 80009c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c6:	f003 0304 	and.w	r3, r3, #4
 80009ca:	613b      	str	r3, [r7, #16]
 80009cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ce:	4b29      	ldr	r3, [pc, #164]	; (8000a74 <MX_GPIO_Init+0xd4>)
 80009d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d2:	4a28      	ldr	r2, [pc, #160]	; (8000a74 <MX_GPIO_Init+0xd4>)
 80009d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009da:	4b26      	ldr	r3, [pc, #152]	; (8000a74 <MX_GPIO_Init+0xd4>)
 80009dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e6:	4b23      	ldr	r3, [pc, #140]	; (8000a74 <MX_GPIO_Init+0xd4>)
 80009e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ea:	4a22      	ldr	r2, [pc, #136]	; (8000a74 <MX_GPIO_Init+0xd4>)
 80009ec:	f043 0301 	orr.w	r3, r3, #1
 80009f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009f2:	4b20      	ldr	r3, [pc, #128]	; (8000a74 <MX_GPIO_Init+0xd4>)
 80009f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f6:	f003 0301 	and.w	r3, r3, #1
 80009fa:	60bb      	str	r3, [r7, #8]
 80009fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fe:	4b1d      	ldr	r3, [pc, #116]	; (8000a74 <MX_GPIO_Init+0xd4>)
 8000a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a02:	4a1c      	ldr	r2, [pc, #112]	; (8000a74 <MX_GPIO_Init+0xd4>)
 8000a04:	f043 0302 	orr.w	r3, r3, #2
 8000a08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a0a:	4b1a      	ldr	r3, [pc, #104]	; (8000a74 <MX_GPIO_Init+0xd4>)
 8000a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0e:	f003 0302 	and.w	r3, r3, #2
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIODE_GPIO_Port, DIODE_Pin, GPIO_PIN_RESET);
 8000a16:	2200      	movs	r2, #0
 8000a18:	2110      	movs	r1, #16
 8000a1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a1e:	f000 fdb7 	bl	8001590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a28:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a32:	f107 0314 	add.w	r3, r7, #20
 8000a36:	4619      	mov	r1, r3
 8000a38:	480f      	ldr	r0, [pc, #60]	; (8000a78 <MX_GPIO_Init+0xd8>)
 8000a3a:	f000 fbff 	bl	800123c <HAL_GPIO_Init>

  /*Configure GPIO pin : DIODE_Pin */
  GPIO_InitStruct.Pin = DIODE_Pin;
 8000a3e:	2310      	movs	r3, #16
 8000a40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a42:	2301      	movs	r3, #1
 8000a44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIODE_GPIO_Port, &GPIO_InitStruct);
 8000a4e:	f107 0314 	add.w	r3, r7, #20
 8000a52:	4619      	mov	r1, r3
 8000a54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a58:	f000 fbf0 	bl	800123c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	2105      	movs	r1, #5
 8000a60:	2028      	movs	r0, #40	; 0x28
 8000a62:	f000 fb36 	bl	80010d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a66:	2028      	movs	r0, #40	; 0x28
 8000a68:	f000 fb4f 	bl	800110a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a6c:	bf00      	nop
 8000a6e:	3728      	adds	r7, #40	; 0x28
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	40021000 	.word	0x40021000
 8000a78:	48000800 	.word	0x48000800

08000a7c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a84:	2001      	movs	r0, #1
 8000a86:	f004 facd 	bl	8005024 <osDelay>
 8000a8a:	e7fb      	b.n	8000a84 <StartDefaultTask+0x8>

08000a8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a90:	b672      	cpsid	i
}
 8000a92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <Error_Handler+0x8>
	...

08000a98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a9e:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000aa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aa2:	4a10      	ldr	r2, [pc, #64]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000aa4:	f043 0301 	orr.w	r3, r3, #1
 8000aa8:	6613      	str	r3, [r2, #96]	; 0x60
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000aac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aae:	f003 0301 	and.w	r3, r3, #1
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aba:	4a0a      	ldr	r2, [pc, #40]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ac2:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <HAL_MspInit+0x4c>)
 8000ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aca:	603b      	str	r3, [r7, #0]
 8000acc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	210f      	movs	r1, #15
 8000ad2:	f06f 0001 	mvn.w	r0, #1
 8000ad6:	f000 fafc 	bl	80010d2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40021000 	.word	0x40021000

08000ae8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000af8:	d113      	bne.n	8000b22 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000afa:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <HAL_TIM_PWM_MspInit+0x44>)
 8000afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000afe:	4a0b      	ldr	r2, [pc, #44]	; (8000b2c <HAL_TIM_PWM_MspInit+0x44>)
 8000b00:	f043 0301 	orr.w	r3, r3, #1
 8000b04:	6593      	str	r3, [r2, #88]	; 0x58
 8000b06:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <HAL_TIM_PWM_MspInit+0x44>)
 8000b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b0a:	f003 0301 	and.w	r3, r3, #1
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000b12:	2200      	movs	r2, #0
 8000b14:	2105      	movs	r1, #5
 8000b16:	201c      	movs	r0, #28
 8000b18:	f000 fadb 	bl	80010d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b1c:	201c      	movs	r0, #28
 8000b1e:	f000 faf4 	bl	800110a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b22:	bf00      	nop
 8000b24:	3710      	adds	r7, #16
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40021000 	.word	0x40021000

08000b30 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM3)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a0d      	ldr	r2, [pc, #52]	; (8000b74 <HAL_TIM_OC_MspInit+0x44>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d113      	bne.n	8000b6a <HAL_TIM_OC_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b42:	4b0d      	ldr	r3, [pc, #52]	; (8000b78 <HAL_TIM_OC_MspInit+0x48>)
 8000b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b46:	4a0c      	ldr	r2, [pc, #48]	; (8000b78 <HAL_TIM_OC_MspInit+0x48>)
 8000b48:	f043 0302 	orr.w	r3, r3, #2
 8000b4c:	6593      	str	r3, [r2, #88]	; 0x58
 8000b4e:	4b0a      	ldr	r3, [pc, #40]	; (8000b78 <HAL_TIM_OC_MspInit+0x48>)
 8000b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b52:	f003 0302 	and.w	r3, r3, #2
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2105      	movs	r1, #5
 8000b5e:	201d      	movs	r0, #29
 8000b60:	f000 fab7 	bl	80010d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000b64:	201d      	movs	r0, #29
 8000b66:	f000 fad0 	bl	800110a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000b6a:	bf00      	nop
 8000b6c:	3710      	adds	r7, #16
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40000400 	.word	0x40000400
 8000b78:	40021000 	.word	0x40021000

08000b7c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b088      	sub	sp, #32
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b84:	f107 030c 	add.w	r3, r7, #12
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
 8000b92:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b9c:	d11c      	bne.n	8000bd8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9e:	4b10      	ldr	r3, [pc, #64]	; (8000be0 <HAL_TIM_MspPostInit+0x64>)
 8000ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba2:	4a0f      	ldr	r2, [pc, #60]	; (8000be0 <HAL_TIM_MspPostInit+0x64>)
 8000ba4:	f043 0301 	orr.w	r3, r3, #1
 8000ba8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000baa:	4b0d      	ldr	r3, [pc, #52]	; (8000be0 <HAL_TIM_MspPostInit+0x64>)
 8000bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bae:	f003 0301 	and.w	r3, r3, #1
 8000bb2:	60bb      	str	r3, [r7, #8]
 8000bb4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000bb6:	2320      	movs	r3, #32
 8000bb8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bca:	f107 030c 	add.w	r3, r7, #12
 8000bce:	4619      	mov	r1, r3
 8000bd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bd4:	f000 fb32 	bl	800123c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000bd8:	bf00      	nop
 8000bda:	3720      	adds	r7, #32
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	40021000 	.word	0x40021000

08000be4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b0ac      	sub	sp, #176	; 0xb0
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bfc:	f107 0314 	add.w	r3, r7, #20
 8000c00:	2288      	movs	r2, #136	; 0x88
 8000c02:	2100      	movs	r1, #0
 8000c04:	4618      	mov	r0, r3
 8000c06:	f005 fc45 	bl	8006494 <memset>
  if(huart->Instance==USART2)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a25      	ldr	r2, [pc, #148]	; (8000ca4 <HAL_UART_MspInit+0xc0>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d143      	bne.n	8000c9c <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c14:	2302      	movs	r3, #2
 8000c16:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	4618      	mov	r0, r3
 8000c22:	f001 fb63 	bl	80022ec <HAL_RCCEx_PeriphCLKConfig>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c2c:	f7ff ff2e 	bl	8000a8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c30:	4b1d      	ldr	r3, [pc, #116]	; (8000ca8 <HAL_UART_MspInit+0xc4>)
 8000c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c34:	4a1c      	ldr	r2, [pc, #112]	; (8000ca8 <HAL_UART_MspInit+0xc4>)
 8000c36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c3a:	6593      	str	r3, [r2, #88]	; 0x58
 8000c3c:	4b1a      	ldr	r3, [pc, #104]	; (8000ca8 <HAL_UART_MspInit+0xc4>)
 8000c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c44:	613b      	str	r3, [r7, #16]
 8000c46:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c48:	4b17      	ldr	r3, [pc, #92]	; (8000ca8 <HAL_UART_MspInit+0xc4>)
 8000c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c4c:	4a16      	ldr	r2, [pc, #88]	; (8000ca8 <HAL_UART_MspInit+0xc4>)
 8000c4e:	f043 0301 	orr.w	r3, r3, #1
 8000c52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c54:	4b14      	ldr	r3, [pc, #80]	; (8000ca8 <HAL_UART_MspInit+0xc4>)
 8000c56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c58:	f003 0301 	and.w	r3, r3, #1
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c60:	230c      	movs	r3, #12
 8000c62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c66:	2302      	movs	r3, #2
 8000c68:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c72:	2303      	movs	r3, #3
 8000c74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c78:	2307      	movs	r3, #7
 8000c7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c82:	4619      	mov	r1, r3
 8000c84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c88:	f000 fad8 	bl	800123c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	2105      	movs	r1, #5
 8000c90:	2026      	movs	r0, #38	; 0x26
 8000c92:	f000 fa1e 	bl	80010d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c96:	2026      	movs	r0, #38	; 0x26
 8000c98:	f000 fa37 	bl	800110a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c9c:	bf00      	nop
 8000c9e:	37b0      	adds	r7, #176	; 0xb0
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40004400 	.word	0x40004400
 8000ca8:	40021000 	.word	0x40021000

08000cac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cb0:	e7fe      	b.n	8000cb0 <NMI_Handler+0x4>

08000cb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cb6:	e7fe      	b.n	8000cb6 <HardFault_Handler+0x4>

08000cb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cbc:	e7fe      	b.n	8000cbc <MemManage_Handler+0x4>

08000cbe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cc2:	e7fe      	b.n	8000cc2 <BusFault_Handler+0x4>

08000cc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cc8:	e7fe      	b.n	8000cc8 <UsageFault_Handler+0x4>

08000cca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cdc:	f000 f8fe 	bl	8000edc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000ce0:	f004 ff24 	bl	8005b2c <xTaskGetSchedulerState>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d001      	beq.n	8000cee <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000cea:	f005 f965 	bl	8005fb8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
	...

08000cf4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000cf8:	4802      	ldr	r0, [pc, #8]	; (8000d04 <TIM2_IRQHandler+0x10>)
 8000cfa:	f002 f8d1 	bl	8002ea0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	200002d0 	.word	0x200002d0

08000d08 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000d0c:	4802      	ldr	r0, [pc, #8]	; (8000d18 <TIM3_IRQHandler+0x10>)
 8000d0e:	f002 f8c7 	bl	8002ea0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	2000031c 	.word	0x2000031c

08000d1c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d20:	4802      	ldr	r0, [pc, #8]	; (8000d2c <USART2_IRQHandler+0x10>)
 8000d22:	f003 f837 	bl	8003d94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20000368 	.word	0x20000368

08000d30 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000d34:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000d38:	f000 fc5c 	bl	80015f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d3c:	bf00      	nop
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d48:	4a14      	ldr	r2, [pc, #80]	; (8000d9c <_sbrk+0x5c>)
 8000d4a:	4b15      	ldr	r3, [pc, #84]	; (8000da0 <_sbrk+0x60>)
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d54:	4b13      	ldr	r3, [pc, #76]	; (8000da4 <_sbrk+0x64>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d102      	bne.n	8000d62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d5c:	4b11      	ldr	r3, [pc, #68]	; (8000da4 <_sbrk+0x64>)
 8000d5e:	4a12      	ldr	r2, [pc, #72]	; (8000da8 <_sbrk+0x68>)
 8000d60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d62:	4b10      	ldr	r3, [pc, #64]	; (8000da4 <_sbrk+0x64>)
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4413      	add	r3, r2
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d207      	bcs.n	8000d80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d70:	f005 fb98 	bl	80064a4 <__errno>
 8000d74:	4603      	mov	r3, r0
 8000d76:	220c      	movs	r2, #12
 8000d78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d7e:	e009      	b.n	8000d94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d80:	4b08      	ldr	r3, [pc, #32]	; (8000da4 <_sbrk+0x64>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d86:	4b07      	ldr	r3, [pc, #28]	; (8000da4 <_sbrk+0x64>)
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4413      	add	r3, r2
 8000d8e:	4a05      	ldr	r2, [pc, #20]	; (8000da4 <_sbrk+0x64>)
 8000d90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d92:	68fb      	ldr	r3, [r7, #12]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3718      	adds	r7, #24
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	20018000 	.word	0x20018000
 8000da0:	00000400 	.word	0x00000400
 8000da4:	200003f8 	.word	0x200003f8
 8000da8:	20002db0 	.word	0x20002db0

08000dac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000db0:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <SystemInit+0x20>)
 8000db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000db6:	4a05      	ldr	r2, [pc, #20]	; (8000dcc <SystemInit+0x20>)
 8000db8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000dd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e08 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000dd4:	f7ff ffea 	bl	8000dac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dd8:	480c      	ldr	r0, [pc, #48]	; (8000e0c <LoopForever+0x6>)
  ldr r1, =_edata
 8000dda:	490d      	ldr	r1, [pc, #52]	; (8000e10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ddc:	4a0d      	ldr	r2, [pc, #52]	; (8000e14 <LoopForever+0xe>)
  movs r3, #0
 8000dde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000de0:	e002      	b.n	8000de8 <LoopCopyDataInit>

08000de2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000de2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000de4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000de6:	3304      	adds	r3, #4

08000de8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000de8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dec:	d3f9      	bcc.n	8000de2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dee:	4a0a      	ldr	r2, [pc, #40]	; (8000e18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000df0:	4c0a      	ldr	r4, [pc, #40]	; (8000e1c <LoopForever+0x16>)
  movs r3, #0
 8000df2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000df4:	e001      	b.n	8000dfa <LoopFillZerobss>

08000df6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000df6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000df8:	3204      	adds	r2, #4

08000dfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dfc:	d3fb      	bcc.n	8000df6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dfe:	f005 fb57 	bl	80064b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e02:	f7ff fc4f 	bl	80006a4 <main>

08000e06 <LoopForever>:

LoopForever:
    b LoopForever
 8000e06:	e7fe      	b.n	8000e06 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e08:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e10:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000e14:	08006e94 	.word	0x08006e94
  ldr r2, =_sbss
 8000e18:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000e1c:	20002dac 	.word	0x20002dac

08000e20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e20:	e7fe      	b.n	8000e20 <ADC1_2_IRQHandler>
	...

08000e24 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e2e:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <HAL_Init+0x3c>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a0b      	ldr	r2, [pc, #44]	; (8000e60 <HAL_Init+0x3c>)
 8000e34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e38:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e3a:	2003      	movs	r0, #3
 8000e3c:	f000 f93e 	bl	80010bc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e40:	200f      	movs	r0, #15
 8000e42:	f000 f80f 	bl	8000e64 <HAL_InitTick>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d002      	beq.n	8000e52 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	71fb      	strb	r3, [r7, #7]
 8000e50:	e001      	b.n	8000e56 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e52:	f7ff fe21 	bl	8000a98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e56:	79fb      	ldrb	r3, [r7, #7]
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3708      	adds	r7, #8
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	40022000 	.word	0x40022000

08000e64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e70:	4b17      	ldr	r3, [pc, #92]	; (8000ed0 <HAL_InitTick+0x6c>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d023      	beq.n	8000ec0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e78:	4b16      	ldr	r3, [pc, #88]	; (8000ed4 <HAL_InitTick+0x70>)
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	4b14      	ldr	r3, [pc, #80]	; (8000ed0 <HAL_InitTick+0x6c>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	4619      	mov	r1, r3
 8000e82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f000 f949 	bl	8001126 <HAL_SYSTICK_Config>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d10f      	bne.n	8000eba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2b0f      	cmp	r3, #15
 8000e9e:	d809      	bhi.n	8000eb4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	6879      	ldr	r1, [r7, #4]
 8000ea4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ea8:	f000 f913 	bl	80010d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000eac:	4a0a      	ldr	r2, [pc, #40]	; (8000ed8 <HAL_InitTick+0x74>)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6013      	str	r3, [r2, #0]
 8000eb2:	e007      	b.n	8000ec4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	73fb      	strb	r3, [r7, #15]
 8000eb8:	e004      	b.n	8000ec4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	73fb      	strb	r3, [r7, #15]
 8000ebe:	e001      	b.n	8000ec4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3710      	adds	r7, #16
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	20000008 	.word	0x20000008
 8000ed4:	20000000 	.word	0x20000000
 8000ed8:	20000004 	.word	0x20000004

08000edc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ee0:	4b06      	ldr	r3, [pc, #24]	; (8000efc <HAL_IncTick+0x20>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <HAL_IncTick+0x24>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4413      	add	r3, r2
 8000eec:	4a04      	ldr	r2, [pc, #16]	; (8000f00 <HAL_IncTick+0x24>)
 8000eee:	6013      	str	r3, [r2, #0]
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	20000008 	.word	0x20000008
 8000f00:	200003fc 	.word	0x200003fc

08000f04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  return uwTick;
 8000f08:	4b03      	ldr	r3, [pc, #12]	; (8000f18 <HAL_GetTick+0x14>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	200003fc 	.word	0x200003fc

08000f1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f003 0307 	and.w	r3, r3, #7
 8000f2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f2c:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <__NVIC_SetPriorityGrouping+0x44>)
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f32:	68ba      	ldr	r2, [r7, #8]
 8000f34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f38:	4013      	ands	r3, r2
 8000f3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f4e:	4a04      	ldr	r2, [pc, #16]	; (8000f60 <__NVIC_SetPriorityGrouping+0x44>)
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	60d3      	str	r3, [r2, #12]
}
 8000f54:	bf00      	nop
 8000f56:	3714      	adds	r7, #20
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f68:	4b04      	ldr	r3, [pc, #16]	; (8000f7c <__NVIC_GetPriorityGrouping+0x18>)
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	0a1b      	lsrs	r3, r3, #8
 8000f6e:	f003 0307 	and.w	r3, r3, #7
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	e000ed00 	.word	0xe000ed00

08000f80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	db0b      	blt.n	8000faa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	f003 021f 	and.w	r2, r3, #31
 8000f98:	4907      	ldr	r1, [pc, #28]	; (8000fb8 <__NVIC_EnableIRQ+0x38>)
 8000f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9e:	095b      	lsrs	r3, r3, #5
 8000fa0:	2001      	movs	r0, #1
 8000fa2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000faa:	bf00      	nop
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	e000e100 	.word	0xe000e100

08000fbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	6039      	str	r1, [r7, #0]
 8000fc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	db0a      	blt.n	8000fe6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	b2da      	uxtb	r2, r3
 8000fd4:	490c      	ldr	r1, [pc, #48]	; (8001008 <__NVIC_SetPriority+0x4c>)
 8000fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fda:	0112      	lsls	r2, r2, #4
 8000fdc:	b2d2      	uxtb	r2, r2
 8000fde:	440b      	add	r3, r1
 8000fe0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fe4:	e00a      	b.n	8000ffc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	b2da      	uxtb	r2, r3
 8000fea:	4908      	ldr	r1, [pc, #32]	; (800100c <__NVIC_SetPriority+0x50>)
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	f003 030f 	and.w	r3, r3, #15
 8000ff2:	3b04      	subs	r3, #4
 8000ff4:	0112      	lsls	r2, r2, #4
 8000ff6:	b2d2      	uxtb	r2, r2
 8000ff8:	440b      	add	r3, r1
 8000ffa:	761a      	strb	r2, [r3, #24]
}
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	e000e100 	.word	0xe000e100
 800100c:	e000ed00 	.word	0xe000ed00

08001010 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001010:	b480      	push	{r7}
 8001012:	b089      	sub	sp, #36	; 0x24
 8001014:	af00      	add	r7, sp, #0
 8001016:	60f8      	str	r0, [r7, #12]
 8001018:	60b9      	str	r1, [r7, #8]
 800101a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	f003 0307 	and.w	r3, r3, #7
 8001022:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	f1c3 0307 	rsb	r3, r3, #7
 800102a:	2b04      	cmp	r3, #4
 800102c:	bf28      	it	cs
 800102e:	2304      	movcs	r3, #4
 8001030:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	3304      	adds	r3, #4
 8001036:	2b06      	cmp	r3, #6
 8001038:	d902      	bls.n	8001040 <NVIC_EncodePriority+0x30>
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	3b03      	subs	r3, #3
 800103e:	e000      	b.n	8001042 <NVIC_EncodePriority+0x32>
 8001040:	2300      	movs	r3, #0
 8001042:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001044:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001048:	69bb      	ldr	r3, [r7, #24]
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	43da      	mvns	r2, r3
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	401a      	ands	r2, r3
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001058:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	fa01 f303 	lsl.w	r3, r1, r3
 8001062:	43d9      	mvns	r1, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001068:	4313      	orrs	r3, r2
         );
}
 800106a:	4618      	mov	r0, r3
 800106c:	3724      	adds	r7, #36	; 0x24
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
	...

08001078 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	3b01      	subs	r3, #1
 8001084:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001088:	d301      	bcc.n	800108e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800108a:	2301      	movs	r3, #1
 800108c:	e00f      	b.n	80010ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800108e:	4a0a      	ldr	r2, [pc, #40]	; (80010b8 <SysTick_Config+0x40>)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3b01      	subs	r3, #1
 8001094:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001096:	210f      	movs	r1, #15
 8001098:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800109c:	f7ff ff8e 	bl	8000fbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010a0:	4b05      	ldr	r3, [pc, #20]	; (80010b8 <SysTick_Config+0x40>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010a6:	4b04      	ldr	r3, [pc, #16]	; (80010b8 <SysTick_Config+0x40>)
 80010a8:	2207      	movs	r2, #7
 80010aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010ac:	2300      	movs	r3, #0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	e000e010 	.word	0xe000e010

080010bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f7ff ff29 	bl	8000f1c <__NVIC_SetPriorityGrouping>
}
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b086      	sub	sp, #24
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	4603      	mov	r3, r0
 80010da:	60b9      	str	r1, [r7, #8]
 80010dc:	607a      	str	r2, [r7, #4]
 80010de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010e0:	2300      	movs	r3, #0
 80010e2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010e4:	f7ff ff3e 	bl	8000f64 <__NVIC_GetPriorityGrouping>
 80010e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	68b9      	ldr	r1, [r7, #8]
 80010ee:	6978      	ldr	r0, [r7, #20]
 80010f0:	f7ff ff8e 	bl	8001010 <NVIC_EncodePriority>
 80010f4:	4602      	mov	r2, r0
 80010f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010fa:	4611      	mov	r1, r2
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff ff5d 	bl	8000fbc <__NVIC_SetPriority>
}
 8001102:	bf00      	nop
 8001104:	3718      	adds	r7, #24
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b082      	sub	sp, #8
 800110e:	af00      	add	r7, sp, #0
 8001110:	4603      	mov	r3, r0
 8001112:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff ff31 	bl	8000f80 <__NVIC_EnableIRQ>
}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b082      	sub	sp, #8
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f7ff ffa2 	bl	8001078 <SysTick_Config>
 8001134:	4603      	mov	r3, r0
}
 8001136:	4618      	mov	r0, r3
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800113e:	b480      	push	{r7}
 8001140:	b085      	sub	sp, #20
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001146:	2300      	movs	r3, #0
 8001148:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001150:	b2db      	uxtb	r3, r3
 8001152:	2b02      	cmp	r3, #2
 8001154:	d008      	beq.n	8001168 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2204      	movs	r2, #4
 800115a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2200      	movs	r2, #0
 8001160:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	e022      	b.n	80011ae <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f022 020e 	bic.w	r2, r2, #14
 8001176:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f022 0201 	bic.w	r2, r2, #1
 8001186:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118c:	f003 021c 	and.w	r2, r3, #28
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001194:	2101      	movs	r1, #1
 8001196:	fa01 f202 	lsl.w	r2, r1, r2
 800119a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2201      	movs	r2, #1
 80011a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2200      	movs	r2, #0
 80011a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80011ac:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3714      	adds	r7, #20
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr

080011ba <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b084      	sub	sp, #16
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011c2:	2300      	movs	r3, #0
 80011c4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d005      	beq.n	80011de <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2204      	movs	r2, #4
 80011d6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	73fb      	strb	r3, [r7, #15]
 80011dc:	e029      	b.n	8001232 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f022 020e 	bic.w	r2, r2, #14
 80011ec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f022 0201 	bic.w	r2, r2, #1
 80011fc:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001202:	f003 021c 	and.w	r2, r3, #28
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120a:	2101      	movs	r1, #1
 800120c:	fa01 f202 	lsl.w	r2, r1, r2
 8001210:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2201      	movs	r2, #1
 8001216:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2200      	movs	r2, #0
 800121e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001226:	2b00      	cmp	r3, #0
 8001228:	d003      	beq.n	8001232 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	4798      	blx	r3
    }
  }
  return status;
 8001232:	7bfb      	ldrb	r3, [r7, #15]
}
 8001234:	4618      	mov	r0, r3
 8001236:	3710      	adds	r7, #16
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800123c:	b480      	push	{r7}
 800123e:	b087      	sub	sp, #28
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001246:	2300      	movs	r3, #0
 8001248:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800124a:	e17f      	b.n	800154c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	2101      	movs	r1, #1
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	fa01 f303 	lsl.w	r3, r1, r3
 8001258:	4013      	ands	r3, r2
 800125a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	2b00      	cmp	r3, #0
 8001260:	f000 8171 	beq.w	8001546 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f003 0303 	and.w	r3, r3, #3
 800126c:	2b01      	cmp	r3, #1
 800126e:	d005      	beq.n	800127c <HAL_GPIO_Init+0x40>
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f003 0303 	and.w	r3, r3, #3
 8001278:	2b02      	cmp	r3, #2
 800127a:	d130      	bne.n	80012de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	2203      	movs	r2, #3
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	43db      	mvns	r3, r3
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	4013      	ands	r3, r2
 8001292:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	68da      	ldr	r2, [r3, #12]
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012b2:	2201      	movs	r2, #1
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ba:	43db      	mvns	r3, r3
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	4013      	ands	r3, r2
 80012c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	091b      	lsrs	r3, r3, #4
 80012c8:	f003 0201 	and.w	r2, r3, #1
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f003 0303 	and.w	r3, r3, #3
 80012e6:	2b03      	cmp	r3, #3
 80012e8:	d118      	bne.n	800131c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80012f0:	2201      	movs	r2, #1
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	43db      	mvns	r3, r3
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	4013      	ands	r3, r2
 80012fe:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	08db      	lsrs	r3, r3, #3
 8001306:	f003 0201 	and.w	r2, r3, #1
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	4313      	orrs	r3, r2
 8001314:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f003 0303 	and.w	r3, r3, #3
 8001324:	2b03      	cmp	r3, #3
 8001326:	d017      	beq.n	8001358 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	2203      	movs	r2, #3
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	43db      	mvns	r3, r3
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	4013      	ands	r3, r2
 800133e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	689a      	ldr	r2, [r3, #8]
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	4313      	orrs	r3, r2
 8001350:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f003 0303 	and.w	r3, r3, #3
 8001360:	2b02      	cmp	r3, #2
 8001362:	d123      	bne.n	80013ac <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	08da      	lsrs	r2, r3, #3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	3208      	adds	r2, #8
 800136c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001370:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	f003 0307 	and.w	r3, r3, #7
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	220f      	movs	r2, #15
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	43db      	mvns	r3, r3
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	4013      	ands	r3, r2
 8001386:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	691a      	ldr	r2, [r3, #16]
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	f003 0307 	and.w	r3, r3, #7
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	4313      	orrs	r3, r2
 800139c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	08da      	lsrs	r2, r3, #3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	3208      	adds	r2, #8
 80013a6:	6939      	ldr	r1, [r7, #16]
 80013a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	2203      	movs	r2, #3
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	43db      	mvns	r3, r3
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	4013      	ands	r3, r2
 80013c2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f003 0203 	and.w	r2, r3, #3
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	693a      	ldr	r2, [r7, #16]
 80013de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	f000 80ac 	beq.w	8001546 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ee:	4b5f      	ldr	r3, [pc, #380]	; (800156c <HAL_GPIO_Init+0x330>)
 80013f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013f2:	4a5e      	ldr	r2, [pc, #376]	; (800156c <HAL_GPIO_Init+0x330>)
 80013f4:	f043 0301 	orr.w	r3, r3, #1
 80013f8:	6613      	str	r3, [r2, #96]	; 0x60
 80013fa:	4b5c      	ldr	r3, [pc, #368]	; (800156c <HAL_GPIO_Init+0x330>)
 80013fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	60bb      	str	r3, [r7, #8]
 8001404:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001406:	4a5a      	ldr	r2, [pc, #360]	; (8001570 <HAL_GPIO_Init+0x334>)
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	089b      	lsrs	r3, r3, #2
 800140c:	3302      	adds	r3, #2
 800140e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001412:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	f003 0303 	and.w	r3, r3, #3
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	220f      	movs	r2, #15
 800141e:	fa02 f303 	lsl.w	r3, r2, r3
 8001422:	43db      	mvns	r3, r3
 8001424:	693a      	ldr	r2, [r7, #16]
 8001426:	4013      	ands	r3, r2
 8001428:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001430:	d025      	beq.n	800147e <HAL_GPIO_Init+0x242>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a4f      	ldr	r2, [pc, #316]	; (8001574 <HAL_GPIO_Init+0x338>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d01f      	beq.n	800147a <HAL_GPIO_Init+0x23e>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a4e      	ldr	r2, [pc, #312]	; (8001578 <HAL_GPIO_Init+0x33c>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d019      	beq.n	8001476 <HAL_GPIO_Init+0x23a>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a4d      	ldr	r2, [pc, #308]	; (800157c <HAL_GPIO_Init+0x340>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d013      	beq.n	8001472 <HAL_GPIO_Init+0x236>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a4c      	ldr	r2, [pc, #304]	; (8001580 <HAL_GPIO_Init+0x344>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d00d      	beq.n	800146e <HAL_GPIO_Init+0x232>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a4b      	ldr	r2, [pc, #300]	; (8001584 <HAL_GPIO_Init+0x348>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d007      	beq.n	800146a <HAL_GPIO_Init+0x22e>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a4a      	ldr	r2, [pc, #296]	; (8001588 <HAL_GPIO_Init+0x34c>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d101      	bne.n	8001466 <HAL_GPIO_Init+0x22a>
 8001462:	2306      	movs	r3, #6
 8001464:	e00c      	b.n	8001480 <HAL_GPIO_Init+0x244>
 8001466:	2307      	movs	r3, #7
 8001468:	e00a      	b.n	8001480 <HAL_GPIO_Init+0x244>
 800146a:	2305      	movs	r3, #5
 800146c:	e008      	b.n	8001480 <HAL_GPIO_Init+0x244>
 800146e:	2304      	movs	r3, #4
 8001470:	e006      	b.n	8001480 <HAL_GPIO_Init+0x244>
 8001472:	2303      	movs	r3, #3
 8001474:	e004      	b.n	8001480 <HAL_GPIO_Init+0x244>
 8001476:	2302      	movs	r3, #2
 8001478:	e002      	b.n	8001480 <HAL_GPIO_Init+0x244>
 800147a:	2301      	movs	r3, #1
 800147c:	e000      	b.n	8001480 <HAL_GPIO_Init+0x244>
 800147e:	2300      	movs	r3, #0
 8001480:	697a      	ldr	r2, [r7, #20]
 8001482:	f002 0203 	and.w	r2, r2, #3
 8001486:	0092      	lsls	r2, r2, #2
 8001488:	4093      	lsls	r3, r2
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	4313      	orrs	r3, r2
 800148e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001490:	4937      	ldr	r1, [pc, #220]	; (8001570 <HAL_GPIO_Init+0x334>)
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	089b      	lsrs	r3, r3, #2
 8001496:	3302      	adds	r3, #2
 8001498:	693a      	ldr	r2, [r7, #16]
 800149a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800149e:	4b3b      	ldr	r3, [pc, #236]	; (800158c <HAL_GPIO_Init+0x350>)
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	43db      	mvns	r3, r3
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	4013      	ands	r3, r2
 80014ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d003      	beq.n	80014c2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	4313      	orrs	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014c2:	4a32      	ldr	r2, [pc, #200]	; (800158c <HAL_GPIO_Init+0x350>)
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80014c8:	4b30      	ldr	r3, [pc, #192]	; (800158c <HAL_GPIO_Init+0x350>)
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	43db      	mvns	r3, r3
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	4013      	ands	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d003      	beq.n	80014ec <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80014e4:	693a      	ldr	r2, [r7, #16]
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014ec:	4a27      	ldr	r2, [pc, #156]	; (800158c <HAL_GPIO_Init+0x350>)
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80014f2:	4b26      	ldr	r3, [pc, #152]	; (800158c <HAL_GPIO_Init+0x350>)
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	43db      	mvns	r3, r3
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	4013      	ands	r3, r2
 8001500:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d003      	beq.n	8001516 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	4313      	orrs	r3, r2
 8001514:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001516:	4a1d      	ldr	r2, [pc, #116]	; (800158c <HAL_GPIO_Init+0x350>)
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800151c:	4b1b      	ldr	r3, [pc, #108]	; (800158c <HAL_GPIO_Init+0x350>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	43db      	mvns	r3, r3
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	4013      	ands	r3, r2
 800152a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d003      	beq.n	8001540 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001538:	693a      	ldr	r2, [r7, #16]
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	4313      	orrs	r3, r2
 800153e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001540:	4a12      	ldr	r2, [pc, #72]	; (800158c <HAL_GPIO_Init+0x350>)
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	3301      	adds	r3, #1
 800154a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	fa22 f303 	lsr.w	r3, r2, r3
 8001556:	2b00      	cmp	r3, #0
 8001558:	f47f ae78 	bne.w	800124c <HAL_GPIO_Init+0x10>
  }
}
 800155c:	bf00      	nop
 800155e:	bf00      	nop
 8001560:	371c      	adds	r7, #28
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	40021000 	.word	0x40021000
 8001570:	40010000 	.word	0x40010000
 8001574:	48000400 	.word	0x48000400
 8001578:	48000800 	.word	0x48000800
 800157c:	48000c00 	.word	0x48000c00
 8001580:	48001000 	.word	0x48001000
 8001584:	48001400 	.word	0x48001400
 8001588:	48001800 	.word	0x48001800
 800158c:	40010400 	.word	0x40010400

08001590 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	460b      	mov	r3, r1
 800159a:	807b      	strh	r3, [r7, #2]
 800159c:	4613      	mov	r3, r2
 800159e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015a0:	787b      	ldrb	r3, [r7, #1]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d003      	beq.n	80015ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015a6:	887a      	ldrh	r2, [r7, #2]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015ac:	e002      	b.n	80015b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015ae:	887a      	ldrh	r2, [r7, #2]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015b4:	bf00      	nop
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	460b      	mov	r3, r1
 80015ca:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	695b      	ldr	r3, [r3, #20]
 80015d0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015d2:	887a      	ldrh	r2, [r7, #2]
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	4013      	ands	r3, r2
 80015d8:	041a      	lsls	r2, r3, #16
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	43d9      	mvns	r1, r3
 80015de:	887b      	ldrh	r3, [r7, #2]
 80015e0:	400b      	ands	r3, r1
 80015e2:	431a      	orrs	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	619a      	str	r2, [r3, #24]
}
 80015e8:	bf00      	nop
 80015ea:	3714      	adds	r7, #20
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80015fe:	4b08      	ldr	r3, [pc, #32]	; (8001620 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001600:	695a      	ldr	r2, [r3, #20]
 8001602:	88fb      	ldrh	r3, [r7, #6]
 8001604:	4013      	ands	r3, r2
 8001606:	2b00      	cmp	r3, #0
 8001608:	d006      	beq.n	8001618 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800160a:	4a05      	ldr	r2, [pc, #20]	; (8001620 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800160c:	88fb      	ldrh	r3, [r7, #6]
 800160e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001610:	88fb      	ldrh	r3, [r7, #6]
 8001612:	4618      	mov	r0, r3
 8001614:	f7fe ffee 	bl	80005f4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001618:	bf00      	nop
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40010400 	.word	0x40010400

08001624 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001628:	4b04      	ldr	r3, [pc, #16]	; (800163c <HAL_PWREx_GetVoltageRange+0x18>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001630:	4618      	mov	r0, r3
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	40007000 	.word	0x40007000

08001640 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001640:	b480      	push	{r7}
 8001642:	b085      	sub	sp, #20
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800164e:	d130      	bne.n	80016b2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001650:	4b23      	ldr	r3, [pc, #140]	; (80016e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001658:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800165c:	d038      	beq.n	80016d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800165e:	4b20      	ldr	r3, [pc, #128]	; (80016e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001666:	4a1e      	ldr	r2, [pc, #120]	; (80016e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001668:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800166c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800166e:	4b1d      	ldr	r3, [pc, #116]	; (80016e4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2232      	movs	r2, #50	; 0x32
 8001674:	fb02 f303 	mul.w	r3, r2, r3
 8001678:	4a1b      	ldr	r2, [pc, #108]	; (80016e8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800167a:	fba2 2303 	umull	r2, r3, r2, r3
 800167e:	0c9b      	lsrs	r3, r3, #18
 8001680:	3301      	adds	r3, #1
 8001682:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001684:	e002      	b.n	800168c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	3b01      	subs	r3, #1
 800168a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800168c:	4b14      	ldr	r3, [pc, #80]	; (80016e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800168e:	695b      	ldr	r3, [r3, #20]
 8001690:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001694:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001698:	d102      	bne.n	80016a0 <HAL_PWREx_ControlVoltageScaling+0x60>
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d1f2      	bne.n	8001686 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016a0:	4b0f      	ldr	r3, [pc, #60]	; (80016e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016a2:	695b      	ldr	r3, [r3, #20]
 80016a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016ac:	d110      	bne.n	80016d0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e00f      	b.n	80016d2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80016b2:	4b0b      	ldr	r3, [pc, #44]	; (80016e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016be:	d007      	beq.n	80016d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80016c0:	4b07      	ldr	r3, [pc, #28]	; (80016e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016c8:	4a05      	ldr	r2, [pc, #20]	; (80016e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016ce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3714      	adds	r7, #20
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	40007000 	.word	0x40007000
 80016e4:	20000000 	.word	0x20000000
 80016e8:	431bde83 	.word	0x431bde83

080016ec <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b088      	sub	sp, #32
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d101      	bne.n	80016fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e3ca      	b.n	8001e94 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016fe:	4b97      	ldr	r3, [pc, #604]	; (800195c <HAL_RCC_OscConfig+0x270>)
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	f003 030c 	and.w	r3, r3, #12
 8001706:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001708:	4b94      	ldr	r3, [pc, #592]	; (800195c <HAL_RCC_OscConfig+0x270>)
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	f003 0303 	and.w	r3, r3, #3
 8001710:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0310 	and.w	r3, r3, #16
 800171a:	2b00      	cmp	r3, #0
 800171c:	f000 80e4 	beq.w	80018e8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d007      	beq.n	8001736 <HAL_RCC_OscConfig+0x4a>
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	2b0c      	cmp	r3, #12
 800172a:	f040 808b 	bne.w	8001844 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	2b01      	cmp	r3, #1
 8001732:	f040 8087 	bne.w	8001844 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001736:	4b89      	ldr	r3, [pc, #548]	; (800195c <HAL_RCC_OscConfig+0x270>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	2b00      	cmp	r3, #0
 8001740:	d005      	beq.n	800174e <HAL_RCC_OscConfig+0x62>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d101      	bne.n	800174e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e3a2      	b.n	8001e94 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6a1a      	ldr	r2, [r3, #32]
 8001752:	4b82      	ldr	r3, [pc, #520]	; (800195c <HAL_RCC_OscConfig+0x270>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0308 	and.w	r3, r3, #8
 800175a:	2b00      	cmp	r3, #0
 800175c:	d004      	beq.n	8001768 <HAL_RCC_OscConfig+0x7c>
 800175e:	4b7f      	ldr	r3, [pc, #508]	; (800195c <HAL_RCC_OscConfig+0x270>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001766:	e005      	b.n	8001774 <HAL_RCC_OscConfig+0x88>
 8001768:	4b7c      	ldr	r3, [pc, #496]	; (800195c <HAL_RCC_OscConfig+0x270>)
 800176a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800176e:	091b      	lsrs	r3, r3, #4
 8001770:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001774:	4293      	cmp	r3, r2
 8001776:	d223      	bcs.n	80017c0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6a1b      	ldr	r3, [r3, #32]
 800177c:	4618      	mov	r0, r3
 800177e:	f000 fd55 	bl	800222c <RCC_SetFlashLatencyFromMSIRange>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e383      	b.n	8001e94 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800178c:	4b73      	ldr	r3, [pc, #460]	; (800195c <HAL_RCC_OscConfig+0x270>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a72      	ldr	r2, [pc, #456]	; (800195c <HAL_RCC_OscConfig+0x270>)
 8001792:	f043 0308 	orr.w	r3, r3, #8
 8001796:	6013      	str	r3, [r2, #0]
 8001798:	4b70      	ldr	r3, [pc, #448]	; (800195c <HAL_RCC_OscConfig+0x270>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6a1b      	ldr	r3, [r3, #32]
 80017a4:	496d      	ldr	r1, [pc, #436]	; (800195c <HAL_RCC_OscConfig+0x270>)
 80017a6:	4313      	orrs	r3, r2
 80017a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017aa:	4b6c      	ldr	r3, [pc, #432]	; (800195c <HAL_RCC_OscConfig+0x270>)
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	69db      	ldr	r3, [r3, #28]
 80017b6:	021b      	lsls	r3, r3, #8
 80017b8:	4968      	ldr	r1, [pc, #416]	; (800195c <HAL_RCC_OscConfig+0x270>)
 80017ba:	4313      	orrs	r3, r2
 80017bc:	604b      	str	r3, [r1, #4]
 80017be:	e025      	b.n	800180c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017c0:	4b66      	ldr	r3, [pc, #408]	; (800195c <HAL_RCC_OscConfig+0x270>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a65      	ldr	r2, [pc, #404]	; (800195c <HAL_RCC_OscConfig+0x270>)
 80017c6:	f043 0308 	orr.w	r3, r3, #8
 80017ca:	6013      	str	r3, [r2, #0]
 80017cc:	4b63      	ldr	r3, [pc, #396]	; (800195c <HAL_RCC_OscConfig+0x270>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6a1b      	ldr	r3, [r3, #32]
 80017d8:	4960      	ldr	r1, [pc, #384]	; (800195c <HAL_RCC_OscConfig+0x270>)
 80017da:	4313      	orrs	r3, r2
 80017dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017de:	4b5f      	ldr	r3, [pc, #380]	; (800195c <HAL_RCC_OscConfig+0x270>)
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	69db      	ldr	r3, [r3, #28]
 80017ea:	021b      	lsls	r3, r3, #8
 80017ec:	495b      	ldr	r1, [pc, #364]	; (800195c <HAL_RCC_OscConfig+0x270>)
 80017ee:	4313      	orrs	r3, r2
 80017f0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d109      	bne.n	800180c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6a1b      	ldr	r3, [r3, #32]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f000 fd15 	bl	800222c <RCC_SetFlashLatencyFromMSIRange>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e343      	b.n	8001e94 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800180c:	f000 fc4a 	bl	80020a4 <HAL_RCC_GetSysClockFreq>
 8001810:	4602      	mov	r2, r0
 8001812:	4b52      	ldr	r3, [pc, #328]	; (800195c <HAL_RCC_OscConfig+0x270>)
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	091b      	lsrs	r3, r3, #4
 8001818:	f003 030f 	and.w	r3, r3, #15
 800181c:	4950      	ldr	r1, [pc, #320]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 800181e:	5ccb      	ldrb	r3, [r1, r3]
 8001820:	f003 031f 	and.w	r3, r3, #31
 8001824:	fa22 f303 	lsr.w	r3, r2, r3
 8001828:	4a4e      	ldr	r2, [pc, #312]	; (8001964 <HAL_RCC_OscConfig+0x278>)
 800182a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800182c:	4b4e      	ldr	r3, [pc, #312]	; (8001968 <HAL_RCC_OscConfig+0x27c>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff fb17 	bl	8000e64 <HAL_InitTick>
 8001836:	4603      	mov	r3, r0
 8001838:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800183a:	7bfb      	ldrb	r3, [r7, #15]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d052      	beq.n	80018e6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001840:	7bfb      	ldrb	r3, [r7, #15]
 8001842:	e327      	b.n	8001e94 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d032      	beq.n	80018b2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800184c:	4b43      	ldr	r3, [pc, #268]	; (800195c <HAL_RCC_OscConfig+0x270>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a42      	ldr	r2, [pc, #264]	; (800195c <HAL_RCC_OscConfig+0x270>)
 8001852:	f043 0301 	orr.w	r3, r3, #1
 8001856:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001858:	f7ff fb54 	bl	8000f04 <HAL_GetTick>
 800185c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800185e:	e008      	b.n	8001872 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001860:	f7ff fb50 	bl	8000f04 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b02      	cmp	r3, #2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e310      	b.n	8001e94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001872:	4b3a      	ldr	r3, [pc, #232]	; (800195c <HAL_RCC_OscConfig+0x270>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d0f0      	beq.n	8001860 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800187e:	4b37      	ldr	r3, [pc, #220]	; (800195c <HAL_RCC_OscConfig+0x270>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a36      	ldr	r2, [pc, #216]	; (800195c <HAL_RCC_OscConfig+0x270>)
 8001884:	f043 0308 	orr.w	r3, r3, #8
 8001888:	6013      	str	r3, [r2, #0]
 800188a:	4b34      	ldr	r3, [pc, #208]	; (800195c <HAL_RCC_OscConfig+0x270>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6a1b      	ldr	r3, [r3, #32]
 8001896:	4931      	ldr	r1, [pc, #196]	; (800195c <HAL_RCC_OscConfig+0x270>)
 8001898:	4313      	orrs	r3, r2
 800189a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800189c:	4b2f      	ldr	r3, [pc, #188]	; (800195c <HAL_RCC_OscConfig+0x270>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	69db      	ldr	r3, [r3, #28]
 80018a8:	021b      	lsls	r3, r3, #8
 80018aa:	492c      	ldr	r1, [pc, #176]	; (800195c <HAL_RCC_OscConfig+0x270>)
 80018ac:	4313      	orrs	r3, r2
 80018ae:	604b      	str	r3, [r1, #4]
 80018b0:	e01a      	b.n	80018e8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80018b2:	4b2a      	ldr	r3, [pc, #168]	; (800195c <HAL_RCC_OscConfig+0x270>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a29      	ldr	r2, [pc, #164]	; (800195c <HAL_RCC_OscConfig+0x270>)
 80018b8:	f023 0301 	bic.w	r3, r3, #1
 80018bc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018be:	f7ff fb21 	bl	8000f04 <HAL_GetTick>
 80018c2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80018c4:	e008      	b.n	80018d8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018c6:	f7ff fb1d 	bl	8000f04 <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d901      	bls.n	80018d8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e2dd      	b.n	8001e94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80018d8:	4b20      	ldr	r3, [pc, #128]	; (800195c <HAL_RCC_OscConfig+0x270>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0302 	and.w	r3, r3, #2
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d1f0      	bne.n	80018c6 <HAL_RCC_OscConfig+0x1da>
 80018e4:	e000      	b.n	80018e8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018e6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0301 	and.w	r3, r3, #1
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d074      	beq.n	80019de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	2b08      	cmp	r3, #8
 80018f8:	d005      	beq.n	8001906 <HAL_RCC_OscConfig+0x21a>
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	2b0c      	cmp	r3, #12
 80018fe:	d10e      	bne.n	800191e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	2b03      	cmp	r3, #3
 8001904:	d10b      	bne.n	800191e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001906:	4b15      	ldr	r3, [pc, #84]	; (800195c <HAL_RCC_OscConfig+0x270>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d064      	beq.n	80019dc <HAL_RCC_OscConfig+0x2f0>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d160      	bne.n	80019dc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e2ba      	b.n	8001e94 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001926:	d106      	bne.n	8001936 <HAL_RCC_OscConfig+0x24a>
 8001928:	4b0c      	ldr	r3, [pc, #48]	; (800195c <HAL_RCC_OscConfig+0x270>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a0b      	ldr	r2, [pc, #44]	; (800195c <HAL_RCC_OscConfig+0x270>)
 800192e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001932:	6013      	str	r3, [r2, #0]
 8001934:	e026      	b.n	8001984 <HAL_RCC_OscConfig+0x298>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800193e:	d115      	bne.n	800196c <HAL_RCC_OscConfig+0x280>
 8001940:	4b06      	ldr	r3, [pc, #24]	; (800195c <HAL_RCC_OscConfig+0x270>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a05      	ldr	r2, [pc, #20]	; (800195c <HAL_RCC_OscConfig+0x270>)
 8001946:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800194a:	6013      	str	r3, [r2, #0]
 800194c:	4b03      	ldr	r3, [pc, #12]	; (800195c <HAL_RCC_OscConfig+0x270>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a02      	ldr	r2, [pc, #8]	; (800195c <HAL_RCC_OscConfig+0x270>)
 8001952:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001956:	6013      	str	r3, [r2, #0]
 8001958:	e014      	b.n	8001984 <HAL_RCC_OscConfig+0x298>
 800195a:	bf00      	nop
 800195c:	40021000 	.word	0x40021000
 8001960:	08006e08 	.word	0x08006e08
 8001964:	20000000 	.word	0x20000000
 8001968:	20000004 	.word	0x20000004
 800196c:	4ba0      	ldr	r3, [pc, #640]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a9f      	ldr	r2, [pc, #636]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001972:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001976:	6013      	str	r3, [r2, #0]
 8001978:	4b9d      	ldr	r3, [pc, #628]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a9c      	ldr	r2, [pc, #624]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 800197e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001982:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d013      	beq.n	80019b4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800198c:	f7ff faba 	bl	8000f04 <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001992:	e008      	b.n	80019a6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001994:	f7ff fab6 	bl	8000f04 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b64      	cmp	r3, #100	; 0x64
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e276      	b.n	8001e94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019a6:	4b92      	ldr	r3, [pc, #584]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d0f0      	beq.n	8001994 <HAL_RCC_OscConfig+0x2a8>
 80019b2:	e014      	b.n	80019de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b4:	f7ff faa6 	bl	8000f04 <HAL_GetTick>
 80019b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019ba:	e008      	b.n	80019ce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019bc:	f7ff faa2 	bl	8000f04 <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	2b64      	cmp	r3, #100	; 0x64
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e262      	b.n	8001e94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019ce:	4b88      	ldr	r3, [pc, #544]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d1f0      	bne.n	80019bc <HAL_RCC_OscConfig+0x2d0>
 80019da:	e000      	b.n	80019de <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d060      	beq.n	8001aac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	2b04      	cmp	r3, #4
 80019ee:	d005      	beq.n	80019fc <HAL_RCC_OscConfig+0x310>
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	2b0c      	cmp	r3, #12
 80019f4:	d119      	bne.n	8001a2a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d116      	bne.n	8001a2a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019fc:	4b7c      	ldr	r3, [pc, #496]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d005      	beq.n	8001a14 <HAL_RCC_OscConfig+0x328>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d101      	bne.n	8001a14 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e23f      	b.n	8001e94 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a14:	4b76      	ldr	r3, [pc, #472]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	691b      	ldr	r3, [r3, #16]
 8001a20:	061b      	lsls	r3, r3, #24
 8001a22:	4973      	ldr	r1, [pc, #460]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001a24:	4313      	orrs	r3, r2
 8001a26:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a28:	e040      	b.n	8001aac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	68db      	ldr	r3, [r3, #12]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d023      	beq.n	8001a7a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a32:	4b6f      	ldr	r3, [pc, #444]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a6e      	ldr	r2, [pc, #440]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001a38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a3e:	f7ff fa61 	bl	8000f04 <HAL_GetTick>
 8001a42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a44:	e008      	b.n	8001a58 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a46:	f7ff fa5d 	bl	8000f04 <HAL_GetTick>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d901      	bls.n	8001a58 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e21d      	b.n	8001e94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a58:	4b65      	ldr	r3, [pc, #404]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d0f0      	beq.n	8001a46 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a64:	4b62      	ldr	r3, [pc, #392]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	691b      	ldr	r3, [r3, #16]
 8001a70:	061b      	lsls	r3, r3, #24
 8001a72:	495f      	ldr	r1, [pc, #380]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001a74:	4313      	orrs	r3, r2
 8001a76:	604b      	str	r3, [r1, #4]
 8001a78:	e018      	b.n	8001aac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a7a:	4b5d      	ldr	r3, [pc, #372]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a5c      	ldr	r2, [pc, #368]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001a80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a86:	f7ff fa3d 	bl	8000f04 <HAL_GetTick>
 8001a8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a8c:	e008      	b.n	8001aa0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a8e:	f7ff fa39 	bl	8000f04 <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d901      	bls.n	8001aa0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e1f9      	b.n	8001e94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001aa0:	4b53      	ldr	r3, [pc, #332]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d1f0      	bne.n	8001a8e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0308 	and.w	r3, r3, #8
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d03c      	beq.n	8001b32 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	695b      	ldr	r3, [r3, #20]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d01c      	beq.n	8001afa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ac0:	4b4b      	ldr	r3, [pc, #300]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001ac2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ac6:	4a4a      	ldr	r2, [pc, #296]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001ac8:	f043 0301 	orr.w	r3, r3, #1
 8001acc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad0:	f7ff fa18 	bl	8000f04 <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ad8:	f7ff fa14 	bl	8000f04 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e1d4      	b.n	8001e94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001aea:	4b41      	ldr	r3, [pc, #260]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001aec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001af0:	f003 0302 	and.w	r3, r3, #2
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d0ef      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x3ec>
 8001af8:	e01b      	b.n	8001b32 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001afa:	4b3d      	ldr	r3, [pc, #244]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001afc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b00:	4a3b      	ldr	r2, [pc, #236]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001b02:	f023 0301 	bic.w	r3, r3, #1
 8001b06:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b0a:	f7ff f9fb 	bl	8000f04 <HAL_GetTick>
 8001b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b10:	e008      	b.n	8001b24 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b12:	f7ff f9f7 	bl	8000f04 <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d901      	bls.n	8001b24 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e1b7      	b.n	8001e94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b24:	4b32      	ldr	r3, [pc, #200]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001b26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d1ef      	bne.n	8001b12 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0304 	and.w	r3, r3, #4
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	f000 80a6 	beq.w	8001c8c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b40:	2300      	movs	r3, #0
 8001b42:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001b44:	4b2a      	ldr	r3, [pc, #168]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d10d      	bne.n	8001b6c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b50:	4b27      	ldr	r3, [pc, #156]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001b52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b54:	4a26      	ldr	r2, [pc, #152]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001b56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b5a:	6593      	str	r3, [r2, #88]	; 0x58
 8001b5c:	4b24      	ldr	r3, [pc, #144]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b64:	60bb      	str	r3, [r7, #8]
 8001b66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b6c:	4b21      	ldr	r3, [pc, #132]	; (8001bf4 <HAL_RCC_OscConfig+0x508>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d118      	bne.n	8001baa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b78:	4b1e      	ldr	r3, [pc, #120]	; (8001bf4 <HAL_RCC_OscConfig+0x508>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a1d      	ldr	r2, [pc, #116]	; (8001bf4 <HAL_RCC_OscConfig+0x508>)
 8001b7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b82:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b84:	f7ff f9be 	bl	8000f04 <HAL_GetTick>
 8001b88:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b8a:	e008      	b.n	8001b9e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b8c:	f7ff f9ba 	bl	8000f04 <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e17a      	b.n	8001e94 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b9e:	4b15      	ldr	r3, [pc, #84]	; (8001bf4 <HAL_RCC_OscConfig+0x508>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d0f0      	beq.n	8001b8c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d108      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x4d8>
 8001bb2:	4b0f      	ldr	r3, [pc, #60]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bb8:	4a0d      	ldr	r2, [pc, #52]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001bba:	f043 0301 	orr.w	r3, r3, #1
 8001bbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bc2:	e029      	b.n	8001c18 <HAL_RCC_OscConfig+0x52c>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	2b05      	cmp	r3, #5
 8001bca:	d115      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x50c>
 8001bcc:	4b08      	ldr	r3, [pc, #32]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bd2:	4a07      	ldr	r2, [pc, #28]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001bd4:	f043 0304 	orr.w	r3, r3, #4
 8001bd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bdc:	4b04      	ldr	r3, [pc, #16]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001be2:	4a03      	ldr	r2, [pc, #12]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001be4:	f043 0301 	orr.w	r3, r3, #1
 8001be8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bec:	e014      	b.n	8001c18 <HAL_RCC_OscConfig+0x52c>
 8001bee:	bf00      	nop
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	40007000 	.word	0x40007000
 8001bf8:	4b9c      	ldr	r3, [pc, #624]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bfe:	4a9b      	ldr	r2, [pc, #620]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001c00:	f023 0301 	bic.w	r3, r3, #1
 8001c04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c08:	4b98      	ldr	r3, [pc, #608]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c0e:	4a97      	ldr	r2, [pc, #604]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001c10:	f023 0304 	bic.w	r3, r3, #4
 8001c14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d016      	beq.n	8001c4e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c20:	f7ff f970 	bl	8000f04 <HAL_GetTick>
 8001c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c26:	e00a      	b.n	8001c3e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c28:	f7ff f96c 	bl	8000f04 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e12a      	b.n	8001e94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c3e:	4b8b      	ldr	r3, [pc, #556]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c44:	f003 0302 	and.w	r3, r3, #2
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d0ed      	beq.n	8001c28 <HAL_RCC_OscConfig+0x53c>
 8001c4c:	e015      	b.n	8001c7a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c4e:	f7ff f959 	bl	8000f04 <HAL_GetTick>
 8001c52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c54:	e00a      	b.n	8001c6c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c56:	f7ff f955 	bl	8000f04 <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d901      	bls.n	8001c6c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e113      	b.n	8001e94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c6c:	4b7f      	ldr	r3, [pc, #508]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1ed      	bne.n	8001c56 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c7a:	7ffb      	ldrb	r3, [r7, #31]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d105      	bne.n	8001c8c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c80:	4b7a      	ldr	r3, [pc, #488]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c84:	4a79      	ldr	r2, [pc, #484]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001c86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c8a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	f000 80fe 	beq.w	8001e92 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	f040 80d0 	bne.w	8001e40 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001ca0:	4b72      	ldr	r3, [pc, #456]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	f003 0203 	and.w	r2, r3, #3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d130      	bne.n	8001d16 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d127      	bne.n	8001d16 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cd0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d11f      	bne.n	8001d16 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ce0:	2a07      	cmp	r2, #7
 8001ce2:	bf14      	ite	ne
 8001ce4:	2201      	movne	r2, #1
 8001ce6:	2200      	moveq	r2, #0
 8001ce8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d113      	bne.n	8001d16 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cf8:	085b      	lsrs	r3, r3, #1
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d109      	bne.n	8001d16 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0c:	085b      	lsrs	r3, r3, #1
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d06e      	beq.n	8001df4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	2b0c      	cmp	r3, #12
 8001d1a:	d069      	beq.n	8001df0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001d1c:	4b53      	ldr	r3, [pc, #332]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d105      	bne.n	8001d34 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001d28:	4b50      	ldr	r3, [pc, #320]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e0ad      	b.n	8001e94 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001d38:	4b4c      	ldr	r3, [pc, #304]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a4b      	ldr	r2, [pc, #300]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001d3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d42:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d44:	f7ff f8de 	bl	8000f04 <HAL_GetTick>
 8001d48:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d4a:	e008      	b.n	8001d5e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d4c:	f7ff f8da 	bl	8000f04 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e09a      	b.n	8001e94 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d5e:	4b43      	ldr	r3, [pc, #268]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1f0      	bne.n	8001d4c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d6a:	4b40      	ldr	r3, [pc, #256]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001d6c:	68da      	ldr	r2, [r3, #12]
 8001d6e:	4b40      	ldr	r3, [pc, #256]	; (8001e70 <HAL_RCC_OscConfig+0x784>)
 8001d70:	4013      	ands	r3, r2
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001d7a:	3a01      	subs	r2, #1
 8001d7c:	0112      	lsls	r2, r2, #4
 8001d7e:	4311      	orrs	r1, r2
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d84:	0212      	lsls	r2, r2, #8
 8001d86:	4311      	orrs	r1, r2
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d8c:	0852      	lsrs	r2, r2, #1
 8001d8e:	3a01      	subs	r2, #1
 8001d90:	0552      	lsls	r2, r2, #21
 8001d92:	4311      	orrs	r1, r2
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d98:	0852      	lsrs	r2, r2, #1
 8001d9a:	3a01      	subs	r2, #1
 8001d9c:	0652      	lsls	r2, r2, #25
 8001d9e:	4311      	orrs	r1, r2
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001da4:	0912      	lsrs	r2, r2, #4
 8001da6:	0452      	lsls	r2, r2, #17
 8001da8:	430a      	orrs	r2, r1
 8001daa:	4930      	ldr	r1, [pc, #192]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001dac:	4313      	orrs	r3, r2
 8001dae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001db0:	4b2e      	ldr	r3, [pc, #184]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a2d      	ldr	r2, [pc, #180]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001db6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001dbc:	4b2b      	ldr	r3, [pc, #172]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	4a2a      	ldr	r2, [pc, #168]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001dc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dc6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001dc8:	f7ff f89c 	bl	8000f04 <HAL_GetTick>
 8001dcc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dce:	e008      	b.n	8001de2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dd0:	f7ff f898 	bl	8000f04 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e058      	b.n	8001e94 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001de2:	4b22      	ldr	r3, [pc, #136]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d0f0      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001dee:	e050      	b.n	8001e92 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e04f      	b.n	8001e94 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001df4:	4b1d      	ldr	r3, [pc, #116]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d148      	bne.n	8001e92 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001e00:	4b1a      	ldr	r3, [pc, #104]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a19      	ldr	r2, [pc, #100]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001e06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e0a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e0c:	4b17      	ldr	r3, [pc, #92]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	4a16      	ldr	r2, [pc, #88]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001e12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e16:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e18:	f7ff f874 	bl	8000f04 <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e1e:	e008      	b.n	8001e32 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e20:	f7ff f870 	bl	8000f04 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e030      	b.n	8001e94 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e32:	4b0e      	ldr	r3, [pc, #56]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d0f0      	beq.n	8001e20 <HAL_RCC_OscConfig+0x734>
 8001e3e:	e028      	b.n	8001e92 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	2b0c      	cmp	r3, #12
 8001e44:	d023      	beq.n	8001e8e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e46:	4b09      	ldr	r3, [pc, #36]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a08      	ldr	r2, [pc, #32]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001e4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e52:	f7ff f857 	bl	8000f04 <HAL_GetTick>
 8001e56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e58:	e00c      	b.n	8001e74 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e5a:	f7ff f853 	bl	8000f04 <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d905      	bls.n	8001e74 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e013      	b.n	8001e94 <HAL_RCC_OscConfig+0x7a8>
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e74:	4b09      	ldr	r3, [pc, #36]	; (8001e9c <HAL_RCC_OscConfig+0x7b0>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d1ec      	bne.n	8001e5a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001e80:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <HAL_RCC_OscConfig+0x7b0>)
 8001e82:	68da      	ldr	r2, [r3, #12]
 8001e84:	4905      	ldr	r1, [pc, #20]	; (8001e9c <HAL_RCC_OscConfig+0x7b0>)
 8001e86:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <HAL_RCC_OscConfig+0x7b4>)
 8001e88:	4013      	ands	r3, r2
 8001e8a:	60cb      	str	r3, [r1, #12]
 8001e8c:	e001      	b.n	8001e92 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e000      	b.n	8001e94 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001e92:	2300      	movs	r3, #0
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3720      	adds	r7, #32
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	feeefffc 	.word	0xfeeefffc

08001ea4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d101      	bne.n	8001eb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e0e7      	b.n	8002088 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001eb8:	4b75      	ldr	r3, [pc, #468]	; (8002090 <HAL_RCC_ClockConfig+0x1ec>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0307 	and.w	r3, r3, #7
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d910      	bls.n	8001ee8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ec6:	4b72      	ldr	r3, [pc, #456]	; (8002090 <HAL_RCC_ClockConfig+0x1ec>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f023 0207 	bic.w	r2, r3, #7
 8001ece:	4970      	ldr	r1, [pc, #448]	; (8002090 <HAL_RCC_ClockConfig+0x1ec>)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ed6:	4b6e      	ldr	r3, [pc, #440]	; (8002090 <HAL_RCC_ClockConfig+0x1ec>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0307 	and.w	r3, r3, #7
 8001ede:	683a      	ldr	r2, [r7, #0]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d001      	beq.n	8001ee8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e0cf      	b.n	8002088 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0302 	and.w	r3, r3, #2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d010      	beq.n	8001f16 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689a      	ldr	r2, [r3, #8]
 8001ef8:	4b66      	ldr	r3, [pc, #408]	; (8002094 <HAL_RCC_ClockConfig+0x1f0>)
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d908      	bls.n	8001f16 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f04:	4b63      	ldr	r3, [pc, #396]	; (8002094 <HAL_RCC_ClockConfig+0x1f0>)
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	4960      	ldr	r1, [pc, #384]	; (8002094 <HAL_RCC_ClockConfig+0x1f0>)
 8001f12:	4313      	orrs	r3, r2
 8001f14:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d04c      	beq.n	8001fbc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	2b03      	cmp	r3, #3
 8001f28:	d107      	bne.n	8001f3a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f2a:	4b5a      	ldr	r3, [pc, #360]	; (8002094 <HAL_RCC_ClockConfig+0x1f0>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d121      	bne.n	8001f7a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e0a6      	b.n	8002088 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d107      	bne.n	8001f52 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f42:	4b54      	ldr	r3, [pc, #336]	; (8002094 <HAL_RCC_ClockConfig+0x1f0>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d115      	bne.n	8001f7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e09a      	b.n	8002088 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d107      	bne.n	8001f6a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f5a:	4b4e      	ldr	r3, [pc, #312]	; (8002094 <HAL_RCC_ClockConfig+0x1f0>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d109      	bne.n	8001f7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e08e      	b.n	8002088 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f6a:	4b4a      	ldr	r3, [pc, #296]	; (8002094 <HAL_RCC_ClockConfig+0x1f0>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d101      	bne.n	8001f7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e086      	b.n	8002088 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f7a:	4b46      	ldr	r3, [pc, #280]	; (8002094 <HAL_RCC_ClockConfig+0x1f0>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f023 0203 	bic.w	r2, r3, #3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	4943      	ldr	r1, [pc, #268]	; (8002094 <HAL_RCC_ClockConfig+0x1f0>)
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f8c:	f7fe ffba 	bl	8000f04 <HAL_GetTick>
 8001f90:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f92:	e00a      	b.n	8001faa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f94:	f7fe ffb6 	bl	8000f04 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e06e      	b.n	8002088 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001faa:	4b3a      	ldr	r3, [pc, #232]	; (8002094 <HAL_RCC_ClockConfig+0x1f0>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f003 020c 	and.w	r2, r3, #12
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d1eb      	bne.n	8001f94 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d010      	beq.n	8001fea <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689a      	ldr	r2, [r3, #8]
 8001fcc:	4b31      	ldr	r3, [pc, #196]	; (8002094 <HAL_RCC_ClockConfig+0x1f0>)
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d208      	bcs.n	8001fea <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fd8:	4b2e      	ldr	r3, [pc, #184]	; (8002094 <HAL_RCC_ClockConfig+0x1f0>)
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	492b      	ldr	r1, [pc, #172]	; (8002094 <HAL_RCC_ClockConfig+0x1f0>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fea:	4b29      	ldr	r3, [pc, #164]	; (8002090 <HAL_RCC_ClockConfig+0x1ec>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	683a      	ldr	r2, [r7, #0]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d210      	bcs.n	800201a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ff8:	4b25      	ldr	r3, [pc, #148]	; (8002090 <HAL_RCC_ClockConfig+0x1ec>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f023 0207 	bic.w	r2, r3, #7
 8002000:	4923      	ldr	r1, [pc, #140]	; (8002090 <HAL_RCC_ClockConfig+0x1ec>)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	4313      	orrs	r3, r2
 8002006:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002008:	4b21      	ldr	r3, [pc, #132]	; (8002090 <HAL_RCC_ClockConfig+0x1ec>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0307 	and.w	r3, r3, #7
 8002010:	683a      	ldr	r2, [r7, #0]
 8002012:	429a      	cmp	r2, r3
 8002014:	d001      	beq.n	800201a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e036      	b.n	8002088 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0304 	and.w	r3, r3, #4
 8002022:	2b00      	cmp	r3, #0
 8002024:	d008      	beq.n	8002038 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002026:	4b1b      	ldr	r3, [pc, #108]	; (8002094 <HAL_RCC_ClockConfig+0x1f0>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	4918      	ldr	r1, [pc, #96]	; (8002094 <HAL_RCC_ClockConfig+0x1f0>)
 8002034:	4313      	orrs	r3, r2
 8002036:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0308 	and.w	r3, r3, #8
 8002040:	2b00      	cmp	r3, #0
 8002042:	d009      	beq.n	8002058 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002044:	4b13      	ldr	r3, [pc, #76]	; (8002094 <HAL_RCC_ClockConfig+0x1f0>)
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	691b      	ldr	r3, [r3, #16]
 8002050:	00db      	lsls	r3, r3, #3
 8002052:	4910      	ldr	r1, [pc, #64]	; (8002094 <HAL_RCC_ClockConfig+0x1f0>)
 8002054:	4313      	orrs	r3, r2
 8002056:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002058:	f000 f824 	bl	80020a4 <HAL_RCC_GetSysClockFreq>
 800205c:	4602      	mov	r2, r0
 800205e:	4b0d      	ldr	r3, [pc, #52]	; (8002094 <HAL_RCC_ClockConfig+0x1f0>)
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	091b      	lsrs	r3, r3, #4
 8002064:	f003 030f 	and.w	r3, r3, #15
 8002068:	490b      	ldr	r1, [pc, #44]	; (8002098 <HAL_RCC_ClockConfig+0x1f4>)
 800206a:	5ccb      	ldrb	r3, [r1, r3]
 800206c:	f003 031f 	and.w	r3, r3, #31
 8002070:	fa22 f303 	lsr.w	r3, r2, r3
 8002074:	4a09      	ldr	r2, [pc, #36]	; (800209c <HAL_RCC_ClockConfig+0x1f8>)
 8002076:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002078:	4b09      	ldr	r3, [pc, #36]	; (80020a0 <HAL_RCC_ClockConfig+0x1fc>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4618      	mov	r0, r3
 800207e:	f7fe fef1 	bl	8000e64 <HAL_InitTick>
 8002082:	4603      	mov	r3, r0
 8002084:	72fb      	strb	r3, [r7, #11]

  return status;
 8002086:	7afb      	ldrb	r3, [r7, #11]
}
 8002088:	4618      	mov	r0, r3
 800208a:	3710      	adds	r7, #16
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	40022000 	.word	0x40022000
 8002094:	40021000 	.word	0x40021000
 8002098:	08006e08 	.word	0x08006e08
 800209c:	20000000 	.word	0x20000000
 80020a0:	20000004 	.word	0x20000004

080020a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b089      	sub	sp, #36	; 0x24
 80020a8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80020aa:	2300      	movs	r3, #0
 80020ac:	61fb      	str	r3, [r7, #28]
 80020ae:	2300      	movs	r3, #0
 80020b0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020b2:	4b3e      	ldr	r3, [pc, #248]	; (80021ac <HAL_RCC_GetSysClockFreq+0x108>)
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f003 030c 	and.w	r3, r3, #12
 80020ba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020bc:	4b3b      	ldr	r3, [pc, #236]	; (80021ac <HAL_RCC_GetSysClockFreq+0x108>)
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	f003 0303 	and.w	r3, r3, #3
 80020c4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d005      	beq.n	80020d8 <HAL_RCC_GetSysClockFreq+0x34>
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	2b0c      	cmp	r3, #12
 80020d0:	d121      	bne.n	8002116 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d11e      	bne.n	8002116 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80020d8:	4b34      	ldr	r3, [pc, #208]	; (80021ac <HAL_RCC_GetSysClockFreq+0x108>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0308 	and.w	r3, r3, #8
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d107      	bne.n	80020f4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80020e4:	4b31      	ldr	r3, [pc, #196]	; (80021ac <HAL_RCC_GetSysClockFreq+0x108>)
 80020e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020ea:	0a1b      	lsrs	r3, r3, #8
 80020ec:	f003 030f 	and.w	r3, r3, #15
 80020f0:	61fb      	str	r3, [r7, #28]
 80020f2:	e005      	b.n	8002100 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80020f4:	4b2d      	ldr	r3, [pc, #180]	; (80021ac <HAL_RCC_GetSysClockFreq+0x108>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	091b      	lsrs	r3, r3, #4
 80020fa:	f003 030f 	and.w	r3, r3, #15
 80020fe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002100:	4a2b      	ldr	r2, [pc, #172]	; (80021b0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002108:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d10d      	bne.n	800212c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002114:	e00a      	b.n	800212c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	2b04      	cmp	r3, #4
 800211a:	d102      	bne.n	8002122 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800211c:	4b25      	ldr	r3, [pc, #148]	; (80021b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800211e:	61bb      	str	r3, [r7, #24]
 8002120:	e004      	b.n	800212c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	2b08      	cmp	r3, #8
 8002126:	d101      	bne.n	800212c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002128:	4b23      	ldr	r3, [pc, #140]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x114>)
 800212a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	2b0c      	cmp	r3, #12
 8002130:	d134      	bne.n	800219c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002132:	4b1e      	ldr	r3, [pc, #120]	; (80021ac <HAL_RCC_GetSysClockFreq+0x108>)
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	f003 0303 	and.w	r3, r3, #3
 800213a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	2b02      	cmp	r3, #2
 8002140:	d003      	beq.n	800214a <HAL_RCC_GetSysClockFreq+0xa6>
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	2b03      	cmp	r3, #3
 8002146:	d003      	beq.n	8002150 <HAL_RCC_GetSysClockFreq+0xac>
 8002148:	e005      	b.n	8002156 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800214a:	4b1a      	ldr	r3, [pc, #104]	; (80021b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800214c:	617b      	str	r3, [r7, #20]
      break;
 800214e:	e005      	b.n	800215c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002150:	4b19      	ldr	r3, [pc, #100]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002152:	617b      	str	r3, [r7, #20]
      break;
 8002154:	e002      	b.n	800215c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	617b      	str	r3, [r7, #20]
      break;
 800215a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800215c:	4b13      	ldr	r3, [pc, #76]	; (80021ac <HAL_RCC_GetSysClockFreq+0x108>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	091b      	lsrs	r3, r3, #4
 8002162:	f003 0307 	and.w	r3, r3, #7
 8002166:	3301      	adds	r3, #1
 8002168:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800216a:	4b10      	ldr	r3, [pc, #64]	; (80021ac <HAL_RCC_GetSysClockFreq+0x108>)
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	0a1b      	lsrs	r3, r3, #8
 8002170:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002174:	697a      	ldr	r2, [r7, #20]
 8002176:	fb03 f202 	mul.w	r2, r3, r2
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002180:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002182:	4b0a      	ldr	r3, [pc, #40]	; (80021ac <HAL_RCC_GetSysClockFreq+0x108>)
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	0e5b      	lsrs	r3, r3, #25
 8002188:	f003 0303 	and.w	r3, r3, #3
 800218c:	3301      	adds	r3, #1
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002192:	697a      	ldr	r2, [r7, #20]
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	fbb2 f3f3 	udiv	r3, r2, r3
 800219a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800219c:	69bb      	ldr	r3, [r7, #24]
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3724      	adds	r7, #36	; 0x24
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	40021000 	.word	0x40021000
 80021b0:	08006e20 	.word	0x08006e20
 80021b4:	00f42400 	.word	0x00f42400
 80021b8:	007a1200 	.word	0x007a1200

080021bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021c0:	4b03      	ldr	r3, [pc, #12]	; (80021d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80021c2:	681b      	ldr	r3, [r3, #0]
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	20000000 	.word	0x20000000

080021d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80021d8:	f7ff fff0 	bl	80021bc <HAL_RCC_GetHCLKFreq>
 80021dc:	4602      	mov	r2, r0
 80021de:	4b06      	ldr	r3, [pc, #24]	; (80021f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	0a1b      	lsrs	r3, r3, #8
 80021e4:	f003 0307 	and.w	r3, r3, #7
 80021e8:	4904      	ldr	r1, [pc, #16]	; (80021fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80021ea:	5ccb      	ldrb	r3, [r1, r3]
 80021ec:	f003 031f 	and.w	r3, r3, #31
 80021f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	40021000 	.word	0x40021000
 80021fc:	08006e18 	.word	0x08006e18

08002200 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002204:	f7ff ffda 	bl	80021bc <HAL_RCC_GetHCLKFreq>
 8002208:	4602      	mov	r2, r0
 800220a:	4b06      	ldr	r3, [pc, #24]	; (8002224 <HAL_RCC_GetPCLK2Freq+0x24>)
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	0adb      	lsrs	r3, r3, #11
 8002210:	f003 0307 	and.w	r3, r3, #7
 8002214:	4904      	ldr	r1, [pc, #16]	; (8002228 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002216:	5ccb      	ldrb	r3, [r1, r3]
 8002218:	f003 031f 	and.w	r3, r3, #31
 800221c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002220:	4618      	mov	r0, r3
 8002222:	bd80      	pop	{r7, pc}
 8002224:	40021000 	.word	0x40021000
 8002228:	08006e18 	.word	0x08006e18

0800222c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b086      	sub	sp, #24
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002234:	2300      	movs	r3, #0
 8002236:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002238:	4b2a      	ldr	r3, [pc, #168]	; (80022e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800223a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800223c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d003      	beq.n	800224c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002244:	f7ff f9ee 	bl	8001624 <HAL_PWREx_GetVoltageRange>
 8002248:	6178      	str	r0, [r7, #20]
 800224a:	e014      	b.n	8002276 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800224c:	4b25      	ldr	r3, [pc, #148]	; (80022e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800224e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002250:	4a24      	ldr	r2, [pc, #144]	; (80022e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002252:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002256:	6593      	str	r3, [r2, #88]	; 0x58
 8002258:	4b22      	ldr	r3, [pc, #136]	; (80022e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800225a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800225c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002260:	60fb      	str	r3, [r7, #12]
 8002262:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002264:	f7ff f9de 	bl	8001624 <HAL_PWREx_GetVoltageRange>
 8002268:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800226a:	4b1e      	ldr	r3, [pc, #120]	; (80022e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800226c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800226e:	4a1d      	ldr	r2, [pc, #116]	; (80022e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002270:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002274:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800227c:	d10b      	bne.n	8002296 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2b80      	cmp	r3, #128	; 0x80
 8002282:	d919      	bls.n	80022b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2ba0      	cmp	r3, #160	; 0xa0
 8002288:	d902      	bls.n	8002290 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800228a:	2302      	movs	r3, #2
 800228c:	613b      	str	r3, [r7, #16]
 800228e:	e013      	b.n	80022b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002290:	2301      	movs	r3, #1
 8002292:	613b      	str	r3, [r7, #16]
 8002294:	e010      	b.n	80022b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2b80      	cmp	r3, #128	; 0x80
 800229a:	d902      	bls.n	80022a2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800229c:	2303      	movs	r3, #3
 800229e:	613b      	str	r3, [r7, #16]
 80022a0:	e00a      	b.n	80022b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2b80      	cmp	r3, #128	; 0x80
 80022a6:	d102      	bne.n	80022ae <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022a8:	2302      	movs	r3, #2
 80022aa:	613b      	str	r3, [r7, #16]
 80022ac:	e004      	b.n	80022b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2b70      	cmp	r3, #112	; 0x70
 80022b2:	d101      	bne.n	80022b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022b4:	2301      	movs	r3, #1
 80022b6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80022b8:	4b0b      	ldr	r3, [pc, #44]	; (80022e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f023 0207 	bic.w	r2, r3, #7
 80022c0:	4909      	ldr	r1, [pc, #36]	; (80022e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80022c8:	4b07      	ldr	r3, [pc, #28]	; (80022e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0307 	and.w	r3, r3, #7
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d001      	beq.n	80022da <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e000      	b.n	80022dc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80022da:	2300      	movs	r3, #0
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3718      	adds	r7, #24
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	40021000 	.word	0x40021000
 80022e8:	40022000 	.word	0x40022000

080022ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b086      	sub	sp, #24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80022f4:	2300      	movs	r3, #0
 80022f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80022f8:	2300      	movs	r3, #0
 80022fa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002304:	2b00      	cmp	r3, #0
 8002306:	d041      	beq.n	800238c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800230c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002310:	d02a      	beq.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002312:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002316:	d824      	bhi.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002318:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800231c:	d008      	beq.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800231e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002322:	d81e      	bhi.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002324:	2b00      	cmp	r3, #0
 8002326:	d00a      	beq.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002328:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800232c:	d010      	beq.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800232e:	e018      	b.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002330:	4b86      	ldr	r3, [pc, #536]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	4a85      	ldr	r2, [pc, #532]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002336:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800233a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800233c:	e015      	b.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	3304      	adds	r3, #4
 8002342:	2100      	movs	r1, #0
 8002344:	4618      	mov	r0, r3
 8002346:	f000 fabb 	bl	80028c0 <RCCEx_PLLSAI1_Config>
 800234a:	4603      	mov	r3, r0
 800234c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800234e:	e00c      	b.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	3320      	adds	r3, #32
 8002354:	2100      	movs	r1, #0
 8002356:	4618      	mov	r0, r3
 8002358:	f000 fba6 	bl	8002aa8 <RCCEx_PLLSAI2_Config>
 800235c:	4603      	mov	r3, r0
 800235e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002360:	e003      	b.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	74fb      	strb	r3, [r7, #19]
      break;
 8002366:	e000      	b.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002368:	bf00      	nop
    }

    if(ret == HAL_OK)
 800236a:	7cfb      	ldrb	r3, [r7, #19]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d10b      	bne.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002370:	4b76      	ldr	r3, [pc, #472]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002376:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800237e:	4973      	ldr	r1, [pc, #460]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002380:	4313      	orrs	r3, r2
 8002382:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002386:	e001      	b.n	800238c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002388:	7cfb      	ldrb	r3, [r7, #19]
 800238a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d041      	beq.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800239c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80023a0:	d02a      	beq.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80023a2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80023a6:	d824      	bhi.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80023a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80023ac:	d008      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80023ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80023b2:	d81e      	bhi.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d00a      	beq.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80023b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023bc:	d010      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80023be:	e018      	b.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80023c0:	4b62      	ldr	r3, [pc, #392]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	4a61      	ldr	r2, [pc, #388]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ca:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80023cc:	e015      	b.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	3304      	adds	r3, #4
 80023d2:	2100      	movs	r1, #0
 80023d4:	4618      	mov	r0, r3
 80023d6:	f000 fa73 	bl	80028c0 <RCCEx_PLLSAI1_Config>
 80023da:	4603      	mov	r3, r0
 80023dc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80023de:	e00c      	b.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	3320      	adds	r3, #32
 80023e4:	2100      	movs	r1, #0
 80023e6:	4618      	mov	r0, r3
 80023e8:	f000 fb5e 	bl	8002aa8 <RCCEx_PLLSAI2_Config>
 80023ec:	4603      	mov	r3, r0
 80023ee:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80023f0:	e003      	b.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	74fb      	strb	r3, [r7, #19]
      break;
 80023f6:	e000      	b.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80023f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023fa:	7cfb      	ldrb	r3, [r7, #19]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d10b      	bne.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002400:	4b52      	ldr	r3, [pc, #328]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002406:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800240e:	494f      	ldr	r1, [pc, #316]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002410:	4313      	orrs	r3, r2
 8002412:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002416:	e001      	b.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002418:	7cfb      	ldrb	r3, [r7, #19]
 800241a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002424:	2b00      	cmp	r3, #0
 8002426:	f000 80a0 	beq.w	800256a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800242a:	2300      	movs	r3, #0
 800242c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800242e:	4b47      	ldr	r3, [pc, #284]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800243a:	2301      	movs	r3, #1
 800243c:	e000      	b.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800243e:	2300      	movs	r3, #0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d00d      	beq.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002444:	4b41      	ldr	r3, [pc, #260]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002448:	4a40      	ldr	r2, [pc, #256]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800244a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800244e:	6593      	str	r3, [r2, #88]	; 0x58
 8002450:	4b3e      	ldr	r3, [pc, #248]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002458:	60bb      	str	r3, [r7, #8]
 800245a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800245c:	2301      	movs	r3, #1
 800245e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002460:	4b3b      	ldr	r3, [pc, #236]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a3a      	ldr	r2, [pc, #232]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002466:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800246a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800246c:	f7fe fd4a 	bl	8000f04 <HAL_GetTick>
 8002470:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002472:	e009      	b.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002474:	f7fe fd46 	bl	8000f04 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b02      	cmp	r3, #2
 8002480:	d902      	bls.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	74fb      	strb	r3, [r7, #19]
        break;
 8002486:	e005      	b.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002488:	4b31      	ldr	r3, [pc, #196]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002490:	2b00      	cmp	r3, #0
 8002492:	d0ef      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002494:	7cfb      	ldrb	r3, [r7, #19]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d15c      	bne.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800249a:	4b2c      	ldr	r3, [pc, #176]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800249c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024a4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d01f      	beq.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x200>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024b2:	697a      	ldr	r2, [r7, #20]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d019      	beq.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80024b8:	4b24      	ldr	r3, [pc, #144]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024c2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80024c4:	4b21      	ldr	r3, [pc, #132]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ca:	4a20      	ldr	r2, [pc, #128]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80024d4:	4b1d      	ldr	r3, [pc, #116]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024da:	4a1c      	ldr	r2, [pc, #112]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80024e4:	4a19      	ldr	r2, [pc, #100]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d016      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f6:	f7fe fd05 	bl	8000f04 <HAL_GetTick>
 80024fa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024fc:	e00b      	b.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024fe:	f7fe fd01 	bl	8000f04 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	f241 3288 	movw	r2, #5000	; 0x1388
 800250c:	4293      	cmp	r3, r2
 800250e:	d902      	bls.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	74fb      	strb	r3, [r7, #19]
            break;
 8002514:	e006      	b.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002516:	4b0d      	ldr	r3, [pc, #52]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800251c:	f003 0302 	and.w	r3, r3, #2
 8002520:	2b00      	cmp	r3, #0
 8002522:	d0ec      	beq.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002524:	7cfb      	ldrb	r3, [r7, #19]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d10c      	bne.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800252a:	4b08      	ldr	r3, [pc, #32]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800252c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002530:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800253a:	4904      	ldr	r1, [pc, #16]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800253c:	4313      	orrs	r3, r2
 800253e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002542:	e009      	b.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002544:	7cfb      	ldrb	r3, [r7, #19]
 8002546:	74bb      	strb	r3, [r7, #18]
 8002548:	e006      	b.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800254a:	bf00      	nop
 800254c:	40021000 	.word	0x40021000
 8002550:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002554:	7cfb      	ldrb	r3, [r7, #19]
 8002556:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002558:	7c7b      	ldrb	r3, [r7, #17]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d105      	bne.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800255e:	4b9e      	ldr	r3, [pc, #632]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002562:	4a9d      	ldr	r2, [pc, #628]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002564:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002568:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	2b00      	cmp	r3, #0
 8002574:	d00a      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002576:	4b98      	ldr	r3, [pc, #608]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002578:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257c:	f023 0203 	bic.w	r2, r3, #3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002584:	4994      	ldr	r1, [pc, #592]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002586:	4313      	orrs	r3, r2
 8002588:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d00a      	beq.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002598:	4b8f      	ldr	r3, [pc, #572]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800259a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800259e:	f023 020c 	bic.w	r2, r3, #12
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025a6:	498c      	ldr	r1, [pc, #560]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0304 	and.w	r3, r3, #4
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00a      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80025ba:	4b87      	ldr	r3, [pc, #540]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025c0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c8:	4983      	ldr	r1, [pc, #524]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0308 	and.w	r3, r3, #8
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d00a      	beq.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80025dc:	4b7e      	ldr	r3, [pc, #504]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ea:	497b      	ldr	r1, [pc, #492]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0310 	and.w	r3, r3, #16
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d00a      	beq.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80025fe:	4b76      	ldr	r3, [pc, #472]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002600:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002604:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800260c:	4972      	ldr	r1, [pc, #456]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800260e:	4313      	orrs	r3, r2
 8002610:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0320 	and.w	r3, r3, #32
 800261c:	2b00      	cmp	r3, #0
 800261e:	d00a      	beq.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002620:	4b6d      	ldr	r3, [pc, #436]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002626:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800262e:	496a      	ldr	r1, [pc, #424]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002630:	4313      	orrs	r3, r2
 8002632:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00a      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002642:	4b65      	ldr	r3, [pc, #404]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002648:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002650:	4961      	ldr	r1, [pc, #388]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002652:	4313      	orrs	r3, r2
 8002654:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002660:	2b00      	cmp	r3, #0
 8002662:	d00a      	beq.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002664:	4b5c      	ldr	r3, [pc, #368]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800266a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002672:	4959      	ldr	r1, [pc, #356]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002674:	4313      	orrs	r3, r2
 8002676:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002682:	2b00      	cmp	r3, #0
 8002684:	d00a      	beq.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002686:	4b54      	ldr	r3, [pc, #336]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002688:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800268c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002694:	4950      	ldr	r1, [pc, #320]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002696:	4313      	orrs	r3, r2
 8002698:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d00a      	beq.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80026a8:	4b4b      	ldr	r3, [pc, #300]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ae:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b6:	4948      	ldr	r1, [pc, #288]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d00a      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80026ca:	4b43      	ldr	r3, [pc, #268]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d8:	493f      	ldr	r1, [pc, #252]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d028      	beq.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80026ec:	4b3a      	ldr	r3, [pc, #232]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026fa:	4937      	ldr	r1, [pc, #220]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002706:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800270a:	d106      	bne.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800270c:	4b32      	ldr	r3, [pc, #200]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	4a31      	ldr	r2, [pc, #196]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002712:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002716:	60d3      	str	r3, [r2, #12]
 8002718:	e011      	b.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800271e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002722:	d10c      	bne.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	3304      	adds	r3, #4
 8002728:	2101      	movs	r1, #1
 800272a:	4618      	mov	r0, r3
 800272c:	f000 f8c8 	bl	80028c0 <RCCEx_PLLSAI1_Config>
 8002730:	4603      	mov	r3, r0
 8002732:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002734:	7cfb      	ldrb	r3, [r7, #19]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800273a:	7cfb      	ldrb	r3, [r7, #19]
 800273c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d028      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800274a:	4b23      	ldr	r3, [pc, #140]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800274c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002750:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002758:	491f      	ldr	r1, [pc, #124]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800275a:	4313      	orrs	r3, r2
 800275c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002764:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002768:	d106      	bne.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800276a:	4b1b      	ldr	r3, [pc, #108]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	4a1a      	ldr	r2, [pc, #104]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002770:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002774:	60d3      	str	r3, [r2, #12]
 8002776:	e011      	b.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800277c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002780:	d10c      	bne.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	3304      	adds	r3, #4
 8002786:	2101      	movs	r1, #1
 8002788:	4618      	mov	r0, r3
 800278a:	f000 f899 	bl	80028c0 <RCCEx_PLLSAI1_Config>
 800278e:	4603      	mov	r3, r0
 8002790:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002792:	7cfb      	ldrb	r3, [r7, #19]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002798:	7cfb      	ldrb	r3, [r7, #19]
 800279a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d02b      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80027a8:	4b0b      	ldr	r3, [pc, #44]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027b6:	4908      	ldr	r1, [pc, #32]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027c6:	d109      	bne.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027c8:	4b03      	ldr	r3, [pc, #12]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	4a02      	ldr	r2, [pc, #8]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027d2:	60d3      	str	r3, [r2, #12]
 80027d4:	e014      	b.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80027d6:	bf00      	nop
 80027d8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027e4:	d10c      	bne.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	3304      	adds	r3, #4
 80027ea:	2101      	movs	r1, #1
 80027ec:	4618      	mov	r0, r3
 80027ee:	f000 f867 	bl	80028c0 <RCCEx_PLLSAI1_Config>
 80027f2:	4603      	mov	r3, r0
 80027f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027f6:	7cfb      	ldrb	r3, [r7, #19]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80027fc:	7cfb      	ldrb	r3, [r7, #19]
 80027fe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d02f      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800280c:	4b2b      	ldr	r3, [pc, #172]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800280e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002812:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800281a:	4928      	ldr	r1, [pc, #160]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800281c:	4313      	orrs	r3, r2
 800281e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002826:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800282a:	d10d      	bne.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	3304      	adds	r3, #4
 8002830:	2102      	movs	r1, #2
 8002832:	4618      	mov	r0, r3
 8002834:	f000 f844 	bl	80028c0 <RCCEx_PLLSAI1_Config>
 8002838:	4603      	mov	r3, r0
 800283a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800283c:	7cfb      	ldrb	r3, [r7, #19]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d014      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002842:	7cfb      	ldrb	r3, [r7, #19]
 8002844:	74bb      	strb	r3, [r7, #18]
 8002846:	e011      	b.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800284c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002850:	d10c      	bne.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	3320      	adds	r3, #32
 8002856:	2102      	movs	r1, #2
 8002858:	4618      	mov	r0, r3
 800285a:	f000 f925 	bl	8002aa8 <RCCEx_PLLSAI2_Config>
 800285e:	4603      	mov	r3, r0
 8002860:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002862:	7cfb      	ldrb	r3, [r7, #19]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d001      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002868:	7cfb      	ldrb	r3, [r7, #19]
 800286a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d00a      	beq.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002878:	4b10      	ldr	r3, [pc, #64]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800287a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800287e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002886:	490d      	ldr	r1, [pc, #52]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002888:	4313      	orrs	r3, r2
 800288a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d00b      	beq.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800289a:	4b08      	ldr	r3, [pc, #32]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800289c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028aa:	4904      	ldr	r1, [pc, #16]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80028b2:	7cbb      	ldrb	r3, [r7, #18]
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3718      	adds	r7, #24
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	40021000 	.word	0x40021000

080028c0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80028ca:	2300      	movs	r3, #0
 80028cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80028ce:	4b75      	ldr	r3, [pc, #468]	; (8002aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	f003 0303 	and.w	r3, r3, #3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d018      	beq.n	800290c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80028da:	4b72      	ldr	r3, [pc, #456]	; (8002aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	f003 0203 	and.w	r2, r3, #3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d10d      	bne.n	8002906 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
       ||
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d009      	beq.n	8002906 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80028f2:	4b6c      	ldr	r3, [pc, #432]	; (8002aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	091b      	lsrs	r3, r3, #4
 80028f8:	f003 0307 	and.w	r3, r3, #7
 80028fc:	1c5a      	adds	r2, r3, #1
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
       ||
 8002902:	429a      	cmp	r2, r3
 8002904:	d047      	beq.n	8002996 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	73fb      	strb	r3, [r7, #15]
 800290a:	e044      	b.n	8002996 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2b03      	cmp	r3, #3
 8002912:	d018      	beq.n	8002946 <RCCEx_PLLSAI1_Config+0x86>
 8002914:	2b03      	cmp	r3, #3
 8002916:	d825      	bhi.n	8002964 <RCCEx_PLLSAI1_Config+0xa4>
 8002918:	2b01      	cmp	r3, #1
 800291a:	d002      	beq.n	8002922 <RCCEx_PLLSAI1_Config+0x62>
 800291c:	2b02      	cmp	r3, #2
 800291e:	d009      	beq.n	8002934 <RCCEx_PLLSAI1_Config+0x74>
 8002920:	e020      	b.n	8002964 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002922:	4b60      	ldr	r3, [pc, #384]	; (8002aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	2b00      	cmp	r3, #0
 800292c:	d11d      	bne.n	800296a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002932:	e01a      	b.n	800296a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002934:	4b5b      	ldr	r3, [pc, #364]	; (8002aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800293c:	2b00      	cmp	r3, #0
 800293e:	d116      	bne.n	800296e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002944:	e013      	b.n	800296e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002946:	4b57      	ldr	r3, [pc, #348]	; (8002aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d10f      	bne.n	8002972 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002952:	4b54      	ldr	r3, [pc, #336]	; (8002aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d109      	bne.n	8002972 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002962:	e006      	b.n	8002972 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	73fb      	strb	r3, [r7, #15]
      break;
 8002968:	e004      	b.n	8002974 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800296a:	bf00      	nop
 800296c:	e002      	b.n	8002974 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800296e:	bf00      	nop
 8002970:	e000      	b.n	8002974 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002972:	bf00      	nop
    }

    if(status == HAL_OK)
 8002974:	7bfb      	ldrb	r3, [r7, #15]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d10d      	bne.n	8002996 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800297a:	4b4a      	ldr	r3, [pc, #296]	; (8002aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6819      	ldr	r1, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	3b01      	subs	r3, #1
 800298c:	011b      	lsls	r3, r3, #4
 800298e:	430b      	orrs	r3, r1
 8002990:	4944      	ldr	r1, [pc, #272]	; (8002aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002992:	4313      	orrs	r3, r2
 8002994:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002996:	7bfb      	ldrb	r3, [r7, #15]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d17d      	bne.n	8002a98 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800299c:	4b41      	ldr	r3, [pc, #260]	; (8002aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a40      	ldr	r2, [pc, #256]	; (8002aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029a2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80029a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029a8:	f7fe faac 	bl	8000f04 <HAL_GetTick>
 80029ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80029ae:	e009      	b.n	80029c4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80029b0:	f7fe faa8 	bl	8000f04 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d902      	bls.n	80029c4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	73fb      	strb	r3, [r7, #15]
        break;
 80029c2:	e005      	b.n	80029d0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80029c4:	4b37      	ldr	r3, [pc, #220]	; (8002aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d1ef      	bne.n	80029b0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80029d0:	7bfb      	ldrb	r3, [r7, #15]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d160      	bne.n	8002a98 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d111      	bne.n	8002a00 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029dc:	4b31      	ldr	r3, [pc, #196]	; (8002aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80029e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	6892      	ldr	r2, [r2, #8]
 80029ec:	0211      	lsls	r1, r2, #8
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	68d2      	ldr	r2, [r2, #12]
 80029f2:	0912      	lsrs	r2, r2, #4
 80029f4:	0452      	lsls	r2, r2, #17
 80029f6:	430a      	orrs	r2, r1
 80029f8:	492a      	ldr	r1, [pc, #168]	; (8002aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	610b      	str	r3, [r1, #16]
 80029fe:	e027      	b.n	8002a50 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d112      	bne.n	8002a2c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a06:	4b27      	ldr	r3, [pc, #156]	; (8002aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002a0e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	6892      	ldr	r2, [r2, #8]
 8002a16:	0211      	lsls	r1, r2, #8
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	6912      	ldr	r2, [r2, #16]
 8002a1c:	0852      	lsrs	r2, r2, #1
 8002a1e:	3a01      	subs	r2, #1
 8002a20:	0552      	lsls	r2, r2, #21
 8002a22:	430a      	orrs	r2, r1
 8002a24:	491f      	ldr	r1, [pc, #124]	; (8002aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	610b      	str	r3, [r1, #16]
 8002a2a:	e011      	b.n	8002a50 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a2c:	4b1d      	ldr	r3, [pc, #116]	; (8002aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a2e:	691b      	ldr	r3, [r3, #16]
 8002a30:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002a34:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	6892      	ldr	r2, [r2, #8]
 8002a3c:	0211      	lsls	r1, r2, #8
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	6952      	ldr	r2, [r2, #20]
 8002a42:	0852      	lsrs	r2, r2, #1
 8002a44:	3a01      	subs	r2, #1
 8002a46:	0652      	lsls	r2, r2, #25
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	4916      	ldr	r1, [pc, #88]	; (8002aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002a50:	4b14      	ldr	r3, [pc, #80]	; (8002aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a13      	ldr	r2, [pc, #76]	; (8002aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a56:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a5a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a5c:	f7fe fa52 	bl	8000f04 <HAL_GetTick>
 8002a60:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a62:	e009      	b.n	8002a78 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a64:	f7fe fa4e 	bl	8000f04 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d902      	bls.n	8002a78 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	73fb      	strb	r3, [r7, #15]
          break;
 8002a76:	e005      	b.n	8002a84 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a78:	4b0a      	ldr	r3, [pc, #40]	; (8002aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d0ef      	beq.n	8002a64 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002a84:	7bfb      	ldrb	r3, [r7, #15]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d106      	bne.n	8002a98 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002a8a:	4b06      	ldr	r3, [pc, #24]	; (8002aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a8c:	691a      	ldr	r2, [r3, #16]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	4904      	ldr	r1, [pc, #16]	; (8002aa4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3710      	adds	r7, #16
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	40021000 	.word	0x40021000

08002aa8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ab6:	4b6a      	ldr	r3, [pc, #424]	; (8002c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	f003 0303 	and.w	r3, r3, #3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d018      	beq.n	8002af4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002ac2:	4b67      	ldr	r3, [pc, #412]	; (8002c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	f003 0203 	and.w	r2, r3, #3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d10d      	bne.n	8002aee <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
       ||
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d009      	beq.n	8002aee <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002ada:	4b61      	ldr	r3, [pc, #388]	; (8002c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	091b      	lsrs	r3, r3, #4
 8002ae0:	f003 0307 	and.w	r3, r3, #7
 8002ae4:	1c5a      	adds	r2, r3, #1
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
       ||
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d047      	beq.n	8002b7e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	73fb      	strb	r3, [r7, #15]
 8002af2:	e044      	b.n	8002b7e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2b03      	cmp	r3, #3
 8002afa:	d018      	beq.n	8002b2e <RCCEx_PLLSAI2_Config+0x86>
 8002afc:	2b03      	cmp	r3, #3
 8002afe:	d825      	bhi.n	8002b4c <RCCEx_PLLSAI2_Config+0xa4>
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d002      	beq.n	8002b0a <RCCEx_PLLSAI2_Config+0x62>
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d009      	beq.n	8002b1c <RCCEx_PLLSAI2_Config+0x74>
 8002b08:	e020      	b.n	8002b4c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b0a:	4b55      	ldr	r3, [pc, #340]	; (8002c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d11d      	bne.n	8002b52 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b1a:	e01a      	b.n	8002b52 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b1c:	4b50      	ldr	r3, [pc, #320]	; (8002c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d116      	bne.n	8002b56 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b2c:	e013      	b.n	8002b56 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b2e:	4b4c      	ldr	r3, [pc, #304]	; (8002c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d10f      	bne.n	8002b5a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b3a:	4b49      	ldr	r3, [pc, #292]	; (8002c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d109      	bne.n	8002b5a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b4a:	e006      	b.n	8002b5a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	73fb      	strb	r3, [r7, #15]
      break;
 8002b50:	e004      	b.n	8002b5c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b52:	bf00      	nop
 8002b54:	e002      	b.n	8002b5c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b56:	bf00      	nop
 8002b58:	e000      	b.n	8002b5c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b5a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b5c:	7bfb      	ldrb	r3, [r7, #15]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d10d      	bne.n	8002b7e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b62:	4b3f      	ldr	r3, [pc, #252]	; (8002c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6819      	ldr	r1, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	3b01      	subs	r3, #1
 8002b74:	011b      	lsls	r3, r3, #4
 8002b76:	430b      	orrs	r3, r1
 8002b78:	4939      	ldr	r1, [pc, #228]	; (8002c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b7e:	7bfb      	ldrb	r3, [r7, #15]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d167      	bne.n	8002c54 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002b84:	4b36      	ldr	r3, [pc, #216]	; (8002c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a35      	ldr	r2, [pc, #212]	; (8002c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b90:	f7fe f9b8 	bl	8000f04 <HAL_GetTick>
 8002b94:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b96:	e009      	b.n	8002bac <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b98:	f7fe f9b4 	bl	8000f04 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d902      	bls.n	8002bac <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	73fb      	strb	r3, [r7, #15]
        break;
 8002baa:	e005      	b.n	8002bb8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002bac:	4b2c      	ldr	r3, [pc, #176]	; (8002c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d1ef      	bne.n	8002b98 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002bb8:	7bfb      	ldrb	r3, [r7, #15]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d14a      	bne.n	8002c54 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d111      	bne.n	8002be8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002bc4:	4b26      	ldr	r3, [pc, #152]	; (8002c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bc6:	695b      	ldr	r3, [r3, #20]
 8002bc8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002bcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	6892      	ldr	r2, [r2, #8]
 8002bd4:	0211      	lsls	r1, r2, #8
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	68d2      	ldr	r2, [r2, #12]
 8002bda:	0912      	lsrs	r2, r2, #4
 8002bdc:	0452      	lsls	r2, r2, #17
 8002bde:	430a      	orrs	r2, r1
 8002be0:	491f      	ldr	r1, [pc, #124]	; (8002c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	614b      	str	r3, [r1, #20]
 8002be6:	e011      	b.n	8002c0c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002be8:	4b1d      	ldr	r3, [pc, #116]	; (8002c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bea:	695b      	ldr	r3, [r3, #20]
 8002bec:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002bf0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	6892      	ldr	r2, [r2, #8]
 8002bf8:	0211      	lsls	r1, r2, #8
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	6912      	ldr	r2, [r2, #16]
 8002bfe:	0852      	lsrs	r2, r2, #1
 8002c00:	3a01      	subs	r2, #1
 8002c02:	0652      	lsls	r2, r2, #25
 8002c04:	430a      	orrs	r2, r1
 8002c06:	4916      	ldr	r1, [pc, #88]	; (8002c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002c0c:	4b14      	ldr	r3, [pc, #80]	; (8002c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a13      	ldr	r2, [pc, #76]	; (8002c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c16:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c18:	f7fe f974 	bl	8000f04 <HAL_GetTick>
 8002c1c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c1e:	e009      	b.n	8002c34 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c20:	f7fe f970 	bl	8000f04 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d902      	bls.n	8002c34 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	73fb      	strb	r3, [r7, #15]
          break;
 8002c32:	e005      	b.n	8002c40 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c34:	4b0a      	ldr	r3, [pc, #40]	; (8002c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d0ef      	beq.n	8002c20 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002c40:	7bfb      	ldrb	r3, [r7, #15]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d106      	bne.n	8002c54 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002c46:	4b06      	ldr	r3, [pc, #24]	; (8002c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c48:	695a      	ldr	r2, [r3, #20]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	695b      	ldr	r3, [r3, #20]
 8002c4e:	4904      	ldr	r1, [pc, #16]	; (8002c60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3710      	adds	r7, #16
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	40021000 	.word	0x40021000

08002c64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b085      	sub	sp, #20
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d001      	beq.n	8002c7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e04f      	b.n	8002d1c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2202      	movs	r2, #2
 8002c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	68da      	ldr	r2, [r3, #12]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f042 0201 	orr.w	r2, r2, #1
 8002c92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a23      	ldr	r2, [pc, #140]	; (8002d28 <HAL_TIM_Base_Start_IT+0xc4>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d01d      	beq.n	8002cda <HAL_TIM_Base_Start_IT+0x76>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ca6:	d018      	beq.n	8002cda <HAL_TIM_Base_Start_IT+0x76>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a1f      	ldr	r2, [pc, #124]	; (8002d2c <HAL_TIM_Base_Start_IT+0xc8>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d013      	beq.n	8002cda <HAL_TIM_Base_Start_IT+0x76>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a1e      	ldr	r2, [pc, #120]	; (8002d30 <HAL_TIM_Base_Start_IT+0xcc>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d00e      	beq.n	8002cda <HAL_TIM_Base_Start_IT+0x76>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a1c      	ldr	r2, [pc, #112]	; (8002d34 <HAL_TIM_Base_Start_IT+0xd0>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d009      	beq.n	8002cda <HAL_TIM_Base_Start_IT+0x76>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a1b      	ldr	r2, [pc, #108]	; (8002d38 <HAL_TIM_Base_Start_IT+0xd4>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d004      	beq.n	8002cda <HAL_TIM_Base_Start_IT+0x76>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a19      	ldr	r2, [pc, #100]	; (8002d3c <HAL_TIM_Base_Start_IT+0xd8>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d115      	bne.n	8002d06 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	689a      	ldr	r2, [r3, #8]
 8002ce0:	4b17      	ldr	r3, [pc, #92]	; (8002d40 <HAL_TIM_Base_Start_IT+0xdc>)
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2b06      	cmp	r3, #6
 8002cea:	d015      	beq.n	8002d18 <HAL_TIM_Base_Start_IT+0xb4>
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cf2:	d011      	beq.n	8002d18 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f042 0201 	orr.w	r2, r2, #1
 8002d02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d04:	e008      	b.n	8002d18 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f042 0201 	orr.w	r2, r2, #1
 8002d14:	601a      	str	r2, [r3, #0]
 8002d16:	e000      	b.n	8002d1a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d18:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3714      	adds	r7, #20
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr
 8002d28:	40012c00 	.word	0x40012c00
 8002d2c:	40000400 	.word	0x40000400
 8002d30:	40000800 	.word	0x40000800
 8002d34:	40000c00 	.word	0x40000c00
 8002d38:	40013400 	.word	0x40013400
 8002d3c:	40014000 	.word	0x40014000
 8002d40:	00010007 	.word	0x00010007

08002d44 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d101      	bne.n	8002d56 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e049      	b.n	8002dea <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d106      	bne.n	8002d70 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f7fd fee0 	bl	8000b30 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2202      	movs	r2, #2
 8002d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	3304      	adds	r3, #4
 8002d80:	4619      	mov	r1, r3
 8002d82:	4610      	mov	r0, r2
 8002d84:	f000 fb44 	bl	8003410 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3708      	adds	r7, #8
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b082      	sub	sp, #8
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d101      	bne.n	8002e04 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e049      	b.n	8002e98 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d106      	bne.n	8002e1e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f7fd fe65 	bl	8000ae8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2202      	movs	r2, #2
 8002e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	3304      	adds	r3, #4
 8002e2e:	4619      	mov	r1, r3
 8002e30:	4610      	mov	r0, r2
 8002e32:	f000 faed 	bl	8003410 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2201      	movs	r2, #1
 8002e42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2201      	movs	r2, #1
 8002e52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2201      	movs	r2, #1
 8002e5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2201      	movs	r2, #1
 8002e62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2201      	movs	r2, #1
 8002e72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2201      	movs	r2, #1
 8002e82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2201      	movs	r2, #1
 8002e8a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2201      	movs	r2, #1
 8002e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3708      	adds	r7, #8
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d020      	beq.n	8002f04 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	f003 0302 	and.w	r3, r3, #2
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d01b      	beq.n	8002f04 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f06f 0202 	mvn.w	r2, #2
 8002ed4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	f003 0303 	and.w	r3, r3, #3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d003      	beq.n	8002ef2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 fa72 	bl	80033d4 <HAL_TIM_IC_CaptureCallback>
 8002ef0:	e005      	b.n	8002efe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 fa64 	bl	80033c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f000 fa75 	bl	80033e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	f003 0304 	and.w	r3, r3, #4
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d020      	beq.n	8002f50 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f003 0304 	and.w	r3, r3, #4
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d01b      	beq.n	8002f50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f06f 0204 	mvn.w	r2, #4
 8002f20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2202      	movs	r2, #2
 8002f26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d003      	beq.n	8002f3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 fa4c 	bl	80033d4 <HAL_TIM_IC_CaptureCallback>
 8002f3c:	e005      	b.n	8002f4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 fa3e 	bl	80033c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f000 fa4f 	bl	80033e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	f003 0308 	and.w	r3, r3, #8
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d020      	beq.n	8002f9c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	f003 0308 	and.w	r3, r3, #8
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d01b      	beq.n	8002f9c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f06f 0208 	mvn.w	r2, #8
 8002f6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2204      	movs	r2, #4
 8002f72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	69db      	ldr	r3, [r3, #28]
 8002f7a:	f003 0303 	and.w	r3, r3, #3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d003      	beq.n	8002f8a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f000 fa26 	bl	80033d4 <HAL_TIM_IC_CaptureCallback>
 8002f88:	e005      	b.n	8002f96 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 fa18 	bl	80033c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f000 fa29 	bl	80033e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	f003 0310 	and.w	r3, r3, #16
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d020      	beq.n	8002fe8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f003 0310 	and.w	r3, r3, #16
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d01b      	beq.n	8002fe8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f06f 0210 	mvn.w	r2, #16
 8002fb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2208      	movs	r2, #8
 8002fbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	69db      	ldr	r3, [r3, #28]
 8002fc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d003      	beq.n	8002fd6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 fa00 	bl	80033d4 <HAL_TIM_IC_CaptureCallback>
 8002fd4:	e005      	b.n	8002fe2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 f9f2 	bl	80033c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f000 fa03 	bl	80033e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	f003 0301 	and.w	r3, r3, #1
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d00c      	beq.n	800300c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f003 0301 	and.w	r3, r3, #1
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d007      	beq.n	800300c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f06f 0201 	mvn.w	r2, #1
 8003004:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f7fd fad2 	bl	80005b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00c      	beq.n	8003030 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800301c:	2b00      	cmp	r3, #0
 800301e:	d007      	beq.n	8003030 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 fdf2 	bl	8003c14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003036:	2b00      	cmp	r3, #0
 8003038:	d00c      	beq.n	8003054 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003040:	2b00      	cmp	r3, #0
 8003042:	d007      	beq.n	8003054 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800304c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 fdea 	bl	8003c28 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00c      	beq.n	8003078 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003064:	2b00      	cmp	r3, #0
 8003066:	d007      	beq.n	8003078 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003070:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 f9c2 	bl	80033fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	f003 0320 	and.w	r3, r3, #32
 800307e:	2b00      	cmp	r3, #0
 8003080:	d00c      	beq.n	800309c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f003 0320 	and.w	r3, r3, #32
 8003088:	2b00      	cmp	r3, #0
 800308a:	d007      	beq.n	800309c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f06f 0220 	mvn.w	r2, #32
 8003094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 fdb2 	bl	8003c00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800309c:	bf00      	nop
 800309e:	3710      	adds	r7, #16
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b086      	sub	sp, #24
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030b0:	2300      	movs	r3, #0
 80030b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d101      	bne.n	80030c2 <HAL_TIM_OC_ConfigChannel+0x1e>
 80030be:	2302      	movs	r3, #2
 80030c0:	e066      	b.n	8003190 <HAL_TIM_OC_ConfigChannel+0xec>
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2201      	movs	r2, #1
 80030c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2b14      	cmp	r3, #20
 80030ce:	d857      	bhi.n	8003180 <HAL_TIM_OC_ConfigChannel+0xdc>
 80030d0:	a201      	add	r2, pc, #4	; (adr r2, 80030d8 <HAL_TIM_OC_ConfigChannel+0x34>)
 80030d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030d6:	bf00      	nop
 80030d8:	0800312d 	.word	0x0800312d
 80030dc:	08003181 	.word	0x08003181
 80030e0:	08003181 	.word	0x08003181
 80030e4:	08003181 	.word	0x08003181
 80030e8:	0800313b 	.word	0x0800313b
 80030ec:	08003181 	.word	0x08003181
 80030f0:	08003181 	.word	0x08003181
 80030f4:	08003181 	.word	0x08003181
 80030f8:	08003149 	.word	0x08003149
 80030fc:	08003181 	.word	0x08003181
 8003100:	08003181 	.word	0x08003181
 8003104:	08003181 	.word	0x08003181
 8003108:	08003157 	.word	0x08003157
 800310c:	08003181 	.word	0x08003181
 8003110:	08003181 	.word	0x08003181
 8003114:	08003181 	.word	0x08003181
 8003118:	08003165 	.word	0x08003165
 800311c:	08003181 	.word	0x08003181
 8003120:	08003181 	.word	0x08003181
 8003124:	08003181 	.word	0x08003181
 8003128:	08003173 	.word	0x08003173
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	68b9      	ldr	r1, [r7, #8]
 8003132:	4618      	mov	r0, r3
 8003134:	f000 fa06 	bl	8003544 <TIM_OC1_SetConfig>
      break;
 8003138:	e025      	b.n	8003186 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68b9      	ldr	r1, [r7, #8]
 8003140:	4618      	mov	r0, r3
 8003142:	f000 fa8f 	bl	8003664 <TIM_OC2_SetConfig>
      break;
 8003146:	e01e      	b.n	8003186 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	68b9      	ldr	r1, [r7, #8]
 800314e:	4618      	mov	r0, r3
 8003150:	f000 fb12 	bl	8003778 <TIM_OC3_SetConfig>
      break;
 8003154:	e017      	b.n	8003186 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68b9      	ldr	r1, [r7, #8]
 800315c:	4618      	mov	r0, r3
 800315e:	f000 fb93 	bl	8003888 <TIM_OC4_SetConfig>
      break;
 8003162:	e010      	b.n	8003186 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	68b9      	ldr	r1, [r7, #8]
 800316a:	4618      	mov	r0, r3
 800316c:	f000 fbf6 	bl	800395c <TIM_OC5_SetConfig>
      break;
 8003170:	e009      	b.n	8003186 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68b9      	ldr	r1, [r7, #8]
 8003178:	4618      	mov	r0, r3
 800317a:	f000 fc53 	bl	8003a24 <TIM_OC6_SetConfig>
      break;
 800317e:	e002      	b.n	8003186 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	75fb      	strb	r3, [r7, #23]
      break;
 8003184:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800318e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003190:	4618      	mov	r0, r3
 8003192:	3718      	adds	r7, #24
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b086      	sub	sp, #24
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031a4:	2300      	movs	r3, #0
 80031a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d101      	bne.n	80031b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80031b2:	2302      	movs	r3, #2
 80031b4:	e0ff      	b.n	80033b6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2201      	movs	r2, #1
 80031ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2b14      	cmp	r3, #20
 80031c2:	f200 80f0 	bhi.w	80033a6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80031c6:	a201      	add	r2, pc, #4	; (adr r2, 80031cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80031c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031cc:	08003221 	.word	0x08003221
 80031d0:	080033a7 	.word	0x080033a7
 80031d4:	080033a7 	.word	0x080033a7
 80031d8:	080033a7 	.word	0x080033a7
 80031dc:	08003261 	.word	0x08003261
 80031e0:	080033a7 	.word	0x080033a7
 80031e4:	080033a7 	.word	0x080033a7
 80031e8:	080033a7 	.word	0x080033a7
 80031ec:	080032a3 	.word	0x080032a3
 80031f0:	080033a7 	.word	0x080033a7
 80031f4:	080033a7 	.word	0x080033a7
 80031f8:	080033a7 	.word	0x080033a7
 80031fc:	080032e3 	.word	0x080032e3
 8003200:	080033a7 	.word	0x080033a7
 8003204:	080033a7 	.word	0x080033a7
 8003208:	080033a7 	.word	0x080033a7
 800320c:	08003325 	.word	0x08003325
 8003210:	080033a7 	.word	0x080033a7
 8003214:	080033a7 	.word	0x080033a7
 8003218:	080033a7 	.word	0x080033a7
 800321c:	08003365 	.word	0x08003365
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68b9      	ldr	r1, [r7, #8]
 8003226:	4618      	mov	r0, r3
 8003228:	f000 f98c 	bl	8003544 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	699a      	ldr	r2, [r3, #24]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f042 0208 	orr.w	r2, r2, #8
 800323a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	699a      	ldr	r2, [r3, #24]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f022 0204 	bic.w	r2, r2, #4
 800324a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	6999      	ldr	r1, [r3, #24]
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	691a      	ldr	r2, [r3, #16]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	430a      	orrs	r2, r1
 800325c:	619a      	str	r2, [r3, #24]
      break;
 800325e:	e0a5      	b.n	80033ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68b9      	ldr	r1, [r7, #8]
 8003266:	4618      	mov	r0, r3
 8003268:	f000 f9fc 	bl	8003664 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	699a      	ldr	r2, [r3, #24]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800327a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	699a      	ldr	r2, [r3, #24]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800328a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	6999      	ldr	r1, [r3, #24]
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	021a      	lsls	r2, r3, #8
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	430a      	orrs	r2, r1
 800329e:	619a      	str	r2, [r3, #24]
      break;
 80032a0:	e084      	b.n	80033ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68b9      	ldr	r1, [r7, #8]
 80032a8:	4618      	mov	r0, r3
 80032aa:	f000 fa65 	bl	8003778 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	69da      	ldr	r2, [r3, #28]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f042 0208 	orr.w	r2, r2, #8
 80032bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	69da      	ldr	r2, [r3, #28]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f022 0204 	bic.w	r2, r2, #4
 80032cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	69d9      	ldr	r1, [r3, #28]
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	691a      	ldr	r2, [r3, #16]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	430a      	orrs	r2, r1
 80032de:	61da      	str	r2, [r3, #28]
      break;
 80032e0:	e064      	b.n	80033ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	68b9      	ldr	r1, [r7, #8]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f000 facd 	bl	8003888 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	69da      	ldr	r2, [r3, #28]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	69da      	ldr	r2, [r3, #28]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800330c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	69d9      	ldr	r1, [r3, #28]
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	691b      	ldr	r3, [r3, #16]
 8003318:	021a      	lsls	r2, r3, #8
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	430a      	orrs	r2, r1
 8003320:	61da      	str	r2, [r3, #28]
      break;
 8003322:	e043      	b.n	80033ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68b9      	ldr	r1, [r7, #8]
 800332a:	4618      	mov	r0, r3
 800332c:	f000 fb16 	bl	800395c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f042 0208 	orr.w	r2, r2, #8
 800333e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f022 0204 	bic.w	r2, r2, #4
 800334e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	691a      	ldr	r2, [r3, #16]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	430a      	orrs	r2, r1
 8003360:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003362:	e023      	b.n	80033ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68b9      	ldr	r1, [r7, #8]
 800336a:	4618      	mov	r0, r3
 800336c:	f000 fb5a 	bl	8003a24 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800337e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800338e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	021a      	lsls	r2, r3, #8
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	430a      	orrs	r2, r1
 80033a2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80033a4:	e002      	b.n	80033ac <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	75fb      	strb	r3, [r7, #23]
      break;
 80033aa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80033b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3718      	adds	r7, #24
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop

080033c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80033c8:	bf00      	nop
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80033dc:	bf00      	nop
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033f0:	bf00      	nop
 80033f2:	370c      	adds	r7, #12
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr

080033fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003404:	bf00      	nop
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003410:	b480      	push	{r7}
 8003412:	b085      	sub	sp, #20
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4a40      	ldr	r2, [pc, #256]	; (8003524 <TIM_Base_SetConfig+0x114>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d013      	beq.n	8003450 <TIM_Base_SetConfig+0x40>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800342e:	d00f      	beq.n	8003450 <TIM_Base_SetConfig+0x40>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a3d      	ldr	r2, [pc, #244]	; (8003528 <TIM_Base_SetConfig+0x118>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d00b      	beq.n	8003450 <TIM_Base_SetConfig+0x40>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a3c      	ldr	r2, [pc, #240]	; (800352c <TIM_Base_SetConfig+0x11c>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d007      	beq.n	8003450 <TIM_Base_SetConfig+0x40>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a3b      	ldr	r2, [pc, #236]	; (8003530 <TIM_Base_SetConfig+0x120>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d003      	beq.n	8003450 <TIM_Base_SetConfig+0x40>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4a3a      	ldr	r2, [pc, #232]	; (8003534 <TIM_Base_SetConfig+0x124>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d108      	bne.n	8003462 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003456:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	68fa      	ldr	r2, [r7, #12]
 800345e:	4313      	orrs	r3, r2
 8003460:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a2f      	ldr	r2, [pc, #188]	; (8003524 <TIM_Base_SetConfig+0x114>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d01f      	beq.n	80034aa <TIM_Base_SetConfig+0x9a>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003470:	d01b      	beq.n	80034aa <TIM_Base_SetConfig+0x9a>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a2c      	ldr	r2, [pc, #176]	; (8003528 <TIM_Base_SetConfig+0x118>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d017      	beq.n	80034aa <TIM_Base_SetConfig+0x9a>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a2b      	ldr	r2, [pc, #172]	; (800352c <TIM_Base_SetConfig+0x11c>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d013      	beq.n	80034aa <TIM_Base_SetConfig+0x9a>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a2a      	ldr	r2, [pc, #168]	; (8003530 <TIM_Base_SetConfig+0x120>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d00f      	beq.n	80034aa <TIM_Base_SetConfig+0x9a>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a29      	ldr	r2, [pc, #164]	; (8003534 <TIM_Base_SetConfig+0x124>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d00b      	beq.n	80034aa <TIM_Base_SetConfig+0x9a>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a28      	ldr	r2, [pc, #160]	; (8003538 <TIM_Base_SetConfig+0x128>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d007      	beq.n	80034aa <TIM_Base_SetConfig+0x9a>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a27      	ldr	r2, [pc, #156]	; (800353c <TIM_Base_SetConfig+0x12c>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d003      	beq.n	80034aa <TIM_Base_SetConfig+0x9a>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a26      	ldr	r2, [pc, #152]	; (8003540 <TIM_Base_SetConfig+0x130>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d108      	bne.n	80034bc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	695b      	ldr	r3, [r3, #20]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	68fa      	ldr	r2, [r7, #12]
 80034ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	689a      	ldr	r2, [r3, #8]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4a10      	ldr	r2, [pc, #64]	; (8003524 <TIM_Base_SetConfig+0x114>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d00f      	beq.n	8003508 <TIM_Base_SetConfig+0xf8>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	4a12      	ldr	r2, [pc, #72]	; (8003534 <TIM_Base_SetConfig+0x124>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d00b      	beq.n	8003508 <TIM_Base_SetConfig+0xf8>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a11      	ldr	r2, [pc, #68]	; (8003538 <TIM_Base_SetConfig+0x128>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d007      	beq.n	8003508 <TIM_Base_SetConfig+0xf8>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a10      	ldr	r2, [pc, #64]	; (800353c <TIM_Base_SetConfig+0x12c>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d003      	beq.n	8003508 <TIM_Base_SetConfig+0xf8>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a0f      	ldr	r2, [pc, #60]	; (8003540 <TIM_Base_SetConfig+0x130>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d103      	bne.n	8003510 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	691a      	ldr	r2, [r3, #16]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	615a      	str	r2, [r3, #20]
}
 8003516:	bf00      	nop
 8003518:	3714      	adds	r7, #20
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	40012c00 	.word	0x40012c00
 8003528:	40000400 	.word	0x40000400
 800352c:	40000800 	.word	0x40000800
 8003530:	40000c00 	.word	0x40000c00
 8003534:	40013400 	.word	0x40013400
 8003538:	40014000 	.word	0x40014000
 800353c:	40014400 	.word	0x40014400
 8003540:	40014800 	.word	0x40014800

08003544 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003544:	b480      	push	{r7}
 8003546:	b087      	sub	sp, #28
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a1b      	ldr	r3, [r3, #32]
 8003552:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a1b      	ldr	r3, [r3, #32]
 8003558:	f023 0201 	bic.w	r2, r3, #1
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003576:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f023 0303 	bic.w	r3, r3, #3
 800357e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	68fa      	ldr	r2, [r7, #12]
 8003586:	4313      	orrs	r3, r2
 8003588:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	f023 0302 	bic.w	r3, r3, #2
 8003590:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	697a      	ldr	r2, [r7, #20]
 8003598:	4313      	orrs	r3, r2
 800359a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a2c      	ldr	r2, [pc, #176]	; (8003650 <TIM_OC1_SetConfig+0x10c>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d00f      	beq.n	80035c4 <TIM_OC1_SetConfig+0x80>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a2b      	ldr	r2, [pc, #172]	; (8003654 <TIM_OC1_SetConfig+0x110>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d00b      	beq.n	80035c4 <TIM_OC1_SetConfig+0x80>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4a2a      	ldr	r2, [pc, #168]	; (8003658 <TIM_OC1_SetConfig+0x114>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d007      	beq.n	80035c4 <TIM_OC1_SetConfig+0x80>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4a29      	ldr	r2, [pc, #164]	; (800365c <TIM_OC1_SetConfig+0x118>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d003      	beq.n	80035c4 <TIM_OC1_SetConfig+0x80>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4a28      	ldr	r2, [pc, #160]	; (8003660 <TIM_OC1_SetConfig+0x11c>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d10c      	bne.n	80035de <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	f023 0308 	bic.w	r3, r3, #8
 80035ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	697a      	ldr	r2, [r7, #20]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	f023 0304 	bic.w	r3, r3, #4
 80035dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a1b      	ldr	r2, [pc, #108]	; (8003650 <TIM_OC1_SetConfig+0x10c>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d00f      	beq.n	8003606 <TIM_OC1_SetConfig+0xc2>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a1a      	ldr	r2, [pc, #104]	; (8003654 <TIM_OC1_SetConfig+0x110>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d00b      	beq.n	8003606 <TIM_OC1_SetConfig+0xc2>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a19      	ldr	r2, [pc, #100]	; (8003658 <TIM_OC1_SetConfig+0x114>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d007      	beq.n	8003606 <TIM_OC1_SetConfig+0xc2>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a18      	ldr	r2, [pc, #96]	; (800365c <TIM_OC1_SetConfig+0x118>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d003      	beq.n	8003606 <TIM_OC1_SetConfig+0xc2>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a17      	ldr	r2, [pc, #92]	; (8003660 <TIM_OC1_SetConfig+0x11c>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d111      	bne.n	800362a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800360c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003614:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	4313      	orrs	r3, r2
 800361e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	699b      	ldr	r3, [r3, #24]
 8003624:	693a      	ldr	r2, [r7, #16]
 8003626:	4313      	orrs	r3, r2
 8003628:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	68fa      	ldr	r2, [r7, #12]
 8003634:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	685a      	ldr	r2, [r3, #4]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	697a      	ldr	r2, [r7, #20]
 8003642:	621a      	str	r2, [r3, #32]
}
 8003644:	bf00      	nop
 8003646:	371c      	adds	r7, #28
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr
 8003650:	40012c00 	.word	0x40012c00
 8003654:	40013400 	.word	0x40013400
 8003658:	40014000 	.word	0x40014000
 800365c:	40014400 	.word	0x40014400
 8003660:	40014800 	.word	0x40014800

08003664 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003664:	b480      	push	{r7}
 8003666:	b087      	sub	sp, #28
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a1b      	ldr	r3, [r3, #32]
 8003672:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a1b      	ldr	r3, [r3, #32]
 8003678:	f023 0210 	bic.w	r2, r3, #16
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	699b      	ldr	r3, [r3, #24]
 800368a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003692:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003696:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800369e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	021b      	lsls	r3, r3, #8
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	f023 0320 	bic.w	r3, r3, #32
 80036b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	011b      	lsls	r3, r3, #4
 80036ba:	697a      	ldr	r2, [r7, #20]
 80036bc:	4313      	orrs	r3, r2
 80036be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a28      	ldr	r2, [pc, #160]	; (8003764 <TIM_OC2_SetConfig+0x100>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d003      	beq.n	80036d0 <TIM_OC2_SetConfig+0x6c>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	4a27      	ldr	r2, [pc, #156]	; (8003768 <TIM_OC2_SetConfig+0x104>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d10d      	bne.n	80036ec <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	011b      	lsls	r3, r3, #4
 80036de:	697a      	ldr	r2, [r7, #20]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	4a1d      	ldr	r2, [pc, #116]	; (8003764 <TIM_OC2_SetConfig+0x100>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d00f      	beq.n	8003714 <TIM_OC2_SetConfig+0xb0>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	4a1c      	ldr	r2, [pc, #112]	; (8003768 <TIM_OC2_SetConfig+0x104>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d00b      	beq.n	8003714 <TIM_OC2_SetConfig+0xb0>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4a1b      	ldr	r2, [pc, #108]	; (800376c <TIM_OC2_SetConfig+0x108>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d007      	beq.n	8003714 <TIM_OC2_SetConfig+0xb0>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	4a1a      	ldr	r2, [pc, #104]	; (8003770 <TIM_OC2_SetConfig+0x10c>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d003      	beq.n	8003714 <TIM_OC2_SetConfig+0xb0>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4a19      	ldr	r2, [pc, #100]	; (8003774 <TIM_OC2_SetConfig+0x110>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d113      	bne.n	800373c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800371a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003722:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	695b      	ldr	r3, [r3, #20]
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	693a      	ldr	r2, [r7, #16]
 800372c:	4313      	orrs	r3, r2
 800372e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	699b      	ldr	r3, [r3, #24]
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	693a      	ldr	r2, [r7, #16]
 8003738:	4313      	orrs	r3, r2
 800373a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	693a      	ldr	r2, [r7, #16]
 8003740:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	68fa      	ldr	r2, [r7, #12]
 8003746:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	685a      	ldr	r2, [r3, #4]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	697a      	ldr	r2, [r7, #20]
 8003754:	621a      	str	r2, [r3, #32]
}
 8003756:	bf00      	nop
 8003758:	371c      	adds	r7, #28
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr
 8003762:	bf00      	nop
 8003764:	40012c00 	.word	0x40012c00
 8003768:	40013400 	.word	0x40013400
 800376c:	40014000 	.word	0x40014000
 8003770:	40014400 	.word	0x40014400
 8003774:	40014800 	.word	0x40014800

08003778 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003778:	b480      	push	{r7}
 800377a:	b087      	sub	sp, #28
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a1b      	ldr	r3, [r3, #32]
 8003786:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6a1b      	ldr	r3, [r3, #32]
 800378c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	69db      	ldr	r3, [r3, #28]
 800379e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f023 0303 	bic.w	r3, r3, #3
 80037b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	68fa      	ldr	r2, [r7, #12]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80037c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	021b      	lsls	r3, r3, #8
 80037cc:	697a      	ldr	r2, [r7, #20]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a27      	ldr	r2, [pc, #156]	; (8003874 <TIM_OC3_SetConfig+0xfc>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d003      	beq.n	80037e2 <TIM_OC3_SetConfig+0x6a>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a26      	ldr	r2, [pc, #152]	; (8003878 <TIM_OC3_SetConfig+0x100>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d10d      	bne.n	80037fe <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	021b      	lsls	r3, r3, #8
 80037f0:	697a      	ldr	r2, [r7, #20]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a1c      	ldr	r2, [pc, #112]	; (8003874 <TIM_OC3_SetConfig+0xfc>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d00f      	beq.n	8003826 <TIM_OC3_SetConfig+0xae>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a1b      	ldr	r2, [pc, #108]	; (8003878 <TIM_OC3_SetConfig+0x100>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d00b      	beq.n	8003826 <TIM_OC3_SetConfig+0xae>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a1a      	ldr	r2, [pc, #104]	; (800387c <TIM_OC3_SetConfig+0x104>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d007      	beq.n	8003826 <TIM_OC3_SetConfig+0xae>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a19      	ldr	r2, [pc, #100]	; (8003880 <TIM_OC3_SetConfig+0x108>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d003      	beq.n	8003826 <TIM_OC3_SetConfig+0xae>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a18      	ldr	r2, [pc, #96]	; (8003884 <TIM_OC3_SetConfig+0x10c>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d113      	bne.n	800384e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800382c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003834:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	695b      	ldr	r3, [r3, #20]
 800383a:	011b      	lsls	r3, r3, #4
 800383c:	693a      	ldr	r2, [r7, #16]
 800383e:	4313      	orrs	r3, r2
 8003840:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	699b      	ldr	r3, [r3, #24]
 8003846:	011b      	lsls	r3, r3, #4
 8003848:	693a      	ldr	r2, [r7, #16]
 800384a:	4313      	orrs	r3, r2
 800384c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	693a      	ldr	r2, [r7, #16]
 8003852:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	68fa      	ldr	r2, [r7, #12]
 8003858:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	685a      	ldr	r2, [r3, #4]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	697a      	ldr	r2, [r7, #20]
 8003866:	621a      	str	r2, [r3, #32]
}
 8003868:	bf00      	nop
 800386a:	371c      	adds	r7, #28
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr
 8003874:	40012c00 	.word	0x40012c00
 8003878:	40013400 	.word	0x40013400
 800387c:	40014000 	.word	0x40014000
 8003880:	40014400 	.word	0x40014400
 8003884:	40014800 	.word	0x40014800

08003888 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003888:	b480      	push	{r7}
 800388a:	b087      	sub	sp, #28
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a1b      	ldr	r3, [r3, #32]
 8003896:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a1b      	ldr	r3, [r3, #32]
 800389c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	69db      	ldr	r3, [r3, #28]
 80038ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	021b      	lsls	r3, r3, #8
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80038d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	031b      	lsls	r3, r3, #12
 80038de:	693a      	ldr	r2, [r7, #16]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4a18      	ldr	r2, [pc, #96]	; (8003948 <TIM_OC4_SetConfig+0xc0>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d00f      	beq.n	800390c <TIM_OC4_SetConfig+0x84>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a17      	ldr	r2, [pc, #92]	; (800394c <TIM_OC4_SetConfig+0xc4>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d00b      	beq.n	800390c <TIM_OC4_SetConfig+0x84>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a16      	ldr	r2, [pc, #88]	; (8003950 <TIM_OC4_SetConfig+0xc8>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d007      	beq.n	800390c <TIM_OC4_SetConfig+0x84>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4a15      	ldr	r2, [pc, #84]	; (8003954 <TIM_OC4_SetConfig+0xcc>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d003      	beq.n	800390c <TIM_OC4_SetConfig+0x84>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a14      	ldr	r2, [pc, #80]	; (8003958 <TIM_OC4_SetConfig+0xd0>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d109      	bne.n	8003920 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003912:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	695b      	ldr	r3, [r3, #20]
 8003918:	019b      	lsls	r3, r3, #6
 800391a:	697a      	ldr	r2, [r7, #20]
 800391c:	4313      	orrs	r3, r2
 800391e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	697a      	ldr	r2, [r7, #20]
 8003924:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	685a      	ldr	r2, [r3, #4]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	693a      	ldr	r2, [r7, #16]
 8003938:	621a      	str	r2, [r3, #32]
}
 800393a:	bf00      	nop
 800393c:	371c      	adds	r7, #28
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	40012c00 	.word	0x40012c00
 800394c:	40013400 	.word	0x40013400
 8003950:	40014000 	.word	0x40014000
 8003954:	40014400 	.word	0x40014400
 8003958:	40014800 	.word	0x40014800

0800395c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800395c:	b480      	push	{r7}
 800395e:	b087      	sub	sp, #28
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a1b      	ldr	r3, [r3, #32]
 800396a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a1b      	ldr	r3, [r3, #32]
 8003970:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800398a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800398e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68fa      	ldr	r2, [r7, #12]
 8003996:	4313      	orrs	r3, r2
 8003998:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80039a0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	041b      	lsls	r3, r3, #16
 80039a8:	693a      	ldr	r2, [r7, #16]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a17      	ldr	r2, [pc, #92]	; (8003a10 <TIM_OC5_SetConfig+0xb4>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d00f      	beq.n	80039d6 <TIM_OC5_SetConfig+0x7a>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a16      	ldr	r2, [pc, #88]	; (8003a14 <TIM_OC5_SetConfig+0xb8>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d00b      	beq.n	80039d6 <TIM_OC5_SetConfig+0x7a>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a15      	ldr	r2, [pc, #84]	; (8003a18 <TIM_OC5_SetConfig+0xbc>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d007      	beq.n	80039d6 <TIM_OC5_SetConfig+0x7a>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a14      	ldr	r2, [pc, #80]	; (8003a1c <TIM_OC5_SetConfig+0xc0>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d003      	beq.n	80039d6 <TIM_OC5_SetConfig+0x7a>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a13      	ldr	r2, [pc, #76]	; (8003a20 <TIM_OC5_SetConfig+0xc4>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d109      	bne.n	80039ea <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039dc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	695b      	ldr	r3, [r3, #20]
 80039e2:	021b      	lsls	r3, r3, #8
 80039e4:	697a      	ldr	r2, [r7, #20]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	697a      	ldr	r2, [r7, #20]
 80039ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	685a      	ldr	r2, [r3, #4]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	693a      	ldr	r2, [r7, #16]
 8003a02:	621a      	str	r2, [r3, #32]
}
 8003a04:	bf00      	nop
 8003a06:	371c      	adds	r7, #28
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr
 8003a10:	40012c00 	.word	0x40012c00
 8003a14:	40013400 	.word	0x40013400
 8003a18:	40014000 	.word	0x40014000
 8003a1c:	40014400 	.word	0x40014400
 8003a20:	40014800 	.word	0x40014800

08003a24 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b087      	sub	sp, #28
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a1b      	ldr	r3, [r3, #32]
 8003a32:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a1b      	ldr	r3, [r3, #32]
 8003a38:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	021b      	lsls	r3, r3, #8
 8003a5e:	68fa      	ldr	r2, [r7, #12]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003a6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	051b      	lsls	r3, r3, #20
 8003a72:	693a      	ldr	r2, [r7, #16]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a18      	ldr	r2, [pc, #96]	; (8003adc <TIM_OC6_SetConfig+0xb8>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d00f      	beq.n	8003aa0 <TIM_OC6_SetConfig+0x7c>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4a17      	ldr	r2, [pc, #92]	; (8003ae0 <TIM_OC6_SetConfig+0xbc>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d00b      	beq.n	8003aa0 <TIM_OC6_SetConfig+0x7c>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4a16      	ldr	r2, [pc, #88]	; (8003ae4 <TIM_OC6_SetConfig+0xc0>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d007      	beq.n	8003aa0 <TIM_OC6_SetConfig+0x7c>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a15      	ldr	r2, [pc, #84]	; (8003ae8 <TIM_OC6_SetConfig+0xc4>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d003      	beq.n	8003aa0 <TIM_OC6_SetConfig+0x7c>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4a14      	ldr	r2, [pc, #80]	; (8003aec <TIM_OC6_SetConfig+0xc8>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d109      	bne.n	8003ab4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003aa6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	695b      	ldr	r3, [r3, #20]
 8003aac:	029b      	lsls	r3, r3, #10
 8003aae:	697a      	ldr	r2, [r7, #20]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	697a      	ldr	r2, [r7, #20]
 8003ab8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	685a      	ldr	r2, [r3, #4]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	693a      	ldr	r2, [r7, #16]
 8003acc:	621a      	str	r2, [r3, #32]
}
 8003ace:	bf00      	nop
 8003ad0:	371c      	adds	r7, #28
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop
 8003adc:	40012c00 	.word	0x40012c00
 8003ae0:	40013400 	.word	0x40013400
 8003ae4:	40014000 	.word	0x40014000
 8003ae8:	40014400 	.word	0x40014400
 8003aec:	40014800 	.word	0x40014800

08003af0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b085      	sub	sp, #20
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d101      	bne.n	8003b08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b04:	2302      	movs	r3, #2
 8003b06:	e068      	b.n	8003bda <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2202      	movs	r2, #2
 8003b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a2e      	ldr	r2, [pc, #184]	; (8003be8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d004      	beq.n	8003b3c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a2d      	ldr	r2, [pc, #180]	; (8003bec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d108      	bne.n	8003b4e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003b42:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b54:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	68fa      	ldr	r2, [r7, #12]
 8003b66:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a1e      	ldr	r2, [pc, #120]	; (8003be8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d01d      	beq.n	8003bae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b7a:	d018      	beq.n	8003bae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a1b      	ldr	r2, [pc, #108]	; (8003bf0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d013      	beq.n	8003bae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a1a      	ldr	r2, [pc, #104]	; (8003bf4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d00e      	beq.n	8003bae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a18      	ldr	r2, [pc, #96]	; (8003bf8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d009      	beq.n	8003bae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a13      	ldr	r2, [pc, #76]	; (8003bec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d004      	beq.n	8003bae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a14      	ldr	r2, [pc, #80]	; (8003bfc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d10c      	bne.n	8003bc8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bb4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	68ba      	ldr	r2, [r7, #8]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68ba      	ldr	r2, [r7, #8]
 8003bc6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3714      	adds	r7, #20
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop
 8003be8:	40012c00 	.word	0x40012c00
 8003bec:	40013400 	.word	0x40013400
 8003bf0:	40000400 	.word	0x40000400
 8003bf4:	40000800 	.word	0x40000800
 8003bf8:	40000c00 	.word	0x40000c00
 8003bfc:	40014000 	.word	0x40014000

08003c00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c08:	bf00      	nop
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c1c:	bf00      	nop
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003c30:	bf00      	nop
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d101      	bne.n	8003c4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e040      	b.n	8003cd0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d106      	bne.n	8003c64 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f7fc ffc0 	bl	8000be4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2224      	movs	r2, #36	; 0x24
 8003c68:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f022 0201 	bic.w	r2, r2, #1
 8003c78:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d002      	beq.n	8003c88 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 fe48 	bl	8004918 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f000 fb8d 	bl	80043a8 <UART_SetConfig>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d101      	bne.n	8003c98 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e01b      	b.n	8003cd0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	685a      	ldr	r2, [r3, #4]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ca6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	689a      	ldr	r2, [r3, #8]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003cb6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f042 0201 	orr.w	r2, r2, #1
 8003cc6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f000 fec7 	bl	8004a5c <UART_CheckIdleState>
 8003cce:	4603      	mov	r3, r0
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3708      	adds	r7, #8
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b08b      	sub	sp, #44	; 0x2c
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cea:	2b20      	cmp	r3, #32
 8003cec:	d147      	bne.n	8003d7e <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d002      	beq.n	8003cfa <HAL_UART_Transmit_IT+0x22>
 8003cf4:	88fb      	ldrh	r3, [r7, #6]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d101      	bne.n	8003cfe <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e040      	b.n	8003d80 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	68ba      	ldr	r2, [r7, #8]
 8003d02:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	88fa      	ldrh	r2, [r7, #6]
 8003d08:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	88fa      	ldrh	r2, [r7, #6]
 8003d10:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2221      	movs	r2, #33	; 0x21
 8003d26:	67da      	str	r2, [r3, #124]	; 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d30:	d107      	bne.n	8003d42 <HAL_UART_Transmit_IT+0x6a>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d103      	bne.n	8003d42 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	4a13      	ldr	r2, [pc, #76]	; (8003d8c <HAL_UART_Transmit_IT+0xb4>)
 8003d3e:	66da      	str	r2, [r3, #108]	; 0x6c
 8003d40:	e002      	b.n	8003d48 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	4a12      	ldr	r2, [pc, #72]	; (8003d90 <HAL_UART_Transmit_IT+0xb8>)
 8003d46:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	e853 3f00 	ldrex	r3, [r3]
 8003d54:	613b      	str	r3, [r7, #16]
   return(result);
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d5c:	627b      	str	r3, [r7, #36]	; 0x24
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	461a      	mov	r2, r3
 8003d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d66:	623b      	str	r3, [r7, #32]
 8003d68:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d6a:	69f9      	ldr	r1, [r7, #28]
 8003d6c:	6a3a      	ldr	r2, [r7, #32]
 8003d6e:	e841 2300 	strex	r3, r2, [r1]
 8003d72:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1e6      	bne.n	8003d48 <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	e000      	b.n	8003d80 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8003d7e:	2302      	movs	r3, #2
  }
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	372c      	adds	r7, #44	; 0x2c
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr
 8003d8c:	08004e27 	.word	0x08004e27
 8003d90:	08004d6f 	.word	0x08004d6f

08003d94 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b0ba      	sub	sp, #232	; 0xe8
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	69db      	ldr	r3, [r3, #28]
 8003da2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003dba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003dbe:	f640 030f 	movw	r3, #2063	; 0x80f
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003dc8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d115      	bne.n	8003dfc <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003dd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dd4:	f003 0320 	and.w	r3, r3, #32
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d00f      	beq.n	8003dfc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003ddc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003de0:	f003 0320 	and.w	r3, r3, #32
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d009      	beq.n	8003dfc <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	f000 82ae 	beq.w	800434e <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	4798      	blx	r3
      }
      return;
 8003dfa:	e2a8      	b.n	800434e <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003dfc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	f000 8117 	beq.w	8004034 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003e06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e0a:	f003 0301 	and.w	r3, r3, #1
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d106      	bne.n	8003e20 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003e12:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003e16:	4b85      	ldr	r3, [pc, #532]	; (800402c <HAL_UART_IRQHandler+0x298>)
 8003e18:	4013      	ands	r3, r2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	f000 810a 	beq.w	8004034 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003e20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e24:	f003 0301 	and.w	r3, r3, #1
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d011      	beq.n	8003e50 <HAL_UART_IRQHandler+0xbc>
 8003e2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d00b      	beq.n	8003e50 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e46:	f043 0201 	orr.w	r2, r3, #1
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003e50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e54:	f003 0302 	and.w	r3, r3, #2
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d011      	beq.n	8003e80 <HAL_UART_IRQHandler+0xec>
 8003e5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e60:	f003 0301 	and.w	r3, r3, #1
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d00b      	beq.n	8003e80 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2202      	movs	r2, #2
 8003e6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e76:	f043 0204 	orr.w	r2, r3, #4
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003e80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e84:	f003 0304 	and.w	r3, r3, #4
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d011      	beq.n	8003eb0 <HAL_UART_IRQHandler+0x11c>
 8003e8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e90:	f003 0301 	and.w	r3, r3, #1
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d00b      	beq.n	8003eb0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2204      	movs	r2, #4
 8003e9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ea6:	f043 0202 	orr.w	r2, r3, #2
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003eb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003eb4:	f003 0308 	and.w	r3, r3, #8
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d017      	beq.n	8003eec <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003ebc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ec0:	f003 0320 	and.w	r3, r3, #32
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d105      	bne.n	8003ed4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003ec8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ecc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00b      	beq.n	8003eec <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2208      	movs	r2, #8
 8003eda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ee2:	f043 0208 	orr.w	r2, r3, #8
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003eec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ef0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d012      	beq.n	8003f1e <HAL_UART_IRQHandler+0x18a>
 8003ef8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003efc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d00c      	beq.n	8003f1e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f14:	f043 0220 	orr.w	r2, r3, #32
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	f000 8214 	beq.w	8004352 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003f2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f2e:	f003 0320 	and.w	r3, r3, #32
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d00d      	beq.n	8003f52 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003f36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f3a:	f003 0320 	and.w	r3, r3, #32
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d007      	beq.n	8003f52 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d003      	beq.n	8003f52 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f58:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f66:	2b40      	cmp	r3, #64	; 0x40
 8003f68:	d005      	beq.n	8003f76 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003f6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003f6e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d04f      	beq.n	8004016 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 fe7f 	bl	8004c7a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f86:	2b40      	cmp	r3, #64	; 0x40
 8003f88:	d141      	bne.n	800400e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	3308      	adds	r3, #8
 8003f90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f98:	e853 3f00 	ldrex	r3, [r3]
 8003f9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003fa0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003fa4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fa8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	3308      	adds	r3, #8
 8003fb2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003fb6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003fba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fbe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003fc2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003fc6:	e841 2300 	strex	r3, r2, [r1]
 8003fca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003fce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d1d9      	bne.n	8003f8a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d013      	beq.n	8004006 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fe2:	4a13      	ldr	r2, [pc, #76]	; (8004030 <HAL_UART_IRQHandler+0x29c>)
 8003fe4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7fd f8e5 	bl	80011ba <HAL_DMA_Abort_IT>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d017      	beq.n	8004026 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004000:	4610      	mov	r0, r2
 8004002:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004004:	e00f      	b.n	8004026 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 f9b8 	bl	800437c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800400c:	e00b      	b.n	8004026 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f000 f9b4 	bl	800437c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004014:	e007      	b.n	8004026 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 f9b0 	bl	800437c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004024:	e195      	b.n	8004352 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004026:	bf00      	nop
    return;
 8004028:	e193      	b.n	8004352 <HAL_UART_IRQHandler+0x5be>
 800402a:	bf00      	nop
 800402c:	04000120 	.word	0x04000120
 8004030:	08004d43 	.word	0x08004d43

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004038:	2b01      	cmp	r3, #1
 800403a:	f040 814e 	bne.w	80042da <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800403e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004042:	f003 0310 	and.w	r3, r3, #16
 8004046:	2b00      	cmp	r3, #0
 8004048:	f000 8147 	beq.w	80042da <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800404c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004050:	f003 0310 	and.w	r3, r3, #16
 8004054:	2b00      	cmp	r3, #0
 8004056:	f000 8140 	beq.w	80042da <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	2210      	movs	r2, #16
 8004060:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800406c:	2b40      	cmp	r3, #64	; 0x40
 800406e:	f040 80b8 	bne.w	80041e2 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800407e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004082:	2b00      	cmp	r3, #0
 8004084:	f000 8167 	beq.w	8004356 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800408e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004092:	429a      	cmp	r2, r3
 8004094:	f080 815f 	bcs.w	8004356 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800409e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0320 	and.w	r3, r3, #32
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	f040 8086 	bne.w	80041c0 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80040c0:	e853 3f00 	ldrex	r3, [r3]
 80040c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80040c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80040cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	461a      	mov	r2, r3
 80040da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80040de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80040e2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80040ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80040ee:	e841 2300 	strex	r3, r2, [r1]
 80040f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80040f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d1da      	bne.n	80040b4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	3308      	adds	r3, #8
 8004104:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004106:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004108:	e853 3f00 	ldrex	r3, [r3]
 800410c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800410e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004110:	f023 0301 	bic.w	r3, r3, #1
 8004114:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	3308      	adds	r3, #8
 800411e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004122:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004126:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004128:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800412a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800412e:	e841 2300 	strex	r3, r2, [r1]
 8004132:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004134:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004136:	2b00      	cmp	r3, #0
 8004138:	d1e1      	bne.n	80040fe <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	3308      	adds	r3, #8
 8004140:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004142:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004144:	e853 3f00 	ldrex	r3, [r3]
 8004148:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800414a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800414c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004150:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	3308      	adds	r3, #8
 800415a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800415e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004160:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004162:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004164:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004166:	e841 2300 	strex	r3, r2, [r1]
 800416a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800416c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800416e:	2b00      	cmp	r3, #0
 8004170:	d1e3      	bne.n	800413a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2220      	movs	r2, #32
 8004176:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004186:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004188:	e853 3f00 	ldrex	r3, [r3]
 800418c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800418e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004190:	f023 0310 	bic.w	r3, r3, #16
 8004194:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	461a      	mov	r2, r3
 800419e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80041a2:	65bb      	str	r3, [r7, #88]	; 0x58
 80041a4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80041a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80041aa:	e841 2300 	strex	r3, r2, [r1]
 80041ae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80041b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d1e4      	bne.n	8004180 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041ba:	4618      	mov	r0, r3
 80041bc:	f7fc ffbf 	bl	800113e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2202      	movs	r2, #2
 80041c4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	4619      	mov	r1, r3
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 f8d8 	bl	8004390 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80041e0:	e0b9      	b.n	8004356 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	2b00      	cmp	r3, #0
 8004200:	f000 80ab 	beq.w	800435a <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8004204:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004208:	2b00      	cmp	r3, #0
 800420a:	f000 80a6 	beq.w	800435a <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004216:	e853 3f00 	ldrex	r3, [r3]
 800421a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800421c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800421e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004222:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	461a      	mov	r2, r3
 800422c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004230:	647b      	str	r3, [r7, #68]	; 0x44
 8004232:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004234:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004236:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004238:	e841 2300 	strex	r3, r2, [r1]
 800423c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800423e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004240:	2b00      	cmp	r3, #0
 8004242:	d1e4      	bne.n	800420e <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	3308      	adds	r3, #8
 800424a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800424c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424e:	e853 3f00 	ldrex	r3, [r3]
 8004252:	623b      	str	r3, [r7, #32]
   return(result);
 8004254:	6a3b      	ldr	r3, [r7, #32]
 8004256:	f023 0301 	bic.w	r3, r3, #1
 800425a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	3308      	adds	r3, #8
 8004264:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004268:	633a      	str	r2, [r7, #48]	; 0x30
 800426a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800426c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800426e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004270:	e841 2300 	strex	r3, r2, [r1]
 8004274:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004278:	2b00      	cmp	r3, #0
 800427a:	d1e3      	bne.n	8004244 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2220      	movs	r2, #32
 8004280:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	e853 3f00 	ldrex	r3, [r3]
 800429c:	60fb      	str	r3, [r7, #12]
   return(result);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f023 0310 	bic.w	r3, r3, #16
 80042a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	461a      	mov	r2, r3
 80042ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80042b2:	61fb      	str	r3, [r7, #28]
 80042b4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b6:	69b9      	ldr	r1, [r7, #24]
 80042b8:	69fa      	ldr	r2, [r7, #28]
 80042ba:	e841 2300 	strex	r3, r2, [r1]
 80042be:	617b      	str	r3, [r7, #20]
   return(result);
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1e4      	bne.n	8004290 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2202      	movs	r2, #2
 80042ca:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80042cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80042d0:	4619      	mov	r1, r3
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f000 f85c 	bl	8004390 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80042d8:	e03f      	b.n	800435a <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80042da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d00e      	beq.n	8004304 <HAL_UART_IRQHandler+0x570>
 80042e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d008      	beq.n	8004304 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80042fa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f000 fe1c 	bl	8004f3a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004302:	e02d      	b.n	8004360 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004304:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00e      	beq.n	800432e <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004310:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004318:	2b00      	cmp	r3, #0
 800431a:	d008      	beq.n	800432e <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004320:	2b00      	cmp	r3, #0
 8004322:	d01c      	beq.n	800435e <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	4798      	blx	r3
    }
    return;
 800432c:	e017      	b.n	800435e <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800432e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004336:	2b00      	cmp	r3, #0
 8004338:	d012      	beq.n	8004360 <HAL_UART_IRQHandler+0x5cc>
 800433a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800433e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004342:	2b00      	cmp	r3, #0
 8004344:	d00c      	beq.n	8004360 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 fdcd 	bl	8004ee6 <UART_EndTransmit_IT>
    return;
 800434c:	e008      	b.n	8004360 <HAL_UART_IRQHandler+0x5cc>
      return;
 800434e:	bf00      	nop
 8004350:	e006      	b.n	8004360 <HAL_UART_IRQHandler+0x5cc>
    return;
 8004352:	bf00      	nop
 8004354:	e004      	b.n	8004360 <HAL_UART_IRQHandler+0x5cc>
      return;
 8004356:	bf00      	nop
 8004358:	e002      	b.n	8004360 <HAL_UART_IRQHandler+0x5cc>
      return;
 800435a:	bf00      	nop
 800435c:	e000      	b.n	8004360 <HAL_UART_IRQHandler+0x5cc>
    return;
 800435e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004360:	37e8      	adds	r7, #232	; 0xe8
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop

08004368 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004370:	bf00      	nop
 8004372:	370c      	adds	r7, #12
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800437c:	b480      	push	{r7}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004384:	bf00      	nop
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr

08004390 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	460b      	mov	r3, r1
 800439a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800439c:	bf00      	nop
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043ac:	b08a      	sub	sp, #40	; 0x28
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80043b2:	2300      	movs	r3, #0
 80043b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	689a      	ldr	r2, [r3, #8]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	691b      	ldr	r3, [r3, #16]
 80043c0:	431a      	orrs	r2, r3
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	431a      	orrs	r2, r3
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	69db      	ldr	r3, [r3, #28]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	4ba4      	ldr	r3, [pc, #656]	; (8004668 <UART_SetConfig+0x2c0>)
 80043d8:	4013      	ands	r3, r2
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	6812      	ldr	r2, [r2, #0]
 80043de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80043e0:	430b      	orrs	r3, r1
 80043e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	68da      	ldr	r2, [r3, #12]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	430a      	orrs	r2, r1
 80043f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	699b      	ldr	r3, [r3, #24]
 80043fe:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a99      	ldr	r2, [pc, #612]	; (800466c <UART_SetConfig+0x2c4>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d004      	beq.n	8004414 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6a1b      	ldr	r3, [r3, #32]
 800440e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004410:	4313      	orrs	r3, r2
 8004412:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004424:	430a      	orrs	r2, r1
 8004426:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a90      	ldr	r2, [pc, #576]	; (8004670 <UART_SetConfig+0x2c8>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d126      	bne.n	8004480 <UART_SetConfig+0xd8>
 8004432:	4b90      	ldr	r3, [pc, #576]	; (8004674 <UART_SetConfig+0x2cc>)
 8004434:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004438:	f003 0303 	and.w	r3, r3, #3
 800443c:	2b03      	cmp	r3, #3
 800443e:	d81b      	bhi.n	8004478 <UART_SetConfig+0xd0>
 8004440:	a201      	add	r2, pc, #4	; (adr r2, 8004448 <UART_SetConfig+0xa0>)
 8004442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004446:	bf00      	nop
 8004448:	08004459 	.word	0x08004459
 800444c:	08004469 	.word	0x08004469
 8004450:	08004461 	.word	0x08004461
 8004454:	08004471 	.word	0x08004471
 8004458:	2301      	movs	r3, #1
 800445a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800445e:	e116      	b.n	800468e <UART_SetConfig+0x2e6>
 8004460:	2302      	movs	r3, #2
 8004462:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004466:	e112      	b.n	800468e <UART_SetConfig+0x2e6>
 8004468:	2304      	movs	r3, #4
 800446a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800446e:	e10e      	b.n	800468e <UART_SetConfig+0x2e6>
 8004470:	2308      	movs	r3, #8
 8004472:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004476:	e10a      	b.n	800468e <UART_SetConfig+0x2e6>
 8004478:	2310      	movs	r3, #16
 800447a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800447e:	e106      	b.n	800468e <UART_SetConfig+0x2e6>
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a7c      	ldr	r2, [pc, #496]	; (8004678 <UART_SetConfig+0x2d0>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d138      	bne.n	80044fc <UART_SetConfig+0x154>
 800448a:	4b7a      	ldr	r3, [pc, #488]	; (8004674 <UART_SetConfig+0x2cc>)
 800448c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004490:	f003 030c 	and.w	r3, r3, #12
 8004494:	2b0c      	cmp	r3, #12
 8004496:	d82d      	bhi.n	80044f4 <UART_SetConfig+0x14c>
 8004498:	a201      	add	r2, pc, #4	; (adr r2, 80044a0 <UART_SetConfig+0xf8>)
 800449a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800449e:	bf00      	nop
 80044a0:	080044d5 	.word	0x080044d5
 80044a4:	080044f5 	.word	0x080044f5
 80044a8:	080044f5 	.word	0x080044f5
 80044ac:	080044f5 	.word	0x080044f5
 80044b0:	080044e5 	.word	0x080044e5
 80044b4:	080044f5 	.word	0x080044f5
 80044b8:	080044f5 	.word	0x080044f5
 80044bc:	080044f5 	.word	0x080044f5
 80044c0:	080044dd 	.word	0x080044dd
 80044c4:	080044f5 	.word	0x080044f5
 80044c8:	080044f5 	.word	0x080044f5
 80044cc:	080044f5 	.word	0x080044f5
 80044d0:	080044ed 	.word	0x080044ed
 80044d4:	2300      	movs	r3, #0
 80044d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044da:	e0d8      	b.n	800468e <UART_SetConfig+0x2e6>
 80044dc:	2302      	movs	r3, #2
 80044de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044e2:	e0d4      	b.n	800468e <UART_SetConfig+0x2e6>
 80044e4:	2304      	movs	r3, #4
 80044e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044ea:	e0d0      	b.n	800468e <UART_SetConfig+0x2e6>
 80044ec:	2308      	movs	r3, #8
 80044ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044f2:	e0cc      	b.n	800468e <UART_SetConfig+0x2e6>
 80044f4:	2310      	movs	r3, #16
 80044f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044fa:	e0c8      	b.n	800468e <UART_SetConfig+0x2e6>
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a5e      	ldr	r2, [pc, #376]	; (800467c <UART_SetConfig+0x2d4>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d125      	bne.n	8004552 <UART_SetConfig+0x1aa>
 8004506:	4b5b      	ldr	r3, [pc, #364]	; (8004674 <UART_SetConfig+0x2cc>)
 8004508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800450c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004510:	2b30      	cmp	r3, #48	; 0x30
 8004512:	d016      	beq.n	8004542 <UART_SetConfig+0x19a>
 8004514:	2b30      	cmp	r3, #48	; 0x30
 8004516:	d818      	bhi.n	800454a <UART_SetConfig+0x1a2>
 8004518:	2b20      	cmp	r3, #32
 800451a:	d00a      	beq.n	8004532 <UART_SetConfig+0x18a>
 800451c:	2b20      	cmp	r3, #32
 800451e:	d814      	bhi.n	800454a <UART_SetConfig+0x1a2>
 8004520:	2b00      	cmp	r3, #0
 8004522:	d002      	beq.n	800452a <UART_SetConfig+0x182>
 8004524:	2b10      	cmp	r3, #16
 8004526:	d008      	beq.n	800453a <UART_SetConfig+0x192>
 8004528:	e00f      	b.n	800454a <UART_SetConfig+0x1a2>
 800452a:	2300      	movs	r3, #0
 800452c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004530:	e0ad      	b.n	800468e <UART_SetConfig+0x2e6>
 8004532:	2302      	movs	r3, #2
 8004534:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004538:	e0a9      	b.n	800468e <UART_SetConfig+0x2e6>
 800453a:	2304      	movs	r3, #4
 800453c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004540:	e0a5      	b.n	800468e <UART_SetConfig+0x2e6>
 8004542:	2308      	movs	r3, #8
 8004544:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004548:	e0a1      	b.n	800468e <UART_SetConfig+0x2e6>
 800454a:	2310      	movs	r3, #16
 800454c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004550:	e09d      	b.n	800468e <UART_SetConfig+0x2e6>
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a4a      	ldr	r2, [pc, #296]	; (8004680 <UART_SetConfig+0x2d8>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d125      	bne.n	80045a8 <UART_SetConfig+0x200>
 800455c:	4b45      	ldr	r3, [pc, #276]	; (8004674 <UART_SetConfig+0x2cc>)
 800455e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004562:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004566:	2bc0      	cmp	r3, #192	; 0xc0
 8004568:	d016      	beq.n	8004598 <UART_SetConfig+0x1f0>
 800456a:	2bc0      	cmp	r3, #192	; 0xc0
 800456c:	d818      	bhi.n	80045a0 <UART_SetConfig+0x1f8>
 800456e:	2b80      	cmp	r3, #128	; 0x80
 8004570:	d00a      	beq.n	8004588 <UART_SetConfig+0x1e0>
 8004572:	2b80      	cmp	r3, #128	; 0x80
 8004574:	d814      	bhi.n	80045a0 <UART_SetConfig+0x1f8>
 8004576:	2b00      	cmp	r3, #0
 8004578:	d002      	beq.n	8004580 <UART_SetConfig+0x1d8>
 800457a:	2b40      	cmp	r3, #64	; 0x40
 800457c:	d008      	beq.n	8004590 <UART_SetConfig+0x1e8>
 800457e:	e00f      	b.n	80045a0 <UART_SetConfig+0x1f8>
 8004580:	2300      	movs	r3, #0
 8004582:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004586:	e082      	b.n	800468e <UART_SetConfig+0x2e6>
 8004588:	2302      	movs	r3, #2
 800458a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800458e:	e07e      	b.n	800468e <UART_SetConfig+0x2e6>
 8004590:	2304      	movs	r3, #4
 8004592:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004596:	e07a      	b.n	800468e <UART_SetConfig+0x2e6>
 8004598:	2308      	movs	r3, #8
 800459a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800459e:	e076      	b.n	800468e <UART_SetConfig+0x2e6>
 80045a0:	2310      	movs	r3, #16
 80045a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045a6:	e072      	b.n	800468e <UART_SetConfig+0x2e6>
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a35      	ldr	r2, [pc, #212]	; (8004684 <UART_SetConfig+0x2dc>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d12a      	bne.n	8004608 <UART_SetConfig+0x260>
 80045b2:	4b30      	ldr	r3, [pc, #192]	; (8004674 <UART_SetConfig+0x2cc>)
 80045b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045c0:	d01a      	beq.n	80045f8 <UART_SetConfig+0x250>
 80045c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045c6:	d81b      	bhi.n	8004600 <UART_SetConfig+0x258>
 80045c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045cc:	d00c      	beq.n	80045e8 <UART_SetConfig+0x240>
 80045ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045d2:	d815      	bhi.n	8004600 <UART_SetConfig+0x258>
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d003      	beq.n	80045e0 <UART_SetConfig+0x238>
 80045d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045dc:	d008      	beq.n	80045f0 <UART_SetConfig+0x248>
 80045de:	e00f      	b.n	8004600 <UART_SetConfig+0x258>
 80045e0:	2300      	movs	r3, #0
 80045e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045e6:	e052      	b.n	800468e <UART_SetConfig+0x2e6>
 80045e8:	2302      	movs	r3, #2
 80045ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045ee:	e04e      	b.n	800468e <UART_SetConfig+0x2e6>
 80045f0:	2304      	movs	r3, #4
 80045f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045f6:	e04a      	b.n	800468e <UART_SetConfig+0x2e6>
 80045f8:	2308      	movs	r3, #8
 80045fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045fe:	e046      	b.n	800468e <UART_SetConfig+0x2e6>
 8004600:	2310      	movs	r3, #16
 8004602:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004606:	e042      	b.n	800468e <UART_SetConfig+0x2e6>
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a17      	ldr	r2, [pc, #92]	; (800466c <UART_SetConfig+0x2c4>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d13a      	bne.n	8004688 <UART_SetConfig+0x2e0>
 8004612:	4b18      	ldr	r3, [pc, #96]	; (8004674 <UART_SetConfig+0x2cc>)
 8004614:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004618:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800461c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004620:	d01a      	beq.n	8004658 <UART_SetConfig+0x2b0>
 8004622:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004626:	d81b      	bhi.n	8004660 <UART_SetConfig+0x2b8>
 8004628:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800462c:	d00c      	beq.n	8004648 <UART_SetConfig+0x2a0>
 800462e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004632:	d815      	bhi.n	8004660 <UART_SetConfig+0x2b8>
 8004634:	2b00      	cmp	r3, #0
 8004636:	d003      	beq.n	8004640 <UART_SetConfig+0x298>
 8004638:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800463c:	d008      	beq.n	8004650 <UART_SetConfig+0x2a8>
 800463e:	e00f      	b.n	8004660 <UART_SetConfig+0x2b8>
 8004640:	2300      	movs	r3, #0
 8004642:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004646:	e022      	b.n	800468e <UART_SetConfig+0x2e6>
 8004648:	2302      	movs	r3, #2
 800464a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800464e:	e01e      	b.n	800468e <UART_SetConfig+0x2e6>
 8004650:	2304      	movs	r3, #4
 8004652:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004656:	e01a      	b.n	800468e <UART_SetConfig+0x2e6>
 8004658:	2308      	movs	r3, #8
 800465a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800465e:	e016      	b.n	800468e <UART_SetConfig+0x2e6>
 8004660:	2310      	movs	r3, #16
 8004662:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004666:	e012      	b.n	800468e <UART_SetConfig+0x2e6>
 8004668:	efff69f3 	.word	0xefff69f3
 800466c:	40008000 	.word	0x40008000
 8004670:	40013800 	.word	0x40013800
 8004674:	40021000 	.word	0x40021000
 8004678:	40004400 	.word	0x40004400
 800467c:	40004800 	.word	0x40004800
 8004680:	40004c00 	.word	0x40004c00
 8004684:	40005000 	.word	0x40005000
 8004688:	2310      	movs	r3, #16
 800468a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a9f      	ldr	r2, [pc, #636]	; (8004910 <UART_SetConfig+0x568>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d17a      	bne.n	800478e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004698:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800469c:	2b08      	cmp	r3, #8
 800469e:	d824      	bhi.n	80046ea <UART_SetConfig+0x342>
 80046a0:	a201      	add	r2, pc, #4	; (adr r2, 80046a8 <UART_SetConfig+0x300>)
 80046a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a6:	bf00      	nop
 80046a8:	080046cd 	.word	0x080046cd
 80046ac:	080046eb 	.word	0x080046eb
 80046b0:	080046d5 	.word	0x080046d5
 80046b4:	080046eb 	.word	0x080046eb
 80046b8:	080046db 	.word	0x080046db
 80046bc:	080046eb 	.word	0x080046eb
 80046c0:	080046eb 	.word	0x080046eb
 80046c4:	080046eb 	.word	0x080046eb
 80046c8:	080046e3 	.word	0x080046e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046cc:	f7fd fd82 	bl	80021d4 <HAL_RCC_GetPCLK1Freq>
 80046d0:	61f8      	str	r0, [r7, #28]
        break;
 80046d2:	e010      	b.n	80046f6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046d4:	4b8f      	ldr	r3, [pc, #572]	; (8004914 <UART_SetConfig+0x56c>)
 80046d6:	61fb      	str	r3, [r7, #28]
        break;
 80046d8:	e00d      	b.n	80046f6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046da:	f7fd fce3 	bl	80020a4 <HAL_RCC_GetSysClockFreq>
 80046de:	61f8      	str	r0, [r7, #28]
        break;
 80046e0:	e009      	b.n	80046f6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046e6:	61fb      	str	r3, [r7, #28]
        break;
 80046e8:	e005      	b.n	80046f6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80046ea:	2300      	movs	r3, #0
 80046ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80046f4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	f000 80fb 	beq.w	80048f4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	685a      	ldr	r2, [r3, #4]
 8004702:	4613      	mov	r3, r2
 8004704:	005b      	lsls	r3, r3, #1
 8004706:	4413      	add	r3, r2
 8004708:	69fa      	ldr	r2, [r7, #28]
 800470a:	429a      	cmp	r2, r3
 800470c:	d305      	bcc.n	800471a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004714:	69fa      	ldr	r2, [r7, #28]
 8004716:	429a      	cmp	r2, r3
 8004718:	d903      	bls.n	8004722 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004720:	e0e8      	b.n	80048f4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	2200      	movs	r2, #0
 8004726:	461c      	mov	r4, r3
 8004728:	4615      	mov	r5, r2
 800472a:	f04f 0200 	mov.w	r2, #0
 800472e:	f04f 0300 	mov.w	r3, #0
 8004732:	022b      	lsls	r3, r5, #8
 8004734:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004738:	0222      	lsls	r2, r4, #8
 800473a:	68f9      	ldr	r1, [r7, #12]
 800473c:	6849      	ldr	r1, [r1, #4]
 800473e:	0849      	lsrs	r1, r1, #1
 8004740:	2000      	movs	r0, #0
 8004742:	4688      	mov	r8, r1
 8004744:	4681      	mov	r9, r0
 8004746:	eb12 0a08 	adds.w	sl, r2, r8
 800474a:	eb43 0b09 	adc.w	fp, r3, r9
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	603b      	str	r3, [r7, #0]
 8004756:	607a      	str	r2, [r7, #4]
 8004758:	e9d7 2300 	ldrd	r2, r3, [r7]
 800475c:	4650      	mov	r0, sl
 800475e:	4659      	mov	r1, fp
 8004760:	f7fb fd8e 	bl	8000280 <__aeabi_uldivmod>
 8004764:	4602      	mov	r2, r0
 8004766:	460b      	mov	r3, r1
 8004768:	4613      	mov	r3, r2
 800476a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004772:	d308      	bcc.n	8004786 <UART_SetConfig+0x3de>
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800477a:	d204      	bcs.n	8004786 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	69ba      	ldr	r2, [r7, #24]
 8004782:	60da      	str	r2, [r3, #12]
 8004784:	e0b6      	b.n	80048f4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800478c:	e0b2      	b.n	80048f4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	69db      	ldr	r3, [r3, #28]
 8004792:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004796:	d15e      	bne.n	8004856 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004798:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800479c:	2b08      	cmp	r3, #8
 800479e:	d828      	bhi.n	80047f2 <UART_SetConfig+0x44a>
 80047a0:	a201      	add	r2, pc, #4	; (adr r2, 80047a8 <UART_SetConfig+0x400>)
 80047a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047a6:	bf00      	nop
 80047a8:	080047cd 	.word	0x080047cd
 80047ac:	080047d5 	.word	0x080047d5
 80047b0:	080047dd 	.word	0x080047dd
 80047b4:	080047f3 	.word	0x080047f3
 80047b8:	080047e3 	.word	0x080047e3
 80047bc:	080047f3 	.word	0x080047f3
 80047c0:	080047f3 	.word	0x080047f3
 80047c4:	080047f3 	.word	0x080047f3
 80047c8:	080047eb 	.word	0x080047eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047cc:	f7fd fd02 	bl	80021d4 <HAL_RCC_GetPCLK1Freq>
 80047d0:	61f8      	str	r0, [r7, #28]
        break;
 80047d2:	e014      	b.n	80047fe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047d4:	f7fd fd14 	bl	8002200 <HAL_RCC_GetPCLK2Freq>
 80047d8:	61f8      	str	r0, [r7, #28]
        break;
 80047da:	e010      	b.n	80047fe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047dc:	4b4d      	ldr	r3, [pc, #308]	; (8004914 <UART_SetConfig+0x56c>)
 80047de:	61fb      	str	r3, [r7, #28]
        break;
 80047e0:	e00d      	b.n	80047fe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047e2:	f7fd fc5f 	bl	80020a4 <HAL_RCC_GetSysClockFreq>
 80047e6:	61f8      	str	r0, [r7, #28]
        break;
 80047e8:	e009      	b.n	80047fe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047ee:	61fb      	str	r3, [r7, #28]
        break;
 80047f0:	e005      	b.n	80047fe <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80047f2:	2300      	movs	r3, #0
 80047f4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80047fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d077      	beq.n	80048f4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	005a      	lsls	r2, r3, #1
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	085b      	lsrs	r3, r3, #1
 800480e:	441a      	add	r2, r3
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	fbb2 f3f3 	udiv	r3, r2, r3
 8004818:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	2b0f      	cmp	r3, #15
 800481e:	d916      	bls.n	800484e <UART_SetConfig+0x4a6>
 8004820:	69bb      	ldr	r3, [r7, #24]
 8004822:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004826:	d212      	bcs.n	800484e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	b29b      	uxth	r3, r3
 800482c:	f023 030f 	bic.w	r3, r3, #15
 8004830:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	085b      	lsrs	r3, r3, #1
 8004836:	b29b      	uxth	r3, r3
 8004838:	f003 0307 	and.w	r3, r3, #7
 800483c:	b29a      	uxth	r2, r3
 800483e:	8afb      	ldrh	r3, [r7, #22]
 8004840:	4313      	orrs	r3, r2
 8004842:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	8afa      	ldrh	r2, [r7, #22]
 800484a:	60da      	str	r2, [r3, #12]
 800484c:	e052      	b.n	80048f4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004854:	e04e      	b.n	80048f4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004856:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800485a:	2b08      	cmp	r3, #8
 800485c:	d827      	bhi.n	80048ae <UART_SetConfig+0x506>
 800485e:	a201      	add	r2, pc, #4	; (adr r2, 8004864 <UART_SetConfig+0x4bc>)
 8004860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004864:	08004889 	.word	0x08004889
 8004868:	08004891 	.word	0x08004891
 800486c:	08004899 	.word	0x08004899
 8004870:	080048af 	.word	0x080048af
 8004874:	0800489f 	.word	0x0800489f
 8004878:	080048af 	.word	0x080048af
 800487c:	080048af 	.word	0x080048af
 8004880:	080048af 	.word	0x080048af
 8004884:	080048a7 	.word	0x080048a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004888:	f7fd fca4 	bl	80021d4 <HAL_RCC_GetPCLK1Freq>
 800488c:	61f8      	str	r0, [r7, #28]
        break;
 800488e:	e014      	b.n	80048ba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004890:	f7fd fcb6 	bl	8002200 <HAL_RCC_GetPCLK2Freq>
 8004894:	61f8      	str	r0, [r7, #28]
        break;
 8004896:	e010      	b.n	80048ba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004898:	4b1e      	ldr	r3, [pc, #120]	; (8004914 <UART_SetConfig+0x56c>)
 800489a:	61fb      	str	r3, [r7, #28]
        break;
 800489c:	e00d      	b.n	80048ba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800489e:	f7fd fc01 	bl	80020a4 <HAL_RCC_GetSysClockFreq>
 80048a2:	61f8      	str	r0, [r7, #28]
        break;
 80048a4:	e009      	b.n	80048ba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048aa:	61fb      	str	r3, [r7, #28]
        break;
 80048ac:	e005      	b.n	80048ba <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80048ae:	2300      	movs	r3, #0
 80048b0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80048b8:	bf00      	nop
    }

    if (pclk != 0U)
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d019      	beq.n	80048f4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	085a      	lsrs	r2, r3, #1
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	441a      	add	r2, r3
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	2b0f      	cmp	r3, #15
 80048d8:	d909      	bls.n	80048ee <UART_SetConfig+0x546>
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048e0:	d205      	bcs.n	80048ee <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	b29a      	uxth	r2, r3
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	60da      	str	r2, [r3, #12]
 80048ec:	e002      	b.n	80048f4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2200      	movs	r2, #0
 80048f8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2200      	movs	r2, #0
 80048fe:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004900:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004904:	4618      	mov	r0, r3
 8004906:	3728      	adds	r7, #40	; 0x28
 8004908:	46bd      	mov	sp, r7
 800490a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800490e:	bf00      	nop
 8004910:	40008000 	.word	0x40008000
 8004914:	00f42400 	.word	0x00f42400

08004918 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004924:	f003 0308 	and.w	r3, r3, #8
 8004928:	2b00      	cmp	r3, #0
 800492a:	d00a      	beq.n	8004942 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	430a      	orrs	r2, r1
 8004940:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004946:	f003 0301 	and.w	r3, r3, #1
 800494a:	2b00      	cmp	r3, #0
 800494c:	d00a      	beq.n	8004964 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	430a      	orrs	r2, r1
 8004962:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004968:	f003 0302 	and.w	r3, r3, #2
 800496c:	2b00      	cmp	r3, #0
 800496e:	d00a      	beq.n	8004986 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	430a      	orrs	r2, r1
 8004984:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498a:	f003 0304 	and.w	r3, r3, #4
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00a      	beq.n	80049a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	430a      	orrs	r2, r1
 80049a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ac:	f003 0310 	and.w	r3, r3, #16
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d00a      	beq.n	80049ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	430a      	orrs	r2, r1
 80049c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ce:	f003 0320 	and.w	r3, r3, #32
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d00a      	beq.n	80049ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	430a      	orrs	r2, r1
 80049ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d01a      	beq.n	8004a2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a16:	d10a      	bne.n	8004a2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	430a      	orrs	r2, r1
 8004a2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00a      	beq.n	8004a50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	430a      	orrs	r2, r1
 8004a4e:	605a      	str	r2, [r3, #4]
  }
}
 8004a50:	bf00      	nop
 8004a52:	370c      	adds	r7, #12
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b098      	sub	sp, #96	; 0x60
 8004a60:	af02      	add	r7, sp, #8
 8004a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a6c:	f7fc fa4a 	bl	8000f04 <HAL_GetTick>
 8004a70:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 0308 	and.w	r3, r3, #8
 8004a7c:	2b08      	cmp	r3, #8
 8004a7e:	d12e      	bne.n	8004ade <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a84:	9300      	str	r3, [sp, #0]
 8004a86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 f88c 	bl	8004bac <UART_WaitOnFlagUntilTimeout>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d021      	beq.n	8004ade <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aa2:	e853 3f00 	ldrex	r3, [r3]
 8004aa6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aaa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004aae:	653b      	str	r3, [r7, #80]	; 0x50
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ab8:	647b      	str	r3, [r7, #68]	; 0x44
 8004aba:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004abc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004abe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ac0:	e841 2300 	strex	r3, r2, [r1]
 8004ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004ac6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d1e6      	bne.n	8004a9a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2220      	movs	r2, #32
 8004ad0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e062      	b.n	8004ba4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0304 	and.w	r3, r3, #4
 8004ae8:	2b04      	cmp	r3, #4
 8004aea:	d149      	bne.n	8004b80 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004aec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004af0:	9300      	str	r3, [sp, #0]
 8004af2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004af4:	2200      	movs	r2, #0
 8004af6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f000 f856 	bl	8004bac <UART_WaitOnFlagUntilTimeout>
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d03c      	beq.n	8004b80 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0e:	e853 3f00 	ldrex	r3, [r3]
 8004b12:	623b      	str	r3, [r7, #32]
   return(result);
 8004b14:	6a3b      	ldr	r3, [r7, #32]
 8004b16:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	461a      	mov	r2, r3
 8004b22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b24:	633b      	str	r3, [r7, #48]	; 0x30
 8004b26:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b28:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b2c:	e841 2300 	strex	r3, r2, [r1]
 8004b30:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d1e6      	bne.n	8004b06 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	3308      	adds	r3, #8
 8004b3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	e853 3f00 	ldrex	r3, [r3]
 8004b46:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f023 0301 	bic.w	r3, r3, #1
 8004b4e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	3308      	adds	r3, #8
 8004b56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b58:	61fa      	str	r2, [r7, #28]
 8004b5a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b5c:	69b9      	ldr	r1, [r7, #24]
 8004b5e:	69fa      	ldr	r2, [r7, #28]
 8004b60:	e841 2300 	strex	r3, r2, [r1]
 8004b64:	617b      	str	r3, [r7, #20]
   return(result);
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d1e5      	bne.n	8004b38 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2220      	movs	r2, #32
 8004b70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e011      	b.n	8004ba4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2220      	movs	r2, #32
 8004b84:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2220      	movs	r2, #32
 8004b8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004ba2:	2300      	movs	r3, #0
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3758      	adds	r7, #88	; 0x58
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b084      	sub	sp, #16
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	60b9      	str	r1, [r7, #8]
 8004bb6:	603b      	str	r3, [r7, #0]
 8004bb8:	4613      	mov	r3, r2
 8004bba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bbc:	e049      	b.n	8004c52 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bc4:	d045      	beq.n	8004c52 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bc6:	f7fc f99d 	bl	8000f04 <HAL_GetTick>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	69ba      	ldr	r2, [r7, #24]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d302      	bcc.n	8004bdc <UART_WaitOnFlagUntilTimeout+0x30>
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d101      	bne.n	8004be0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e048      	b.n	8004c72 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 0304 	and.w	r3, r3, #4
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d031      	beq.n	8004c52 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	69db      	ldr	r3, [r3, #28]
 8004bf4:	f003 0308 	and.w	r3, r3, #8
 8004bf8:	2b08      	cmp	r3, #8
 8004bfa:	d110      	bne.n	8004c1e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2208      	movs	r2, #8
 8004c02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c04:	68f8      	ldr	r0, [r7, #12]
 8004c06:	f000 f838 	bl	8004c7a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2208      	movs	r2, #8
 8004c0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e029      	b.n	8004c72 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	69db      	ldr	r3, [r3, #28]
 8004c24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c2c:	d111      	bne.n	8004c52 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c36:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c38:	68f8      	ldr	r0, [r7, #12]
 8004c3a:	f000 f81e 	bl	8004c7a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2220      	movs	r2, #32
 8004c42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e00f      	b.n	8004c72 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	69da      	ldr	r2, [r3, #28]
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	68ba      	ldr	r2, [r7, #8]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	bf0c      	ite	eq
 8004c62:	2301      	moveq	r3, #1
 8004c64:	2300      	movne	r3, #0
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	461a      	mov	r2, r3
 8004c6a:	79fb      	ldrb	r3, [r7, #7]
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d0a6      	beq.n	8004bbe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c70:	2300      	movs	r3, #0
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3710      	adds	r7, #16
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}

08004c7a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c7a:	b480      	push	{r7}
 8004c7c:	b095      	sub	sp, #84	; 0x54
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c8a:	e853 3f00 	ldrex	r3, [r3]
 8004c8e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c92:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ca0:	643b      	str	r3, [r7, #64]	; 0x40
 8004ca2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004ca6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ca8:	e841 2300 	strex	r3, r2, [r1]
 8004cac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d1e6      	bne.n	8004c82 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	3308      	adds	r3, #8
 8004cba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cbc:	6a3b      	ldr	r3, [r7, #32]
 8004cbe:	e853 3f00 	ldrex	r3, [r3]
 8004cc2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	f023 0301 	bic.w	r3, r3, #1
 8004cca:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	3308      	adds	r3, #8
 8004cd2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004cd4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004cd6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004cda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cdc:	e841 2300 	strex	r3, r2, [r1]
 8004ce0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d1e5      	bne.n	8004cb4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d118      	bne.n	8004d22 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	e853 3f00 	ldrex	r3, [r3]
 8004cfc:	60bb      	str	r3, [r7, #8]
   return(result);
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	f023 0310 	bic.w	r3, r3, #16
 8004d04:	647b      	str	r3, [r7, #68]	; 0x44
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d0e:	61bb      	str	r3, [r7, #24]
 8004d10:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d12:	6979      	ldr	r1, [r7, #20]
 8004d14:	69ba      	ldr	r2, [r7, #24]
 8004d16:	e841 2300 	strex	r3, r2, [r1]
 8004d1a:	613b      	str	r3, [r7, #16]
   return(result);
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d1e6      	bne.n	8004cf0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2220      	movs	r2, #32
 8004d26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004d36:	bf00      	nop
 8004d38:	3754      	adds	r7, #84	; 0x54
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr

08004d42 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d42:	b580      	push	{r7, lr}
 8004d44:	b084      	sub	sp, #16
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d4e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d60:	68f8      	ldr	r0, [r7, #12]
 8004d62:	f7ff fb0b 	bl	800437c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d66:	bf00      	nop
 8004d68:	3710      	adds	r7, #16
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}

08004d6e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004d6e:	b480      	push	{r7}
 8004d70:	b08f      	sub	sp, #60	; 0x3c
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d7a:	2b21      	cmp	r3, #33	; 0x21
 8004d7c:	d14d      	bne.n	8004e1a <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d132      	bne.n	8004df0 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d90:	6a3b      	ldr	r3, [r7, #32]
 8004d92:	e853 3f00 	ldrex	r3, [r3]
 8004d96:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d9e:	637b      	str	r3, [r7, #52]	; 0x34
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	461a      	mov	r2, r3
 8004da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004da8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004daa:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004dae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004db0:	e841 2300 	strex	r3, r2, [r1]
 8004db4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d1e6      	bne.n	8004d8a <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	e853 3f00 	ldrex	r3, [r3]
 8004dc8:	60bb      	str	r3, [r7, #8]
   return(result);
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004dd0:	633b      	str	r3, [r7, #48]	; 0x30
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dda:	61bb      	str	r3, [r7, #24]
 8004ddc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dde:	6979      	ldr	r1, [r7, #20]
 8004de0:	69ba      	ldr	r2, [r7, #24]
 8004de2:	e841 2300 	strex	r3, r2, [r1]
 8004de6:	613b      	str	r3, [r7, #16]
   return(result);
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d1e6      	bne.n	8004dbc <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004dee:	e014      	b.n	8004e1a <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004df4:	781a      	ldrb	r2, [r3, #0]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	b292      	uxth	r2, r2
 8004dfc:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e02:	1c5a      	adds	r2, r3, #1
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	3b01      	subs	r3, #1
 8004e12:	b29a      	uxth	r2, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004e1a:	bf00      	nop
 8004e1c:	373c      	adds	r7, #60	; 0x3c
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr

08004e26 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004e26:	b480      	push	{r7}
 8004e28:	b091      	sub	sp, #68	; 0x44
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e32:	2b21      	cmp	r3, #33	; 0x21
 8004e34:	d151      	bne.n	8004eda <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d132      	bne.n	8004ea8 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4a:	e853 3f00 	ldrex	r3, [r3]
 8004e4e:	623b      	str	r3, [r7, #32]
   return(result);
 8004e50:	6a3b      	ldr	r3, [r7, #32]
 8004e52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e56:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e60:	633b      	str	r3, [r7, #48]	; 0x30
 8004e62:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e64:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e68:	e841 2300 	strex	r3, r2, [r1]
 8004e6c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d1e6      	bne.n	8004e42 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	e853 3f00 	ldrex	r3, [r3]
 8004e80:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e88:	637b      	str	r3, [r7, #52]	; 0x34
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	461a      	mov	r2, r3
 8004e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e92:	61fb      	str	r3, [r7, #28]
 8004e94:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e96:	69b9      	ldr	r1, [r7, #24]
 8004e98:	69fa      	ldr	r2, [r7, #28]
 8004e9a:	e841 2300 	strex	r3, r2, [r1]
 8004e9e:	617b      	str	r3, [r7, #20]
   return(result);
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d1e6      	bne.n	8004e74 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004ea6:	e018      	b.n	8004eda <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eac:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004eae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eb0:	881a      	ldrh	r2, [r3, #0]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004eba:	b292      	uxth	r2, r2
 8004ebc:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ec2:	1c9a      	adds	r2, r3, #2
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	3b01      	subs	r3, #1
 8004ed2:	b29a      	uxth	r2, r3
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004eda:	bf00      	nop
 8004edc:	3744      	adds	r7, #68	; 0x44
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr

08004ee6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ee6:	b580      	push	{r7, lr}
 8004ee8:	b088      	sub	sp, #32
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	e853 3f00 	ldrex	r3, [r3]
 8004efa:	60bb      	str	r3, [r7, #8]
   return(result);
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f02:	61fb      	str	r3, [r7, #28]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	461a      	mov	r2, r3
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	61bb      	str	r3, [r7, #24]
 8004f0e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f10:	6979      	ldr	r1, [r7, #20]
 8004f12:	69ba      	ldr	r2, [r7, #24]
 8004f14:	e841 2300 	strex	r3, r2, [r1]
 8004f18:	613b      	str	r3, [r7, #16]
   return(result);
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d1e6      	bne.n	8004eee <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2220      	movs	r2, #32
 8004f24:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f7ff fa1b 	bl	8004368 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f32:	bf00      	nop
 8004f34:	3720      	adds	r7, #32
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}

08004f3a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004f3a:	b480      	push	{r7}
 8004f3c:	b083      	sub	sp, #12
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004f42:	bf00      	nop
 8004f44:	370c      	adds	r7, #12
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr

08004f4e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004f4e:	b480      	push	{r7}
 8004f50:	b085      	sub	sp, #20
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	4603      	mov	r3, r0
 8004f56:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004f5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f60:	2b84      	cmp	r3, #132	; 0x84
 8004f62:	d005      	beq.n	8004f70 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004f64:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	4413      	add	r3, r2
 8004f6c:	3303      	adds	r3, #3
 8004f6e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004f70:	68fb      	ldr	r3, [r7, #12]
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3714      	adds	r7, #20
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr

08004f7e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004f7e:	b580      	push	{r7, lr}
 8004f80:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004f82:	f000 fadf 	bl	8005544 <vTaskStartScheduler>
  
  return osOK;
 8004f86:	2300      	movs	r3, #0
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f8e:	b089      	sub	sp, #36	; 0x24
 8004f90:	af04      	add	r7, sp, #16
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	695b      	ldr	r3, [r3, #20]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d020      	beq.n	8004fe0 <osThreadCreate+0x54>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	699b      	ldr	r3, [r3, #24]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d01c      	beq.n	8004fe0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	685c      	ldr	r4, [r3, #4]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	691e      	ldr	r6, [r3, #16]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f7ff ffc8 	bl	8004f4e <makeFreeRtosPriority>
 8004fbe:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	695b      	ldr	r3, [r3, #20]
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004fc8:	9202      	str	r2, [sp, #8]
 8004fca:	9301      	str	r3, [sp, #4]
 8004fcc:	9100      	str	r1, [sp, #0]
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	4632      	mov	r2, r6
 8004fd2:	4629      	mov	r1, r5
 8004fd4:	4620      	mov	r0, r4
 8004fd6:	f000 f8ed 	bl	80051b4 <xTaskCreateStatic>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	60fb      	str	r3, [r7, #12]
 8004fde:	e01c      	b.n	800501a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	685c      	ldr	r4, [r3, #4]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004fec:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f7ff ffaa 	bl	8004f4e <makeFreeRtosPriority>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	f107 030c 	add.w	r3, r7, #12
 8005000:	9301      	str	r3, [sp, #4]
 8005002:	9200      	str	r2, [sp, #0]
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	4632      	mov	r2, r6
 8005008:	4629      	mov	r1, r5
 800500a:	4620      	mov	r0, r4
 800500c:	f000 f92f 	bl	800526e <xTaskCreate>
 8005010:	4603      	mov	r3, r0
 8005012:	2b01      	cmp	r3, #1
 8005014:	d001      	beq.n	800501a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005016:	2300      	movs	r3, #0
 8005018:	e000      	b.n	800501c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800501a:	68fb      	ldr	r3, [r7, #12]
}
 800501c:	4618      	mov	r0, r3
 800501e:	3714      	adds	r7, #20
 8005020:	46bd      	mov	sp, r7
 8005022:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005024 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d001      	beq.n	800503a <osDelay+0x16>
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	e000      	b.n	800503c <osDelay+0x18>
 800503a:	2301      	movs	r3, #1
 800503c:	4618      	mov	r0, r3
 800503e:	f000 fa4d 	bl	80054dc <vTaskDelay>
  
  return osOK;
 8005042:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005044:	4618      	mov	r0, r3
 8005046:	3710      	adds	r7, #16
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}

0800504c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f103 0208 	add.w	r2, r3, #8
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005064:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f103 0208 	add.w	r2, r3, #8
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f103 0208 	add.w	r2, r3, #8
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005080:	bf00      	nop
 8005082:	370c      	adds	r7, #12
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr

0800508c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800508c:	b480      	push	{r7}
 800508e:	b083      	sub	sp, #12
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800509a:	bf00      	nop
 800509c:	370c      	adds	r7, #12
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr

080050a6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80050a6:	b480      	push	{r7}
 80050a8:	b085      	sub	sp, #20
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
 80050ae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	68fa      	ldr	r2, [r7, #12]
 80050ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	689a      	ldr	r2, [r3, #8]
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	683a      	ldr	r2, [r7, #0]
 80050ca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	683a      	ldr	r2, [r7, #0]
 80050d0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	1c5a      	adds	r2, r3, #1
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	601a      	str	r2, [r3, #0]
}
 80050e2:	bf00      	nop
 80050e4:	3714      	adds	r7, #20
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr

080050ee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80050ee:	b480      	push	{r7}
 80050f0:	b085      	sub	sp, #20
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
 80050f6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005104:	d103      	bne.n	800510e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	691b      	ldr	r3, [r3, #16]
 800510a:	60fb      	str	r3, [r7, #12]
 800510c:	e00c      	b.n	8005128 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	3308      	adds	r3, #8
 8005112:	60fb      	str	r3, [r7, #12]
 8005114:	e002      	b.n	800511c <vListInsert+0x2e>
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	60fb      	str	r3, [r7, #12]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	68ba      	ldr	r2, [r7, #8]
 8005124:	429a      	cmp	r2, r3
 8005126:	d2f6      	bcs.n	8005116 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	685a      	ldr	r2, [r3, #4]
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	683a      	ldr	r2, [r7, #0]
 8005136:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	683a      	ldr	r2, [r7, #0]
 8005142:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	1c5a      	adds	r2, r3, #1
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	601a      	str	r2, [r3, #0]
}
 8005154:	bf00      	nop
 8005156:	3714      	adds	r7, #20
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005160:	b480      	push	{r7}
 8005162:	b085      	sub	sp, #20
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	691b      	ldr	r3, [r3, #16]
 800516c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	6892      	ldr	r2, [r2, #8]
 8005176:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	6852      	ldr	r2, [r2, #4]
 8005180:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	429a      	cmp	r2, r3
 800518a:	d103      	bne.n	8005194 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	689a      	ldr	r2, [r3, #8]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	1e5a      	subs	r2, r3, #1
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3714      	adds	r7, #20
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b08e      	sub	sp, #56	; 0x38
 80051b8:	af04      	add	r7, sp, #16
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	607a      	str	r2, [r7, #4]
 80051c0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80051c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d10a      	bne.n	80051de <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80051c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051cc:	f383 8811 	msr	BASEPRI, r3
 80051d0:	f3bf 8f6f 	isb	sy
 80051d4:	f3bf 8f4f 	dsb	sy
 80051d8:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80051da:	bf00      	nop
 80051dc:	e7fe      	b.n	80051dc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80051de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d10a      	bne.n	80051fa <xTaskCreateStatic+0x46>
	__asm volatile
 80051e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e8:	f383 8811 	msr	BASEPRI, r3
 80051ec:	f3bf 8f6f 	isb	sy
 80051f0:	f3bf 8f4f 	dsb	sy
 80051f4:	61fb      	str	r3, [r7, #28]
}
 80051f6:	bf00      	nop
 80051f8:	e7fe      	b.n	80051f8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80051fa:	2354      	movs	r3, #84	; 0x54
 80051fc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	2b54      	cmp	r3, #84	; 0x54
 8005202:	d00a      	beq.n	800521a <xTaskCreateStatic+0x66>
	__asm volatile
 8005204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005208:	f383 8811 	msr	BASEPRI, r3
 800520c:	f3bf 8f6f 	isb	sy
 8005210:	f3bf 8f4f 	dsb	sy
 8005214:	61bb      	str	r3, [r7, #24]
}
 8005216:	bf00      	nop
 8005218:	e7fe      	b.n	8005218 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800521a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800521c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800521e:	2b00      	cmp	r3, #0
 8005220:	d01e      	beq.n	8005260 <xTaskCreateStatic+0xac>
 8005222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005224:	2b00      	cmp	r3, #0
 8005226:	d01b      	beq.n	8005260 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800522a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800522c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005230:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005234:	2202      	movs	r2, #2
 8005236:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800523a:	2300      	movs	r3, #0
 800523c:	9303      	str	r3, [sp, #12]
 800523e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005240:	9302      	str	r3, [sp, #8]
 8005242:	f107 0314 	add.w	r3, r7, #20
 8005246:	9301      	str	r3, [sp, #4]
 8005248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800524a:	9300      	str	r3, [sp, #0]
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	68b9      	ldr	r1, [r7, #8]
 8005252:	68f8      	ldr	r0, [r7, #12]
 8005254:	f000 f850 	bl	80052f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005258:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800525a:	f000 f8d5 	bl	8005408 <prvAddNewTaskToReadyList>
 800525e:	e001      	b.n	8005264 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005260:	2300      	movs	r3, #0
 8005262:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005264:	697b      	ldr	r3, [r7, #20]
	}
 8005266:	4618      	mov	r0, r3
 8005268:	3728      	adds	r7, #40	; 0x28
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}

0800526e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800526e:	b580      	push	{r7, lr}
 8005270:	b08c      	sub	sp, #48	; 0x30
 8005272:	af04      	add	r7, sp, #16
 8005274:	60f8      	str	r0, [r7, #12]
 8005276:	60b9      	str	r1, [r7, #8]
 8005278:	603b      	str	r3, [r7, #0]
 800527a:	4613      	mov	r3, r2
 800527c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800527e:	88fb      	ldrh	r3, [r7, #6]
 8005280:	009b      	lsls	r3, r3, #2
 8005282:	4618      	mov	r0, r3
 8005284:	f000 fee8 	bl	8006058 <pvPortMalloc>
 8005288:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d00e      	beq.n	80052ae <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005290:	2054      	movs	r0, #84	; 0x54
 8005292:	f000 fee1 	bl	8006058 <pvPortMalloc>
 8005296:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005298:	69fb      	ldr	r3, [r7, #28]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d003      	beq.n	80052a6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	697a      	ldr	r2, [r7, #20]
 80052a2:	631a      	str	r2, [r3, #48]	; 0x30
 80052a4:	e005      	b.n	80052b2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80052a6:	6978      	ldr	r0, [r7, #20]
 80052a8:	f000 ffa2 	bl	80061f0 <vPortFree>
 80052ac:	e001      	b.n	80052b2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80052ae:	2300      	movs	r3, #0
 80052b0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d017      	beq.n	80052e8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80052c0:	88fa      	ldrh	r2, [r7, #6]
 80052c2:	2300      	movs	r3, #0
 80052c4:	9303      	str	r3, [sp, #12]
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	9302      	str	r3, [sp, #8]
 80052ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052cc:	9301      	str	r3, [sp, #4]
 80052ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d0:	9300      	str	r3, [sp, #0]
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	68b9      	ldr	r1, [r7, #8]
 80052d6:	68f8      	ldr	r0, [r7, #12]
 80052d8:	f000 f80e 	bl	80052f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80052dc:	69f8      	ldr	r0, [r7, #28]
 80052de:	f000 f893 	bl	8005408 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80052e2:	2301      	movs	r3, #1
 80052e4:	61bb      	str	r3, [r7, #24]
 80052e6:	e002      	b.n	80052ee <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80052e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80052ec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80052ee:	69bb      	ldr	r3, [r7, #24]
	}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3720      	adds	r7, #32
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}

080052f8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b088      	sub	sp, #32
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	60b9      	str	r1, [r7, #8]
 8005302:	607a      	str	r2, [r7, #4]
 8005304:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005308:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005310:	3b01      	subs	r3, #1
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	4413      	add	r3, r2
 8005316:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005318:	69bb      	ldr	r3, [r7, #24]
 800531a:	f023 0307 	bic.w	r3, r3, #7
 800531e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005320:	69bb      	ldr	r3, [r7, #24]
 8005322:	f003 0307 	and.w	r3, r3, #7
 8005326:	2b00      	cmp	r3, #0
 8005328:	d00a      	beq.n	8005340 <prvInitialiseNewTask+0x48>
	__asm volatile
 800532a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800532e:	f383 8811 	msr	BASEPRI, r3
 8005332:	f3bf 8f6f 	isb	sy
 8005336:	f3bf 8f4f 	dsb	sy
 800533a:	617b      	str	r3, [r7, #20]
}
 800533c:	bf00      	nop
 800533e:	e7fe      	b.n	800533e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d01f      	beq.n	8005386 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005346:	2300      	movs	r3, #0
 8005348:	61fb      	str	r3, [r7, #28]
 800534a:	e012      	b.n	8005372 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800534c:	68ba      	ldr	r2, [r7, #8]
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	4413      	add	r3, r2
 8005352:	7819      	ldrb	r1, [r3, #0]
 8005354:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	4413      	add	r3, r2
 800535a:	3334      	adds	r3, #52	; 0x34
 800535c:	460a      	mov	r2, r1
 800535e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005360:	68ba      	ldr	r2, [r7, #8]
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	4413      	add	r3, r2
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d006      	beq.n	800537a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800536c:	69fb      	ldr	r3, [r7, #28]
 800536e:	3301      	adds	r3, #1
 8005370:	61fb      	str	r3, [r7, #28]
 8005372:	69fb      	ldr	r3, [r7, #28]
 8005374:	2b0f      	cmp	r3, #15
 8005376:	d9e9      	bls.n	800534c <prvInitialiseNewTask+0x54>
 8005378:	e000      	b.n	800537c <prvInitialiseNewTask+0x84>
			{
				break;
 800537a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800537c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800537e:	2200      	movs	r2, #0
 8005380:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005384:	e003      	b.n	800538e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005388:	2200      	movs	r2, #0
 800538a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800538e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005390:	2b06      	cmp	r3, #6
 8005392:	d901      	bls.n	8005398 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005394:	2306      	movs	r3, #6
 8005396:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800539a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800539c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800539e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053a2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80053a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a6:	2200      	movs	r2, #0
 80053a8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80053aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ac:	3304      	adds	r3, #4
 80053ae:	4618      	mov	r0, r3
 80053b0:	f7ff fe6c 	bl	800508c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80053b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b6:	3318      	adds	r3, #24
 80053b8:	4618      	mov	r0, r3
 80053ba:	f7ff fe67 	bl	800508c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80053be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053c2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c6:	f1c3 0207 	rsb	r2, r3, #7
 80053ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053cc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80053ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053d2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80053d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d6:	2200      	movs	r2, #0
 80053d8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80053da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053dc:	2200      	movs	r2, #0
 80053de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80053e2:	683a      	ldr	r2, [r7, #0]
 80053e4:	68f9      	ldr	r1, [r7, #12]
 80053e6:	69b8      	ldr	r0, [r7, #24]
 80053e8:	f000 fc24 	bl	8005c34 <pxPortInitialiseStack>
 80053ec:	4602      	mov	r2, r0
 80053ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80053f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d002      	beq.n	80053fe <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80053f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053fe:	bf00      	nop
 8005400:	3720      	adds	r7, #32
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
	...

08005408 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b082      	sub	sp, #8
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005410:	f000 fd40 	bl	8005e94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005414:	4b2a      	ldr	r3, [pc, #168]	; (80054c0 <prvAddNewTaskToReadyList+0xb8>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	3301      	adds	r3, #1
 800541a:	4a29      	ldr	r2, [pc, #164]	; (80054c0 <prvAddNewTaskToReadyList+0xb8>)
 800541c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800541e:	4b29      	ldr	r3, [pc, #164]	; (80054c4 <prvAddNewTaskToReadyList+0xbc>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d109      	bne.n	800543a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005426:	4a27      	ldr	r2, [pc, #156]	; (80054c4 <prvAddNewTaskToReadyList+0xbc>)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800542c:	4b24      	ldr	r3, [pc, #144]	; (80054c0 <prvAddNewTaskToReadyList+0xb8>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	2b01      	cmp	r3, #1
 8005432:	d110      	bne.n	8005456 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005434:	f000 fabc 	bl	80059b0 <prvInitialiseTaskLists>
 8005438:	e00d      	b.n	8005456 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800543a:	4b23      	ldr	r3, [pc, #140]	; (80054c8 <prvAddNewTaskToReadyList+0xc0>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d109      	bne.n	8005456 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005442:	4b20      	ldr	r3, [pc, #128]	; (80054c4 <prvAddNewTaskToReadyList+0xbc>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800544c:	429a      	cmp	r2, r3
 800544e:	d802      	bhi.n	8005456 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005450:	4a1c      	ldr	r2, [pc, #112]	; (80054c4 <prvAddNewTaskToReadyList+0xbc>)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005456:	4b1d      	ldr	r3, [pc, #116]	; (80054cc <prvAddNewTaskToReadyList+0xc4>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	3301      	adds	r3, #1
 800545c:	4a1b      	ldr	r2, [pc, #108]	; (80054cc <prvAddNewTaskToReadyList+0xc4>)
 800545e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005464:	2201      	movs	r2, #1
 8005466:	409a      	lsls	r2, r3
 8005468:	4b19      	ldr	r3, [pc, #100]	; (80054d0 <prvAddNewTaskToReadyList+0xc8>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4313      	orrs	r3, r2
 800546e:	4a18      	ldr	r2, [pc, #96]	; (80054d0 <prvAddNewTaskToReadyList+0xc8>)
 8005470:	6013      	str	r3, [r2, #0]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005476:	4613      	mov	r3, r2
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	4413      	add	r3, r2
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	4a15      	ldr	r2, [pc, #84]	; (80054d4 <prvAddNewTaskToReadyList+0xcc>)
 8005480:	441a      	add	r2, r3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	3304      	adds	r3, #4
 8005486:	4619      	mov	r1, r3
 8005488:	4610      	mov	r0, r2
 800548a:	f7ff fe0c 	bl	80050a6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800548e:	f000 fd31 	bl	8005ef4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005492:	4b0d      	ldr	r3, [pc, #52]	; (80054c8 <prvAddNewTaskToReadyList+0xc0>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d00e      	beq.n	80054b8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800549a:	4b0a      	ldr	r3, [pc, #40]	; (80054c4 <prvAddNewTaskToReadyList+0xbc>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d207      	bcs.n	80054b8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80054a8:	4b0b      	ldr	r3, [pc, #44]	; (80054d8 <prvAddNewTaskToReadyList+0xd0>)
 80054aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054ae:	601a      	str	r2, [r3, #0]
 80054b0:	f3bf 8f4f 	dsb	sy
 80054b4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80054b8:	bf00      	nop
 80054ba:	3708      	adds	r7, #8
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	20000500 	.word	0x20000500
 80054c4:	20000400 	.word	0x20000400
 80054c8:	2000050c 	.word	0x2000050c
 80054cc:	2000051c 	.word	0x2000051c
 80054d0:	20000508 	.word	0x20000508
 80054d4:	20000404 	.word	0x20000404
 80054d8:	e000ed04 	.word	0xe000ed04

080054dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b084      	sub	sp, #16
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80054e4:	2300      	movs	r3, #0
 80054e6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d017      	beq.n	800551e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80054ee:	4b13      	ldr	r3, [pc, #76]	; (800553c <vTaskDelay+0x60>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d00a      	beq.n	800550c <vTaskDelay+0x30>
	__asm volatile
 80054f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054fa:	f383 8811 	msr	BASEPRI, r3
 80054fe:	f3bf 8f6f 	isb	sy
 8005502:	f3bf 8f4f 	dsb	sy
 8005506:	60bb      	str	r3, [r7, #8]
}
 8005508:	bf00      	nop
 800550a:	e7fe      	b.n	800550a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800550c:	f000 f87a 	bl	8005604 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005510:	2100      	movs	r1, #0
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 fb28 	bl	8005b68 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005518:	f000 f882 	bl	8005620 <xTaskResumeAll>
 800551c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d107      	bne.n	8005534 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005524:	4b06      	ldr	r3, [pc, #24]	; (8005540 <vTaskDelay+0x64>)
 8005526:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800552a:	601a      	str	r2, [r3, #0]
 800552c:	f3bf 8f4f 	dsb	sy
 8005530:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005534:	bf00      	nop
 8005536:	3710      	adds	r7, #16
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}
 800553c:	20000528 	.word	0x20000528
 8005540:	e000ed04 	.word	0xe000ed04

08005544 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b08a      	sub	sp, #40	; 0x28
 8005548:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800554a:	2300      	movs	r3, #0
 800554c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800554e:	2300      	movs	r3, #0
 8005550:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005552:	463a      	mov	r2, r7
 8005554:	1d39      	adds	r1, r7, #4
 8005556:	f107 0308 	add.w	r3, r7, #8
 800555a:	4618      	mov	r0, r3
 800555c:	f7fb f80e 	bl	800057c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005560:	6839      	ldr	r1, [r7, #0]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	68ba      	ldr	r2, [r7, #8]
 8005566:	9202      	str	r2, [sp, #8]
 8005568:	9301      	str	r3, [sp, #4]
 800556a:	2300      	movs	r3, #0
 800556c:	9300      	str	r3, [sp, #0]
 800556e:	2300      	movs	r3, #0
 8005570:	460a      	mov	r2, r1
 8005572:	491e      	ldr	r1, [pc, #120]	; (80055ec <vTaskStartScheduler+0xa8>)
 8005574:	481e      	ldr	r0, [pc, #120]	; (80055f0 <vTaskStartScheduler+0xac>)
 8005576:	f7ff fe1d 	bl	80051b4 <xTaskCreateStatic>
 800557a:	4603      	mov	r3, r0
 800557c:	4a1d      	ldr	r2, [pc, #116]	; (80055f4 <vTaskStartScheduler+0xb0>)
 800557e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005580:	4b1c      	ldr	r3, [pc, #112]	; (80055f4 <vTaskStartScheduler+0xb0>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d002      	beq.n	800558e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005588:	2301      	movs	r3, #1
 800558a:	617b      	str	r3, [r7, #20]
 800558c:	e001      	b.n	8005592 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800558e:	2300      	movs	r3, #0
 8005590:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	2b01      	cmp	r3, #1
 8005596:	d116      	bne.n	80055c6 <vTaskStartScheduler+0x82>
	__asm volatile
 8005598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800559c:	f383 8811 	msr	BASEPRI, r3
 80055a0:	f3bf 8f6f 	isb	sy
 80055a4:	f3bf 8f4f 	dsb	sy
 80055a8:	613b      	str	r3, [r7, #16]
}
 80055aa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80055ac:	4b12      	ldr	r3, [pc, #72]	; (80055f8 <vTaskStartScheduler+0xb4>)
 80055ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80055b2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80055b4:	4b11      	ldr	r3, [pc, #68]	; (80055fc <vTaskStartScheduler+0xb8>)
 80055b6:	2201      	movs	r2, #1
 80055b8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80055ba:	4b11      	ldr	r3, [pc, #68]	; (8005600 <vTaskStartScheduler+0xbc>)
 80055bc:	2200      	movs	r2, #0
 80055be:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80055c0:	f000 fbc6 	bl	8005d50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80055c4:	e00e      	b.n	80055e4 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055cc:	d10a      	bne.n	80055e4 <vTaskStartScheduler+0xa0>
	__asm volatile
 80055ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d2:	f383 8811 	msr	BASEPRI, r3
 80055d6:	f3bf 8f6f 	isb	sy
 80055da:	f3bf 8f4f 	dsb	sy
 80055de:	60fb      	str	r3, [r7, #12]
}
 80055e0:	bf00      	nop
 80055e2:	e7fe      	b.n	80055e2 <vTaskStartScheduler+0x9e>
}
 80055e4:	bf00      	nop
 80055e6:	3718      	adds	r7, #24
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}
 80055ec:	08006e00 	.word	0x08006e00
 80055f0:	08005981 	.word	0x08005981
 80055f4:	20000524 	.word	0x20000524
 80055f8:	20000520 	.word	0x20000520
 80055fc:	2000050c 	.word	0x2000050c
 8005600:	20000504 	.word	0x20000504

08005604 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005604:	b480      	push	{r7}
 8005606:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005608:	4b04      	ldr	r3, [pc, #16]	; (800561c <vTaskSuspendAll+0x18>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	3301      	adds	r3, #1
 800560e:	4a03      	ldr	r2, [pc, #12]	; (800561c <vTaskSuspendAll+0x18>)
 8005610:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005612:	bf00      	nop
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr
 800561c:	20000528 	.word	0x20000528

08005620 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b084      	sub	sp, #16
 8005624:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005626:	2300      	movs	r3, #0
 8005628:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800562a:	2300      	movs	r3, #0
 800562c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800562e:	4b41      	ldr	r3, [pc, #260]	; (8005734 <xTaskResumeAll+0x114>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d10a      	bne.n	800564c <xTaskResumeAll+0x2c>
	__asm volatile
 8005636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800563a:	f383 8811 	msr	BASEPRI, r3
 800563e:	f3bf 8f6f 	isb	sy
 8005642:	f3bf 8f4f 	dsb	sy
 8005646:	603b      	str	r3, [r7, #0]
}
 8005648:	bf00      	nop
 800564a:	e7fe      	b.n	800564a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800564c:	f000 fc22 	bl	8005e94 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005650:	4b38      	ldr	r3, [pc, #224]	; (8005734 <xTaskResumeAll+0x114>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	3b01      	subs	r3, #1
 8005656:	4a37      	ldr	r2, [pc, #220]	; (8005734 <xTaskResumeAll+0x114>)
 8005658:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800565a:	4b36      	ldr	r3, [pc, #216]	; (8005734 <xTaskResumeAll+0x114>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d161      	bne.n	8005726 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005662:	4b35      	ldr	r3, [pc, #212]	; (8005738 <xTaskResumeAll+0x118>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d05d      	beq.n	8005726 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800566a:	e02e      	b.n	80056ca <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800566c:	4b33      	ldr	r3, [pc, #204]	; (800573c <xTaskResumeAll+0x11c>)
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	3318      	adds	r3, #24
 8005678:	4618      	mov	r0, r3
 800567a:	f7ff fd71 	bl	8005160 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	3304      	adds	r3, #4
 8005682:	4618      	mov	r0, r3
 8005684:	f7ff fd6c 	bl	8005160 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800568c:	2201      	movs	r2, #1
 800568e:	409a      	lsls	r2, r3
 8005690:	4b2b      	ldr	r3, [pc, #172]	; (8005740 <xTaskResumeAll+0x120>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4313      	orrs	r3, r2
 8005696:	4a2a      	ldr	r2, [pc, #168]	; (8005740 <xTaskResumeAll+0x120>)
 8005698:	6013      	str	r3, [r2, #0]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800569e:	4613      	mov	r3, r2
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	4413      	add	r3, r2
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	4a27      	ldr	r2, [pc, #156]	; (8005744 <xTaskResumeAll+0x124>)
 80056a8:	441a      	add	r2, r3
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	3304      	adds	r3, #4
 80056ae:	4619      	mov	r1, r3
 80056b0:	4610      	mov	r0, r2
 80056b2:	f7ff fcf8 	bl	80050a6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056ba:	4b23      	ldr	r3, [pc, #140]	; (8005748 <xTaskResumeAll+0x128>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d302      	bcc.n	80056ca <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80056c4:	4b21      	ldr	r3, [pc, #132]	; (800574c <xTaskResumeAll+0x12c>)
 80056c6:	2201      	movs	r2, #1
 80056c8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80056ca:	4b1c      	ldr	r3, [pc, #112]	; (800573c <xTaskResumeAll+0x11c>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d1cc      	bne.n	800566c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d001      	beq.n	80056dc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80056d8:	f000 fa08 	bl	8005aec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80056dc:	4b1c      	ldr	r3, [pc, #112]	; (8005750 <xTaskResumeAll+0x130>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d010      	beq.n	800570a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80056e8:	f000 f836 	bl	8005758 <xTaskIncrementTick>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d002      	beq.n	80056f8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80056f2:	4b16      	ldr	r3, [pc, #88]	; (800574c <xTaskResumeAll+0x12c>)
 80056f4:	2201      	movs	r2, #1
 80056f6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	3b01      	subs	r3, #1
 80056fc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d1f1      	bne.n	80056e8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005704:	4b12      	ldr	r3, [pc, #72]	; (8005750 <xTaskResumeAll+0x130>)
 8005706:	2200      	movs	r2, #0
 8005708:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800570a:	4b10      	ldr	r3, [pc, #64]	; (800574c <xTaskResumeAll+0x12c>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d009      	beq.n	8005726 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005712:	2301      	movs	r3, #1
 8005714:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005716:	4b0f      	ldr	r3, [pc, #60]	; (8005754 <xTaskResumeAll+0x134>)
 8005718:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800571c:	601a      	str	r2, [r3, #0]
 800571e:	f3bf 8f4f 	dsb	sy
 8005722:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005726:	f000 fbe5 	bl	8005ef4 <vPortExitCritical>

	return xAlreadyYielded;
 800572a:	68bb      	ldr	r3, [r7, #8]
}
 800572c:	4618      	mov	r0, r3
 800572e:	3710      	adds	r7, #16
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}
 8005734:	20000528 	.word	0x20000528
 8005738:	20000500 	.word	0x20000500
 800573c:	200004c0 	.word	0x200004c0
 8005740:	20000508 	.word	0x20000508
 8005744:	20000404 	.word	0x20000404
 8005748:	20000400 	.word	0x20000400
 800574c:	20000514 	.word	0x20000514
 8005750:	20000510 	.word	0x20000510
 8005754:	e000ed04 	.word	0xe000ed04

08005758 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b086      	sub	sp, #24
 800575c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800575e:	2300      	movs	r3, #0
 8005760:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005762:	4b4e      	ldr	r3, [pc, #312]	; (800589c <xTaskIncrementTick+0x144>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	2b00      	cmp	r3, #0
 8005768:	f040 808e 	bne.w	8005888 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800576c:	4b4c      	ldr	r3, [pc, #304]	; (80058a0 <xTaskIncrementTick+0x148>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	3301      	adds	r3, #1
 8005772:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005774:	4a4a      	ldr	r2, [pc, #296]	; (80058a0 <xTaskIncrementTick+0x148>)
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d120      	bne.n	80057c2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005780:	4b48      	ldr	r3, [pc, #288]	; (80058a4 <xTaskIncrementTick+0x14c>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d00a      	beq.n	80057a0 <xTaskIncrementTick+0x48>
	__asm volatile
 800578a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800578e:	f383 8811 	msr	BASEPRI, r3
 8005792:	f3bf 8f6f 	isb	sy
 8005796:	f3bf 8f4f 	dsb	sy
 800579a:	603b      	str	r3, [r7, #0]
}
 800579c:	bf00      	nop
 800579e:	e7fe      	b.n	800579e <xTaskIncrementTick+0x46>
 80057a0:	4b40      	ldr	r3, [pc, #256]	; (80058a4 <xTaskIncrementTick+0x14c>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	60fb      	str	r3, [r7, #12]
 80057a6:	4b40      	ldr	r3, [pc, #256]	; (80058a8 <xTaskIncrementTick+0x150>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a3e      	ldr	r2, [pc, #248]	; (80058a4 <xTaskIncrementTick+0x14c>)
 80057ac:	6013      	str	r3, [r2, #0]
 80057ae:	4a3e      	ldr	r2, [pc, #248]	; (80058a8 <xTaskIncrementTick+0x150>)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	6013      	str	r3, [r2, #0]
 80057b4:	4b3d      	ldr	r3, [pc, #244]	; (80058ac <xTaskIncrementTick+0x154>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	3301      	adds	r3, #1
 80057ba:	4a3c      	ldr	r2, [pc, #240]	; (80058ac <xTaskIncrementTick+0x154>)
 80057bc:	6013      	str	r3, [r2, #0]
 80057be:	f000 f995 	bl	8005aec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80057c2:	4b3b      	ldr	r3, [pc, #236]	; (80058b0 <xTaskIncrementTick+0x158>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	693a      	ldr	r2, [r7, #16]
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d348      	bcc.n	800585e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057cc:	4b35      	ldr	r3, [pc, #212]	; (80058a4 <xTaskIncrementTick+0x14c>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d104      	bne.n	80057e0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057d6:	4b36      	ldr	r3, [pc, #216]	; (80058b0 <xTaskIncrementTick+0x158>)
 80057d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80057dc:	601a      	str	r2, [r3, #0]
					break;
 80057de:	e03e      	b.n	800585e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057e0:	4b30      	ldr	r3, [pc, #192]	; (80058a4 <xTaskIncrementTick+0x14c>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80057f0:	693a      	ldr	r2, [r7, #16]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d203      	bcs.n	8005800 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80057f8:	4a2d      	ldr	r2, [pc, #180]	; (80058b0 <xTaskIncrementTick+0x158>)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80057fe:	e02e      	b.n	800585e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	3304      	adds	r3, #4
 8005804:	4618      	mov	r0, r3
 8005806:	f7ff fcab 	bl	8005160 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800580e:	2b00      	cmp	r3, #0
 8005810:	d004      	beq.n	800581c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	3318      	adds	r3, #24
 8005816:	4618      	mov	r0, r3
 8005818:	f7ff fca2 	bl	8005160 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005820:	2201      	movs	r2, #1
 8005822:	409a      	lsls	r2, r3
 8005824:	4b23      	ldr	r3, [pc, #140]	; (80058b4 <xTaskIncrementTick+0x15c>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4313      	orrs	r3, r2
 800582a:	4a22      	ldr	r2, [pc, #136]	; (80058b4 <xTaskIncrementTick+0x15c>)
 800582c:	6013      	str	r3, [r2, #0]
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005832:	4613      	mov	r3, r2
 8005834:	009b      	lsls	r3, r3, #2
 8005836:	4413      	add	r3, r2
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	4a1f      	ldr	r2, [pc, #124]	; (80058b8 <xTaskIncrementTick+0x160>)
 800583c:	441a      	add	r2, r3
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	3304      	adds	r3, #4
 8005842:	4619      	mov	r1, r3
 8005844:	4610      	mov	r0, r2
 8005846:	f7ff fc2e 	bl	80050a6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800584e:	4b1b      	ldr	r3, [pc, #108]	; (80058bc <xTaskIncrementTick+0x164>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005854:	429a      	cmp	r2, r3
 8005856:	d3b9      	bcc.n	80057cc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005858:	2301      	movs	r3, #1
 800585a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800585c:	e7b6      	b.n	80057cc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800585e:	4b17      	ldr	r3, [pc, #92]	; (80058bc <xTaskIncrementTick+0x164>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005864:	4914      	ldr	r1, [pc, #80]	; (80058b8 <xTaskIncrementTick+0x160>)
 8005866:	4613      	mov	r3, r2
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	4413      	add	r3, r2
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	440b      	add	r3, r1
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	2b01      	cmp	r3, #1
 8005874:	d901      	bls.n	800587a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005876:	2301      	movs	r3, #1
 8005878:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800587a:	4b11      	ldr	r3, [pc, #68]	; (80058c0 <xTaskIncrementTick+0x168>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d007      	beq.n	8005892 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005882:	2301      	movs	r3, #1
 8005884:	617b      	str	r3, [r7, #20]
 8005886:	e004      	b.n	8005892 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005888:	4b0e      	ldr	r3, [pc, #56]	; (80058c4 <xTaskIncrementTick+0x16c>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	3301      	adds	r3, #1
 800588e:	4a0d      	ldr	r2, [pc, #52]	; (80058c4 <xTaskIncrementTick+0x16c>)
 8005890:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005892:	697b      	ldr	r3, [r7, #20]
}
 8005894:	4618      	mov	r0, r3
 8005896:	3718      	adds	r7, #24
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}
 800589c:	20000528 	.word	0x20000528
 80058a0:	20000504 	.word	0x20000504
 80058a4:	200004b8 	.word	0x200004b8
 80058a8:	200004bc 	.word	0x200004bc
 80058ac:	20000518 	.word	0x20000518
 80058b0:	20000520 	.word	0x20000520
 80058b4:	20000508 	.word	0x20000508
 80058b8:	20000404 	.word	0x20000404
 80058bc:	20000400 	.word	0x20000400
 80058c0:	20000514 	.word	0x20000514
 80058c4:	20000510 	.word	0x20000510

080058c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80058c8:	b480      	push	{r7}
 80058ca:	b087      	sub	sp, #28
 80058cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80058ce:	4b27      	ldr	r3, [pc, #156]	; (800596c <vTaskSwitchContext+0xa4>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d003      	beq.n	80058de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80058d6:	4b26      	ldr	r3, [pc, #152]	; (8005970 <vTaskSwitchContext+0xa8>)
 80058d8:	2201      	movs	r2, #1
 80058da:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80058dc:	e03f      	b.n	800595e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80058de:	4b24      	ldr	r3, [pc, #144]	; (8005970 <vTaskSwitchContext+0xa8>)
 80058e0:	2200      	movs	r2, #0
 80058e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058e4:	4b23      	ldr	r3, [pc, #140]	; (8005974 <vTaskSwitchContext+0xac>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	fab3 f383 	clz	r3, r3
 80058f0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80058f2:	7afb      	ldrb	r3, [r7, #11]
 80058f4:	f1c3 031f 	rsb	r3, r3, #31
 80058f8:	617b      	str	r3, [r7, #20]
 80058fa:	491f      	ldr	r1, [pc, #124]	; (8005978 <vTaskSwitchContext+0xb0>)
 80058fc:	697a      	ldr	r2, [r7, #20]
 80058fe:	4613      	mov	r3, r2
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	4413      	add	r3, r2
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	440b      	add	r3, r1
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d10a      	bne.n	8005924 <vTaskSwitchContext+0x5c>
	__asm volatile
 800590e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005912:	f383 8811 	msr	BASEPRI, r3
 8005916:	f3bf 8f6f 	isb	sy
 800591a:	f3bf 8f4f 	dsb	sy
 800591e:	607b      	str	r3, [r7, #4]
}
 8005920:	bf00      	nop
 8005922:	e7fe      	b.n	8005922 <vTaskSwitchContext+0x5a>
 8005924:	697a      	ldr	r2, [r7, #20]
 8005926:	4613      	mov	r3, r2
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	4413      	add	r3, r2
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	4a12      	ldr	r2, [pc, #72]	; (8005978 <vTaskSwitchContext+0xb0>)
 8005930:	4413      	add	r3, r2
 8005932:	613b      	str	r3, [r7, #16]
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	685a      	ldr	r2, [r3, #4]
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	605a      	str	r2, [r3, #4]
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	685a      	ldr	r2, [r3, #4]
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	3308      	adds	r3, #8
 8005946:	429a      	cmp	r2, r3
 8005948:	d104      	bne.n	8005954 <vTaskSwitchContext+0x8c>
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	685a      	ldr	r2, [r3, #4]
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	605a      	str	r2, [r3, #4]
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	68db      	ldr	r3, [r3, #12]
 800595a:	4a08      	ldr	r2, [pc, #32]	; (800597c <vTaskSwitchContext+0xb4>)
 800595c:	6013      	str	r3, [r2, #0]
}
 800595e:	bf00      	nop
 8005960:	371c      	adds	r7, #28
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr
 800596a:	bf00      	nop
 800596c:	20000528 	.word	0x20000528
 8005970:	20000514 	.word	0x20000514
 8005974:	20000508 	.word	0x20000508
 8005978:	20000404 	.word	0x20000404
 800597c:	20000400 	.word	0x20000400

08005980 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b082      	sub	sp, #8
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005988:	f000 f852 	bl	8005a30 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800598c:	4b06      	ldr	r3, [pc, #24]	; (80059a8 <prvIdleTask+0x28>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	2b01      	cmp	r3, #1
 8005992:	d9f9      	bls.n	8005988 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005994:	4b05      	ldr	r3, [pc, #20]	; (80059ac <prvIdleTask+0x2c>)
 8005996:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800599a:	601a      	str	r2, [r3, #0]
 800599c:	f3bf 8f4f 	dsb	sy
 80059a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80059a4:	e7f0      	b.n	8005988 <prvIdleTask+0x8>
 80059a6:	bf00      	nop
 80059a8:	20000404 	.word	0x20000404
 80059ac:	e000ed04 	.word	0xe000ed04

080059b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b082      	sub	sp, #8
 80059b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80059b6:	2300      	movs	r3, #0
 80059b8:	607b      	str	r3, [r7, #4]
 80059ba:	e00c      	b.n	80059d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	4613      	mov	r3, r2
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	4413      	add	r3, r2
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	4a12      	ldr	r2, [pc, #72]	; (8005a10 <prvInitialiseTaskLists+0x60>)
 80059c8:	4413      	add	r3, r2
 80059ca:	4618      	mov	r0, r3
 80059cc:	f7ff fb3e 	bl	800504c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	3301      	adds	r3, #1
 80059d4:	607b      	str	r3, [r7, #4]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2b06      	cmp	r3, #6
 80059da:	d9ef      	bls.n	80059bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80059dc:	480d      	ldr	r0, [pc, #52]	; (8005a14 <prvInitialiseTaskLists+0x64>)
 80059de:	f7ff fb35 	bl	800504c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80059e2:	480d      	ldr	r0, [pc, #52]	; (8005a18 <prvInitialiseTaskLists+0x68>)
 80059e4:	f7ff fb32 	bl	800504c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80059e8:	480c      	ldr	r0, [pc, #48]	; (8005a1c <prvInitialiseTaskLists+0x6c>)
 80059ea:	f7ff fb2f 	bl	800504c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80059ee:	480c      	ldr	r0, [pc, #48]	; (8005a20 <prvInitialiseTaskLists+0x70>)
 80059f0:	f7ff fb2c 	bl	800504c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80059f4:	480b      	ldr	r0, [pc, #44]	; (8005a24 <prvInitialiseTaskLists+0x74>)
 80059f6:	f7ff fb29 	bl	800504c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80059fa:	4b0b      	ldr	r3, [pc, #44]	; (8005a28 <prvInitialiseTaskLists+0x78>)
 80059fc:	4a05      	ldr	r2, [pc, #20]	; (8005a14 <prvInitialiseTaskLists+0x64>)
 80059fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005a00:	4b0a      	ldr	r3, [pc, #40]	; (8005a2c <prvInitialiseTaskLists+0x7c>)
 8005a02:	4a05      	ldr	r2, [pc, #20]	; (8005a18 <prvInitialiseTaskLists+0x68>)
 8005a04:	601a      	str	r2, [r3, #0]
}
 8005a06:	bf00      	nop
 8005a08:	3708      	adds	r7, #8
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	bf00      	nop
 8005a10:	20000404 	.word	0x20000404
 8005a14:	20000490 	.word	0x20000490
 8005a18:	200004a4 	.word	0x200004a4
 8005a1c:	200004c0 	.word	0x200004c0
 8005a20:	200004d4 	.word	0x200004d4
 8005a24:	200004ec 	.word	0x200004ec
 8005a28:	200004b8 	.word	0x200004b8
 8005a2c:	200004bc 	.word	0x200004bc

08005a30 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b082      	sub	sp, #8
 8005a34:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a36:	e019      	b.n	8005a6c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005a38:	f000 fa2c 	bl	8005e94 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a3c:	4b10      	ldr	r3, [pc, #64]	; (8005a80 <prvCheckTasksWaitingTermination+0x50>)
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	3304      	adds	r3, #4
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f7ff fb89 	bl	8005160 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005a4e:	4b0d      	ldr	r3, [pc, #52]	; (8005a84 <prvCheckTasksWaitingTermination+0x54>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	3b01      	subs	r3, #1
 8005a54:	4a0b      	ldr	r2, [pc, #44]	; (8005a84 <prvCheckTasksWaitingTermination+0x54>)
 8005a56:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005a58:	4b0b      	ldr	r3, [pc, #44]	; (8005a88 <prvCheckTasksWaitingTermination+0x58>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	3b01      	subs	r3, #1
 8005a5e:	4a0a      	ldr	r2, [pc, #40]	; (8005a88 <prvCheckTasksWaitingTermination+0x58>)
 8005a60:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005a62:	f000 fa47 	bl	8005ef4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 f810 	bl	8005a8c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a6c:	4b06      	ldr	r3, [pc, #24]	; (8005a88 <prvCheckTasksWaitingTermination+0x58>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d1e1      	bne.n	8005a38 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005a74:	bf00      	nop
 8005a76:	bf00      	nop
 8005a78:	3708      	adds	r7, #8
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	200004d4 	.word	0x200004d4
 8005a84:	20000500 	.word	0x20000500
 8005a88:	200004e8 	.word	0x200004e8

08005a8c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b084      	sub	sp, #16
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d108      	bne.n	8005ab0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f000 fba4 	bl	80061f0 <vPortFree>
				vPortFree( pxTCB );
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f000 fba1 	bl	80061f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005aae:	e018      	b.n	8005ae2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d103      	bne.n	8005ac2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 fb98 	bl	80061f0 <vPortFree>
	}
 8005ac0:	e00f      	b.n	8005ae2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ac8:	2b02      	cmp	r3, #2
 8005aca:	d00a      	beq.n	8005ae2 <prvDeleteTCB+0x56>
	__asm volatile
 8005acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad0:	f383 8811 	msr	BASEPRI, r3
 8005ad4:	f3bf 8f6f 	isb	sy
 8005ad8:	f3bf 8f4f 	dsb	sy
 8005adc:	60fb      	str	r3, [r7, #12]
}
 8005ade:	bf00      	nop
 8005ae0:	e7fe      	b.n	8005ae0 <prvDeleteTCB+0x54>
	}
 8005ae2:	bf00      	nop
 8005ae4:	3710      	adds	r7, #16
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
	...

08005aec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005aec:	b480      	push	{r7}
 8005aee:	b083      	sub	sp, #12
 8005af0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005af2:	4b0c      	ldr	r3, [pc, #48]	; (8005b24 <prvResetNextTaskUnblockTime+0x38>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d104      	bne.n	8005b06 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005afc:	4b0a      	ldr	r3, [pc, #40]	; (8005b28 <prvResetNextTaskUnblockTime+0x3c>)
 8005afe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b02:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005b04:	e008      	b.n	8005b18 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b06:	4b07      	ldr	r3, [pc, #28]	; (8005b24 <prvResetNextTaskUnblockTime+0x38>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	4a04      	ldr	r2, [pc, #16]	; (8005b28 <prvResetNextTaskUnblockTime+0x3c>)
 8005b16:	6013      	str	r3, [r2, #0]
}
 8005b18:	bf00      	nop
 8005b1a:	370c      	adds	r7, #12
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr
 8005b24:	200004b8 	.word	0x200004b8
 8005b28:	20000520 	.word	0x20000520

08005b2c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b083      	sub	sp, #12
 8005b30:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005b32:	4b0b      	ldr	r3, [pc, #44]	; (8005b60 <xTaskGetSchedulerState+0x34>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d102      	bne.n	8005b40 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	607b      	str	r3, [r7, #4]
 8005b3e:	e008      	b.n	8005b52 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b40:	4b08      	ldr	r3, [pc, #32]	; (8005b64 <xTaskGetSchedulerState+0x38>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d102      	bne.n	8005b4e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005b48:	2302      	movs	r3, #2
 8005b4a:	607b      	str	r3, [r7, #4]
 8005b4c:	e001      	b.n	8005b52 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005b52:	687b      	ldr	r3, [r7, #4]
	}
 8005b54:	4618      	mov	r0, r3
 8005b56:	370c      	adds	r7, #12
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr
 8005b60:	2000050c 	.word	0x2000050c
 8005b64:	20000528 	.word	0x20000528

08005b68 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b084      	sub	sp, #16
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005b72:	4b29      	ldr	r3, [pc, #164]	; (8005c18 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b78:	4b28      	ldr	r3, [pc, #160]	; (8005c1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	3304      	adds	r3, #4
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f7ff faee 	bl	8005160 <uxListRemove>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d10b      	bne.n	8005ba2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005b8a:	4b24      	ldr	r3, [pc, #144]	; (8005c1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b90:	2201      	movs	r2, #1
 8005b92:	fa02 f303 	lsl.w	r3, r2, r3
 8005b96:	43da      	mvns	r2, r3
 8005b98:	4b21      	ldr	r3, [pc, #132]	; (8005c20 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	4a20      	ldr	r2, [pc, #128]	; (8005c20 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005ba0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ba8:	d10a      	bne.n	8005bc0 <prvAddCurrentTaskToDelayedList+0x58>
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d007      	beq.n	8005bc0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005bb0:	4b1a      	ldr	r3, [pc, #104]	; (8005c1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	3304      	adds	r3, #4
 8005bb6:	4619      	mov	r1, r3
 8005bb8:	481a      	ldr	r0, [pc, #104]	; (8005c24 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005bba:	f7ff fa74 	bl	80050a6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005bbe:	e026      	b.n	8005c0e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	4413      	add	r3, r2
 8005bc6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005bc8:	4b14      	ldr	r3, [pc, #80]	; (8005c1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	68ba      	ldr	r2, [r7, #8]
 8005bce:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005bd0:	68ba      	ldr	r2, [r7, #8]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d209      	bcs.n	8005bec <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005bd8:	4b13      	ldr	r3, [pc, #76]	; (8005c28 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	4b0f      	ldr	r3, [pc, #60]	; (8005c1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	3304      	adds	r3, #4
 8005be2:	4619      	mov	r1, r3
 8005be4:	4610      	mov	r0, r2
 8005be6:	f7ff fa82 	bl	80050ee <vListInsert>
}
 8005bea:	e010      	b.n	8005c0e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005bec:	4b0f      	ldr	r3, [pc, #60]	; (8005c2c <prvAddCurrentTaskToDelayedList+0xc4>)
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	4b0a      	ldr	r3, [pc, #40]	; (8005c1c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	3304      	adds	r3, #4
 8005bf6:	4619      	mov	r1, r3
 8005bf8:	4610      	mov	r0, r2
 8005bfa:	f7ff fa78 	bl	80050ee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005bfe:	4b0c      	ldr	r3, [pc, #48]	; (8005c30 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	68ba      	ldr	r2, [r7, #8]
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d202      	bcs.n	8005c0e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005c08:	4a09      	ldr	r2, [pc, #36]	; (8005c30 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	6013      	str	r3, [r2, #0]
}
 8005c0e:	bf00      	nop
 8005c10:	3710      	adds	r7, #16
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
 8005c16:	bf00      	nop
 8005c18:	20000504 	.word	0x20000504
 8005c1c:	20000400 	.word	0x20000400
 8005c20:	20000508 	.word	0x20000508
 8005c24:	200004ec 	.word	0x200004ec
 8005c28:	200004bc 	.word	0x200004bc
 8005c2c:	200004b8 	.word	0x200004b8
 8005c30:	20000520 	.word	0x20000520

08005c34 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005c34:	b480      	push	{r7}
 8005c36:	b085      	sub	sp, #20
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	3b04      	subs	r3, #4
 8005c44:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005c4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	3b04      	subs	r3, #4
 8005c52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	f023 0201 	bic.w	r2, r3, #1
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	3b04      	subs	r3, #4
 8005c62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005c64:	4a0c      	ldr	r2, [pc, #48]	; (8005c98 <pxPortInitialiseStack+0x64>)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	3b14      	subs	r3, #20
 8005c6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	3b04      	subs	r3, #4
 8005c7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f06f 0202 	mvn.w	r2, #2
 8005c82:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	3b20      	subs	r3, #32
 8005c88:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3714      	adds	r7, #20
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr
 8005c98:	08005c9d 	.word	0x08005c9d

08005c9c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b085      	sub	sp, #20
 8005ca0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005ca6:	4b12      	ldr	r3, [pc, #72]	; (8005cf0 <prvTaskExitError+0x54>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005cae:	d00a      	beq.n	8005cc6 <prvTaskExitError+0x2a>
	__asm volatile
 8005cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb4:	f383 8811 	msr	BASEPRI, r3
 8005cb8:	f3bf 8f6f 	isb	sy
 8005cbc:	f3bf 8f4f 	dsb	sy
 8005cc0:	60fb      	str	r3, [r7, #12]
}
 8005cc2:	bf00      	nop
 8005cc4:	e7fe      	b.n	8005cc4 <prvTaskExitError+0x28>
	__asm volatile
 8005cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cca:	f383 8811 	msr	BASEPRI, r3
 8005cce:	f3bf 8f6f 	isb	sy
 8005cd2:	f3bf 8f4f 	dsb	sy
 8005cd6:	60bb      	str	r3, [r7, #8]
}
 8005cd8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005cda:	bf00      	nop
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d0fc      	beq.n	8005cdc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005ce2:	bf00      	nop
 8005ce4:	bf00      	nop
 8005ce6:	3714      	adds	r7, #20
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr
 8005cf0:	2000000c 	.word	0x2000000c
	...

08005d00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005d00:	4b07      	ldr	r3, [pc, #28]	; (8005d20 <pxCurrentTCBConst2>)
 8005d02:	6819      	ldr	r1, [r3, #0]
 8005d04:	6808      	ldr	r0, [r1, #0]
 8005d06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d0a:	f380 8809 	msr	PSP, r0
 8005d0e:	f3bf 8f6f 	isb	sy
 8005d12:	f04f 0000 	mov.w	r0, #0
 8005d16:	f380 8811 	msr	BASEPRI, r0
 8005d1a:	4770      	bx	lr
 8005d1c:	f3af 8000 	nop.w

08005d20 <pxCurrentTCBConst2>:
 8005d20:	20000400 	.word	0x20000400
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005d24:	bf00      	nop
 8005d26:	bf00      	nop

08005d28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005d28:	4808      	ldr	r0, [pc, #32]	; (8005d4c <prvPortStartFirstTask+0x24>)
 8005d2a:	6800      	ldr	r0, [r0, #0]
 8005d2c:	6800      	ldr	r0, [r0, #0]
 8005d2e:	f380 8808 	msr	MSP, r0
 8005d32:	f04f 0000 	mov.w	r0, #0
 8005d36:	f380 8814 	msr	CONTROL, r0
 8005d3a:	b662      	cpsie	i
 8005d3c:	b661      	cpsie	f
 8005d3e:	f3bf 8f4f 	dsb	sy
 8005d42:	f3bf 8f6f 	isb	sy
 8005d46:	df00      	svc	0
 8005d48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005d4a:	bf00      	nop
 8005d4c:	e000ed08 	.word	0xe000ed08

08005d50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b086      	sub	sp, #24
 8005d54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005d56:	4b46      	ldr	r3, [pc, #280]	; (8005e70 <xPortStartScheduler+0x120>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a46      	ldr	r2, [pc, #280]	; (8005e74 <xPortStartScheduler+0x124>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d10a      	bne.n	8005d76 <xPortStartScheduler+0x26>
	__asm volatile
 8005d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d64:	f383 8811 	msr	BASEPRI, r3
 8005d68:	f3bf 8f6f 	isb	sy
 8005d6c:	f3bf 8f4f 	dsb	sy
 8005d70:	613b      	str	r3, [r7, #16]
}
 8005d72:	bf00      	nop
 8005d74:	e7fe      	b.n	8005d74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005d76:	4b3e      	ldr	r3, [pc, #248]	; (8005e70 <xPortStartScheduler+0x120>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a3f      	ldr	r2, [pc, #252]	; (8005e78 <xPortStartScheduler+0x128>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d10a      	bne.n	8005d96 <xPortStartScheduler+0x46>
	__asm volatile
 8005d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d84:	f383 8811 	msr	BASEPRI, r3
 8005d88:	f3bf 8f6f 	isb	sy
 8005d8c:	f3bf 8f4f 	dsb	sy
 8005d90:	60fb      	str	r3, [r7, #12]
}
 8005d92:	bf00      	nop
 8005d94:	e7fe      	b.n	8005d94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005d96:	4b39      	ldr	r3, [pc, #228]	; (8005e7c <xPortStartScheduler+0x12c>)
 8005d98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	22ff      	movs	r2, #255	; 0xff
 8005da6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005db0:	78fb      	ldrb	r3, [r7, #3]
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005db8:	b2da      	uxtb	r2, r3
 8005dba:	4b31      	ldr	r3, [pc, #196]	; (8005e80 <xPortStartScheduler+0x130>)
 8005dbc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005dbe:	4b31      	ldr	r3, [pc, #196]	; (8005e84 <xPortStartScheduler+0x134>)
 8005dc0:	2207      	movs	r2, #7
 8005dc2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005dc4:	e009      	b.n	8005dda <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005dc6:	4b2f      	ldr	r3, [pc, #188]	; (8005e84 <xPortStartScheduler+0x134>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	3b01      	subs	r3, #1
 8005dcc:	4a2d      	ldr	r2, [pc, #180]	; (8005e84 <xPortStartScheduler+0x134>)
 8005dce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005dd0:	78fb      	ldrb	r3, [r7, #3]
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	005b      	lsls	r3, r3, #1
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005dda:	78fb      	ldrb	r3, [r7, #3]
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005de2:	2b80      	cmp	r3, #128	; 0x80
 8005de4:	d0ef      	beq.n	8005dc6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005de6:	4b27      	ldr	r3, [pc, #156]	; (8005e84 <xPortStartScheduler+0x134>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f1c3 0307 	rsb	r3, r3, #7
 8005dee:	2b04      	cmp	r3, #4
 8005df0:	d00a      	beq.n	8005e08 <xPortStartScheduler+0xb8>
	__asm volatile
 8005df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df6:	f383 8811 	msr	BASEPRI, r3
 8005dfa:	f3bf 8f6f 	isb	sy
 8005dfe:	f3bf 8f4f 	dsb	sy
 8005e02:	60bb      	str	r3, [r7, #8]
}
 8005e04:	bf00      	nop
 8005e06:	e7fe      	b.n	8005e06 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005e08:	4b1e      	ldr	r3, [pc, #120]	; (8005e84 <xPortStartScheduler+0x134>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	021b      	lsls	r3, r3, #8
 8005e0e:	4a1d      	ldr	r2, [pc, #116]	; (8005e84 <xPortStartScheduler+0x134>)
 8005e10:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005e12:	4b1c      	ldr	r3, [pc, #112]	; (8005e84 <xPortStartScheduler+0x134>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005e1a:	4a1a      	ldr	r2, [pc, #104]	; (8005e84 <xPortStartScheduler+0x134>)
 8005e1c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	b2da      	uxtb	r2, r3
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005e26:	4b18      	ldr	r3, [pc, #96]	; (8005e88 <xPortStartScheduler+0x138>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a17      	ldr	r2, [pc, #92]	; (8005e88 <xPortStartScheduler+0x138>)
 8005e2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005e30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005e32:	4b15      	ldr	r3, [pc, #84]	; (8005e88 <xPortStartScheduler+0x138>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a14      	ldr	r2, [pc, #80]	; (8005e88 <xPortStartScheduler+0x138>)
 8005e38:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005e3c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005e3e:	f000 f8dd 	bl	8005ffc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005e42:	4b12      	ldr	r3, [pc, #72]	; (8005e8c <xPortStartScheduler+0x13c>)
 8005e44:	2200      	movs	r2, #0
 8005e46:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005e48:	f000 f8fc 	bl	8006044 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005e4c:	4b10      	ldr	r3, [pc, #64]	; (8005e90 <xPortStartScheduler+0x140>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a0f      	ldr	r2, [pc, #60]	; (8005e90 <xPortStartScheduler+0x140>)
 8005e52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005e56:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005e58:	f7ff ff66 	bl	8005d28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005e5c:	f7ff fd34 	bl	80058c8 <vTaskSwitchContext>
	prvTaskExitError();
 8005e60:	f7ff ff1c 	bl	8005c9c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005e64:	2300      	movs	r3, #0
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3718      	adds	r7, #24
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	e000ed00 	.word	0xe000ed00
 8005e74:	410fc271 	.word	0x410fc271
 8005e78:	410fc270 	.word	0x410fc270
 8005e7c:	e000e400 	.word	0xe000e400
 8005e80:	2000052c 	.word	0x2000052c
 8005e84:	20000530 	.word	0x20000530
 8005e88:	e000ed20 	.word	0xe000ed20
 8005e8c:	2000000c 	.word	0x2000000c
 8005e90:	e000ef34 	.word	0xe000ef34

08005e94 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005e94:	b480      	push	{r7}
 8005e96:	b083      	sub	sp, #12
 8005e98:	af00      	add	r7, sp, #0
	__asm volatile
 8005e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e9e:	f383 8811 	msr	BASEPRI, r3
 8005ea2:	f3bf 8f6f 	isb	sy
 8005ea6:	f3bf 8f4f 	dsb	sy
 8005eaa:	607b      	str	r3, [r7, #4]
}
 8005eac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005eae:	4b0f      	ldr	r3, [pc, #60]	; (8005eec <vPortEnterCritical+0x58>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	4a0d      	ldr	r2, [pc, #52]	; (8005eec <vPortEnterCritical+0x58>)
 8005eb6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005eb8:	4b0c      	ldr	r3, [pc, #48]	; (8005eec <vPortEnterCritical+0x58>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d10f      	bne.n	8005ee0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005ec0:	4b0b      	ldr	r3, [pc, #44]	; (8005ef0 <vPortEnterCritical+0x5c>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d00a      	beq.n	8005ee0 <vPortEnterCritical+0x4c>
	__asm volatile
 8005eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ece:	f383 8811 	msr	BASEPRI, r3
 8005ed2:	f3bf 8f6f 	isb	sy
 8005ed6:	f3bf 8f4f 	dsb	sy
 8005eda:	603b      	str	r3, [r7, #0]
}
 8005edc:	bf00      	nop
 8005ede:	e7fe      	b.n	8005ede <vPortEnterCritical+0x4a>
	}
}
 8005ee0:	bf00      	nop
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr
 8005eec:	2000000c 	.word	0x2000000c
 8005ef0:	e000ed04 	.word	0xe000ed04

08005ef4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005efa:	4b12      	ldr	r3, [pc, #72]	; (8005f44 <vPortExitCritical+0x50>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d10a      	bne.n	8005f18 <vPortExitCritical+0x24>
	__asm volatile
 8005f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f06:	f383 8811 	msr	BASEPRI, r3
 8005f0a:	f3bf 8f6f 	isb	sy
 8005f0e:	f3bf 8f4f 	dsb	sy
 8005f12:	607b      	str	r3, [r7, #4]
}
 8005f14:	bf00      	nop
 8005f16:	e7fe      	b.n	8005f16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005f18:	4b0a      	ldr	r3, [pc, #40]	; (8005f44 <vPortExitCritical+0x50>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	3b01      	subs	r3, #1
 8005f1e:	4a09      	ldr	r2, [pc, #36]	; (8005f44 <vPortExitCritical+0x50>)
 8005f20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005f22:	4b08      	ldr	r3, [pc, #32]	; (8005f44 <vPortExitCritical+0x50>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d105      	bne.n	8005f36 <vPortExitCritical+0x42>
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005f34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005f36:	bf00      	nop
 8005f38:	370c      	adds	r7, #12
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr
 8005f42:	bf00      	nop
 8005f44:	2000000c 	.word	0x2000000c
	...

08005f50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005f50:	f3ef 8009 	mrs	r0, PSP
 8005f54:	f3bf 8f6f 	isb	sy
 8005f58:	4b15      	ldr	r3, [pc, #84]	; (8005fb0 <pxCurrentTCBConst>)
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	f01e 0f10 	tst.w	lr, #16
 8005f60:	bf08      	it	eq
 8005f62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005f66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f6a:	6010      	str	r0, [r2, #0]
 8005f6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005f70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005f74:	f380 8811 	msr	BASEPRI, r0
 8005f78:	f3bf 8f4f 	dsb	sy
 8005f7c:	f3bf 8f6f 	isb	sy
 8005f80:	f7ff fca2 	bl	80058c8 <vTaskSwitchContext>
 8005f84:	f04f 0000 	mov.w	r0, #0
 8005f88:	f380 8811 	msr	BASEPRI, r0
 8005f8c:	bc09      	pop	{r0, r3}
 8005f8e:	6819      	ldr	r1, [r3, #0]
 8005f90:	6808      	ldr	r0, [r1, #0]
 8005f92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f96:	f01e 0f10 	tst.w	lr, #16
 8005f9a:	bf08      	it	eq
 8005f9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005fa0:	f380 8809 	msr	PSP, r0
 8005fa4:	f3bf 8f6f 	isb	sy
 8005fa8:	4770      	bx	lr
 8005faa:	bf00      	nop
 8005fac:	f3af 8000 	nop.w

08005fb0 <pxCurrentTCBConst>:
 8005fb0:	20000400 	.word	0x20000400
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005fb4:	bf00      	nop
 8005fb6:	bf00      	nop

08005fb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b082      	sub	sp, #8
 8005fbc:	af00      	add	r7, sp, #0
	__asm volatile
 8005fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc2:	f383 8811 	msr	BASEPRI, r3
 8005fc6:	f3bf 8f6f 	isb	sy
 8005fca:	f3bf 8f4f 	dsb	sy
 8005fce:	607b      	str	r3, [r7, #4]
}
 8005fd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005fd2:	f7ff fbc1 	bl	8005758 <xTaskIncrementTick>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d003      	beq.n	8005fe4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005fdc:	4b06      	ldr	r3, [pc, #24]	; (8005ff8 <xPortSysTickHandler+0x40>)
 8005fde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fe2:	601a      	str	r2, [r3, #0]
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	f383 8811 	msr	BASEPRI, r3
}
 8005fee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005ff0:	bf00      	nop
 8005ff2:	3708      	adds	r7, #8
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}
 8005ff8:	e000ed04 	.word	0xe000ed04

08005ffc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006000:	4b0b      	ldr	r3, [pc, #44]	; (8006030 <vPortSetupTimerInterrupt+0x34>)
 8006002:	2200      	movs	r2, #0
 8006004:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006006:	4b0b      	ldr	r3, [pc, #44]	; (8006034 <vPortSetupTimerInterrupt+0x38>)
 8006008:	2200      	movs	r2, #0
 800600a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800600c:	4b0a      	ldr	r3, [pc, #40]	; (8006038 <vPortSetupTimerInterrupt+0x3c>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a0a      	ldr	r2, [pc, #40]	; (800603c <vPortSetupTimerInterrupt+0x40>)
 8006012:	fba2 2303 	umull	r2, r3, r2, r3
 8006016:	099b      	lsrs	r3, r3, #6
 8006018:	4a09      	ldr	r2, [pc, #36]	; (8006040 <vPortSetupTimerInterrupt+0x44>)
 800601a:	3b01      	subs	r3, #1
 800601c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800601e:	4b04      	ldr	r3, [pc, #16]	; (8006030 <vPortSetupTimerInterrupt+0x34>)
 8006020:	2207      	movs	r2, #7
 8006022:	601a      	str	r2, [r3, #0]
}
 8006024:	bf00      	nop
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr
 800602e:	bf00      	nop
 8006030:	e000e010 	.word	0xe000e010
 8006034:	e000e018 	.word	0xe000e018
 8006038:	20000000 	.word	0x20000000
 800603c:	10624dd3 	.word	0x10624dd3
 8006040:	e000e014 	.word	0xe000e014

08006044 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006044:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006054 <vPortEnableVFP+0x10>
 8006048:	6801      	ldr	r1, [r0, #0]
 800604a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800604e:	6001      	str	r1, [r0, #0]
 8006050:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006052:	bf00      	nop
 8006054:	e000ed88 	.word	0xe000ed88

08006058 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b08a      	sub	sp, #40	; 0x28
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006060:	2300      	movs	r3, #0
 8006062:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006064:	f7ff face 	bl	8005604 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006068:	4b5b      	ldr	r3, [pc, #364]	; (80061d8 <pvPortMalloc+0x180>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d101      	bne.n	8006074 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006070:	f000 f920 	bl	80062b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006074:	4b59      	ldr	r3, [pc, #356]	; (80061dc <pvPortMalloc+0x184>)
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	4013      	ands	r3, r2
 800607c:	2b00      	cmp	r3, #0
 800607e:	f040 8093 	bne.w	80061a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d01d      	beq.n	80060c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006088:	2208      	movs	r2, #8
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4413      	add	r3, r2
 800608e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f003 0307 	and.w	r3, r3, #7
 8006096:	2b00      	cmp	r3, #0
 8006098:	d014      	beq.n	80060c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f023 0307 	bic.w	r3, r3, #7
 80060a0:	3308      	adds	r3, #8
 80060a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f003 0307 	and.w	r3, r3, #7
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d00a      	beq.n	80060c4 <pvPortMalloc+0x6c>
	__asm volatile
 80060ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b2:	f383 8811 	msr	BASEPRI, r3
 80060b6:	f3bf 8f6f 	isb	sy
 80060ba:	f3bf 8f4f 	dsb	sy
 80060be:	617b      	str	r3, [r7, #20]
}
 80060c0:	bf00      	nop
 80060c2:	e7fe      	b.n	80060c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d06e      	beq.n	80061a8 <pvPortMalloc+0x150>
 80060ca:	4b45      	ldr	r3, [pc, #276]	; (80061e0 <pvPortMalloc+0x188>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d869      	bhi.n	80061a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80060d4:	4b43      	ldr	r3, [pc, #268]	; (80061e4 <pvPortMalloc+0x18c>)
 80060d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80060d8:	4b42      	ldr	r3, [pc, #264]	; (80061e4 <pvPortMalloc+0x18c>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80060de:	e004      	b.n	80060ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80060e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80060e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80060ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d903      	bls.n	80060fc <pvPortMalloc+0xa4>
 80060f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d1f1      	bne.n	80060e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80060fc:	4b36      	ldr	r3, [pc, #216]	; (80061d8 <pvPortMalloc+0x180>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006102:	429a      	cmp	r2, r3
 8006104:	d050      	beq.n	80061a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006106:	6a3b      	ldr	r3, [r7, #32]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	2208      	movs	r2, #8
 800610c:	4413      	add	r3, r2
 800610e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	6a3b      	ldr	r3, [r7, #32]
 8006116:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611a:	685a      	ldr	r2, [r3, #4]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	1ad2      	subs	r2, r2, r3
 8006120:	2308      	movs	r3, #8
 8006122:	005b      	lsls	r3, r3, #1
 8006124:	429a      	cmp	r2, r3
 8006126:	d91f      	bls.n	8006168 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006128:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	4413      	add	r3, r2
 800612e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006130:	69bb      	ldr	r3, [r7, #24]
 8006132:	f003 0307 	and.w	r3, r3, #7
 8006136:	2b00      	cmp	r3, #0
 8006138:	d00a      	beq.n	8006150 <pvPortMalloc+0xf8>
	__asm volatile
 800613a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800613e:	f383 8811 	msr	BASEPRI, r3
 8006142:	f3bf 8f6f 	isb	sy
 8006146:	f3bf 8f4f 	dsb	sy
 800614a:	613b      	str	r3, [r7, #16]
}
 800614c:	bf00      	nop
 800614e:	e7fe      	b.n	800614e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006152:	685a      	ldr	r2, [r3, #4]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	1ad2      	subs	r2, r2, r3
 8006158:	69bb      	ldr	r3, [r7, #24]
 800615a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800615c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006162:	69b8      	ldr	r0, [r7, #24]
 8006164:	f000 f908 	bl	8006378 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006168:	4b1d      	ldr	r3, [pc, #116]	; (80061e0 <pvPortMalloc+0x188>)
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	1ad3      	subs	r3, r2, r3
 8006172:	4a1b      	ldr	r2, [pc, #108]	; (80061e0 <pvPortMalloc+0x188>)
 8006174:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006176:	4b1a      	ldr	r3, [pc, #104]	; (80061e0 <pvPortMalloc+0x188>)
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	4b1b      	ldr	r3, [pc, #108]	; (80061e8 <pvPortMalloc+0x190>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	429a      	cmp	r2, r3
 8006180:	d203      	bcs.n	800618a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006182:	4b17      	ldr	r3, [pc, #92]	; (80061e0 <pvPortMalloc+0x188>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a18      	ldr	r2, [pc, #96]	; (80061e8 <pvPortMalloc+0x190>)
 8006188:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800618a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618c:	685a      	ldr	r2, [r3, #4]
 800618e:	4b13      	ldr	r3, [pc, #76]	; (80061dc <pvPortMalloc+0x184>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	431a      	orrs	r2, r3
 8006194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006196:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619a:	2200      	movs	r2, #0
 800619c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800619e:	4b13      	ldr	r3, [pc, #76]	; (80061ec <pvPortMalloc+0x194>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	3301      	adds	r3, #1
 80061a4:	4a11      	ldr	r2, [pc, #68]	; (80061ec <pvPortMalloc+0x194>)
 80061a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80061a8:	f7ff fa3a 	bl	8005620 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80061ac:	69fb      	ldr	r3, [r7, #28]
 80061ae:	f003 0307 	and.w	r3, r3, #7
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d00a      	beq.n	80061cc <pvPortMalloc+0x174>
	__asm volatile
 80061b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ba:	f383 8811 	msr	BASEPRI, r3
 80061be:	f3bf 8f6f 	isb	sy
 80061c2:	f3bf 8f4f 	dsb	sy
 80061c6:	60fb      	str	r3, [r7, #12]
}
 80061c8:	bf00      	nop
 80061ca:	e7fe      	b.n	80061ca <pvPortMalloc+0x172>
	return pvReturn;
 80061cc:	69fb      	ldr	r3, [r7, #28]
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3728      	adds	r7, #40	; 0x28
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}
 80061d6:	bf00      	nop
 80061d8:	20002c4c 	.word	0x20002c4c
 80061dc:	20002c60 	.word	0x20002c60
 80061e0:	20002c50 	.word	0x20002c50
 80061e4:	20002c44 	.word	0x20002c44
 80061e8:	20002c54 	.word	0x20002c54
 80061ec:	20002c58 	.word	0x20002c58

080061f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b086      	sub	sp, #24
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d04d      	beq.n	800629e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006202:	2308      	movs	r3, #8
 8006204:	425b      	negs	r3, r3
 8006206:	697a      	ldr	r2, [r7, #20]
 8006208:	4413      	add	r3, r2
 800620a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	685a      	ldr	r2, [r3, #4]
 8006214:	4b24      	ldr	r3, [pc, #144]	; (80062a8 <vPortFree+0xb8>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4013      	ands	r3, r2
 800621a:	2b00      	cmp	r3, #0
 800621c:	d10a      	bne.n	8006234 <vPortFree+0x44>
	__asm volatile
 800621e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006222:	f383 8811 	msr	BASEPRI, r3
 8006226:	f3bf 8f6f 	isb	sy
 800622a:	f3bf 8f4f 	dsb	sy
 800622e:	60fb      	str	r3, [r7, #12]
}
 8006230:	bf00      	nop
 8006232:	e7fe      	b.n	8006232 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d00a      	beq.n	8006252 <vPortFree+0x62>
	__asm volatile
 800623c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006240:	f383 8811 	msr	BASEPRI, r3
 8006244:	f3bf 8f6f 	isb	sy
 8006248:	f3bf 8f4f 	dsb	sy
 800624c:	60bb      	str	r3, [r7, #8]
}
 800624e:	bf00      	nop
 8006250:	e7fe      	b.n	8006250 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	685a      	ldr	r2, [r3, #4]
 8006256:	4b14      	ldr	r3, [pc, #80]	; (80062a8 <vPortFree+0xb8>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4013      	ands	r3, r2
 800625c:	2b00      	cmp	r3, #0
 800625e:	d01e      	beq.n	800629e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d11a      	bne.n	800629e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	685a      	ldr	r2, [r3, #4]
 800626c:	4b0e      	ldr	r3, [pc, #56]	; (80062a8 <vPortFree+0xb8>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	43db      	mvns	r3, r3
 8006272:	401a      	ands	r2, r3
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006278:	f7ff f9c4 	bl	8005604 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	685a      	ldr	r2, [r3, #4]
 8006280:	4b0a      	ldr	r3, [pc, #40]	; (80062ac <vPortFree+0xbc>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4413      	add	r3, r2
 8006286:	4a09      	ldr	r2, [pc, #36]	; (80062ac <vPortFree+0xbc>)
 8006288:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800628a:	6938      	ldr	r0, [r7, #16]
 800628c:	f000 f874 	bl	8006378 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006290:	4b07      	ldr	r3, [pc, #28]	; (80062b0 <vPortFree+0xc0>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	3301      	adds	r3, #1
 8006296:	4a06      	ldr	r2, [pc, #24]	; (80062b0 <vPortFree+0xc0>)
 8006298:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800629a:	f7ff f9c1 	bl	8005620 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800629e:	bf00      	nop
 80062a0:	3718      	adds	r7, #24
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
 80062a6:	bf00      	nop
 80062a8:	20002c60 	.word	0x20002c60
 80062ac:	20002c50 	.word	0x20002c50
 80062b0:	20002c5c 	.word	0x20002c5c

080062b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80062b4:	b480      	push	{r7}
 80062b6:	b085      	sub	sp, #20
 80062b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80062ba:	f242 7310 	movw	r3, #10000	; 0x2710
 80062be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80062c0:	4b27      	ldr	r3, [pc, #156]	; (8006360 <prvHeapInit+0xac>)
 80062c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f003 0307 	and.w	r3, r3, #7
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d00c      	beq.n	80062e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	3307      	adds	r3, #7
 80062d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f023 0307 	bic.w	r3, r3, #7
 80062da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80062dc:	68ba      	ldr	r2, [r7, #8]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	1ad3      	subs	r3, r2, r3
 80062e2:	4a1f      	ldr	r2, [pc, #124]	; (8006360 <prvHeapInit+0xac>)
 80062e4:	4413      	add	r3, r2
 80062e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80062ec:	4a1d      	ldr	r2, [pc, #116]	; (8006364 <prvHeapInit+0xb0>)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80062f2:	4b1c      	ldr	r3, [pc, #112]	; (8006364 <prvHeapInit+0xb0>)
 80062f4:	2200      	movs	r2, #0
 80062f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	68ba      	ldr	r2, [r7, #8]
 80062fc:	4413      	add	r3, r2
 80062fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006300:	2208      	movs	r2, #8
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	1a9b      	subs	r3, r3, r2
 8006306:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f023 0307 	bic.w	r3, r3, #7
 800630e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	4a15      	ldr	r2, [pc, #84]	; (8006368 <prvHeapInit+0xb4>)
 8006314:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006316:	4b14      	ldr	r3, [pc, #80]	; (8006368 <prvHeapInit+0xb4>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	2200      	movs	r2, #0
 800631c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800631e:	4b12      	ldr	r3, [pc, #72]	; (8006368 <prvHeapInit+0xb4>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	2200      	movs	r2, #0
 8006324:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	68fa      	ldr	r2, [r7, #12]
 800632e:	1ad2      	subs	r2, r2, r3
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006334:	4b0c      	ldr	r3, [pc, #48]	; (8006368 <prvHeapInit+0xb4>)
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	4a0a      	ldr	r2, [pc, #40]	; (800636c <prvHeapInit+0xb8>)
 8006342:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	4a09      	ldr	r2, [pc, #36]	; (8006370 <prvHeapInit+0xbc>)
 800634a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800634c:	4b09      	ldr	r3, [pc, #36]	; (8006374 <prvHeapInit+0xc0>)
 800634e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006352:	601a      	str	r2, [r3, #0]
}
 8006354:	bf00      	nop
 8006356:	3714      	adds	r7, #20
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr
 8006360:	20000534 	.word	0x20000534
 8006364:	20002c44 	.word	0x20002c44
 8006368:	20002c4c 	.word	0x20002c4c
 800636c:	20002c54 	.word	0x20002c54
 8006370:	20002c50 	.word	0x20002c50
 8006374:	20002c60 	.word	0x20002c60

08006378 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006378:	b480      	push	{r7}
 800637a:	b085      	sub	sp, #20
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006380:	4b28      	ldr	r3, [pc, #160]	; (8006424 <prvInsertBlockIntoFreeList+0xac>)
 8006382:	60fb      	str	r3, [r7, #12]
 8006384:	e002      	b.n	800638c <prvInsertBlockIntoFreeList+0x14>
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	60fb      	str	r3, [r7, #12]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	687a      	ldr	r2, [r7, #4]
 8006392:	429a      	cmp	r2, r3
 8006394:	d8f7      	bhi.n	8006386 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	68ba      	ldr	r2, [r7, #8]
 80063a0:	4413      	add	r3, r2
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d108      	bne.n	80063ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	685a      	ldr	r2, [r3, #4]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	441a      	add	r2, r3
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	68ba      	ldr	r2, [r7, #8]
 80063c4:	441a      	add	r2, r3
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d118      	bne.n	8006400 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	4b15      	ldr	r3, [pc, #84]	; (8006428 <prvInsertBlockIntoFreeList+0xb0>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d00d      	beq.n	80063f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	685a      	ldr	r2, [r3, #4]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	441a      	add	r2, r3
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	601a      	str	r2, [r3, #0]
 80063f4:	e008      	b.n	8006408 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80063f6:	4b0c      	ldr	r3, [pc, #48]	; (8006428 <prvInsertBlockIntoFreeList+0xb0>)
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	601a      	str	r2, [r3, #0]
 80063fe:	e003      	b.n	8006408 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006408:	68fa      	ldr	r2, [r7, #12]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	429a      	cmp	r2, r3
 800640e:	d002      	beq.n	8006416 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006416:	bf00      	nop
 8006418:	3714      	adds	r7, #20
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr
 8006422:	bf00      	nop
 8006424:	20002c44 	.word	0x20002c44
 8006428:	20002c4c 	.word	0x20002c4c

0800642c <sniprintf>:
 800642c:	b40c      	push	{r2, r3}
 800642e:	b530      	push	{r4, r5, lr}
 8006430:	4b17      	ldr	r3, [pc, #92]	; (8006490 <sniprintf+0x64>)
 8006432:	1e0c      	subs	r4, r1, #0
 8006434:	681d      	ldr	r5, [r3, #0]
 8006436:	b09d      	sub	sp, #116	; 0x74
 8006438:	da08      	bge.n	800644c <sniprintf+0x20>
 800643a:	238b      	movs	r3, #139	; 0x8b
 800643c:	602b      	str	r3, [r5, #0]
 800643e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006442:	b01d      	add	sp, #116	; 0x74
 8006444:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006448:	b002      	add	sp, #8
 800644a:	4770      	bx	lr
 800644c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006450:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006454:	bf14      	ite	ne
 8006456:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800645a:	4623      	moveq	r3, r4
 800645c:	9304      	str	r3, [sp, #16]
 800645e:	9307      	str	r3, [sp, #28]
 8006460:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006464:	9002      	str	r0, [sp, #8]
 8006466:	9006      	str	r0, [sp, #24]
 8006468:	f8ad 3016 	strh.w	r3, [sp, #22]
 800646c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800646e:	ab21      	add	r3, sp, #132	; 0x84
 8006470:	a902      	add	r1, sp, #8
 8006472:	4628      	mov	r0, r5
 8006474:	9301      	str	r3, [sp, #4]
 8006476:	f000 f9a1 	bl	80067bc <_svfiprintf_r>
 800647a:	1c43      	adds	r3, r0, #1
 800647c:	bfbc      	itt	lt
 800647e:	238b      	movlt	r3, #139	; 0x8b
 8006480:	602b      	strlt	r3, [r5, #0]
 8006482:	2c00      	cmp	r4, #0
 8006484:	d0dd      	beq.n	8006442 <sniprintf+0x16>
 8006486:	9b02      	ldr	r3, [sp, #8]
 8006488:	2200      	movs	r2, #0
 800648a:	701a      	strb	r2, [r3, #0]
 800648c:	e7d9      	b.n	8006442 <sniprintf+0x16>
 800648e:	bf00      	nop
 8006490:	2000005c 	.word	0x2000005c

08006494 <memset>:
 8006494:	4402      	add	r2, r0
 8006496:	4603      	mov	r3, r0
 8006498:	4293      	cmp	r3, r2
 800649a:	d100      	bne.n	800649e <memset+0xa>
 800649c:	4770      	bx	lr
 800649e:	f803 1b01 	strb.w	r1, [r3], #1
 80064a2:	e7f9      	b.n	8006498 <memset+0x4>

080064a4 <__errno>:
 80064a4:	4b01      	ldr	r3, [pc, #4]	; (80064ac <__errno+0x8>)
 80064a6:	6818      	ldr	r0, [r3, #0]
 80064a8:	4770      	bx	lr
 80064aa:	bf00      	nop
 80064ac:	2000005c 	.word	0x2000005c

080064b0 <__libc_init_array>:
 80064b0:	b570      	push	{r4, r5, r6, lr}
 80064b2:	4d0d      	ldr	r5, [pc, #52]	; (80064e8 <__libc_init_array+0x38>)
 80064b4:	4c0d      	ldr	r4, [pc, #52]	; (80064ec <__libc_init_array+0x3c>)
 80064b6:	1b64      	subs	r4, r4, r5
 80064b8:	10a4      	asrs	r4, r4, #2
 80064ba:	2600      	movs	r6, #0
 80064bc:	42a6      	cmp	r6, r4
 80064be:	d109      	bne.n	80064d4 <__libc_init_array+0x24>
 80064c0:	4d0b      	ldr	r5, [pc, #44]	; (80064f0 <__libc_init_array+0x40>)
 80064c2:	4c0c      	ldr	r4, [pc, #48]	; (80064f4 <__libc_init_array+0x44>)
 80064c4:	f000 fc6a 	bl	8006d9c <_init>
 80064c8:	1b64      	subs	r4, r4, r5
 80064ca:	10a4      	asrs	r4, r4, #2
 80064cc:	2600      	movs	r6, #0
 80064ce:	42a6      	cmp	r6, r4
 80064d0:	d105      	bne.n	80064de <__libc_init_array+0x2e>
 80064d2:	bd70      	pop	{r4, r5, r6, pc}
 80064d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80064d8:	4798      	blx	r3
 80064da:	3601      	adds	r6, #1
 80064dc:	e7ee      	b.n	80064bc <__libc_init_array+0xc>
 80064de:	f855 3b04 	ldr.w	r3, [r5], #4
 80064e2:	4798      	blx	r3
 80064e4:	3601      	adds	r6, #1
 80064e6:	e7f2      	b.n	80064ce <__libc_init_array+0x1e>
 80064e8:	08006e8c 	.word	0x08006e8c
 80064ec:	08006e8c 	.word	0x08006e8c
 80064f0:	08006e8c 	.word	0x08006e8c
 80064f4:	08006e90 	.word	0x08006e90

080064f8 <__retarget_lock_acquire_recursive>:
 80064f8:	4770      	bx	lr

080064fa <__retarget_lock_release_recursive>:
 80064fa:	4770      	bx	lr

080064fc <memcpy>:
 80064fc:	440a      	add	r2, r1
 80064fe:	4291      	cmp	r1, r2
 8006500:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006504:	d100      	bne.n	8006508 <memcpy+0xc>
 8006506:	4770      	bx	lr
 8006508:	b510      	push	{r4, lr}
 800650a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800650e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006512:	4291      	cmp	r1, r2
 8006514:	d1f9      	bne.n	800650a <memcpy+0xe>
 8006516:	bd10      	pop	{r4, pc}

08006518 <_free_r>:
 8006518:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800651a:	2900      	cmp	r1, #0
 800651c:	d044      	beq.n	80065a8 <_free_r+0x90>
 800651e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006522:	9001      	str	r0, [sp, #4]
 8006524:	2b00      	cmp	r3, #0
 8006526:	f1a1 0404 	sub.w	r4, r1, #4
 800652a:	bfb8      	it	lt
 800652c:	18e4      	addlt	r4, r4, r3
 800652e:	f000 f8df 	bl	80066f0 <__malloc_lock>
 8006532:	4a1e      	ldr	r2, [pc, #120]	; (80065ac <_free_r+0x94>)
 8006534:	9801      	ldr	r0, [sp, #4]
 8006536:	6813      	ldr	r3, [r2, #0]
 8006538:	b933      	cbnz	r3, 8006548 <_free_r+0x30>
 800653a:	6063      	str	r3, [r4, #4]
 800653c:	6014      	str	r4, [r2, #0]
 800653e:	b003      	add	sp, #12
 8006540:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006544:	f000 b8da 	b.w	80066fc <__malloc_unlock>
 8006548:	42a3      	cmp	r3, r4
 800654a:	d908      	bls.n	800655e <_free_r+0x46>
 800654c:	6825      	ldr	r5, [r4, #0]
 800654e:	1961      	adds	r1, r4, r5
 8006550:	428b      	cmp	r3, r1
 8006552:	bf01      	itttt	eq
 8006554:	6819      	ldreq	r1, [r3, #0]
 8006556:	685b      	ldreq	r3, [r3, #4]
 8006558:	1949      	addeq	r1, r1, r5
 800655a:	6021      	streq	r1, [r4, #0]
 800655c:	e7ed      	b.n	800653a <_free_r+0x22>
 800655e:	461a      	mov	r2, r3
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	b10b      	cbz	r3, 8006568 <_free_r+0x50>
 8006564:	42a3      	cmp	r3, r4
 8006566:	d9fa      	bls.n	800655e <_free_r+0x46>
 8006568:	6811      	ldr	r1, [r2, #0]
 800656a:	1855      	adds	r5, r2, r1
 800656c:	42a5      	cmp	r5, r4
 800656e:	d10b      	bne.n	8006588 <_free_r+0x70>
 8006570:	6824      	ldr	r4, [r4, #0]
 8006572:	4421      	add	r1, r4
 8006574:	1854      	adds	r4, r2, r1
 8006576:	42a3      	cmp	r3, r4
 8006578:	6011      	str	r1, [r2, #0]
 800657a:	d1e0      	bne.n	800653e <_free_r+0x26>
 800657c:	681c      	ldr	r4, [r3, #0]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	6053      	str	r3, [r2, #4]
 8006582:	440c      	add	r4, r1
 8006584:	6014      	str	r4, [r2, #0]
 8006586:	e7da      	b.n	800653e <_free_r+0x26>
 8006588:	d902      	bls.n	8006590 <_free_r+0x78>
 800658a:	230c      	movs	r3, #12
 800658c:	6003      	str	r3, [r0, #0]
 800658e:	e7d6      	b.n	800653e <_free_r+0x26>
 8006590:	6825      	ldr	r5, [r4, #0]
 8006592:	1961      	adds	r1, r4, r5
 8006594:	428b      	cmp	r3, r1
 8006596:	bf04      	itt	eq
 8006598:	6819      	ldreq	r1, [r3, #0]
 800659a:	685b      	ldreq	r3, [r3, #4]
 800659c:	6063      	str	r3, [r4, #4]
 800659e:	bf04      	itt	eq
 80065a0:	1949      	addeq	r1, r1, r5
 80065a2:	6021      	streq	r1, [r4, #0]
 80065a4:	6054      	str	r4, [r2, #4]
 80065a6:	e7ca      	b.n	800653e <_free_r+0x26>
 80065a8:	b003      	add	sp, #12
 80065aa:	bd30      	pop	{r4, r5, pc}
 80065ac:	20002da4 	.word	0x20002da4

080065b0 <sbrk_aligned>:
 80065b0:	b570      	push	{r4, r5, r6, lr}
 80065b2:	4e0e      	ldr	r6, [pc, #56]	; (80065ec <sbrk_aligned+0x3c>)
 80065b4:	460c      	mov	r4, r1
 80065b6:	6831      	ldr	r1, [r6, #0]
 80065b8:	4605      	mov	r5, r0
 80065ba:	b911      	cbnz	r1, 80065c2 <sbrk_aligned+0x12>
 80065bc:	f000 fba6 	bl	8006d0c <_sbrk_r>
 80065c0:	6030      	str	r0, [r6, #0]
 80065c2:	4621      	mov	r1, r4
 80065c4:	4628      	mov	r0, r5
 80065c6:	f000 fba1 	bl	8006d0c <_sbrk_r>
 80065ca:	1c43      	adds	r3, r0, #1
 80065cc:	d00a      	beq.n	80065e4 <sbrk_aligned+0x34>
 80065ce:	1cc4      	adds	r4, r0, #3
 80065d0:	f024 0403 	bic.w	r4, r4, #3
 80065d4:	42a0      	cmp	r0, r4
 80065d6:	d007      	beq.n	80065e8 <sbrk_aligned+0x38>
 80065d8:	1a21      	subs	r1, r4, r0
 80065da:	4628      	mov	r0, r5
 80065dc:	f000 fb96 	bl	8006d0c <_sbrk_r>
 80065e0:	3001      	adds	r0, #1
 80065e2:	d101      	bne.n	80065e8 <sbrk_aligned+0x38>
 80065e4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80065e8:	4620      	mov	r0, r4
 80065ea:	bd70      	pop	{r4, r5, r6, pc}
 80065ec:	20002da8 	.word	0x20002da8

080065f0 <_malloc_r>:
 80065f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065f4:	1ccd      	adds	r5, r1, #3
 80065f6:	f025 0503 	bic.w	r5, r5, #3
 80065fa:	3508      	adds	r5, #8
 80065fc:	2d0c      	cmp	r5, #12
 80065fe:	bf38      	it	cc
 8006600:	250c      	movcc	r5, #12
 8006602:	2d00      	cmp	r5, #0
 8006604:	4607      	mov	r7, r0
 8006606:	db01      	blt.n	800660c <_malloc_r+0x1c>
 8006608:	42a9      	cmp	r1, r5
 800660a:	d905      	bls.n	8006618 <_malloc_r+0x28>
 800660c:	230c      	movs	r3, #12
 800660e:	603b      	str	r3, [r7, #0]
 8006610:	2600      	movs	r6, #0
 8006612:	4630      	mov	r0, r6
 8006614:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006618:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80066ec <_malloc_r+0xfc>
 800661c:	f000 f868 	bl	80066f0 <__malloc_lock>
 8006620:	f8d8 3000 	ldr.w	r3, [r8]
 8006624:	461c      	mov	r4, r3
 8006626:	bb5c      	cbnz	r4, 8006680 <_malloc_r+0x90>
 8006628:	4629      	mov	r1, r5
 800662a:	4638      	mov	r0, r7
 800662c:	f7ff ffc0 	bl	80065b0 <sbrk_aligned>
 8006630:	1c43      	adds	r3, r0, #1
 8006632:	4604      	mov	r4, r0
 8006634:	d155      	bne.n	80066e2 <_malloc_r+0xf2>
 8006636:	f8d8 4000 	ldr.w	r4, [r8]
 800663a:	4626      	mov	r6, r4
 800663c:	2e00      	cmp	r6, #0
 800663e:	d145      	bne.n	80066cc <_malloc_r+0xdc>
 8006640:	2c00      	cmp	r4, #0
 8006642:	d048      	beq.n	80066d6 <_malloc_r+0xe6>
 8006644:	6823      	ldr	r3, [r4, #0]
 8006646:	4631      	mov	r1, r6
 8006648:	4638      	mov	r0, r7
 800664a:	eb04 0903 	add.w	r9, r4, r3
 800664e:	f000 fb5d 	bl	8006d0c <_sbrk_r>
 8006652:	4581      	cmp	r9, r0
 8006654:	d13f      	bne.n	80066d6 <_malloc_r+0xe6>
 8006656:	6821      	ldr	r1, [r4, #0]
 8006658:	1a6d      	subs	r5, r5, r1
 800665a:	4629      	mov	r1, r5
 800665c:	4638      	mov	r0, r7
 800665e:	f7ff ffa7 	bl	80065b0 <sbrk_aligned>
 8006662:	3001      	adds	r0, #1
 8006664:	d037      	beq.n	80066d6 <_malloc_r+0xe6>
 8006666:	6823      	ldr	r3, [r4, #0]
 8006668:	442b      	add	r3, r5
 800666a:	6023      	str	r3, [r4, #0]
 800666c:	f8d8 3000 	ldr.w	r3, [r8]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d038      	beq.n	80066e6 <_malloc_r+0xf6>
 8006674:	685a      	ldr	r2, [r3, #4]
 8006676:	42a2      	cmp	r2, r4
 8006678:	d12b      	bne.n	80066d2 <_malloc_r+0xe2>
 800667a:	2200      	movs	r2, #0
 800667c:	605a      	str	r2, [r3, #4]
 800667e:	e00f      	b.n	80066a0 <_malloc_r+0xb0>
 8006680:	6822      	ldr	r2, [r4, #0]
 8006682:	1b52      	subs	r2, r2, r5
 8006684:	d41f      	bmi.n	80066c6 <_malloc_r+0xd6>
 8006686:	2a0b      	cmp	r2, #11
 8006688:	d917      	bls.n	80066ba <_malloc_r+0xca>
 800668a:	1961      	adds	r1, r4, r5
 800668c:	42a3      	cmp	r3, r4
 800668e:	6025      	str	r5, [r4, #0]
 8006690:	bf18      	it	ne
 8006692:	6059      	strne	r1, [r3, #4]
 8006694:	6863      	ldr	r3, [r4, #4]
 8006696:	bf08      	it	eq
 8006698:	f8c8 1000 	streq.w	r1, [r8]
 800669c:	5162      	str	r2, [r4, r5]
 800669e:	604b      	str	r3, [r1, #4]
 80066a0:	4638      	mov	r0, r7
 80066a2:	f104 060b 	add.w	r6, r4, #11
 80066a6:	f000 f829 	bl	80066fc <__malloc_unlock>
 80066aa:	f026 0607 	bic.w	r6, r6, #7
 80066ae:	1d23      	adds	r3, r4, #4
 80066b0:	1af2      	subs	r2, r6, r3
 80066b2:	d0ae      	beq.n	8006612 <_malloc_r+0x22>
 80066b4:	1b9b      	subs	r3, r3, r6
 80066b6:	50a3      	str	r3, [r4, r2]
 80066b8:	e7ab      	b.n	8006612 <_malloc_r+0x22>
 80066ba:	42a3      	cmp	r3, r4
 80066bc:	6862      	ldr	r2, [r4, #4]
 80066be:	d1dd      	bne.n	800667c <_malloc_r+0x8c>
 80066c0:	f8c8 2000 	str.w	r2, [r8]
 80066c4:	e7ec      	b.n	80066a0 <_malloc_r+0xb0>
 80066c6:	4623      	mov	r3, r4
 80066c8:	6864      	ldr	r4, [r4, #4]
 80066ca:	e7ac      	b.n	8006626 <_malloc_r+0x36>
 80066cc:	4634      	mov	r4, r6
 80066ce:	6876      	ldr	r6, [r6, #4]
 80066d0:	e7b4      	b.n	800663c <_malloc_r+0x4c>
 80066d2:	4613      	mov	r3, r2
 80066d4:	e7cc      	b.n	8006670 <_malloc_r+0x80>
 80066d6:	230c      	movs	r3, #12
 80066d8:	603b      	str	r3, [r7, #0]
 80066da:	4638      	mov	r0, r7
 80066dc:	f000 f80e 	bl	80066fc <__malloc_unlock>
 80066e0:	e797      	b.n	8006612 <_malloc_r+0x22>
 80066e2:	6025      	str	r5, [r4, #0]
 80066e4:	e7dc      	b.n	80066a0 <_malloc_r+0xb0>
 80066e6:	605b      	str	r3, [r3, #4]
 80066e8:	deff      	udf	#255	; 0xff
 80066ea:	bf00      	nop
 80066ec:	20002da4 	.word	0x20002da4

080066f0 <__malloc_lock>:
 80066f0:	4801      	ldr	r0, [pc, #4]	; (80066f8 <__malloc_lock+0x8>)
 80066f2:	f7ff bf01 	b.w	80064f8 <__retarget_lock_acquire_recursive>
 80066f6:	bf00      	nop
 80066f8:	20002da0 	.word	0x20002da0

080066fc <__malloc_unlock>:
 80066fc:	4801      	ldr	r0, [pc, #4]	; (8006704 <__malloc_unlock+0x8>)
 80066fe:	f7ff befc 	b.w	80064fa <__retarget_lock_release_recursive>
 8006702:	bf00      	nop
 8006704:	20002da0 	.word	0x20002da0

08006708 <__ssputs_r>:
 8006708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800670c:	688e      	ldr	r6, [r1, #8]
 800670e:	461f      	mov	r7, r3
 8006710:	42be      	cmp	r6, r7
 8006712:	680b      	ldr	r3, [r1, #0]
 8006714:	4682      	mov	sl, r0
 8006716:	460c      	mov	r4, r1
 8006718:	4690      	mov	r8, r2
 800671a:	d82c      	bhi.n	8006776 <__ssputs_r+0x6e>
 800671c:	898a      	ldrh	r2, [r1, #12]
 800671e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006722:	d026      	beq.n	8006772 <__ssputs_r+0x6a>
 8006724:	6965      	ldr	r5, [r4, #20]
 8006726:	6909      	ldr	r1, [r1, #16]
 8006728:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800672c:	eba3 0901 	sub.w	r9, r3, r1
 8006730:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006734:	1c7b      	adds	r3, r7, #1
 8006736:	444b      	add	r3, r9
 8006738:	106d      	asrs	r5, r5, #1
 800673a:	429d      	cmp	r5, r3
 800673c:	bf38      	it	cc
 800673e:	461d      	movcc	r5, r3
 8006740:	0553      	lsls	r3, r2, #21
 8006742:	d527      	bpl.n	8006794 <__ssputs_r+0x8c>
 8006744:	4629      	mov	r1, r5
 8006746:	f7ff ff53 	bl	80065f0 <_malloc_r>
 800674a:	4606      	mov	r6, r0
 800674c:	b360      	cbz	r0, 80067a8 <__ssputs_r+0xa0>
 800674e:	6921      	ldr	r1, [r4, #16]
 8006750:	464a      	mov	r2, r9
 8006752:	f7ff fed3 	bl	80064fc <memcpy>
 8006756:	89a3      	ldrh	r3, [r4, #12]
 8006758:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800675c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006760:	81a3      	strh	r3, [r4, #12]
 8006762:	6126      	str	r6, [r4, #16]
 8006764:	6165      	str	r5, [r4, #20]
 8006766:	444e      	add	r6, r9
 8006768:	eba5 0509 	sub.w	r5, r5, r9
 800676c:	6026      	str	r6, [r4, #0]
 800676e:	60a5      	str	r5, [r4, #8]
 8006770:	463e      	mov	r6, r7
 8006772:	42be      	cmp	r6, r7
 8006774:	d900      	bls.n	8006778 <__ssputs_r+0x70>
 8006776:	463e      	mov	r6, r7
 8006778:	6820      	ldr	r0, [r4, #0]
 800677a:	4632      	mov	r2, r6
 800677c:	4641      	mov	r1, r8
 800677e:	f000 faab 	bl	8006cd8 <memmove>
 8006782:	68a3      	ldr	r3, [r4, #8]
 8006784:	1b9b      	subs	r3, r3, r6
 8006786:	60a3      	str	r3, [r4, #8]
 8006788:	6823      	ldr	r3, [r4, #0]
 800678a:	4433      	add	r3, r6
 800678c:	6023      	str	r3, [r4, #0]
 800678e:	2000      	movs	r0, #0
 8006790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006794:	462a      	mov	r2, r5
 8006796:	f000 fac9 	bl	8006d2c <_realloc_r>
 800679a:	4606      	mov	r6, r0
 800679c:	2800      	cmp	r0, #0
 800679e:	d1e0      	bne.n	8006762 <__ssputs_r+0x5a>
 80067a0:	6921      	ldr	r1, [r4, #16]
 80067a2:	4650      	mov	r0, sl
 80067a4:	f7ff feb8 	bl	8006518 <_free_r>
 80067a8:	230c      	movs	r3, #12
 80067aa:	f8ca 3000 	str.w	r3, [sl]
 80067ae:	89a3      	ldrh	r3, [r4, #12]
 80067b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067b4:	81a3      	strh	r3, [r4, #12]
 80067b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80067ba:	e7e9      	b.n	8006790 <__ssputs_r+0x88>

080067bc <_svfiprintf_r>:
 80067bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067c0:	4698      	mov	r8, r3
 80067c2:	898b      	ldrh	r3, [r1, #12]
 80067c4:	061b      	lsls	r3, r3, #24
 80067c6:	b09d      	sub	sp, #116	; 0x74
 80067c8:	4607      	mov	r7, r0
 80067ca:	460d      	mov	r5, r1
 80067cc:	4614      	mov	r4, r2
 80067ce:	d50e      	bpl.n	80067ee <_svfiprintf_r+0x32>
 80067d0:	690b      	ldr	r3, [r1, #16]
 80067d2:	b963      	cbnz	r3, 80067ee <_svfiprintf_r+0x32>
 80067d4:	2140      	movs	r1, #64	; 0x40
 80067d6:	f7ff ff0b 	bl	80065f0 <_malloc_r>
 80067da:	6028      	str	r0, [r5, #0]
 80067dc:	6128      	str	r0, [r5, #16]
 80067de:	b920      	cbnz	r0, 80067ea <_svfiprintf_r+0x2e>
 80067e0:	230c      	movs	r3, #12
 80067e2:	603b      	str	r3, [r7, #0]
 80067e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80067e8:	e0d0      	b.n	800698c <_svfiprintf_r+0x1d0>
 80067ea:	2340      	movs	r3, #64	; 0x40
 80067ec:	616b      	str	r3, [r5, #20]
 80067ee:	2300      	movs	r3, #0
 80067f0:	9309      	str	r3, [sp, #36]	; 0x24
 80067f2:	2320      	movs	r3, #32
 80067f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80067f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80067fc:	2330      	movs	r3, #48	; 0x30
 80067fe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80069a4 <_svfiprintf_r+0x1e8>
 8006802:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006806:	f04f 0901 	mov.w	r9, #1
 800680a:	4623      	mov	r3, r4
 800680c:	469a      	mov	sl, r3
 800680e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006812:	b10a      	cbz	r2, 8006818 <_svfiprintf_r+0x5c>
 8006814:	2a25      	cmp	r2, #37	; 0x25
 8006816:	d1f9      	bne.n	800680c <_svfiprintf_r+0x50>
 8006818:	ebba 0b04 	subs.w	fp, sl, r4
 800681c:	d00b      	beq.n	8006836 <_svfiprintf_r+0x7a>
 800681e:	465b      	mov	r3, fp
 8006820:	4622      	mov	r2, r4
 8006822:	4629      	mov	r1, r5
 8006824:	4638      	mov	r0, r7
 8006826:	f7ff ff6f 	bl	8006708 <__ssputs_r>
 800682a:	3001      	adds	r0, #1
 800682c:	f000 80a9 	beq.w	8006982 <_svfiprintf_r+0x1c6>
 8006830:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006832:	445a      	add	r2, fp
 8006834:	9209      	str	r2, [sp, #36]	; 0x24
 8006836:	f89a 3000 	ldrb.w	r3, [sl]
 800683a:	2b00      	cmp	r3, #0
 800683c:	f000 80a1 	beq.w	8006982 <_svfiprintf_r+0x1c6>
 8006840:	2300      	movs	r3, #0
 8006842:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006846:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800684a:	f10a 0a01 	add.w	sl, sl, #1
 800684e:	9304      	str	r3, [sp, #16]
 8006850:	9307      	str	r3, [sp, #28]
 8006852:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006856:	931a      	str	r3, [sp, #104]	; 0x68
 8006858:	4654      	mov	r4, sl
 800685a:	2205      	movs	r2, #5
 800685c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006860:	4850      	ldr	r0, [pc, #320]	; (80069a4 <_svfiprintf_r+0x1e8>)
 8006862:	f7f9 fcbd 	bl	80001e0 <memchr>
 8006866:	9a04      	ldr	r2, [sp, #16]
 8006868:	b9d8      	cbnz	r0, 80068a2 <_svfiprintf_r+0xe6>
 800686a:	06d0      	lsls	r0, r2, #27
 800686c:	bf44      	itt	mi
 800686e:	2320      	movmi	r3, #32
 8006870:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006874:	0711      	lsls	r1, r2, #28
 8006876:	bf44      	itt	mi
 8006878:	232b      	movmi	r3, #43	; 0x2b
 800687a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800687e:	f89a 3000 	ldrb.w	r3, [sl]
 8006882:	2b2a      	cmp	r3, #42	; 0x2a
 8006884:	d015      	beq.n	80068b2 <_svfiprintf_r+0xf6>
 8006886:	9a07      	ldr	r2, [sp, #28]
 8006888:	4654      	mov	r4, sl
 800688a:	2000      	movs	r0, #0
 800688c:	f04f 0c0a 	mov.w	ip, #10
 8006890:	4621      	mov	r1, r4
 8006892:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006896:	3b30      	subs	r3, #48	; 0x30
 8006898:	2b09      	cmp	r3, #9
 800689a:	d94d      	bls.n	8006938 <_svfiprintf_r+0x17c>
 800689c:	b1b0      	cbz	r0, 80068cc <_svfiprintf_r+0x110>
 800689e:	9207      	str	r2, [sp, #28]
 80068a0:	e014      	b.n	80068cc <_svfiprintf_r+0x110>
 80068a2:	eba0 0308 	sub.w	r3, r0, r8
 80068a6:	fa09 f303 	lsl.w	r3, r9, r3
 80068aa:	4313      	orrs	r3, r2
 80068ac:	9304      	str	r3, [sp, #16]
 80068ae:	46a2      	mov	sl, r4
 80068b0:	e7d2      	b.n	8006858 <_svfiprintf_r+0x9c>
 80068b2:	9b03      	ldr	r3, [sp, #12]
 80068b4:	1d19      	adds	r1, r3, #4
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	9103      	str	r1, [sp, #12]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	bfbb      	ittet	lt
 80068be:	425b      	neglt	r3, r3
 80068c0:	f042 0202 	orrlt.w	r2, r2, #2
 80068c4:	9307      	strge	r3, [sp, #28]
 80068c6:	9307      	strlt	r3, [sp, #28]
 80068c8:	bfb8      	it	lt
 80068ca:	9204      	strlt	r2, [sp, #16]
 80068cc:	7823      	ldrb	r3, [r4, #0]
 80068ce:	2b2e      	cmp	r3, #46	; 0x2e
 80068d0:	d10c      	bne.n	80068ec <_svfiprintf_r+0x130>
 80068d2:	7863      	ldrb	r3, [r4, #1]
 80068d4:	2b2a      	cmp	r3, #42	; 0x2a
 80068d6:	d134      	bne.n	8006942 <_svfiprintf_r+0x186>
 80068d8:	9b03      	ldr	r3, [sp, #12]
 80068da:	1d1a      	adds	r2, r3, #4
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	9203      	str	r2, [sp, #12]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	bfb8      	it	lt
 80068e4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80068e8:	3402      	adds	r4, #2
 80068ea:	9305      	str	r3, [sp, #20]
 80068ec:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80069b4 <_svfiprintf_r+0x1f8>
 80068f0:	7821      	ldrb	r1, [r4, #0]
 80068f2:	2203      	movs	r2, #3
 80068f4:	4650      	mov	r0, sl
 80068f6:	f7f9 fc73 	bl	80001e0 <memchr>
 80068fa:	b138      	cbz	r0, 800690c <_svfiprintf_r+0x150>
 80068fc:	9b04      	ldr	r3, [sp, #16]
 80068fe:	eba0 000a 	sub.w	r0, r0, sl
 8006902:	2240      	movs	r2, #64	; 0x40
 8006904:	4082      	lsls	r2, r0
 8006906:	4313      	orrs	r3, r2
 8006908:	3401      	adds	r4, #1
 800690a:	9304      	str	r3, [sp, #16]
 800690c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006910:	4825      	ldr	r0, [pc, #148]	; (80069a8 <_svfiprintf_r+0x1ec>)
 8006912:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006916:	2206      	movs	r2, #6
 8006918:	f7f9 fc62 	bl	80001e0 <memchr>
 800691c:	2800      	cmp	r0, #0
 800691e:	d038      	beq.n	8006992 <_svfiprintf_r+0x1d6>
 8006920:	4b22      	ldr	r3, [pc, #136]	; (80069ac <_svfiprintf_r+0x1f0>)
 8006922:	bb1b      	cbnz	r3, 800696c <_svfiprintf_r+0x1b0>
 8006924:	9b03      	ldr	r3, [sp, #12]
 8006926:	3307      	adds	r3, #7
 8006928:	f023 0307 	bic.w	r3, r3, #7
 800692c:	3308      	adds	r3, #8
 800692e:	9303      	str	r3, [sp, #12]
 8006930:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006932:	4433      	add	r3, r6
 8006934:	9309      	str	r3, [sp, #36]	; 0x24
 8006936:	e768      	b.n	800680a <_svfiprintf_r+0x4e>
 8006938:	fb0c 3202 	mla	r2, ip, r2, r3
 800693c:	460c      	mov	r4, r1
 800693e:	2001      	movs	r0, #1
 8006940:	e7a6      	b.n	8006890 <_svfiprintf_r+0xd4>
 8006942:	2300      	movs	r3, #0
 8006944:	3401      	adds	r4, #1
 8006946:	9305      	str	r3, [sp, #20]
 8006948:	4619      	mov	r1, r3
 800694a:	f04f 0c0a 	mov.w	ip, #10
 800694e:	4620      	mov	r0, r4
 8006950:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006954:	3a30      	subs	r2, #48	; 0x30
 8006956:	2a09      	cmp	r2, #9
 8006958:	d903      	bls.n	8006962 <_svfiprintf_r+0x1a6>
 800695a:	2b00      	cmp	r3, #0
 800695c:	d0c6      	beq.n	80068ec <_svfiprintf_r+0x130>
 800695e:	9105      	str	r1, [sp, #20]
 8006960:	e7c4      	b.n	80068ec <_svfiprintf_r+0x130>
 8006962:	fb0c 2101 	mla	r1, ip, r1, r2
 8006966:	4604      	mov	r4, r0
 8006968:	2301      	movs	r3, #1
 800696a:	e7f0      	b.n	800694e <_svfiprintf_r+0x192>
 800696c:	ab03      	add	r3, sp, #12
 800696e:	9300      	str	r3, [sp, #0]
 8006970:	462a      	mov	r2, r5
 8006972:	4b0f      	ldr	r3, [pc, #60]	; (80069b0 <_svfiprintf_r+0x1f4>)
 8006974:	a904      	add	r1, sp, #16
 8006976:	4638      	mov	r0, r7
 8006978:	f3af 8000 	nop.w
 800697c:	1c42      	adds	r2, r0, #1
 800697e:	4606      	mov	r6, r0
 8006980:	d1d6      	bne.n	8006930 <_svfiprintf_r+0x174>
 8006982:	89ab      	ldrh	r3, [r5, #12]
 8006984:	065b      	lsls	r3, r3, #25
 8006986:	f53f af2d 	bmi.w	80067e4 <_svfiprintf_r+0x28>
 800698a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800698c:	b01d      	add	sp, #116	; 0x74
 800698e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006992:	ab03      	add	r3, sp, #12
 8006994:	9300      	str	r3, [sp, #0]
 8006996:	462a      	mov	r2, r5
 8006998:	4b05      	ldr	r3, [pc, #20]	; (80069b0 <_svfiprintf_r+0x1f4>)
 800699a:	a904      	add	r1, sp, #16
 800699c:	4638      	mov	r0, r7
 800699e:	f000 f879 	bl	8006a94 <_printf_i>
 80069a2:	e7eb      	b.n	800697c <_svfiprintf_r+0x1c0>
 80069a4:	08006e50 	.word	0x08006e50
 80069a8:	08006e5a 	.word	0x08006e5a
 80069ac:	00000000 	.word	0x00000000
 80069b0:	08006709 	.word	0x08006709
 80069b4:	08006e56 	.word	0x08006e56

080069b8 <_printf_common>:
 80069b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069bc:	4616      	mov	r6, r2
 80069be:	4699      	mov	r9, r3
 80069c0:	688a      	ldr	r2, [r1, #8]
 80069c2:	690b      	ldr	r3, [r1, #16]
 80069c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80069c8:	4293      	cmp	r3, r2
 80069ca:	bfb8      	it	lt
 80069cc:	4613      	movlt	r3, r2
 80069ce:	6033      	str	r3, [r6, #0]
 80069d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80069d4:	4607      	mov	r7, r0
 80069d6:	460c      	mov	r4, r1
 80069d8:	b10a      	cbz	r2, 80069de <_printf_common+0x26>
 80069da:	3301      	adds	r3, #1
 80069dc:	6033      	str	r3, [r6, #0]
 80069de:	6823      	ldr	r3, [r4, #0]
 80069e0:	0699      	lsls	r1, r3, #26
 80069e2:	bf42      	ittt	mi
 80069e4:	6833      	ldrmi	r3, [r6, #0]
 80069e6:	3302      	addmi	r3, #2
 80069e8:	6033      	strmi	r3, [r6, #0]
 80069ea:	6825      	ldr	r5, [r4, #0]
 80069ec:	f015 0506 	ands.w	r5, r5, #6
 80069f0:	d106      	bne.n	8006a00 <_printf_common+0x48>
 80069f2:	f104 0a19 	add.w	sl, r4, #25
 80069f6:	68e3      	ldr	r3, [r4, #12]
 80069f8:	6832      	ldr	r2, [r6, #0]
 80069fa:	1a9b      	subs	r3, r3, r2
 80069fc:	42ab      	cmp	r3, r5
 80069fe:	dc26      	bgt.n	8006a4e <_printf_common+0x96>
 8006a00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006a04:	1e13      	subs	r3, r2, #0
 8006a06:	6822      	ldr	r2, [r4, #0]
 8006a08:	bf18      	it	ne
 8006a0a:	2301      	movne	r3, #1
 8006a0c:	0692      	lsls	r2, r2, #26
 8006a0e:	d42b      	bmi.n	8006a68 <_printf_common+0xb0>
 8006a10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a14:	4649      	mov	r1, r9
 8006a16:	4638      	mov	r0, r7
 8006a18:	47c0      	blx	r8
 8006a1a:	3001      	adds	r0, #1
 8006a1c:	d01e      	beq.n	8006a5c <_printf_common+0xa4>
 8006a1e:	6823      	ldr	r3, [r4, #0]
 8006a20:	6922      	ldr	r2, [r4, #16]
 8006a22:	f003 0306 	and.w	r3, r3, #6
 8006a26:	2b04      	cmp	r3, #4
 8006a28:	bf02      	ittt	eq
 8006a2a:	68e5      	ldreq	r5, [r4, #12]
 8006a2c:	6833      	ldreq	r3, [r6, #0]
 8006a2e:	1aed      	subeq	r5, r5, r3
 8006a30:	68a3      	ldr	r3, [r4, #8]
 8006a32:	bf0c      	ite	eq
 8006a34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a38:	2500      	movne	r5, #0
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	bfc4      	itt	gt
 8006a3e:	1a9b      	subgt	r3, r3, r2
 8006a40:	18ed      	addgt	r5, r5, r3
 8006a42:	2600      	movs	r6, #0
 8006a44:	341a      	adds	r4, #26
 8006a46:	42b5      	cmp	r5, r6
 8006a48:	d11a      	bne.n	8006a80 <_printf_common+0xc8>
 8006a4a:	2000      	movs	r0, #0
 8006a4c:	e008      	b.n	8006a60 <_printf_common+0xa8>
 8006a4e:	2301      	movs	r3, #1
 8006a50:	4652      	mov	r2, sl
 8006a52:	4649      	mov	r1, r9
 8006a54:	4638      	mov	r0, r7
 8006a56:	47c0      	blx	r8
 8006a58:	3001      	adds	r0, #1
 8006a5a:	d103      	bne.n	8006a64 <_printf_common+0xac>
 8006a5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a64:	3501      	adds	r5, #1
 8006a66:	e7c6      	b.n	80069f6 <_printf_common+0x3e>
 8006a68:	18e1      	adds	r1, r4, r3
 8006a6a:	1c5a      	adds	r2, r3, #1
 8006a6c:	2030      	movs	r0, #48	; 0x30
 8006a6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006a72:	4422      	add	r2, r4
 8006a74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006a78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006a7c:	3302      	adds	r3, #2
 8006a7e:	e7c7      	b.n	8006a10 <_printf_common+0x58>
 8006a80:	2301      	movs	r3, #1
 8006a82:	4622      	mov	r2, r4
 8006a84:	4649      	mov	r1, r9
 8006a86:	4638      	mov	r0, r7
 8006a88:	47c0      	blx	r8
 8006a8a:	3001      	adds	r0, #1
 8006a8c:	d0e6      	beq.n	8006a5c <_printf_common+0xa4>
 8006a8e:	3601      	adds	r6, #1
 8006a90:	e7d9      	b.n	8006a46 <_printf_common+0x8e>
	...

08006a94 <_printf_i>:
 8006a94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a98:	7e0f      	ldrb	r7, [r1, #24]
 8006a9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006a9c:	2f78      	cmp	r7, #120	; 0x78
 8006a9e:	4691      	mov	r9, r2
 8006aa0:	4680      	mov	r8, r0
 8006aa2:	460c      	mov	r4, r1
 8006aa4:	469a      	mov	sl, r3
 8006aa6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006aaa:	d807      	bhi.n	8006abc <_printf_i+0x28>
 8006aac:	2f62      	cmp	r7, #98	; 0x62
 8006aae:	d80a      	bhi.n	8006ac6 <_printf_i+0x32>
 8006ab0:	2f00      	cmp	r7, #0
 8006ab2:	f000 80d4 	beq.w	8006c5e <_printf_i+0x1ca>
 8006ab6:	2f58      	cmp	r7, #88	; 0x58
 8006ab8:	f000 80c0 	beq.w	8006c3c <_printf_i+0x1a8>
 8006abc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ac0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006ac4:	e03a      	b.n	8006b3c <_printf_i+0xa8>
 8006ac6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006aca:	2b15      	cmp	r3, #21
 8006acc:	d8f6      	bhi.n	8006abc <_printf_i+0x28>
 8006ace:	a101      	add	r1, pc, #4	; (adr r1, 8006ad4 <_printf_i+0x40>)
 8006ad0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ad4:	08006b2d 	.word	0x08006b2d
 8006ad8:	08006b41 	.word	0x08006b41
 8006adc:	08006abd 	.word	0x08006abd
 8006ae0:	08006abd 	.word	0x08006abd
 8006ae4:	08006abd 	.word	0x08006abd
 8006ae8:	08006abd 	.word	0x08006abd
 8006aec:	08006b41 	.word	0x08006b41
 8006af0:	08006abd 	.word	0x08006abd
 8006af4:	08006abd 	.word	0x08006abd
 8006af8:	08006abd 	.word	0x08006abd
 8006afc:	08006abd 	.word	0x08006abd
 8006b00:	08006c45 	.word	0x08006c45
 8006b04:	08006b6d 	.word	0x08006b6d
 8006b08:	08006bff 	.word	0x08006bff
 8006b0c:	08006abd 	.word	0x08006abd
 8006b10:	08006abd 	.word	0x08006abd
 8006b14:	08006c67 	.word	0x08006c67
 8006b18:	08006abd 	.word	0x08006abd
 8006b1c:	08006b6d 	.word	0x08006b6d
 8006b20:	08006abd 	.word	0x08006abd
 8006b24:	08006abd 	.word	0x08006abd
 8006b28:	08006c07 	.word	0x08006c07
 8006b2c:	682b      	ldr	r3, [r5, #0]
 8006b2e:	1d1a      	adds	r2, r3, #4
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	602a      	str	r2, [r5, #0]
 8006b34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	e09f      	b.n	8006c80 <_printf_i+0x1ec>
 8006b40:	6820      	ldr	r0, [r4, #0]
 8006b42:	682b      	ldr	r3, [r5, #0]
 8006b44:	0607      	lsls	r7, r0, #24
 8006b46:	f103 0104 	add.w	r1, r3, #4
 8006b4a:	6029      	str	r1, [r5, #0]
 8006b4c:	d501      	bpl.n	8006b52 <_printf_i+0xbe>
 8006b4e:	681e      	ldr	r6, [r3, #0]
 8006b50:	e003      	b.n	8006b5a <_printf_i+0xc6>
 8006b52:	0646      	lsls	r6, r0, #25
 8006b54:	d5fb      	bpl.n	8006b4e <_printf_i+0xba>
 8006b56:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006b5a:	2e00      	cmp	r6, #0
 8006b5c:	da03      	bge.n	8006b66 <_printf_i+0xd2>
 8006b5e:	232d      	movs	r3, #45	; 0x2d
 8006b60:	4276      	negs	r6, r6
 8006b62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b66:	485a      	ldr	r0, [pc, #360]	; (8006cd0 <_printf_i+0x23c>)
 8006b68:	230a      	movs	r3, #10
 8006b6a:	e012      	b.n	8006b92 <_printf_i+0xfe>
 8006b6c:	682b      	ldr	r3, [r5, #0]
 8006b6e:	6820      	ldr	r0, [r4, #0]
 8006b70:	1d19      	adds	r1, r3, #4
 8006b72:	6029      	str	r1, [r5, #0]
 8006b74:	0605      	lsls	r5, r0, #24
 8006b76:	d501      	bpl.n	8006b7c <_printf_i+0xe8>
 8006b78:	681e      	ldr	r6, [r3, #0]
 8006b7a:	e002      	b.n	8006b82 <_printf_i+0xee>
 8006b7c:	0641      	lsls	r1, r0, #25
 8006b7e:	d5fb      	bpl.n	8006b78 <_printf_i+0xe4>
 8006b80:	881e      	ldrh	r6, [r3, #0]
 8006b82:	4853      	ldr	r0, [pc, #332]	; (8006cd0 <_printf_i+0x23c>)
 8006b84:	2f6f      	cmp	r7, #111	; 0x6f
 8006b86:	bf0c      	ite	eq
 8006b88:	2308      	moveq	r3, #8
 8006b8a:	230a      	movne	r3, #10
 8006b8c:	2100      	movs	r1, #0
 8006b8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006b92:	6865      	ldr	r5, [r4, #4]
 8006b94:	60a5      	str	r5, [r4, #8]
 8006b96:	2d00      	cmp	r5, #0
 8006b98:	bfa2      	ittt	ge
 8006b9a:	6821      	ldrge	r1, [r4, #0]
 8006b9c:	f021 0104 	bicge.w	r1, r1, #4
 8006ba0:	6021      	strge	r1, [r4, #0]
 8006ba2:	b90e      	cbnz	r6, 8006ba8 <_printf_i+0x114>
 8006ba4:	2d00      	cmp	r5, #0
 8006ba6:	d04b      	beq.n	8006c40 <_printf_i+0x1ac>
 8006ba8:	4615      	mov	r5, r2
 8006baa:	fbb6 f1f3 	udiv	r1, r6, r3
 8006bae:	fb03 6711 	mls	r7, r3, r1, r6
 8006bb2:	5dc7      	ldrb	r7, [r0, r7]
 8006bb4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006bb8:	4637      	mov	r7, r6
 8006bba:	42bb      	cmp	r3, r7
 8006bbc:	460e      	mov	r6, r1
 8006bbe:	d9f4      	bls.n	8006baa <_printf_i+0x116>
 8006bc0:	2b08      	cmp	r3, #8
 8006bc2:	d10b      	bne.n	8006bdc <_printf_i+0x148>
 8006bc4:	6823      	ldr	r3, [r4, #0]
 8006bc6:	07de      	lsls	r6, r3, #31
 8006bc8:	d508      	bpl.n	8006bdc <_printf_i+0x148>
 8006bca:	6923      	ldr	r3, [r4, #16]
 8006bcc:	6861      	ldr	r1, [r4, #4]
 8006bce:	4299      	cmp	r1, r3
 8006bd0:	bfde      	ittt	le
 8006bd2:	2330      	movle	r3, #48	; 0x30
 8006bd4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006bd8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006bdc:	1b52      	subs	r2, r2, r5
 8006bde:	6122      	str	r2, [r4, #16]
 8006be0:	f8cd a000 	str.w	sl, [sp]
 8006be4:	464b      	mov	r3, r9
 8006be6:	aa03      	add	r2, sp, #12
 8006be8:	4621      	mov	r1, r4
 8006bea:	4640      	mov	r0, r8
 8006bec:	f7ff fee4 	bl	80069b8 <_printf_common>
 8006bf0:	3001      	adds	r0, #1
 8006bf2:	d14a      	bne.n	8006c8a <_printf_i+0x1f6>
 8006bf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006bf8:	b004      	add	sp, #16
 8006bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bfe:	6823      	ldr	r3, [r4, #0]
 8006c00:	f043 0320 	orr.w	r3, r3, #32
 8006c04:	6023      	str	r3, [r4, #0]
 8006c06:	4833      	ldr	r0, [pc, #204]	; (8006cd4 <_printf_i+0x240>)
 8006c08:	2778      	movs	r7, #120	; 0x78
 8006c0a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006c0e:	6823      	ldr	r3, [r4, #0]
 8006c10:	6829      	ldr	r1, [r5, #0]
 8006c12:	061f      	lsls	r7, r3, #24
 8006c14:	f851 6b04 	ldr.w	r6, [r1], #4
 8006c18:	d402      	bmi.n	8006c20 <_printf_i+0x18c>
 8006c1a:	065f      	lsls	r7, r3, #25
 8006c1c:	bf48      	it	mi
 8006c1e:	b2b6      	uxthmi	r6, r6
 8006c20:	07df      	lsls	r7, r3, #31
 8006c22:	bf48      	it	mi
 8006c24:	f043 0320 	orrmi.w	r3, r3, #32
 8006c28:	6029      	str	r1, [r5, #0]
 8006c2a:	bf48      	it	mi
 8006c2c:	6023      	strmi	r3, [r4, #0]
 8006c2e:	b91e      	cbnz	r6, 8006c38 <_printf_i+0x1a4>
 8006c30:	6823      	ldr	r3, [r4, #0]
 8006c32:	f023 0320 	bic.w	r3, r3, #32
 8006c36:	6023      	str	r3, [r4, #0]
 8006c38:	2310      	movs	r3, #16
 8006c3a:	e7a7      	b.n	8006b8c <_printf_i+0xf8>
 8006c3c:	4824      	ldr	r0, [pc, #144]	; (8006cd0 <_printf_i+0x23c>)
 8006c3e:	e7e4      	b.n	8006c0a <_printf_i+0x176>
 8006c40:	4615      	mov	r5, r2
 8006c42:	e7bd      	b.n	8006bc0 <_printf_i+0x12c>
 8006c44:	682b      	ldr	r3, [r5, #0]
 8006c46:	6826      	ldr	r6, [r4, #0]
 8006c48:	6961      	ldr	r1, [r4, #20]
 8006c4a:	1d18      	adds	r0, r3, #4
 8006c4c:	6028      	str	r0, [r5, #0]
 8006c4e:	0635      	lsls	r5, r6, #24
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	d501      	bpl.n	8006c58 <_printf_i+0x1c4>
 8006c54:	6019      	str	r1, [r3, #0]
 8006c56:	e002      	b.n	8006c5e <_printf_i+0x1ca>
 8006c58:	0670      	lsls	r0, r6, #25
 8006c5a:	d5fb      	bpl.n	8006c54 <_printf_i+0x1c0>
 8006c5c:	8019      	strh	r1, [r3, #0]
 8006c5e:	2300      	movs	r3, #0
 8006c60:	6123      	str	r3, [r4, #16]
 8006c62:	4615      	mov	r5, r2
 8006c64:	e7bc      	b.n	8006be0 <_printf_i+0x14c>
 8006c66:	682b      	ldr	r3, [r5, #0]
 8006c68:	1d1a      	adds	r2, r3, #4
 8006c6a:	602a      	str	r2, [r5, #0]
 8006c6c:	681d      	ldr	r5, [r3, #0]
 8006c6e:	6862      	ldr	r2, [r4, #4]
 8006c70:	2100      	movs	r1, #0
 8006c72:	4628      	mov	r0, r5
 8006c74:	f7f9 fab4 	bl	80001e0 <memchr>
 8006c78:	b108      	cbz	r0, 8006c7e <_printf_i+0x1ea>
 8006c7a:	1b40      	subs	r0, r0, r5
 8006c7c:	6060      	str	r0, [r4, #4]
 8006c7e:	6863      	ldr	r3, [r4, #4]
 8006c80:	6123      	str	r3, [r4, #16]
 8006c82:	2300      	movs	r3, #0
 8006c84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c88:	e7aa      	b.n	8006be0 <_printf_i+0x14c>
 8006c8a:	6923      	ldr	r3, [r4, #16]
 8006c8c:	462a      	mov	r2, r5
 8006c8e:	4649      	mov	r1, r9
 8006c90:	4640      	mov	r0, r8
 8006c92:	47d0      	blx	sl
 8006c94:	3001      	adds	r0, #1
 8006c96:	d0ad      	beq.n	8006bf4 <_printf_i+0x160>
 8006c98:	6823      	ldr	r3, [r4, #0]
 8006c9a:	079b      	lsls	r3, r3, #30
 8006c9c:	d413      	bmi.n	8006cc6 <_printf_i+0x232>
 8006c9e:	68e0      	ldr	r0, [r4, #12]
 8006ca0:	9b03      	ldr	r3, [sp, #12]
 8006ca2:	4298      	cmp	r0, r3
 8006ca4:	bfb8      	it	lt
 8006ca6:	4618      	movlt	r0, r3
 8006ca8:	e7a6      	b.n	8006bf8 <_printf_i+0x164>
 8006caa:	2301      	movs	r3, #1
 8006cac:	4632      	mov	r2, r6
 8006cae:	4649      	mov	r1, r9
 8006cb0:	4640      	mov	r0, r8
 8006cb2:	47d0      	blx	sl
 8006cb4:	3001      	adds	r0, #1
 8006cb6:	d09d      	beq.n	8006bf4 <_printf_i+0x160>
 8006cb8:	3501      	adds	r5, #1
 8006cba:	68e3      	ldr	r3, [r4, #12]
 8006cbc:	9903      	ldr	r1, [sp, #12]
 8006cbe:	1a5b      	subs	r3, r3, r1
 8006cc0:	42ab      	cmp	r3, r5
 8006cc2:	dcf2      	bgt.n	8006caa <_printf_i+0x216>
 8006cc4:	e7eb      	b.n	8006c9e <_printf_i+0x20a>
 8006cc6:	2500      	movs	r5, #0
 8006cc8:	f104 0619 	add.w	r6, r4, #25
 8006ccc:	e7f5      	b.n	8006cba <_printf_i+0x226>
 8006cce:	bf00      	nop
 8006cd0:	08006e61 	.word	0x08006e61
 8006cd4:	08006e72 	.word	0x08006e72

08006cd8 <memmove>:
 8006cd8:	4288      	cmp	r0, r1
 8006cda:	b510      	push	{r4, lr}
 8006cdc:	eb01 0402 	add.w	r4, r1, r2
 8006ce0:	d902      	bls.n	8006ce8 <memmove+0x10>
 8006ce2:	4284      	cmp	r4, r0
 8006ce4:	4623      	mov	r3, r4
 8006ce6:	d807      	bhi.n	8006cf8 <memmove+0x20>
 8006ce8:	1e43      	subs	r3, r0, #1
 8006cea:	42a1      	cmp	r1, r4
 8006cec:	d008      	beq.n	8006d00 <memmove+0x28>
 8006cee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006cf2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006cf6:	e7f8      	b.n	8006cea <memmove+0x12>
 8006cf8:	4402      	add	r2, r0
 8006cfa:	4601      	mov	r1, r0
 8006cfc:	428a      	cmp	r2, r1
 8006cfe:	d100      	bne.n	8006d02 <memmove+0x2a>
 8006d00:	bd10      	pop	{r4, pc}
 8006d02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006d06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006d0a:	e7f7      	b.n	8006cfc <memmove+0x24>

08006d0c <_sbrk_r>:
 8006d0c:	b538      	push	{r3, r4, r5, lr}
 8006d0e:	4d06      	ldr	r5, [pc, #24]	; (8006d28 <_sbrk_r+0x1c>)
 8006d10:	2300      	movs	r3, #0
 8006d12:	4604      	mov	r4, r0
 8006d14:	4608      	mov	r0, r1
 8006d16:	602b      	str	r3, [r5, #0]
 8006d18:	f7fa f812 	bl	8000d40 <_sbrk>
 8006d1c:	1c43      	adds	r3, r0, #1
 8006d1e:	d102      	bne.n	8006d26 <_sbrk_r+0x1a>
 8006d20:	682b      	ldr	r3, [r5, #0]
 8006d22:	b103      	cbz	r3, 8006d26 <_sbrk_r+0x1a>
 8006d24:	6023      	str	r3, [r4, #0]
 8006d26:	bd38      	pop	{r3, r4, r5, pc}
 8006d28:	20002d9c 	.word	0x20002d9c

08006d2c <_realloc_r>:
 8006d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d30:	4680      	mov	r8, r0
 8006d32:	4614      	mov	r4, r2
 8006d34:	460e      	mov	r6, r1
 8006d36:	b921      	cbnz	r1, 8006d42 <_realloc_r+0x16>
 8006d38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d3c:	4611      	mov	r1, r2
 8006d3e:	f7ff bc57 	b.w	80065f0 <_malloc_r>
 8006d42:	b92a      	cbnz	r2, 8006d50 <_realloc_r+0x24>
 8006d44:	f7ff fbe8 	bl	8006518 <_free_r>
 8006d48:	4625      	mov	r5, r4
 8006d4a:	4628      	mov	r0, r5
 8006d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d50:	f000 f81b 	bl	8006d8a <_malloc_usable_size_r>
 8006d54:	4284      	cmp	r4, r0
 8006d56:	4607      	mov	r7, r0
 8006d58:	d802      	bhi.n	8006d60 <_realloc_r+0x34>
 8006d5a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006d5e:	d812      	bhi.n	8006d86 <_realloc_r+0x5a>
 8006d60:	4621      	mov	r1, r4
 8006d62:	4640      	mov	r0, r8
 8006d64:	f7ff fc44 	bl	80065f0 <_malloc_r>
 8006d68:	4605      	mov	r5, r0
 8006d6a:	2800      	cmp	r0, #0
 8006d6c:	d0ed      	beq.n	8006d4a <_realloc_r+0x1e>
 8006d6e:	42bc      	cmp	r4, r7
 8006d70:	4622      	mov	r2, r4
 8006d72:	4631      	mov	r1, r6
 8006d74:	bf28      	it	cs
 8006d76:	463a      	movcs	r2, r7
 8006d78:	f7ff fbc0 	bl	80064fc <memcpy>
 8006d7c:	4631      	mov	r1, r6
 8006d7e:	4640      	mov	r0, r8
 8006d80:	f7ff fbca 	bl	8006518 <_free_r>
 8006d84:	e7e1      	b.n	8006d4a <_realloc_r+0x1e>
 8006d86:	4635      	mov	r5, r6
 8006d88:	e7df      	b.n	8006d4a <_realloc_r+0x1e>

08006d8a <_malloc_usable_size_r>:
 8006d8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d8e:	1f18      	subs	r0, r3, #4
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	bfbc      	itt	lt
 8006d94:	580b      	ldrlt	r3, [r1, r0]
 8006d96:	18c0      	addlt	r0, r0, r3
 8006d98:	4770      	bx	lr
	...

08006d9c <_init>:
 8006d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d9e:	bf00      	nop
 8006da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006da2:	bc08      	pop	{r3}
 8006da4:	469e      	mov	lr, r3
 8006da6:	4770      	bx	lr

08006da8 <_fini>:
 8006da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006daa:	bf00      	nop
 8006dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dae:	bc08      	pop	{r3}
 8006db0:	469e      	mov	lr, r3
 8006db2:	4770      	bx	lr
