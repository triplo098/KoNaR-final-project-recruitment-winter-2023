
KoNaR_final_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bcc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08003d5c  08003d5c  00013d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003dcc  08003dcc  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003dcc  08003dcc  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003dcc  08003dcc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003dcc  08003dcc  00013dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003dd0  08003dd0  00013dd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003dd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002b28  20000010  08003de4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002b38  08003de4  00022b38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000eadc  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025d9  00000000  00000000  0002eb5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fe8  00000000  00000000  00031138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c38  00000000  00000000  00032120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002779f  00000000  00000000  00032d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fecf  00000000  00000000  0005a4f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f5290  00000000  00000000  0006a3c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004170  00000000  00000000  0015f658  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  001637c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003d44 	.word	0x08003d44

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08003d44 	.word	0x08003d44

080001d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80001d0:	b480      	push	{r7}
 80001d2:	b085      	sub	sp, #20
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	60f8      	str	r0, [r7, #12]
 80001d8:	60b9      	str	r1, [r7, #8]
 80001da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	4a07      	ldr	r2, [pc, #28]	; (80001fc <vApplicationGetIdleTaskMemory+0x2c>)
 80001e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80001e2:	68bb      	ldr	r3, [r7, #8]
 80001e4:	4a06      	ldr	r2, [pc, #24]	; (8000200 <vApplicationGetIdleTaskMemory+0x30>)
 80001e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	2280      	movs	r2, #128	; 0x80
 80001ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001ee:	bf00      	nop
 80001f0:	3714      	adds	r7, #20
 80001f2:	46bd      	mov	sp, r7
 80001f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	2000002c 	.word	0x2000002c
 8000200:	20000080 	.word	0x20000080

08000204 <HAL_TIM_PeriodElapsedCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]

	if (htim == &htim2) {
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	4a06      	ldr	r2, [pc, #24]	; (8000228 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000210:	4293      	cmp	r3, r2
 8000212:	d104      	bne.n	800021e <HAL_TIM_PeriodElapsedCallback+0x1a>
		HAL_GPIO_TogglePin(DIODE_GPIO_Port, DIODE_Pin);
 8000214:	2110      	movs	r1, #16
 8000216:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800021a:	f000 fd9b 	bl	8000d54 <HAL_GPIO_TogglePin>
	}

}
 800021e:	bf00      	nop
 8000220:	3708      	adds	r7, #8
 8000222:	46bd      	mov	sp, r7
 8000224:	bd80      	pop	{r7, pc}
 8000226:	bf00      	nop
 8000228:	20000280 	.word	0x20000280

0800022c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800022c:	b5b0      	push	{r4, r5, r7, lr}
 800022e:	b088      	sub	sp, #32
 8000230:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000232:	f000 fa3f 	bl	80006b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000236:	f000 f821 	bl	800027c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800023a:	f000 f8cb 	bl	80003d4 <MX_GPIO_Init>
  MX_TIM2_Init();
 800023e:	f000 f86f 	bl	8000320 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 8000242:	480b      	ldr	r0, [pc, #44]	; (8000270 <main+0x44>)
 8000244:	f001 fbcc 	bl	80019e0 <HAL_TIM_Base_Start_IT>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000248:	4b0a      	ldr	r3, [pc, #40]	; (8000274 <main+0x48>)
 800024a:	1d3c      	adds	r4, r7, #4
 800024c:	461d      	mov	r5, r3
 800024e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000250:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000252:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000256:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800025a:	1d3b      	adds	r3, r7, #4
 800025c:	2100      	movs	r1, #0
 800025e:	4618      	mov	r0, r3
 8000260:	f002 faf9 	bl	8002856 <osThreadCreate>
 8000264:	4603      	mov	r3, r0
 8000266:	4a04      	ldr	r2, [pc, #16]	; (8000278 <main+0x4c>)
 8000268:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800026a:	f002 faed 	bl	8002848 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  while (1)
 800026e:	e7fe      	b.n	800026e <main+0x42>
 8000270:	20000280 	.word	0x20000280
 8000274:	08003d68 	.word	0x08003d68
 8000278:	200002cc 	.word	0x200002cc

0800027c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b096      	sub	sp, #88	; 0x58
 8000280:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000282:	f107 0314 	add.w	r3, r7, #20
 8000286:	2244      	movs	r2, #68	; 0x44
 8000288:	2100      	movs	r1, #0
 800028a:	4618      	mov	r0, r3
 800028c:	f003 fd2e 	bl	8003cec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000290:	463b      	mov	r3, r7
 8000292:	2200      	movs	r2, #0
 8000294:	601a      	str	r2, [r3, #0]
 8000296:	605a      	str	r2, [r3, #4]
 8000298:	609a      	str	r2, [r3, #8]
 800029a:	60da      	str	r2, [r3, #12]
 800029c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800029e:	f44f 7000 	mov.w	r0, #512	; 0x200
 80002a2:	f000 fd7f 	bl	8000da4 <HAL_PWREx_ControlVoltageScaling>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d001      	beq.n	80002b0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80002ac:	f000 f912 	bl	80004d4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002b0:	2302      	movs	r3, #2
 80002b2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002b8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ba:	2310      	movs	r3, #16
 80002bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002be:	2302      	movs	r3, #2
 80002c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002c2:	2302      	movs	r3, #2
 80002c4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80002c6:	2301      	movs	r3, #1
 80002c8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80002ca:	230a      	movs	r3, #10
 80002cc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80002ce:	2307      	movs	r3, #7
 80002d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002d2:	2302      	movs	r3, #2
 80002d4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002d6:	2302      	movs	r3, #2
 80002d8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002da:	f107 0314 	add.w	r3, r7, #20
 80002de:	4618      	mov	r0, r3
 80002e0:	f000 fdb6 	bl	8000e50 <HAL_RCC_OscConfig>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <SystemClock_Config+0x72>
  {
    Error_Handler();
 80002ea:	f000 f8f3 	bl	80004d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ee:	230f      	movs	r3, #15
 80002f0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002f2:	2303      	movs	r3, #3
 80002f4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f6:	2300      	movs	r3, #0
 80002f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002fa:	2300      	movs	r3, #0
 80002fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002fe:	2300      	movs	r3, #0
 8000300:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000302:	463b      	mov	r3, r7
 8000304:	2104      	movs	r1, #4
 8000306:	4618      	mov	r0, r3
 8000308:	f001 f97e 	bl	8001608 <HAL_RCC_ClockConfig>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000312:	f000 f8df 	bl	80004d4 <Error_Handler>
  }
}
 8000316:	bf00      	nop
 8000318:	3758      	adds	r7, #88	; 0x58
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
	...

08000320 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b08a      	sub	sp, #40	; 0x28
 8000324:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000326:	f107 031c 	add.w	r3, r7, #28
 800032a:	2200      	movs	r2, #0
 800032c:	601a      	str	r2, [r3, #0]
 800032e:	605a      	str	r2, [r3, #4]
 8000330:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000332:	463b      	mov	r3, r7
 8000334:	2200      	movs	r2, #0
 8000336:	601a      	str	r2, [r3, #0]
 8000338:	605a      	str	r2, [r3, #4]
 800033a:	609a      	str	r2, [r3, #8]
 800033c:	60da      	str	r2, [r3, #12]
 800033e:	611a      	str	r2, [r3, #16]
 8000340:	615a      	str	r2, [r3, #20]
 8000342:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000344:	4b22      	ldr	r3, [pc, #136]	; (80003d0 <MX_TIM2_Init+0xb0>)
 8000346:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800034a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1108;
 800034c:	4b20      	ldr	r3, [pc, #128]	; (80003d0 <MX_TIM2_Init+0xb0>)
 800034e:	f240 4254 	movw	r2, #1108	; 0x454
 8000352:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000354:	4b1e      	ldr	r3, [pc, #120]	; (80003d0 <MX_TIM2_Init+0xb0>)
 8000356:	2200      	movs	r2, #0
 8000358:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5548;
 800035a:	4b1d      	ldr	r3, [pc, #116]	; (80003d0 <MX_TIM2_Init+0xb0>)
 800035c:	f241 52ac 	movw	r2, #5548	; 0x15ac
 8000360:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000362:	4b1b      	ldr	r3, [pc, #108]	; (80003d0 <MX_TIM2_Init+0xb0>)
 8000364:	2200      	movs	r2, #0
 8000366:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000368:	4b19      	ldr	r3, [pc, #100]	; (80003d0 <MX_TIM2_Init+0xb0>)
 800036a:	2200      	movs	r2, #0
 800036c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800036e:	4818      	ldr	r0, [pc, #96]	; (80003d0 <MX_TIM2_Init+0xb0>)
 8000370:	f001 fba6 	bl	8001ac0 <HAL_TIM_PWM_Init>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 800037a:	f000 f8ab 	bl	80004d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800037e:	2300      	movs	r3, #0
 8000380:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000382:	2300      	movs	r3, #0
 8000384:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000386:	f107 031c 	add.w	r3, r7, #28
 800038a:	4619      	mov	r1, r3
 800038c:	4810      	ldr	r0, [pc, #64]	; (80003d0 <MX_TIM2_Init+0xb0>)
 800038e:	f002 f99d 	bl	80026cc <HAL_TIMEx_MasterConfigSynchronization>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	d001      	beq.n	800039c <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000398:	f000 f89c 	bl	80004d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800039c:	2360      	movs	r3, #96	; 0x60
 800039e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80003a0:	2300      	movs	r3, #0
 80003a2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003a4:	2300      	movs	r3, #0
 80003a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003a8:	2300      	movs	r3, #0
 80003aa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80003ac:	463b      	mov	r3, r7
 80003ae:	2200      	movs	r2, #0
 80003b0:	4619      	mov	r1, r3
 80003b2:	4807      	ldr	r0, [pc, #28]	; (80003d0 <MX_TIM2_Init+0xb0>)
 80003b4:	f001 fcde 	bl	8001d74 <HAL_TIM_PWM_ConfigChannel>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 80003be:	f000 f889 	bl	80004d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80003c2:	4803      	ldr	r0, [pc, #12]	; (80003d0 <MX_TIM2_Init+0xb0>)
 80003c4:	f000 f8d8 	bl	8000578 <HAL_TIM_MspPostInit>

}
 80003c8:	bf00      	nop
 80003ca:	3728      	adds	r7, #40	; 0x28
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	20000280 	.word	0x20000280

080003d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b08a      	sub	sp, #40	; 0x28
 80003d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003da:	f107 0314 	add.w	r3, r7, #20
 80003de:	2200      	movs	r2, #0
 80003e0:	601a      	str	r2, [r3, #0]
 80003e2:	605a      	str	r2, [r3, #4]
 80003e4:	609a      	str	r2, [r3, #8]
 80003e6:	60da      	str	r2, [r3, #12]
 80003e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003ea:	4b34      	ldr	r3, [pc, #208]	; (80004bc <MX_GPIO_Init+0xe8>)
 80003ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ee:	4a33      	ldr	r2, [pc, #204]	; (80004bc <MX_GPIO_Init+0xe8>)
 80003f0:	f043 0304 	orr.w	r3, r3, #4
 80003f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003f6:	4b31      	ldr	r3, [pc, #196]	; (80004bc <MX_GPIO_Init+0xe8>)
 80003f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003fa:	f003 0304 	and.w	r3, r3, #4
 80003fe:	613b      	str	r3, [r7, #16]
 8000400:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000402:	4b2e      	ldr	r3, [pc, #184]	; (80004bc <MX_GPIO_Init+0xe8>)
 8000404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000406:	4a2d      	ldr	r2, [pc, #180]	; (80004bc <MX_GPIO_Init+0xe8>)
 8000408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800040c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800040e:	4b2b      	ldr	r3, [pc, #172]	; (80004bc <MX_GPIO_Init+0xe8>)
 8000410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000416:	60fb      	str	r3, [r7, #12]
 8000418:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800041a:	4b28      	ldr	r3, [pc, #160]	; (80004bc <MX_GPIO_Init+0xe8>)
 800041c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800041e:	4a27      	ldr	r2, [pc, #156]	; (80004bc <MX_GPIO_Init+0xe8>)
 8000420:	f043 0301 	orr.w	r3, r3, #1
 8000424:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000426:	4b25      	ldr	r3, [pc, #148]	; (80004bc <MX_GPIO_Init+0xe8>)
 8000428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800042a:	f003 0301 	and.w	r3, r3, #1
 800042e:	60bb      	str	r3, [r7, #8]
 8000430:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000432:	4b22      	ldr	r3, [pc, #136]	; (80004bc <MX_GPIO_Init+0xe8>)
 8000434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000436:	4a21      	ldr	r2, [pc, #132]	; (80004bc <MX_GPIO_Init+0xe8>)
 8000438:	f043 0302 	orr.w	r3, r3, #2
 800043c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800043e:	4b1f      	ldr	r3, [pc, #124]	; (80004bc <MX_GPIO_Init+0xe8>)
 8000440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000442:	f003 0302 	and.w	r3, r3, #2
 8000446:	607b      	str	r3, [r7, #4]
 8000448:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIODE_GPIO_Port, DIODE_Pin, GPIO_PIN_RESET);
 800044a:	2200      	movs	r2, #0
 800044c:	2110      	movs	r1, #16
 800044e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000452:	f000 fc67 	bl	8000d24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000456:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800045a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800045c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000460:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000462:	2300      	movs	r3, #0
 8000464:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000466:	f107 0314 	add.w	r3, r7, #20
 800046a:	4619      	mov	r1, r3
 800046c:	4814      	ldr	r0, [pc, #80]	; (80004c0 <MX_GPIO_Init+0xec>)
 800046e:	f000 faaf 	bl	80009d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000472:	230c      	movs	r3, #12
 8000474:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000476:	2302      	movs	r3, #2
 8000478:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800047a:	2300      	movs	r3, #0
 800047c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800047e:	2303      	movs	r3, #3
 8000480:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000482:	2307      	movs	r3, #7
 8000484:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000486:	f107 0314 	add.w	r3, r7, #20
 800048a:	4619      	mov	r1, r3
 800048c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000490:	f000 fa9e 	bl	80009d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIODE_Pin */
  GPIO_InitStruct.Pin = DIODE_Pin;
 8000494:	2310      	movs	r3, #16
 8000496:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000498:	2301      	movs	r3, #1
 800049a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049c:	2300      	movs	r3, #0
 800049e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004a0:	2300      	movs	r3, #0
 80004a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIODE_GPIO_Port, &GPIO_InitStruct);
 80004a4:	f107 0314 	add.w	r3, r7, #20
 80004a8:	4619      	mov	r1, r3
 80004aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004ae:	f000 fa8f 	bl	80009d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004b2:	bf00      	nop
 80004b4:	3728      	adds	r7, #40	; 0x28
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	40021000 	.word	0x40021000
 80004c0:	48000800 	.word	0x48000800

080004c4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80004cc:	2001      	movs	r0, #1
 80004ce:	f002 fa0e 	bl	80028ee <osDelay>
 80004d2:	e7fb      	b.n	80004cc <StartDefaultTask+0x8>

080004d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004d8:	b672      	cpsid	i
}
 80004da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004dc:	e7fe      	b.n	80004dc <Error_Handler+0x8>
	...

080004e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004e6:	4b11      	ldr	r3, [pc, #68]	; (800052c <HAL_MspInit+0x4c>)
 80004e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004ea:	4a10      	ldr	r2, [pc, #64]	; (800052c <HAL_MspInit+0x4c>)
 80004ec:	f043 0301 	orr.w	r3, r3, #1
 80004f0:	6613      	str	r3, [r2, #96]	; 0x60
 80004f2:	4b0e      	ldr	r3, [pc, #56]	; (800052c <HAL_MspInit+0x4c>)
 80004f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004f6:	f003 0301 	and.w	r3, r3, #1
 80004fa:	607b      	str	r3, [r7, #4]
 80004fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004fe:	4b0b      	ldr	r3, [pc, #44]	; (800052c <HAL_MspInit+0x4c>)
 8000500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000502:	4a0a      	ldr	r2, [pc, #40]	; (800052c <HAL_MspInit+0x4c>)
 8000504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000508:	6593      	str	r3, [r2, #88]	; 0x58
 800050a:	4b08      	ldr	r3, [pc, #32]	; (800052c <HAL_MspInit+0x4c>)
 800050c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800050e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000512:	603b      	str	r3, [r7, #0]
 8000514:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000516:	2200      	movs	r2, #0
 8000518:	210f      	movs	r1, #15
 800051a:	f06f 0001 	mvn.w	r0, #1
 800051e:	f000 fa20 	bl	8000962 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000522:	bf00      	nop
 8000524:	3708      	adds	r7, #8
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	40021000 	.word	0x40021000

08000530 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000540:	d113      	bne.n	800056a <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000542:	4b0c      	ldr	r3, [pc, #48]	; (8000574 <HAL_TIM_PWM_MspInit+0x44>)
 8000544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000546:	4a0b      	ldr	r2, [pc, #44]	; (8000574 <HAL_TIM_PWM_MspInit+0x44>)
 8000548:	f043 0301 	orr.w	r3, r3, #1
 800054c:	6593      	str	r3, [r2, #88]	; 0x58
 800054e:	4b09      	ldr	r3, [pc, #36]	; (8000574 <HAL_TIM_PWM_MspInit+0x44>)
 8000550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000552:	f003 0301 	and.w	r3, r3, #1
 8000556:	60fb      	str	r3, [r7, #12]
 8000558:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800055a:	2200      	movs	r2, #0
 800055c:	2105      	movs	r1, #5
 800055e:	201c      	movs	r0, #28
 8000560:	f000 f9ff 	bl	8000962 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000564:	201c      	movs	r0, #28
 8000566:	f000 fa18 	bl	800099a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800056a:	bf00      	nop
 800056c:	3710      	adds	r7, #16
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	40021000 	.word	0x40021000

08000578 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b088      	sub	sp, #32
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000580:	f107 030c 	add.w	r3, r7, #12
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
 800058e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000598:	d11c      	bne.n	80005d4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800059a:	4b10      	ldr	r3, [pc, #64]	; (80005dc <HAL_TIM_MspPostInit+0x64>)
 800059c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800059e:	4a0f      	ldr	r2, [pc, #60]	; (80005dc <HAL_TIM_MspPostInit+0x64>)
 80005a0:	f043 0301 	orr.w	r3, r3, #1
 80005a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005a6:	4b0d      	ldr	r3, [pc, #52]	; (80005dc <HAL_TIM_MspPostInit+0x64>)
 80005a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005aa:	f003 0301 	and.w	r3, r3, #1
 80005ae:	60bb      	str	r3, [r7, #8]
 80005b0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80005b2:	2320      	movs	r3, #32
 80005b4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005b6:	2302      	movs	r3, #2
 80005b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ba:	2300      	movs	r3, #0
 80005bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005be:	2300      	movs	r3, #0
 80005c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80005c2:	2301      	movs	r3, #1
 80005c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c6:	f107 030c 	add.w	r3, r7, #12
 80005ca:	4619      	mov	r1, r3
 80005cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005d0:	f000 f9fe 	bl	80009d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80005d4:	bf00      	nop
 80005d6:	3720      	adds	r7, #32
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	40021000 	.word	0x40021000

080005e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005e4:	e7fe      	b.n	80005e4 <NMI_Handler+0x4>

080005e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005e6:	b480      	push	{r7}
 80005e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005ea:	e7fe      	b.n	80005ea <HardFault_Handler+0x4>

080005ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005f0:	e7fe      	b.n	80005f0 <MemManage_Handler+0x4>

080005f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005f2:	b480      	push	{r7}
 80005f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005f6:	e7fe      	b.n	80005f6 <BusFault_Handler+0x4>

080005f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005fc:	e7fe      	b.n	80005fc <UsageFault_Handler+0x4>

080005fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005fe:	b480      	push	{r7}
 8000600:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000602:	bf00      	nop
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr

0800060c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000610:	f000 f8ac 	bl	800076c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000614:	f002 feee 	bl	80033f4 <xTaskGetSchedulerState>
 8000618:	4603      	mov	r3, r0
 800061a:	2b01      	cmp	r3, #1
 800061c:	d001      	beq.n	8000622 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800061e:	f003 f92b 	bl	8003878 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
	...

08000628 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800062c:	4802      	ldr	r0, [pc, #8]	; (8000638 <TIM2_IRQHandler+0x10>)
 800062e:	f001 fa9e 	bl	8001b6e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	20000280 	.word	0x20000280

0800063c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000640:	4b06      	ldr	r3, [pc, #24]	; (800065c <SystemInit+0x20>)
 8000642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000646:	4a05      	ldr	r2, [pc, #20]	; (800065c <SystemInit+0x20>)
 8000648:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800064c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000650:	bf00      	nop
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	e000ed00 	.word	0xe000ed00

08000660 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000660:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000698 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000664:	f7ff ffea 	bl	800063c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000668:	480c      	ldr	r0, [pc, #48]	; (800069c <LoopForever+0x6>)
  ldr r1, =_edata
 800066a:	490d      	ldr	r1, [pc, #52]	; (80006a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800066c:	4a0d      	ldr	r2, [pc, #52]	; (80006a4 <LoopForever+0xe>)
  movs r3, #0
 800066e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000670:	e002      	b.n	8000678 <LoopCopyDataInit>

08000672 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000672:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000674:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000676:	3304      	adds	r3, #4

08000678 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000678:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800067a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800067c:	d3f9      	bcc.n	8000672 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800067e:	4a0a      	ldr	r2, [pc, #40]	; (80006a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000680:	4c0a      	ldr	r4, [pc, #40]	; (80006ac <LoopForever+0x16>)
  movs r3, #0
 8000682:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000684:	e001      	b.n	800068a <LoopFillZerobss>

08000686 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000686:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000688:	3204      	adds	r2, #4

0800068a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800068a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800068c:	d3fb      	bcc.n	8000686 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800068e:	f003 fb35 	bl	8003cfc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000692:	f7ff fdcb 	bl	800022c <main>

08000696 <LoopForever>:

LoopForever:
    b LoopForever
 8000696:	e7fe      	b.n	8000696 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000698:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800069c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006a0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80006a4:	08003dd4 	.word	0x08003dd4
  ldr r2, =_sbss
 80006a8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80006ac:	20002b38 	.word	0x20002b38

080006b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006b0:	e7fe      	b.n	80006b0 <ADC1_2_IRQHandler>
	...

080006b4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80006ba:	2300      	movs	r3, #0
 80006bc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006be:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <HAL_Init+0x3c>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4a0b      	ldr	r2, [pc, #44]	; (80006f0 <HAL_Init+0x3c>)
 80006c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006c8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006ca:	2003      	movs	r0, #3
 80006cc:	f000 f93e 	bl	800094c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006d0:	200f      	movs	r0, #15
 80006d2:	f000 f80f 	bl	80006f4 <HAL_InitTick>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d002      	beq.n	80006e2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80006dc:	2301      	movs	r3, #1
 80006de:	71fb      	strb	r3, [r7, #7]
 80006e0:	e001      	b.n	80006e6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80006e2:	f7ff fefd 	bl	80004e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80006e6:	79fb      	ldrb	r3, [r7, #7]
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	3708      	adds	r7, #8
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40022000 	.word	0x40022000

080006f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80006fc:	2300      	movs	r3, #0
 80006fe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000700:	4b17      	ldr	r3, [pc, #92]	; (8000760 <HAL_InitTick+0x6c>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d023      	beq.n	8000750 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000708:	4b16      	ldr	r3, [pc, #88]	; (8000764 <HAL_InitTick+0x70>)
 800070a:	681a      	ldr	r2, [r3, #0]
 800070c:	4b14      	ldr	r3, [pc, #80]	; (8000760 <HAL_InitTick+0x6c>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	4619      	mov	r1, r3
 8000712:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000716:	fbb3 f3f1 	udiv	r3, r3, r1
 800071a:	fbb2 f3f3 	udiv	r3, r2, r3
 800071e:	4618      	mov	r0, r3
 8000720:	f000 f949 	bl	80009b6 <HAL_SYSTICK_Config>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d10f      	bne.n	800074a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	2b0f      	cmp	r3, #15
 800072e:	d809      	bhi.n	8000744 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000730:	2200      	movs	r2, #0
 8000732:	6879      	ldr	r1, [r7, #4]
 8000734:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000738:	f000 f913 	bl	8000962 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800073c:	4a0a      	ldr	r2, [pc, #40]	; (8000768 <HAL_InitTick+0x74>)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	6013      	str	r3, [r2, #0]
 8000742:	e007      	b.n	8000754 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000744:	2301      	movs	r3, #1
 8000746:	73fb      	strb	r3, [r7, #15]
 8000748:	e004      	b.n	8000754 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800074a:	2301      	movs	r3, #1
 800074c:	73fb      	strb	r3, [r7, #15]
 800074e:	e001      	b.n	8000754 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000750:	2301      	movs	r3, #1
 8000752:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000754:	7bfb      	ldrb	r3, [r7, #15]
}
 8000756:	4618      	mov	r0, r3
 8000758:	3710      	adds	r7, #16
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	20000008 	.word	0x20000008
 8000764:	20000000 	.word	0x20000000
 8000768:	20000004 	.word	0x20000004

0800076c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <HAL_IncTick+0x20>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	461a      	mov	r2, r3
 8000776:	4b06      	ldr	r3, [pc, #24]	; (8000790 <HAL_IncTick+0x24>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4413      	add	r3, r2
 800077c:	4a04      	ldr	r2, [pc, #16]	; (8000790 <HAL_IncTick+0x24>)
 800077e:	6013      	str	r3, [r2, #0]
}
 8000780:	bf00      	nop
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	20000008 	.word	0x20000008
 8000790:	200002d0 	.word	0x200002d0

08000794 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  return uwTick;
 8000798:	4b03      	ldr	r3, [pc, #12]	; (80007a8 <HAL_GetTick+0x14>)
 800079a:	681b      	ldr	r3, [r3, #0]
}
 800079c:	4618      	mov	r0, r3
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	200002d0 	.word	0x200002d0

080007ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b085      	sub	sp, #20
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	f003 0307 	and.w	r3, r3, #7
 80007ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007bc:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <__NVIC_SetPriorityGrouping+0x44>)
 80007be:	68db      	ldr	r3, [r3, #12]
 80007c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007c2:	68ba      	ldr	r2, [r7, #8]
 80007c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007c8:	4013      	ands	r3, r2
 80007ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007de:	4a04      	ldr	r2, [pc, #16]	; (80007f0 <__NVIC_SetPriorityGrouping+0x44>)
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	60d3      	str	r3, [r2, #12]
}
 80007e4:	bf00      	nop
 80007e6:	3714      	adds	r7, #20
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr
 80007f0:	e000ed00 	.word	0xe000ed00

080007f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007f8:	4b04      	ldr	r3, [pc, #16]	; (800080c <__NVIC_GetPriorityGrouping+0x18>)
 80007fa:	68db      	ldr	r3, [r3, #12]
 80007fc:	0a1b      	lsrs	r3, r3, #8
 80007fe:	f003 0307 	and.w	r3, r3, #7
}
 8000802:	4618      	mov	r0, r3
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr
 800080c:	e000ed00 	.word	0xe000ed00

08000810 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800081a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800081e:	2b00      	cmp	r3, #0
 8000820:	db0b      	blt.n	800083a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000822:	79fb      	ldrb	r3, [r7, #7]
 8000824:	f003 021f 	and.w	r2, r3, #31
 8000828:	4907      	ldr	r1, [pc, #28]	; (8000848 <__NVIC_EnableIRQ+0x38>)
 800082a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082e:	095b      	lsrs	r3, r3, #5
 8000830:	2001      	movs	r0, #1
 8000832:	fa00 f202 	lsl.w	r2, r0, r2
 8000836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800083a:	bf00      	nop
 800083c:	370c      	adds	r7, #12
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	e000e100 	.word	0xe000e100

0800084c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	6039      	str	r1, [r7, #0]
 8000856:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800085c:	2b00      	cmp	r3, #0
 800085e:	db0a      	blt.n	8000876 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	b2da      	uxtb	r2, r3
 8000864:	490c      	ldr	r1, [pc, #48]	; (8000898 <__NVIC_SetPriority+0x4c>)
 8000866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086a:	0112      	lsls	r2, r2, #4
 800086c:	b2d2      	uxtb	r2, r2
 800086e:	440b      	add	r3, r1
 8000870:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000874:	e00a      	b.n	800088c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	b2da      	uxtb	r2, r3
 800087a:	4908      	ldr	r1, [pc, #32]	; (800089c <__NVIC_SetPriority+0x50>)
 800087c:	79fb      	ldrb	r3, [r7, #7]
 800087e:	f003 030f 	and.w	r3, r3, #15
 8000882:	3b04      	subs	r3, #4
 8000884:	0112      	lsls	r2, r2, #4
 8000886:	b2d2      	uxtb	r2, r2
 8000888:	440b      	add	r3, r1
 800088a:	761a      	strb	r2, [r3, #24]
}
 800088c:	bf00      	nop
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr
 8000898:	e000e100 	.word	0xe000e100
 800089c:	e000ed00 	.word	0xe000ed00

080008a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b089      	sub	sp, #36	; 0x24
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	60f8      	str	r0, [r7, #12]
 80008a8:	60b9      	str	r1, [r7, #8]
 80008aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	f003 0307 	and.w	r3, r3, #7
 80008b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008b4:	69fb      	ldr	r3, [r7, #28]
 80008b6:	f1c3 0307 	rsb	r3, r3, #7
 80008ba:	2b04      	cmp	r3, #4
 80008bc:	bf28      	it	cs
 80008be:	2304      	movcs	r3, #4
 80008c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008c2:	69fb      	ldr	r3, [r7, #28]
 80008c4:	3304      	adds	r3, #4
 80008c6:	2b06      	cmp	r3, #6
 80008c8:	d902      	bls.n	80008d0 <NVIC_EncodePriority+0x30>
 80008ca:	69fb      	ldr	r3, [r7, #28]
 80008cc:	3b03      	subs	r3, #3
 80008ce:	e000      	b.n	80008d2 <NVIC_EncodePriority+0x32>
 80008d0:	2300      	movs	r3, #0
 80008d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80008d8:	69bb      	ldr	r3, [r7, #24]
 80008da:	fa02 f303 	lsl.w	r3, r2, r3
 80008de:	43da      	mvns	r2, r3
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	401a      	ands	r2, r3
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	fa01 f303 	lsl.w	r3, r1, r3
 80008f2:	43d9      	mvns	r1, r3
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008f8:	4313      	orrs	r3, r2
         );
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3724      	adds	r7, #36	; 0x24
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
	...

08000908 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	3b01      	subs	r3, #1
 8000914:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000918:	d301      	bcc.n	800091e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800091a:	2301      	movs	r3, #1
 800091c:	e00f      	b.n	800093e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800091e:	4a0a      	ldr	r2, [pc, #40]	; (8000948 <SysTick_Config+0x40>)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	3b01      	subs	r3, #1
 8000924:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000926:	210f      	movs	r1, #15
 8000928:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800092c:	f7ff ff8e 	bl	800084c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000930:	4b05      	ldr	r3, [pc, #20]	; (8000948 <SysTick_Config+0x40>)
 8000932:	2200      	movs	r2, #0
 8000934:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000936:	4b04      	ldr	r3, [pc, #16]	; (8000948 <SysTick_Config+0x40>)
 8000938:	2207      	movs	r2, #7
 800093a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800093c:	2300      	movs	r3, #0
}
 800093e:	4618      	mov	r0, r3
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	e000e010 	.word	0xe000e010

0800094c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000954:	6878      	ldr	r0, [r7, #4]
 8000956:	f7ff ff29 	bl	80007ac <__NVIC_SetPriorityGrouping>
}
 800095a:	bf00      	nop
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}

08000962 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000962:	b580      	push	{r7, lr}
 8000964:	b086      	sub	sp, #24
 8000966:	af00      	add	r7, sp, #0
 8000968:	4603      	mov	r3, r0
 800096a:	60b9      	str	r1, [r7, #8]
 800096c:	607a      	str	r2, [r7, #4]
 800096e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000970:	2300      	movs	r3, #0
 8000972:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000974:	f7ff ff3e 	bl	80007f4 <__NVIC_GetPriorityGrouping>
 8000978:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800097a:	687a      	ldr	r2, [r7, #4]
 800097c:	68b9      	ldr	r1, [r7, #8]
 800097e:	6978      	ldr	r0, [r7, #20]
 8000980:	f7ff ff8e 	bl	80008a0 <NVIC_EncodePriority>
 8000984:	4602      	mov	r2, r0
 8000986:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800098a:	4611      	mov	r1, r2
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff ff5d 	bl	800084c <__NVIC_SetPriority>
}
 8000992:	bf00      	nop
 8000994:	3718      	adds	r7, #24
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}

0800099a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800099a:	b580      	push	{r7, lr}
 800099c:	b082      	sub	sp, #8
 800099e:	af00      	add	r7, sp, #0
 80009a0:	4603      	mov	r3, r0
 80009a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff ff31 	bl	8000810 <__NVIC_EnableIRQ>
}
 80009ae:	bf00      	nop
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}

080009b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009b6:	b580      	push	{r7, lr}
 80009b8:	b082      	sub	sp, #8
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009be:	6878      	ldr	r0, [r7, #4]
 80009c0:	f7ff ffa2 	bl	8000908 <SysTick_Config>
 80009c4:	4603      	mov	r3, r0
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
	...

080009d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b087      	sub	sp, #28
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009da:	2300      	movs	r3, #0
 80009dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009de:	e17f      	b.n	8000ce0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	681a      	ldr	r2, [r3, #0]
 80009e4:	2101      	movs	r1, #1
 80009e6:	697b      	ldr	r3, [r7, #20]
 80009e8:	fa01 f303 	lsl.w	r3, r1, r3
 80009ec:	4013      	ands	r3, r2
 80009ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	f000 8171 	beq.w	8000cda <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	f003 0303 	and.w	r3, r3, #3
 8000a00:	2b01      	cmp	r3, #1
 8000a02:	d005      	beq.n	8000a10 <HAL_GPIO_Init+0x40>
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	685b      	ldr	r3, [r3, #4]
 8000a08:	f003 0303 	and.w	r3, r3, #3
 8000a0c:	2b02      	cmp	r3, #2
 8000a0e:	d130      	bne.n	8000a72 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	689b      	ldr	r3, [r3, #8]
 8000a14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	005b      	lsls	r3, r3, #1
 8000a1a:	2203      	movs	r2, #3
 8000a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a20:	43db      	mvns	r3, r3
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	4013      	ands	r3, r2
 8000a26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	68da      	ldr	r2, [r3, #12]
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	005b      	lsls	r3, r3, #1
 8000a30:	fa02 f303 	lsl.w	r3, r2, r3
 8000a34:	693a      	ldr	r2, [r7, #16]
 8000a36:	4313      	orrs	r3, r2
 8000a38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	693a      	ldr	r2, [r7, #16]
 8000a3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	685b      	ldr	r3, [r3, #4]
 8000a44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a46:	2201      	movs	r2, #1
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4e:	43db      	mvns	r3, r3
 8000a50:	693a      	ldr	r2, [r7, #16]
 8000a52:	4013      	ands	r3, r2
 8000a54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	091b      	lsrs	r3, r3, #4
 8000a5c:	f003 0201 	and.w	r2, r3, #1
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	fa02 f303 	lsl.w	r3, r2, r3
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	693a      	ldr	r2, [r7, #16]
 8000a70:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	f003 0303 	and.w	r3, r3, #3
 8000a7a:	2b03      	cmp	r3, #3
 8000a7c:	d118      	bne.n	8000ab0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000a84:	2201      	movs	r2, #1
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8c:	43db      	mvns	r3, r3
 8000a8e:	693a      	ldr	r2, [r7, #16]
 8000a90:	4013      	ands	r3, r2
 8000a92:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	08db      	lsrs	r3, r3, #3
 8000a9a:	f003 0201 	and.w	r2, r3, #1
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa4:	693a      	ldr	r2, [r7, #16]
 8000aa6:	4313      	orrs	r3, r2
 8000aa8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	693a      	ldr	r2, [r7, #16]
 8000aae:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	f003 0303 	and.w	r3, r3, #3
 8000ab8:	2b03      	cmp	r3, #3
 8000aba:	d017      	beq.n	8000aec <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	005b      	lsls	r3, r3, #1
 8000ac6:	2203      	movs	r2, #3
 8000ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8000acc:	43db      	mvns	r3, r3
 8000ace:	693a      	ldr	r2, [r7, #16]
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	689a      	ldr	r2, [r3, #8]
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	005b      	lsls	r3, r3, #1
 8000adc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae0:	693a      	ldr	r2, [r7, #16]
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	693a      	ldr	r2, [r7, #16]
 8000aea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	f003 0303 	and.w	r3, r3, #3
 8000af4:	2b02      	cmp	r3, #2
 8000af6:	d123      	bne.n	8000b40 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	08da      	lsrs	r2, r3, #3
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	3208      	adds	r2, #8
 8000b00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b04:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	f003 0307 	and.w	r3, r3, #7
 8000b0c:	009b      	lsls	r3, r3, #2
 8000b0e:	220f      	movs	r2, #15
 8000b10:	fa02 f303 	lsl.w	r3, r2, r3
 8000b14:	43db      	mvns	r3, r3
 8000b16:	693a      	ldr	r2, [r7, #16]
 8000b18:	4013      	ands	r3, r2
 8000b1a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	691a      	ldr	r2, [r3, #16]
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	f003 0307 	and.w	r3, r3, #7
 8000b26:	009b      	lsls	r3, r3, #2
 8000b28:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2c:	693a      	ldr	r2, [r7, #16]
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	08da      	lsrs	r2, r3, #3
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	3208      	adds	r2, #8
 8000b3a:	6939      	ldr	r1, [r7, #16]
 8000b3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	005b      	lsls	r3, r3, #1
 8000b4a:	2203      	movs	r2, #3
 8000b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b50:	43db      	mvns	r3, r3
 8000b52:	693a      	ldr	r2, [r7, #16]
 8000b54:	4013      	ands	r3, r2
 8000b56:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	f003 0203 	and.w	r2, r3, #3
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	005b      	lsls	r3, r3, #1
 8000b64:	fa02 f303 	lsl.w	r3, r2, r3
 8000b68:	693a      	ldr	r2, [r7, #16]
 8000b6a:	4313      	orrs	r3, r2
 8000b6c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	693a      	ldr	r2, [r7, #16]
 8000b72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	f000 80ac 	beq.w	8000cda <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b82:	4b5f      	ldr	r3, [pc, #380]	; (8000d00 <HAL_GPIO_Init+0x330>)
 8000b84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b86:	4a5e      	ldr	r2, [pc, #376]	; (8000d00 <HAL_GPIO_Init+0x330>)
 8000b88:	f043 0301 	orr.w	r3, r3, #1
 8000b8c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b8e:	4b5c      	ldr	r3, [pc, #368]	; (8000d00 <HAL_GPIO_Init+0x330>)
 8000b90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	60bb      	str	r3, [r7, #8]
 8000b98:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b9a:	4a5a      	ldr	r2, [pc, #360]	; (8000d04 <HAL_GPIO_Init+0x334>)
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	089b      	lsrs	r3, r3, #2
 8000ba0:	3302      	adds	r3, #2
 8000ba2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ba6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	f003 0303 	and.w	r3, r3, #3
 8000bae:	009b      	lsls	r3, r3, #2
 8000bb0:	220f      	movs	r2, #15
 8000bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb6:	43db      	mvns	r3, r3
 8000bb8:	693a      	ldr	r2, [r7, #16]
 8000bba:	4013      	ands	r3, r2
 8000bbc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000bc4:	d025      	beq.n	8000c12 <HAL_GPIO_Init+0x242>
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4a4f      	ldr	r2, [pc, #316]	; (8000d08 <HAL_GPIO_Init+0x338>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d01f      	beq.n	8000c0e <HAL_GPIO_Init+0x23e>
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4a4e      	ldr	r2, [pc, #312]	; (8000d0c <HAL_GPIO_Init+0x33c>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d019      	beq.n	8000c0a <HAL_GPIO_Init+0x23a>
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4a4d      	ldr	r2, [pc, #308]	; (8000d10 <HAL_GPIO_Init+0x340>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d013      	beq.n	8000c06 <HAL_GPIO_Init+0x236>
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4a4c      	ldr	r2, [pc, #304]	; (8000d14 <HAL_GPIO_Init+0x344>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d00d      	beq.n	8000c02 <HAL_GPIO_Init+0x232>
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4a4b      	ldr	r2, [pc, #300]	; (8000d18 <HAL_GPIO_Init+0x348>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d007      	beq.n	8000bfe <HAL_GPIO_Init+0x22e>
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4a4a      	ldr	r2, [pc, #296]	; (8000d1c <HAL_GPIO_Init+0x34c>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d101      	bne.n	8000bfa <HAL_GPIO_Init+0x22a>
 8000bf6:	2306      	movs	r3, #6
 8000bf8:	e00c      	b.n	8000c14 <HAL_GPIO_Init+0x244>
 8000bfa:	2307      	movs	r3, #7
 8000bfc:	e00a      	b.n	8000c14 <HAL_GPIO_Init+0x244>
 8000bfe:	2305      	movs	r3, #5
 8000c00:	e008      	b.n	8000c14 <HAL_GPIO_Init+0x244>
 8000c02:	2304      	movs	r3, #4
 8000c04:	e006      	b.n	8000c14 <HAL_GPIO_Init+0x244>
 8000c06:	2303      	movs	r3, #3
 8000c08:	e004      	b.n	8000c14 <HAL_GPIO_Init+0x244>
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	e002      	b.n	8000c14 <HAL_GPIO_Init+0x244>
 8000c0e:	2301      	movs	r3, #1
 8000c10:	e000      	b.n	8000c14 <HAL_GPIO_Init+0x244>
 8000c12:	2300      	movs	r3, #0
 8000c14:	697a      	ldr	r2, [r7, #20]
 8000c16:	f002 0203 	and.w	r2, r2, #3
 8000c1a:	0092      	lsls	r2, r2, #2
 8000c1c:	4093      	lsls	r3, r2
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	4313      	orrs	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c24:	4937      	ldr	r1, [pc, #220]	; (8000d04 <HAL_GPIO_Init+0x334>)
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	089b      	lsrs	r3, r3, #2
 8000c2a:	3302      	adds	r3, #2
 8000c2c:	693a      	ldr	r2, [r7, #16]
 8000c2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c32:	4b3b      	ldr	r3, [pc, #236]	; (8000d20 <HAL_GPIO_Init+0x350>)
 8000c34:	689b      	ldr	r3, [r3, #8]
 8000c36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	43db      	mvns	r3, r3
 8000c3c:	693a      	ldr	r2, [r7, #16]
 8000c3e:	4013      	ands	r3, r2
 8000c40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d003      	beq.n	8000c56 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000c4e:	693a      	ldr	r2, [r7, #16]
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	4313      	orrs	r3, r2
 8000c54:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000c56:	4a32      	ldr	r2, [pc, #200]	; (8000d20 <HAL_GPIO_Init+0x350>)
 8000c58:	693b      	ldr	r3, [r7, #16]
 8000c5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000c5c:	4b30      	ldr	r3, [pc, #192]	; (8000d20 <HAL_GPIO_Init+0x350>)
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	43db      	mvns	r3, r3
 8000c66:	693a      	ldr	r2, [r7, #16]
 8000c68:	4013      	ands	r3, r2
 8000c6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d003      	beq.n	8000c80 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000c78:	693a      	ldr	r2, [r7, #16]
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000c80:	4a27      	ldr	r2, [pc, #156]	; (8000d20 <HAL_GPIO_Init+0x350>)
 8000c82:	693b      	ldr	r3, [r7, #16]
 8000c84:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000c86:	4b26      	ldr	r3, [pc, #152]	; (8000d20 <HAL_GPIO_Init+0x350>)
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	43db      	mvns	r3, r3
 8000c90:	693a      	ldr	r2, [r7, #16]
 8000c92:	4013      	ands	r3, r2
 8000c94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d003      	beq.n	8000caa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000caa:	4a1d      	ldr	r2, [pc, #116]	; (8000d20 <HAL_GPIO_Init+0x350>)
 8000cac:	693b      	ldr	r3, [r7, #16]
 8000cae:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000cb0:	4b1b      	ldr	r3, [pc, #108]	; (8000d20 <HAL_GPIO_Init+0x350>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	43db      	mvns	r3, r3
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d003      	beq.n	8000cd4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000cd4:	4a12      	ldr	r2, [pc, #72]	; (8000d20 <HAL_GPIO_Init+0x350>)
 8000cd6:	693b      	ldr	r3, [r7, #16]
 8000cd8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	fa22 f303 	lsr.w	r3, r2, r3
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	f47f ae78 	bne.w	80009e0 <HAL_GPIO_Init+0x10>
  }
}
 8000cf0:	bf00      	nop
 8000cf2:	bf00      	nop
 8000cf4:	371c      	adds	r7, #28
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	40021000 	.word	0x40021000
 8000d04:	40010000 	.word	0x40010000
 8000d08:	48000400 	.word	0x48000400
 8000d0c:	48000800 	.word	0x48000800
 8000d10:	48000c00 	.word	0x48000c00
 8000d14:	48001000 	.word	0x48001000
 8000d18:	48001400 	.word	0x48001400
 8000d1c:	48001800 	.word	0x48001800
 8000d20:	40010400 	.word	0x40010400

08000d24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	460b      	mov	r3, r1
 8000d2e:	807b      	strh	r3, [r7, #2]
 8000d30:	4613      	mov	r3, r2
 8000d32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d34:	787b      	ldrb	r3, [r7, #1]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d003      	beq.n	8000d42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d3a:	887a      	ldrh	r2, [r7, #2]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d40:	e002      	b.n	8000d48 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d42:	887a      	ldrh	r2, [r7, #2]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d48:	bf00      	nop
 8000d4a:	370c      	adds	r7, #12
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr

08000d54 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	460b      	mov	r3, r1
 8000d5e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	695b      	ldr	r3, [r3, #20]
 8000d64:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d66:	887a      	ldrh	r2, [r7, #2]
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	041a      	lsls	r2, r3, #16
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	43d9      	mvns	r1, r3
 8000d72:	887b      	ldrh	r3, [r7, #2]
 8000d74:	400b      	ands	r3, r1
 8000d76:	431a      	orrs	r2, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	619a      	str	r2, [r3, #24]
}
 8000d7c:	bf00      	nop
 8000d7e:	3714      	adds	r7, #20
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000d8c:	4b04      	ldr	r3, [pc, #16]	; (8000da0 <HAL_PWREx_GetVoltageRange+0x18>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	40007000 	.word	0x40007000

08000da4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000db2:	d130      	bne.n	8000e16 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000db4:	4b23      	ldr	r3, [pc, #140]	; (8000e44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000dbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000dc0:	d038      	beq.n	8000e34 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dc2:	4b20      	ldr	r3, [pc, #128]	; (8000e44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000dca:	4a1e      	ldr	r2, [pc, #120]	; (8000e44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dcc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dd0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000dd2:	4b1d      	ldr	r3, [pc, #116]	; (8000e48 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	2232      	movs	r2, #50	; 0x32
 8000dd8:	fb02 f303 	mul.w	r3, r2, r3
 8000ddc:	4a1b      	ldr	r2, [pc, #108]	; (8000e4c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000dde:	fba2 2303 	umull	r2, r3, r2, r3
 8000de2:	0c9b      	lsrs	r3, r3, #18
 8000de4:	3301      	adds	r3, #1
 8000de6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000de8:	e002      	b.n	8000df0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	3b01      	subs	r3, #1
 8000dee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000df0:	4b14      	ldr	r3, [pc, #80]	; (8000e44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000df2:	695b      	ldr	r3, [r3, #20]
 8000df4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000df8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000dfc:	d102      	bne.n	8000e04 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d1f2      	bne.n	8000dea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e04:	4b0f      	ldr	r3, [pc, #60]	; (8000e44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e06:	695b      	ldr	r3, [r3, #20]
 8000e08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e10:	d110      	bne.n	8000e34 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000e12:	2303      	movs	r3, #3
 8000e14:	e00f      	b.n	8000e36 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000e16:	4b0b      	ldr	r3, [pc, #44]	; (8000e44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e22:	d007      	beq.n	8000e34 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e24:	4b07      	ldr	r3, [pc, #28]	; (8000e44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e2c:	4a05      	ldr	r2, [pc, #20]	; (8000e44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e32:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000e34:	2300      	movs	r3, #0
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3714      	adds	r7, #20
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	40007000 	.word	0x40007000
 8000e48:	20000000 	.word	0x20000000
 8000e4c:	431bde83 	.word	0x431bde83

08000e50 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b088      	sub	sp, #32
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d101      	bne.n	8000e62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e3ca      	b.n	80015f8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e62:	4b97      	ldr	r3, [pc, #604]	; (80010c0 <HAL_RCC_OscConfig+0x270>)
 8000e64:	689b      	ldr	r3, [r3, #8]
 8000e66:	f003 030c 	and.w	r3, r3, #12
 8000e6a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e6c:	4b94      	ldr	r3, [pc, #592]	; (80010c0 <HAL_RCC_OscConfig+0x270>)
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	f003 0303 	and.w	r3, r3, #3
 8000e74:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f003 0310 	and.w	r3, r3, #16
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	f000 80e4 	beq.w	800104c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000e84:	69bb      	ldr	r3, [r7, #24]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d007      	beq.n	8000e9a <HAL_RCC_OscConfig+0x4a>
 8000e8a:	69bb      	ldr	r3, [r7, #24]
 8000e8c:	2b0c      	cmp	r3, #12
 8000e8e:	f040 808b 	bne.w	8000fa8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	f040 8087 	bne.w	8000fa8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e9a:	4b89      	ldr	r3, [pc, #548]	; (80010c0 <HAL_RCC_OscConfig+0x270>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f003 0302 	and.w	r3, r3, #2
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d005      	beq.n	8000eb2 <HAL_RCC_OscConfig+0x62>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	699b      	ldr	r3, [r3, #24]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d101      	bne.n	8000eb2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e3a2      	b.n	80015f8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6a1a      	ldr	r2, [r3, #32]
 8000eb6:	4b82      	ldr	r3, [pc, #520]	; (80010c0 <HAL_RCC_OscConfig+0x270>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f003 0308 	and.w	r3, r3, #8
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d004      	beq.n	8000ecc <HAL_RCC_OscConfig+0x7c>
 8000ec2:	4b7f      	ldr	r3, [pc, #508]	; (80010c0 <HAL_RCC_OscConfig+0x270>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000eca:	e005      	b.n	8000ed8 <HAL_RCC_OscConfig+0x88>
 8000ecc:	4b7c      	ldr	r3, [pc, #496]	; (80010c0 <HAL_RCC_OscConfig+0x270>)
 8000ece:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ed2:	091b      	lsrs	r3, r3, #4
 8000ed4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d223      	bcs.n	8000f24 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6a1b      	ldr	r3, [r3, #32]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f000 fd1d 	bl	8001920 <RCC_SetFlashLatencyFromMSIRange>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000eec:	2301      	movs	r3, #1
 8000eee:	e383      	b.n	80015f8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ef0:	4b73      	ldr	r3, [pc, #460]	; (80010c0 <HAL_RCC_OscConfig+0x270>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a72      	ldr	r2, [pc, #456]	; (80010c0 <HAL_RCC_OscConfig+0x270>)
 8000ef6:	f043 0308 	orr.w	r3, r3, #8
 8000efa:	6013      	str	r3, [r2, #0]
 8000efc:	4b70      	ldr	r3, [pc, #448]	; (80010c0 <HAL_RCC_OscConfig+0x270>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6a1b      	ldr	r3, [r3, #32]
 8000f08:	496d      	ldr	r1, [pc, #436]	; (80010c0 <HAL_RCC_OscConfig+0x270>)
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f0e:	4b6c      	ldr	r3, [pc, #432]	; (80010c0 <HAL_RCC_OscConfig+0x270>)
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	69db      	ldr	r3, [r3, #28]
 8000f1a:	021b      	lsls	r3, r3, #8
 8000f1c:	4968      	ldr	r1, [pc, #416]	; (80010c0 <HAL_RCC_OscConfig+0x270>)
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	604b      	str	r3, [r1, #4]
 8000f22:	e025      	b.n	8000f70 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f24:	4b66      	ldr	r3, [pc, #408]	; (80010c0 <HAL_RCC_OscConfig+0x270>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a65      	ldr	r2, [pc, #404]	; (80010c0 <HAL_RCC_OscConfig+0x270>)
 8000f2a:	f043 0308 	orr.w	r3, r3, #8
 8000f2e:	6013      	str	r3, [r2, #0]
 8000f30:	4b63      	ldr	r3, [pc, #396]	; (80010c0 <HAL_RCC_OscConfig+0x270>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6a1b      	ldr	r3, [r3, #32]
 8000f3c:	4960      	ldr	r1, [pc, #384]	; (80010c0 <HAL_RCC_OscConfig+0x270>)
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f42:	4b5f      	ldr	r3, [pc, #380]	; (80010c0 <HAL_RCC_OscConfig+0x270>)
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	69db      	ldr	r3, [r3, #28]
 8000f4e:	021b      	lsls	r3, r3, #8
 8000f50:	495b      	ldr	r1, [pc, #364]	; (80010c0 <HAL_RCC_OscConfig+0x270>)
 8000f52:	4313      	orrs	r3, r2
 8000f54:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000f56:	69bb      	ldr	r3, [r7, #24]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d109      	bne.n	8000f70 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6a1b      	ldr	r3, [r3, #32]
 8000f60:	4618      	mov	r0, r3
 8000f62:	f000 fcdd 	bl	8001920 <RCC_SetFlashLatencyFromMSIRange>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	e343      	b.n	80015f8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000f70:	f000 fc4a 	bl	8001808 <HAL_RCC_GetSysClockFreq>
 8000f74:	4602      	mov	r2, r0
 8000f76:	4b52      	ldr	r3, [pc, #328]	; (80010c0 <HAL_RCC_OscConfig+0x270>)
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	091b      	lsrs	r3, r3, #4
 8000f7c:	f003 030f 	and.w	r3, r3, #15
 8000f80:	4950      	ldr	r1, [pc, #320]	; (80010c4 <HAL_RCC_OscConfig+0x274>)
 8000f82:	5ccb      	ldrb	r3, [r1, r3]
 8000f84:	f003 031f 	and.w	r3, r3, #31
 8000f88:	fa22 f303 	lsr.w	r3, r2, r3
 8000f8c:	4a4e      	ldr	r2, [pc, #312]	; (80010c8 <HAL_RCC_OscConfig+0x278>)
 8000f8e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000f90:	4b4e      	ldr	r3, [pc, #312]	; (80010cc <HAL_RCC_OscConfig+0x27c>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff fbad 	bl	80006f4 <HAL_InitTick>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000f9e:	7bfb      	ldrb	r3, [r7, #15]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d052      	beq.n	800104a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000fa4:	7bfb      	ldrb	r3, [r7, #15]
 8000fa6:	e327      	b.n	80015f8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d032      	beq.n	8001016 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000fb0:	4b43      	ldr	r3, [pc, #268]	; (80010c0 <HAL_RCC_OscConfig+0x270>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a42      	ldr	r2, [pc, #264]	; (80010c0 <HAL_RCC_OscConfig+0x270>)
 8000fb6:	f043 0301 	orr.w	r3, r3, #1
 8000fba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000fbc:	f7ff fbea 	bl	8000794 <HAL_GetTick>
 8000fc0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000fc2:	e008      	b.n	8000fd6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000fc4:	f7ff fbe6 	bl	8000794 <HAL_GetTick>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	2b02      	cmp	r3, #2
 8000fd0:	d901      	bls.n	8000fd6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	e310      	b.n	80015f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000fd6:	4b3a      	ldr	r3, [pc, #232]	; (80010c0 <HAL_RCC_OscConfig+0x270>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f003 0302 	and.w	r3, r3, #2
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d0f0      	beq.n	8000fc4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fe2:	4b37      	ldr	r3, [pc, #220]	; (80010c0 <HAL_RCC_OscConfig+0x270>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a36      	ldr	r2, [pc, #216]	; (80010c0 <HAL_RCC_OscConfig+0x270>)
 8000fe8:	f043 0308 	orr.w	r3, r3, #8
 8000fec:	6013      	str	r3, [r2, #0]
 8000fee:	4b34      	ldr	r3, [pc, #208]	; (80010c0 <HAL_RCC_OscConfig+0x270>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6a1b      	ldr	r3, [r3, #32]
 8000ffa:	4931      	ldr	r1, [pc, #196]	; (80010c0 <HAL_RCC_OscConfig+0x270>)
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001000:	4b2f      	ldr	r3, [pc, #188]	; (80010c0 <HAL_RCC_OscConfig+0x270>)
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	69db      	ldr	r3, [r3, #28]
 800100c:	021b      	lsls	r3, r3, #8
 800100e:	492c      	ldr	r1, [pc, #176]	; (80010c0 <HAL_RCC_OscConfig+0x270>)
 8001010:	4313      	orrs	r3, r2
 8001012:	604b      	str	r3, [r1, #4]
 8001014:	e01a      	b.n	800104c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001016:	4b2a      	ldr	r3, [pc, #168]	; (80010c0 <HAL_RCC_OscConfig+0x270>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a29      	ldr	r2, [pc, #164]	; (80010c0 <HAL_RCC_OscConfig+0x270>)
 800101c:	f023 0301 	bic.w	r3, r3, #1
 8001020:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001022:	f7ff fbb7 	bl	8000794 <HAL_GetTick>
 8001026:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001028:	e008      	b.n	800103c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800102a:	f7ff fbb3 	bl	8000794 <HAL_GetTick>
 800102e:	4602      	mov	r2, r0
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	1ad3      	subs	r3, r2, r3
 8001034:	2b02      	cmp	r3, #2
 8001036:	d901      	bls.n	800103c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001038:	2303      	movs	r3, #3
 800103a:	e2dd      	b.n	80015f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800103c:	4b20      	ldr	r3, [pc, #128]	; (80010c0 <HAL_RCC_OscConfig+0x270>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f003 0302 	and.w	r3, r3, #2
 8001044:	2b00      	cmp	r3, #0
 8001046:	d1f0      	bne.n	800102a <HAL_RCC_OscConfig+0x1da>
 8001048:	e000      	b.n	800104c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800104a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f003 0301 	and.w	r3, r3, #1
 8001054:	2b00      	cmp	r3, #0
 8001056:	d074      	beq.n	8001142 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001058:	69bb      	ldr	r3, [r7, #24]
 800105a:	2b08      	cmp	r3, #8
 800105c:	d005      	beq.n	800106a <HAL_RCC_OscConfig+0x21a>
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	2b0c      	cmp	r3, #12
 8001062:	d10e      	bne.n	8001082 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	2b03      	cmp	r3, #3
 8001068:	d10b      	bne.n	8001082 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800106a:	4b15      	ldr	r3, [pc, #84]	; (80010c0 <HAL_RCC_OscConfig+0x270>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d064      	beq.n	8001140 <HAL_RCC_OscConfig+0x2f0>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d160      	bne.n	8001140 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e2ba      	b.n	80015f8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800108a:	d106      	bne.n	800109a <HAL_RCC_OscConfig+0x24a>
 800108c:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <HAL_RCC_OscConfig+0x270>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a0b      	ldr	r2, [pc, #44]	; (80010c0 <HAL_RCC_OscConfig+0x270>)
 8001092:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001096:	6013      	str	r3, [r2, #0]
 8001098:	e026      	b.n	80010e8 <HAL_RCC_OscConfig+0x298>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010a2:	d115      	bne.n	80010d0 <HAL_RCC_OscConfig+0x280>
 80010a4:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <HAL_RCC_OscConfig+0x270>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a05      	ldr	r2, [pc, #20]	; (80010c0 <HAL_RCC_OscConfig+0x270>)
 80010aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010ae:	6013      	str	r3, [r2, #0]
 80010b0:	4b03      	ldr	r3, [pc, #12]	; (80010c0 <HAL_RCC_OscConfig+0x270>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a02      	ldr	r2, [pc, #8]	; (80010c0 <HAL_RCC_OscConfig+0x270>)
 80010b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010ba:	6013      	str	r3, [r2, #0]
 80010bc:	e014      	b.n	80010e8 <HAL_RCC_OscConfig+0x298>
 80010be:	bf00      	nop
 80010c0:	40021000 	.word	0x40021000
 80010c4:	08003d8c 	.word	0x08003d8c
 80010c8:	20000000 	.word	0x20000000
 80010cc:	20000004 	.word	0x20000004
 80010d0:	4ba0      	ldr	r3, [pc, #640]	; (8001354 <HAL_RCC_OscConfig+0x504>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a9f      	ldr	r2, [pc, #636]	; (8001354 <HAL_RCC_OscConfig+0x504>)
 80010d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010da:	6013      	str	r3, [r2, #0]
 80010dc:	4b9d      	ldr	r3, [pc, #628]	; (8001354 <HAL_RCC_OscConfig+0x504>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a9c      	ldr	r2, [pc, #624]	; (8001354 <HAL_RCC_OscConfig+0x504>)
 80010e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d013      	beq.n	8001118 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010f0:	f7ff fb50 	bl	8000794 <HAL_GetTick>
 80010f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010f6:	e008      	b.n	800110a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010f8:	f7ff fb4c 	bl	8000794 <HAL_GetTick>
 80010fc:	4602      	mov	r2, r0
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	2b64      	cmp	r3, #100	; 0x64
 8001104:	d901      	bls.n	800110a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001106:	2303      	movs	r3, #3
 8001108:	e276      	b.n	80015f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800110a:	4b92      	ldr	r3, [pc, #584]	; (8001354 <HAL_RCC_OscConfig+0x504>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d0f0      	beq.n	80010f8 <HAL_RCC_OscConfig+0x2a8>
 8001116:	e014      	b.n	8001142 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001118:	f7ff fb3c 	bl	8000794 <HAL_GetTick>
 800111c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800111e:	e008      	b.n	8001132 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001120:	f7ff fb38 	bl	8000794 <HAL_GetTick>
 8001124:	4602      	mov	r2, r0
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	2b64      	cmp	r3, #100	; 0x64
 800112c:	d901      	bls.n	8001132 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800112e:	2303      	movs	r3, #3
 8001130:	e262      	b.n	80015f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001132:	4b88      	ldr	r3, [pc, #544]	; (8001354 <HAL_RCC_OscConfig+0x504>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d1f0      	bne.n	8001120 <HAL_RCC_OscConfig+0x2d0>
 800113e:	e000      	b.n	8001142 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001140:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f003 0302 	and.w	r3, r3, #2
 800114a:	2b00      	cmp	r3, #0
 800114c:	d060      	beq.n	8001210 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	2b04      	cmp	r3, #4
 8001152:	d005      	beq.n	8001160 <HAL_RCC_OscConfig+0x310>
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	2b0c      	cmp	r3, #12
 8001158:	d119      	bne.n	800118e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	2b02      	cmp	r3, #2
 800115e:	d116      	bne.n	800118e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001160:	4b7c      	ldr	r3, [pc, #496]	; (8001354 <HAL_RCC_OscConfig+0x504>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001168:	2b00      	cmp	r3, #0
 800116a:	d005      	beq.n	8001178 <HAL_RCC_OscConfig+0x328>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d101      	bne.n	8001178 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001174:	2301      	movs	r3, #1
 8001176:	e23f      	b.n	80015f8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001178:	4b76      	ldr	r3, [pc, #472]	; (8001354 <HAL_RCC_OscConfig+0x504>)
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	691b      	ldr	r3, [r3, #16]
 8001184:	061b      	lsls	r3, r3, #24
 8001186:	4973      	ldr	r1, [pc, #460]	; (8001354 <HAL_RCC_OscConfig+0x504>)
 8001188:	4313      	orrs	r3, r2
 800118a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800118c:	e040      	b.n	8001210 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	68db      	ldr	r3, [r3, #12]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d023      	beq.n	80011de <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001196:	4b6f      	ldr	r3, [pc, #444]	; (8001354 <HAL_RCC_OscConfig+0x504>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a6e      	ldr	r2, [pc, #440]	; (8001354 <HAL_RCC_OscConfig+0x504>)
 800119c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011a2:	f7ff faf7 	bl	8000794 <HAL_GetTick>
 80011a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011a8:	e008      	b.n	80011bc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011aa:	f7ff faf3 	bl	8000794 <HAL_GetTick>
 80011ae:	4602      	mov	r2, r0
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d901      	bls.n	80011bc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80011b8:	2303      	movs	r3, #3
 80011ba:	e21d      	b.n	80015f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011bc:	4b65      	ldr	r3, [pc, #404]	; (8001354 <HAL_RCC_OscConfig+0x504>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d0f0      	beq.n	80011aa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011c8:	4b62      	ldr	r3, [pc, #392]	; (8001354 <HAL_RCC_OscConfig+0x504>)
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	691b      	ldr	r3, [r3, #16]
 80011d4:	061b      	lsls	r3, r3, #24
 80011d6:	495f      	ldr	r1, [pc, #380]	; (8001354 <HAL_RCC_OscConfig+0x504>)
 80011d8:	4313      	orrs	r3, r2
 80011da:	604b      	str	r3, [r1, #4]
 80011dc:	e018      	b.n	8001210 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011de:	4b5d      	ldr	r3, [pc, #372]	; (8001354 <HAL_RCC_OscConfig+0x504>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a5c      	ldr	r2, [pc, #368]	; (8001354 <HAL_RCC_OscConfig+0x504>)
 80011e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011ea:	f7ff fad3 	bl	8000794 <HAL_GetTick>
 80011ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011f0:	e008      	b.n	8001204 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011f2:	f7ff facf 	bl	8000794 <HAL_GetTick>
 80011f6:	4602      	mov	r2, r0
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d901      	bls.n	8001204 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001200:	2303      	movs	r3, #3
 8001202:	e1f9      	b.n	80015f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001204:	4b53      	ldr	r3, [pc, #332]	; (8001354 <HAL_RCC_OscConfig+0x504>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800120c:	2b00      	cmp	r3, #0
 800120e:	d1f0      	bne.n	80011f2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f003 0308 	and.w	r3, r3, #8
 8001218:	2b00      	cmp	r3, #0
 800121a:	d03c      	beq.n	8001296 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	695b      	ldr	r3, [r3, #20]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d01c      	beq.n	800125e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001224:	4b4b      	ldr	r3, [pc, #300]	; (8001354 <HAL_RCC_OscConfig+0x504>)
 8001226:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800122a:	4a4a      	ldr	r2, [pc, #296]	; (8001354 <HAL_RCC_OscConfig+0x504>)
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001234:	f7ff faae 	bl	8000794 <HAL_GetTick>
 8001238:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800123a:	e008      	b.n	800124e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800123c:	f7ff faaa 	bl	8000794 <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	2b02      	cmp	r3, #2
 8001248:	d901      	bls.n	800124e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800124a:	2303      	movs	r3, #3
 800124c:	e1d4      	b.n	80015f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800124e:	4b41      	ldr	r3, [pc, #260]	; (8001354 <HAL_RCC_OscConfig+0x504>)
 8001250:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001254:	f003 0302 	and.w	r3, r3, #2
 8001258:	2b00      	cmp	r3, #0
 800125a:	d0ef      	beq.n	800123c <HAL_RCC_OscConfig+0x3ec>
 800125c:	e01b      	b.n	8001296 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800125e:	4b3d      	ldr	r3, [pc, #244]	; (8001354 <HAL_RCC_OscConfig+0x504>)
 8001260:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001264:	4a3b      	ldr	r2, [pc, #236]	; (8001354 <HAL_RCC_OscConfig+0x504>)
 8001266:	f023 0301 	bic.w	r3, r3, #1
 800126a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800126e:	f7ff fa91 	bl	8000794 <HAL_GetTick>
 8001272:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001274:	e008      	b.n	8001288 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001276:	f7ff fa8d 	bl	8000794 <HAL_GetTick>
 800127a:	4602      	mov	r2, r0
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	1ad3      	subs	r3, r2, r3
 8001280:	2b02      	cmp	r3, #2
 8001282:	d901      	bls.n	8001288 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001284:	2303      	movs	r3, #3
 8001286:	e1b7      	b.n	80015f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001288:	4b32      	ldr	r3, [pc, #200]	; (8001354 <HAL_RCC_OscConfig+0x504>)
 800128a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	2b00      	cmp	r3, #0
 8001294:	d1ef      	bne.n	8001276 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0304 	and.w	r3, r3, #4
 800129e:	2b00      	cmp	r3, #0
 80012a0:	f000 80a6 	beq.w	80013f0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012a4:	2300      	movs	r3, #0
 80012a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80012a8:	4b2a      	ldr	r3, [pc, #168]	; (8001354 <HAL_RCC_OscConfig+0x504>)
 80012aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d10d      	bne.n	80012d0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012b4:	4b27      	ldr	r3, [pc, #156]	; (8001354 <HAL_RCC_OscConfig+0x504>)
 80012b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012b8:	4a26      	ldr	r2, [pc, #152]	; (8001354 <HAL_RCC_OscConfig+0x504>)
 80012ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012be:	6593      	str	r3, [r2, #88]	; 0x58
 80012c0:	4b24      	ldr	r3, [pc, #144]	; (8001354 <HAL_RCC_OscConfig+0x504>)
 80012c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c8:	60bb      	str	r3, [r7, #8]
 80012ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012cc:	2301      	movs	r3, #1
 80012ce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012d0:	4b21      	ldr	r3, [pc, #132]	; (8001358 <HAL_RCC_OscConfig+0x508>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d118      	bne.n	800130e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80012dc:	4b1e      	ldr	r3, [pc, #120]	; (8001358 <HAL_RCC_OscConfig+0x508>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a1d      	ldr	r2, [pc, #116]	; (8001358 <HAL_RCC_OscConfig+0x508>)
 80012e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012e8:	f7ff fa54 	bl	8000794 <HAL_GetTick>
 80012ec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012ee:	e008      	b.n	8001302 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012f0:	f7ff fa50 	bl	8000794 <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d901      	bls.n	8001302 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e17a      	b.n	80015f8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001302:	4b15      	ldr	r3, [pc, #84]	; (8001358 <HAL_RCC_OscConfig+0x508>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800130a:	2b00      	cmp	r3, #0
 800130c:	d0f0      	beq.n	80012f0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	2b01      	cmp	r3, #1
 8001314:	d108      	bne.n	8001328 <HAL_RCC_OscConfig+0x4d8>
 8001316:	4b0f      	ldr	r3, [pc, #60]	; (8001354 <HAL_RCC_OscConfig+0x504>)
 8001318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800131c:	4a0d      	ldr	r2, [pc, #52]	; (8001354 <HAL_RCC_OscConfig+0x504>)
 800131e:	f043 0301 	orr.w	r3, r3, #1
 8001322:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001326:	e029      	b.n	800137c <HAL_RCC_OscConfig+0x52c>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	2b05      	cmp	r3, #5
 800132e:	d115      	bne.n	800135c <HAL_RCC_OscConfig+0x50c>
 8001330:	4b08      	ldr	r3, [pc, #32]	; (8001354 <HAL_RCC_OscConfig+0x504>)
 8001332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001336:	4a07      	ldr	r2, [pc, #28]	; (8001354 <HAL_RCC_OscConfig+0x504>)
 8001338:	f043 0304 	orr.w	r3, r3, #4
 800133c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001340:	4b04      	ldr	r3, [pc, #16]	; (8001354 <HAL_RCC_OscConfig+0x504>)
 8001342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001346:	4a03      	ldr	r2, [pc, #12]	; (8001354 <HAL_RCC_OscConfig+0x504>)
 8001348:	f043 0301 	orr.w	r3, r3, #1
 800134c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001350:	e014      	b.n	800137c <HAL_RCC_OscConfig+0x52c>
 8001352:	bf00      	nop
 8001354:	40021000 	.word	0x40021000
 8001358:	40007000 	.word	0x40007000
 800135c:	4b9c      	ldr	r3, [pc, #624]	; (80015d0 <HAL_RCC_OscConfig+0x780>)
 800135e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001362:	4a9b      	ldr	r2, [pc, #620]	; (80015d0 <HAL_RCC_OscConfig+0x780>)
 8001364:	f023 0301 	bic.w	r3, r3, #1
 8001368:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800136c:	4b98      	ldr	r3, [pc, #608]	; (80015d0 <HAL_RCC_OscConfig+0x780>)
 800136e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001372:	4a97      	ldr	r2, [pc, #604]	; (80015d0 <HAL_RCC_OscConfig+0x780>)
 8001374:	f023 0304 	bic.w	r3, r3, #4
 8001378:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d016      	beq.n	80013b2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001384:	f7ff fa06 	bl	8000794 <HAL_GetTick>
 8001388:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800138a:	e00a      	b.n	80013a2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800138c:	f7ff fa02 	bl	8000794 <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	f241 3288 	movw	r2, #5000	; 0x1388
 800139a:	4293      	cmp	r3, r2
 800139c:	d901      	bls.n	80013a2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e12a      	b.n	80015f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80013a2:	4b8b      	ldr	r3, [pc, #556]	; (80015d0 <HAL_RCC_OscConfig+0x780>)
 80013a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013a8:	f003 0302 	and.w	r3, r3, #2
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d0ed      	beq.n	800138c <HAL_RCC_OscConfig+0x53c>
 80013b0:	e015      	b.n	80013de <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013b2:	f7ff f9ef 	bl	8000794 <HAL_GetTick>
 80013b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013b8:	e00a      	b.n	80013d0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013ba:	f7ff f9eb 	bl	8000794 <HAL_GetTick>
 80013be:	4602      	mov	r2, r0
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d901      	bls.n	80013d0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80013cc:	2303      	movs	r3, #3
 80013ce:	e113      	b.n	80015f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013d0:	4b7f      	ldr	r3, [pc, #508]	; (80015d0 <HAL_RCC_OscConfig+0x780>)
 80013d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d1ed      	bne.n	80013ba <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013de:	7ffb      	ldrb	r3, [r7, #31]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d105      	bne.n	80013f0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013e4:	4b7a      	ldr	r3, [pc, #488]	; (80015d0 <HAL_RCC_OscConfig+0x780>)
 80013e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013e8:	4a79      	ldr	r2, [pc, #484]	; (80015d0 <HAL_RCC_OscConfig+0x780>)
 80013ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013ee:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	f000 80fe 	beq.w	80015f6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013fe:	2b02      	cmp	r3, #2
 8001400:	f040 80d0 	bne.w	80015a4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001404:	4b72      	ldr	r3, [pc, #456]	; (80015d0 <HAL_RCC_OscConfig+0x780>)
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	f003 0203 	and.w	r2, r3, #3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001414:	429a      	cmp	r2, r3
 8001416:	d130      	bne.n	800147a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	3b01      	subs	r3, #1
 8001424:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001426:	429a      	cmp	r2, r3
 8001428:	d127      	bne.n	800147a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001434:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001436:	429a      	cmp	r2, r3
 8001438:	d11f      	bne.n	800147a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001444:	2a07      	cmp	r2, #7
 8001446:	bf14      	ite	ne
 8001448:	2201      	movne	r2, #1
 800144a:	2200      	moveq	r2, #0
 800144c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800144e:	4293      	cmp	r3, r2
 8001450:	d113      	bne.n	800147a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800145c:	085b      	lsrs	r3, r3, #1
 800145e:	3b01      	subs	r3, #1
 8001460:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001462:	429a      	cmp	r2, r3
 8001464:	d109      	bne.n	800147a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001470:	085b      	lsrs	r3, r3, #1
 8001472:	3b01      	subs	r3, #1
 8001474:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001476:	429a      	cmp	r2, r3
 8001478:	d06e      	beq.n	8001558 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	2b0c      	cmp	r3, #12
 800147e:	d069      	beq.n	8001554 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001480:	4b53      	ldr	r3, [pc, #332]	; (80015d0 <HAL_RCC_OscConfig+0x780>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d105      	bne.n	8001498 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800148c:	4b50      	ldr	r3, [pc, #320]	; (80015d0 <HAL_RCC_OscConfig+0x780>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e0ad      	b.n	80015f8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800149c:	4b4c      	ldr	r3, [pc, #304]	; (80015d0 <HAL_RCC_OscConfig+0x780>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a4b      	ldr	r2, [pc, #300]	; (80015d0 <HAL_RCC_OscConfig+0x780>)
 80014a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014a6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80014a8:	f7ff f974 	bl	8000794 <HAL_GetTick>
 80014ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014ae:	e008      	b.n	80014c2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014b0:	f7ff f970 	bl	8000794 <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d901      	bls.n	80014c2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e09a      	b.n	80015f8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014c2:	4b43      	ldr	r3, [pc, #268]	; (80015d0 <HAL_RCC_OscConfig+0x780>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d1f0      	bne.n	80014b0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014ce:	4b40      	ldr	r3, [pc, #256]	; (80015d0 <HAL_RCC_OscConfig+0x780>)
 80014d0:	68da      	ldr	r2, [r3, #12]
 80014d2:	4b40      	ldr	r3, [pc, #256]	; (80015d4 <HAL_RCC_OscConfig+0x784>)
 80014d4:	4013      	ands	r3, r2
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80014de:	3a01      	subs	r2, #1
 80014e0:	0112      	lsls	r2, r2, #4
 80014e2:	4311      	orrs	r1, r2
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80014e8:	0212      	lsls	r2, r2, #8
 80014ea:	4311      	orrs	r1, r2
 80014ec:	687a      	ldr	r2, [r7, #4]
 80014ee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80014f0:	0852      	lsrs	r2, r2, #1
 80014f2:	3a01      	subs	r2, #1
 80014f4:	0552      	lsls	r2, r2, #21
 80014f6:	4311      	orrs	r1, r2
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80014fc:	0852      	lsrs	r2, r2, #1
 80014fe:	3a01      	subs	r2, #1
 8001500:	0652      	lsls	r2, r2, #25
 8001502:	4311      	orrs	r1, r2
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001508:	0912      	lsrs	r2, r2, #4
 800150a:	0452      	lsls	r2, r2, #17
 800150c:	430a      	orrs	r2, r1
 800150e:	4930      	ldr	r1, [pc, #192]	; (80015d0 <HAL_RCC_OscConfig+0x780>)
 8001510:	4313      	orrs	r3, r2
 8001512:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001514:	4b2e      	ldr	r3, [pc, #184]	; (80015d0 <HAL_RCC_OscConfig+0x780>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a2d      	ldr	r2, [pc, #180]	; (80015d0 <HAL_RCC_OscConfig+0x780>)
 800151a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800151e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001520:	4b2b      	ldr	r3, [pc, #172]	; (80015d0 <HAL_RCC_OscConfig+0x780>)
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	4a2a      	ldr	r2, [pc, #168]	; (80015d0 <HAL_RCC_OscConfig+0x780>)
 8001526:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800152a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800152c:	f7ff f932 	bl	8000794 <HAL_GetTick>
 8001530:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001532:	e008      	b.n	8001546 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001534:	f7ff f92e 	bl	8000794 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b02      	cmp	r3, #2
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e058      	b.n	80015f8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001546:	4b22      	ldr	r3, [pc, #136]	; (80015d0 <HAL_RCC_OscConfig+0x780>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d0f0      	beq.n	8001534 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001552:	e050      	b.n	80015f6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e04f      	b.n	80015f8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001558:	4b1d      	ldr	r3, [pc, #116]	; (80015d0 <HAL_RCC_OscConfig+0x780>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d148      	bne.n	80015f6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001564:	4b1a      	ldr	r3, [pc, #104]	; (80015d0 <HAL_RCC_OscConfig+0x780>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a19      	ldr	r2, [pc, #100]	; (80015d0 <HAL_RCC_OscConfig+0x780>)
 800156a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800156e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001570:	4b17      	ldr	r3, [pc, #92]	; (80015d0 <HAL_RCC_OscConfig+0x780>)
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	4a16      	ldr	r2, [pc, #88]	; (80015d0 <HAL_RCC_OscConfig+0x780>)
 8001576:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800157a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800157c:	f7ff f90a 	bl	8000794 <HAL_GetTick>
 8001580:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001582:	e008      	b.n	8001596 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001584:	f7ff f906 	bl	8000794 <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	2b02      	cmp	r3, #2
 8001590:	d901      	bls.n	8001596 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e030      	b.n	80015f8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001596:	4b0e      	ldr	r3, [pc, #56]	; (80015d0 <HAL_RCC_OscConfig+0x780>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d0f0      	beq.n	8001584 <HAL_RCC_OscConfig+0x734>
 80015a2:	e028      	b.n	80015f6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	2b0c      	cmp	r3, #12
 80015a8:	d023      	beq.n	80015f2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015aa:	4b09      	ldr	r3, [pc, #36]	; (80015d0 <HAL_RCC_OscConfig+0x780>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a08      	ldr	r2, [pc, #32]	; (80015d0 <HAL_RCC_OscConfig+0x780>)
 80015b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b6:	f7ff f8ed 	bl	8000794 <HAL_GetTick>
 80015ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015bc:	e00c      	b.n	80015d8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015be:	f7ff f8e9 	bl	8000794 <HAL_GetTick>
 80015c2:	4602      	mov	r2, r0
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d905      	bls.n	80015d8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e013      	b.n	80015f8 <HAL_RCC_OscConfig+0x7a8>
 80015d0:	40021000 	.word	0x40021000
 80015d4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015d8:	4b09      	ldr	r3, [pc, #36]	; (8001600 <HAL_RCC_OscConfig+0x7b0>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d1ec      	bne.n	80015be <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80015e4:	4b06      	ldr	r3, [pc, #24]	; (8001600 <HAL_RCC_OscConfig+0x7b0>)
 80015e6:	68da      	ldr	r2, [r3, #12]
 80015e8:	4905      	ldr	r1, [pc, #20]	; (8001600 <HAL_RCC_OscConfig+0x7b0>)
 80015ea:	4b06      	ldr	r3, [pc, #24]	; (8001604 <HAL_RCC_OscConfig+0x7b4>)
 80015ec:	4013      	ands	r3, r2
 80015ee:	60cb      	str	r3, [r1, #12]
 80015f0:	e001      	b.n	80015f6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e000      	b.n	80015f8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80015f6:	2300      	movs	r3, #0
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3720      	adds	r7, #32
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	40021000 	.word	0x40021000
 8001604:	feeefffc 	.word	0xfeeefffc

08001608 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d101      	bne.n	800161c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e0e7      	b.n	80017ec <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800161c:	4b75      	ldr	r3, [pc, #468]	; (80017f4 <HAL_RCC_ClockConfig+0x1ec>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0307 	and.w	r3, r3, #7
 8001624:	683a      	ldr	r2, [r7, #0]
 8001626:	429a      	cmp	r2, r3
 8001628:	d910      	bls.n	800164c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800162a:	4b72      	ldr	r3, [pc, #456]	; (80017f4 <HAL_RCC_ClockConfig+0x1ec>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f023 0207 	bic.w	r2, r3, #7
 8001632:	4970      	ldr	r1, [pc, #448]	; (80017f4 <HAL_RCC_ClockConfig+0x1ec>)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	4313      	orrs	r3, r2
 8001638:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800163a:	4b6e      	ldr	r3, [pc, #440]	; (80017f4 <HAL_RCC_ClockConfig+0x1ec>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0307 	and.w	r3, r3, #7
 8001642:	683a      	ldr	r2, [r7, #0]
 8001644:	429a      	cmp	r2, r3
 8001646:	d001      	beq.n	800164c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e0cf      	b.n	80017ec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0302 	and.w	r3, r3, #2
 8001654:	2b00      	cmp	r3, #0
 8001656:	d010      	beq.n	800167a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689a      	ldr	r2, [r3, #8]
 800165c:	4b66      	ldr	r3, [pc, #408]	; (80017f8 <HAL_RCC_ClockConfig+0x1f0>)
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001664:	429a      	cmp	r2, r3
 8001666:	d908      	bls.n	800167a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001668:	4b63      	ldr	r3, [pc, #396]	; (80017f8 <HAL_RCC_ClockConfig+0x1f0>)
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	4960      	ldr	r1, [pc, #384]	; (80017f8 <HAL_RCC_ClockConfig+0x1f0>)
 8001676:	4313      	orrs	r3, r2
 8001678:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	2b00      	cmp	r3, #0
 8001684:	d04c      	beq.n	8001720 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	2b03      	cmp	r3, #3
 800168c:	d107      	bne.n	800169e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800168e:	4b5a      	ldr	r3, [pc, #360]	; (80017f8 <HAL_RCC_ClockConfig+0x1f0>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d121      	bne.n	80016de <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e0a6      	b.n	80017ec <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d107      	bne.n	80016b6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016a6:	4b54      	ldr	r3, [pc, #336]	; (80017f8 <HAL_RCC_ClockConfig+0x1f0>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d115      	bne.n	80016de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e09a      	b.n	80017ec <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d107      	bne.n	80016ce <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016be:	4b4e      	ldr	r3, [pc, #312]	; (80017f8 <HAL_RCC_ClockConfig+0x1f0>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d109      	bne.n	80016de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e08e      	b.n	80017ec <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016ce:	4b4a      	ldr	r3, [pc, #296]	; (80017f8 <HAL_RCC_ClockConfig+0x1f0>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d101      	bne.n	80016de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e086      	b.n	80017ec <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80016de:	4b46      	ldr	r3, [pc, #280]	; (80017f8 <HAL_RCC_ClockConfig+0x1f0>)
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	f023 0203 	bic.w	r2, r3, #3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	4943      	ldr	r1, [pc, #268]	; (80017f8 <HAL_RCC_ClockConfig+0x1f0>)
 80016ec:	4313      	orrs	r3, r2
 80016ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80016f0:	f7ff f850 	bl	8000794 <HAL_GetTick>
 80016f4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016f6:	e00a      	b.n	800170e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016f8:	f7ff f84c 	bl	8000794 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	f241 3288 	movw	r2, #5000	; 0x1388
 8001706:	4293      	cmp	r3, r2
 8001708:	d901      	bls.n	800170e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e06e      	b.n	80017ec <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800170e:	4b3a      	ldr	r3, [pc, #232]	; (80017f8 <HAL_RCC_ClockConfig+0x1f0>)
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	f003 020c 	and.w	r2, r3, #12
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	429a      	cmp	r2, r3
 800171e:	d1eb      	bne.n	80016f8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0302 	and.w	r3, r3, #2
 8001728:	2b00      	cmp	r3, #0
 800172a:	d010      	beq.n	800174e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	689a      	ldr	r2, [r3, #8]
 8001730:	4b31      	ldr	r3, [pc, #196]	; (80017f8 <HAL_RCC_ClockConfig+0x1f0>)
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001738:	429a      	cmp	r2, r3
 800173a:	d208      	bcs.n	800174e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800173c:	4b2e      	ldr	r3, [pc, #184]	; (80017f8 <HAL_RCC_ClockConfig+0x1f0>)
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	492b      	ldr	r1, [pc, #172]	; (80017f8 <HAL_RCC_ClockConfig+0x1f0>)
 800174a:	4313      	orrs	r3, r2
 800174c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800174e:	4b29      	ldr	r3, [pc, #164]	; (80017f4 <HAL_RCC_ClockConfig+0x1ec>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0307 	and.w	r3, r3, #7
 8001756:	683a      	ldr	r2, [r7, #0]
 8001758:	429a      	cmp	r2, r3
 800175a:	d210      	bcs.n	800177e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800175c:	4b25      	ldr	r3, [pc, #148]	; (80017f4 <HAL_RCC_ClockConfig+0x1ec>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f023 0207 	bic.w	r2, r3, #7
 8001764:	4923      	ldr	r1, [pc, #140]	; (80017f4 <HAL_RCC_ClockConfig+0x1ec>)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	4313      	orrs	r3, r2
 800176a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800176c:	4b21      	ldr	r3, [pc, #132]	; (80017f4 <HAL_RCC_ClockConfig+0x1ec>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0307 	and.w	r3, r3, #7
 8001774:	683a      	ldr	r2, [r7, #0]
 8001776:	429a      	cmp	r2, r3
 8001778:	d001      	beq.n	800177e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e036      	b.n	80017ec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0304 	and.w	r3, r3, #4
 8001786:	2b00      	cmp	r3, #0
 8001788:	d008      	beq.n	800179c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800178a:	4b1b      	ldr	r3, [pc, #108]	; (80017f8 <HAL_RCC_ClockConfig+0x1f0>)
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	68db      	ldr	r3, [r3, #12]
 8001796:	4918      	ldr	r1, [pc, #96]	; (80017f8 <HAL_RCC_ClockConfig+0x1f0>)
 8001798:	4313      	orrs	r3, r2
 800179a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0308 	and.w	r3, r3, #8
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d009      	beq.n	80017bc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017a8:	4b13      	ldr	r3, [pc, #76]	; (80017f8 <HAL_RCC_ClockConfig+0x1f0>)
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	691b      	ldr	r3, [r3, #16]
 80017b4:	00db      	lsls	r3, r3, #3
 80017b6:	4910      	ldr	r1, [pc, #64]	; (80017f8 <HAL_RCC_ClockConfig+0x1f0>)
 80017b8:	4313      	orrs	r3, r2
 80017ba:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80017bc:	f000 f824 	bl	8001808 <HAL_RCC_GetSysClockFreq>
 80017c0:	4602      	mov	r2, r0
 80017c2:	4b0d      	ldr	r3, [pc, #52]	; (80017f8 <HAL_RCC_ClockConfig+0x1f0>)
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	091b      	lsrs	r3, r3, #4
 80017c8:	f003 030f 	and.w	r3, r3, #15
 80017cc:	490b      	ldr	r1, [pc, #44]	; (80017fc <HAL_RCC_ClockConfig+0x1f4>)
 80017ce:	5ccb      	ldrb	r3, [r1, r3]
 80017d0:	f003 031f 	and.w	r3, r3, #31
 80017d4:	fa22 f303 	lsr.w	r3, r2, r3
 80017d8:	4a09      	ldr	r2, [pc, #36]	; (8001800 <HAL_RCC_ClockConfig+0x1f8>)
 80017da:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80017dc:	4b09      	ldr	r3, [pc, #36]	; (8001804 <HAL_RCC_ClockConfig+0x1fc>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7fe ff87 	bl	80006f4 <HAL_InitTick>
 80017e6:	4603      	mov	r3, r0
 80017e8:	72fb      	strb	r3, [r7, #11]

  return status;
 80017ea:	7afb      	ldrb	r3, [r7, #11]
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3710      	adds	r7, #16
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	40022000 	.word	0x40022000
 80017f8:	40021000 	.word	0x40021000
 80017fc:	08003d8c 	.word	0x08003d8c
 8001800:	20000000 	.word	0x20000000
 8001804:	20000004 	.word	0x20000004

08001808 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001808:	b480      	push	{r7}
 800180a:	b089      	sub	sp, #36	; 0x24
 800180c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800180e:	2300      	movs	r3, #0
 8001810:	61fb      	str	r3, [r7, #28]
 8001812:	2300      	movs	r3, #0
 8001814:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001816:	4b3e      	ldr	r3, [pc, #248]	; (8001910 <HAL_RCC_GetSysClockFreq+0x108>)
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	f003 030c 	and.w	r3, r3, #12
 800181e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001820:	4b3b      	ldr	r3, [pc, #236]	; (8001910 <HAL_RCC_GetSysClockFreq+0x108>)
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	f003 0303 	and.w	r3, r3, #3
 8001828:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d005      	beq.n	800183c <HAL_RCC_GetSysClockFreq+0x34>
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	2b0c      	cmp	r3, #12
 8001834:	d121      	bne.n	800187a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d11e      	bne.n	800187a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800183c:	4b34      	ldr	r3, [pc, #208]	; (8001910 <HAL_RCC_GetSysClockFreq+0x108>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0308 	and.w	r3, r3, #8
 8001844:	2b00      	cmp	r3, #0
 8001846:	d107      	bne.n	8001858 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001848:	4b31      	ldr	r3, [pc, #196]	; (8001910 <HAL_RCC_GetSysClockFreq+0x108>)
 800184a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800184e:	0a1b      	lsrs	r3, r3, #8
 8001850:	f003 030f 	and.w	r3, r3, #15
 8001854:	61fb      	str	r3, [r7, #28]
 8001856:	e005      	b.n	8001864 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001858:	4b2d      	ldr	r3, [pc, #180]	; (8001910 <HAL_RCC_GetSysClockFreq+0x108>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	091b      	lsrs	r3, r3, #4
 800185e:	f003 030f 	and.w	r3, r3, #15
 8001862:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001864:	4a2b      	ldr	r2, [pc, #172]	; (8001914 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800186c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d10d      	bne.n	8001890 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001878:	e00a      	b.n	8001890 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	2b04      	cmp	r3, #4
 800187e:	d102      	bne.n	8001886 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001880:	4b25      	ldr	r3, [pc, #148]	; (8001918 <HAL_RCC_GetSysClockFreq+0x110>)
 8001882:	61bb      	str	r3, [r7, #24]
 8001884:	e004      	b.n	8001890 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	2b08      	cmp	r3, #8
 800188a:	d101      	bne.n	8001890 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800188c:	4b23      	ldr	r3, [pc, #140]	; (800191c <HAL_RCC_GetSysClockFreq+0x114>)
 800188e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	2b0c      	cmp	r3, #12
 8001894:	d134      	bne.n	8001900 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001896:	4b1e      	ldr	r3, [pc, #120]	; (8001910 <HAL_RCC_GetSysClockFreq+0x108>)
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	f003 0303 	and.w	r3, r3, #3
 800189e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d003      	beq.n	80018ae <HAL_RCC_GetSysClockFreq+0xa6>
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	2b03      	cmp	r3, #3
 80018aa:	d003      	beq.n	80018b4 <HAL_RCC_GetSysClockFreq+0xac>
 80018ac:	e005      	b.n	80018ba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80018ae:	4b1a      	ldr	r3, [pc, #104]	; (8001918 <HAL_RCC_GetSysClockFreq+0x110>)
 80018b0:	617b      	str	r3, [r7, #20]
      break;
 80018b2:	e005      	b.n	80018c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80018b4:	4b19      	ldr	r3, [pc, #100]	; (800191c <HAL_RCC_GetSysClockFreq+0x114>)
 80018b6:	617b      	str	r3, [r7, #20]
      break;
 80018b8:	e002      	b.n	80018c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	617b      	str	r3, [r7, #20]
      break;
 80018be:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80018c0:	4b13      	ldr	r3, [pc, #76]	; (8001910 <HAL_RCC_GetSysClockFreq+0x108>)
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	091b      	lsrs	r3, r3, #4
 80018c6:	f003 0307 	and.w	r3, r3, #7
 80018ca:	3301      	adds	r3, #1
 80018cc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80018ce:	4b10      	ldr	r3, [pc, #64]	; (8001910 <HAL_RCC_GetSysClockFreq+0x108>)
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	0a1b      	lsrs	r3, r3, #8
 80018d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80018d8:	697a      	ldr	r2, [r7, #20]
 80018da:	fb03 f202 	mul.w	r2, r3, r2
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80018e4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80018e6:	4b0a      	ldr	r3, [pc, #40]	; (8001910 <HAL_RCC_GetSysClockFreq+0x108>)
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	0e5b      	lsrs	r3, r3, #25
 80018ec:	f003 0303 	and.w	r3, r3, #3
 80018f0:	3301      	adds	r3, #1
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80018f6:	697a      	ldr	r2, [r7, #20]
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80018fe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001900:	69bb      	ldr	r3, [r7, #24]
}
 8001902:	4618      	mov	r0, r3
 8001904:	3724      	adds	r7, #36	; 0x24
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	40021000 	.word	0x40021000
 8001914:	08003d9c 	.word	0x08003d9c
 8001918:	00f42400 	.word	0x00f42400
 800191c:	007a1200 	.word	0x007a1200

08001920 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001928:	2300      	movs	r3, #0
 800192a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800192c:	4b2a      	ldr	r3, [pc, #168]	; (80019d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800192e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001930:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001934:	2b00      	cmp	r3, #0
 8001936:	d003      	beq.n	8001940 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001938:	f7ff fa26 	bl	8000d88 <HAL_PWREx_GetVoltageRange>
 800193c:	6178      	str	r0, [r7, #20]
 800193e:	e014      	b.n	800196a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001940:	4b25      	ldr	r3, [pc, #148]	; (80019d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001944:	4a24      	ldr	r2, [pc, #144]	; (80019d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001946:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800194a:	6593      	str	r3, [r2, #88]	; 0x58
 800194c:	4b22      	ldr	r3, [pc, #136]	; (80019d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800194e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001954:	60fb      	str	r3, [r7, #12]
 8001956:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001958:	f7ff fa16 	bl	8000d88 <HAL_PWREx_GetVoltageRange>
 800195c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800195e:	4b1e      	ldr	r3, [pc, #120]	; (80019d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001962:	4a1d      	ldr	r2, [pc, #116]	; (80019d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001964:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001968:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001970:	d10b      	bne.n	800198a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2b80      	cmp	r3, #128	; 0x80
 8001976:	d919      	bls.n	80019ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2ba0      	cmp	r3, #160	; 0xa0
 800197c:	d902      	bls.n	8001984 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800197e:	2302      	movs	r3, #2
 8001980:	613b      	str	r3, [r7, #16]
 8001982:	e013      	b.n	80019ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001984:	2301      	movs	r3, #1
 8001986:	613b      	str	r3, [r7, #16]
 8001988:	e010      	b.n	80019ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2b80      	cmp	r3, #128	; 0x80
 800198e:	d902      	bls.n	8001996 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001990:	2303      	movs	r3, #3
 8001992:	613b      	str	r3, [r7, #16]
 8001994:	e00a      	b.n	80019ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2b80      	cmp	r3, #128	; 0x80
 800199a:	d102      	bne.n	80019a2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800199c:	2302      	movs	r3, #2
 800199e:	613b      	str	r3, [r7, #16]
 80019a0:	e004      	b.n	80019ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2b70      	cmp	r3, #112	; 0x70
 80019a6:	d101      	bne.n	80019ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80019a8:	2301      	movs	r3, #1
 80019aa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80019ac:	4b0b      	ldr	r3, [pc, #44]	; (80019dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f023 0207 	bic.w	r2, r3, #7
 80019b4:	4909      	ldr	r1, [pc, #36]	; (80019dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80019bc:	4b07      	ldr	r3, [pc, #28]	; (80019dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0307 	and.w	r3, r3, #7
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d001      	beq.n	80019ce <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e000      	b.n	80019d0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80019ce:	2300      	movs	r3, #0
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3718      	adds	r7, #24
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	40021000 	.word	0x40021000
 80019dc:	40022000 	.word	0x40022000

080019e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d001      	beq.n	80019f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e04f      	b.n	8001a98 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2202      	movs	r2, #2
 80019fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	68da      	ldr	r2, [r3, #12]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f042 0201 	orr.w	r2, r2, #1
 8001a0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a23      	ldr	r2, [pc, #140]	; (8001aa4 <HAL_TIM_Base_Start_IT+0xc4>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d01d      	beq.n	8001a56 <HAL_TIM_Base_Start_IT+0x76>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a22:	d018      	beq.n	8001a56 <HAL_TIM_Base_Start_IT+0x76>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a1f      	ldr	r2, [pc, #124]	; (8001aa8 <HAL_TIM_Base_Start_IT+0xc8>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d013      	beq.n	8001a56 <HAL_TIM_Base_Start_IT+0x76>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a1e      	ldr	r2, [pc, #120]	; (8001aac <HAL_TIM_Base_Start_IT+0xcc>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d00e      	beq.n	8001a56 <HAL_TIM_Base_Start_IT+0x76>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a1c      	ldr	r2, [pc, #112]	; (8001ab0 <HAL_TIM_Base_Start_IT+0xd0>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d009      	beq.n	8001a56 <HAL_TIM_Base_Start_IT+0x76>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a1b      	ldr	r2, [pc, #108]	; (8001ab4 <HAL_TIM_Base_Start_IT+0xd4>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d004      	beq.n	8001a56 <HAL_TIM_Base_Start_IT+0x76>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a19      	ldr	r2, [pc, #100]	; (8001ab8 <HAL_TIM_Base_Start_IT+0xd8>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d115      	bne.n	8001a82 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	689a      	ldr	r2, [r3, #8]
 8001a5c:	4b17      	ldr	r3, [pc, #92]	; (8001abc <HAL_TIM_Base_Start_IT+0xdc>)
 8001a5e:	4013      	ands	r3, r2
 8001a60:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2b06      	cmp	r3, #6
 8001a66:	d015      	beq.n	8001a94 <HAL_TIM_Base_Start_IT+0xb4>
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a6e:	d011      	beq.n	8001a94 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f042 0201 	orr.w	r2, r2, #1
 8001a7e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a80:	e008      	b.n	8001a94 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f042 0201 	orr.w	r2, r2, #1
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	e000      	b.n	8001a96 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a94:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001a96:	2300      	movs	r3, #0
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3714      	adds	r7, #20
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr
 8001aa4:	40012c00 	.word	0x40012c00
 8001aa8:	40000400 	.word	0x40000400
 8001aac:	40000800 	.word	0x40000800
 8001ab0:	40000c00 	.word	0x40000c00
 8001ab4:	40013400 	.word	0x40013400
 8001ab8:	40014000 	.word	0x40014000
 8001abc:	00010007 	.word	0x00010007

08001ac0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d101      	bne.n	8001ad2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e049      	b.n	8001b66 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d106      	bne.n	8001aec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f7fe fd22 	bl	8000530 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2202      	movs	r2, #2
 8001af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3304      	adds	r3, #4
 8001afc:	4619      	mov	r1, r3
 8001afe:	4610      	mov	r0, r2
 8001b00:	f000 fa74 	bl	8001fec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2201      	movs	r2, #1
 8001b08:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2201      	movs	r2, #1
 8001b18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2201      	movs	r2, #1
 8001b58:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b084      	sub	sp, #16
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	691b      	ldr	r3, [r3, #16]
 8001b84:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	f003 0302 	and.w	r3, r3, #2
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d020      	beq.n	8001bd2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d01b      	beq.n	8001bd2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f06f 0202 	mvn.w	r2, #2
 8001ba2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	f003 0303 	and.w	r3, r3, #3
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d003      	beq.n	8001bc0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f000 f9f9 	bl	8001fb0 <HAL_TIM_IC_CaptureCallback>
 8001bbe:	e005      	b.n	8001bcc <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f000 f9eb 	bl	8001f9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f000 f9fc 	bl	8001fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	f003 0304 	and.w	r3, r3, #4
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d020      	beq.n	8001c1e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f003 0304 	and.w	r3, r3, #4
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d01b      	beq.n	8001c1e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f06f 0204 	mvn.w	r2, #4
 8001bee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2202      	movs	r2, #2
 8001bf4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d003      	beq.n	8001c0c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f000 f9d3 	bl	8001fb0 <HAL_TIM_IC_CaptureCallback>
 8001c0a:	e005      	b.n	8001c18 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f000 f9c5 	bl	8001f9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f000 f9d6 	bl	8001fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	f003 0308 	and.w	r3, r3, #8
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d020      	beq.n	8001c6a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f003 0308 	and.w	r3, r3, #8
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d01b      	beq.n	8001c6a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f06f 0208 	mvn.w	r2, #8
 8001c3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2204      	movs	r2, #4
 8001c40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	69db      	ldr	r3, [r3, #28]
 8001c48:	f003 0303 	and.w	r3, r3, #3
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d003      	beq.n	8001c58 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f000 f9ad 	bl	8001fb0 <HAL_TIM_IC_CaptureCallback>
 8001c56:	e005      	b.n	8001c64 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f000 f99f 	bl	8001f9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f000 f9b0 	bl	8001fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2200      	movs	r2, #0
 8001c68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	f003 0310 	and.w	r3, r3, #16
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d020      	beq.n	8001cb6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f003 0310 	and.w	r3, r3, #16
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d01b      	beq.n	8001cb6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f06f 0210 	mvn.w	r2, #16
 8001c86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2208      	movs	r2, #8
 8001c8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	69db      	ldr	r3, [r3, #28]
 8001c94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d003      	beq.n	8001ca4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f000 f987 	bl	8001fb0 <HAL_TIM_IC_CaptureCallback>
 8001ca2:	e005      	b.n	8001cb0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f000 f979 	bl	8001f9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f000 f98a 	bl	8001fc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	f003 0301 	and.w	r3, r3, #1
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d00c      	beq.n	8001cda <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d007      	beq.n	8001cda <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f06f 0201 	mvn.w	r2, #1
 8001cd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f7fe fa95 	bl	8000204 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d00c      	beq.n	8001cfe <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d007      	beq.n	8001cfe <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001cf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f000 fd79 	bl	80027f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d00c      	beq.n	8001d22 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d007      	beq.n	8001d22 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001d1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f000 fd71 	bl	8002804 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d00c      	beq.n	8001d46 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d007      	beq.n	8001d46 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f000 f949 	bl	8001fd8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	f003 0320 	and.w	r3, r3, #32
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d00c      	beq.n	8001d6a <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f003 0320 	and.w	r3, r3, #32
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d007      	beq.n	8001d6a <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f06f 0220 	mvn.w	r2, #32
 8001d62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f000 fd39 	bl	80027dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d6a:	bf00      	nop
 8001d6c:	3710      	adds	r7, #16
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
	...

08001d74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	60b9      	str	r1, [r7, #8]
 8001d7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d80:	2300      	movs	r3, #0
 8001d82:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d101      	bne.n	8001d92 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001d8e:	2302      	movs	r3, #2
 8001d90:	e0ff      	b.n	8001f92 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2201      	movs	r2, #1
 8001d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2b14      	cmp	r3, #20
 8001d9e:	f200 80f0 	bhi.w	8001f82 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8001da2:	a201      	add	r2, pc, #4	; (adr r2, 8001da8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001da8:	08001dfd 	.word	0x08001dfd
 8001dac:	08001f83 	.word	0x08001f83
 8001db0:	08001f83 	.word	0x08001f83
 8001db4:	08001f83 	.word	0x08001f83
 8001db8:	08001e3d 	.word	0x08001e3d
 8001dbc:	08001f83 	.word	0x08001f83
 8001dc0:	08001f83 	.word	0x08001f83
 8001dc4:	08001f83 	.word	0x08001f83
 8001dc8:	08001e7f 	.word	0x08001e7f
 8001dcc:	08001f83 	.word	0x08001f83
 8001dd0:	08001f83 	.word	0x08001f83
 8001dd4:	08001f83 	.word	0x08001f83
 8001dd8:	08001ebf 	.word	0x08001ebf
 8001ddc:	08001f83 	.word	0x08001f83
 8001de0:	08001f83 	.word	0x08001f83
 8001de4:	08001f83 	.word	0x08001f83
 8001de8:	08001f01 	.word	0x08001f01
 8001dec:	08001f83 	.word	0x08001f83
 8001df0:	08001f83 	.word	0x08001f83
 8001df4:	08001f83 	.word	0x08001f83
 8001df8:	08001f41 	.word	0x08001f41
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	68b9      	ldr	r1, [r7, #8]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f000 f98c 	bl	8002120 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	699a      	ldr	r2, [r3, #24]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f042 0208 	orr.w	r2, r2, #8
 8001e16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	699a      	ldr	r2, [r3, #24]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f022 0204 	bic.w	r2, r2, #4
 8001e26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	6999      	ldr	r1, [r3, #24]
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	691a      	ldr	r2, [r3, #16]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	430a      	orrs	r2, r1
 8001e38:	619a      	str	r2, [r3, #24]
      break;
 8001e3a:	e0a5      	b.n	8001f88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	68b9      	ldr	r1, [r7, #8]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f000 f9fc 	bl	8002240 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	699a      	ldr	r2, [r3, #24]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	699a      	ldr	r2, [r3, #24]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	6999      	ldr	r1, [r3, #24]
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	021a      	lsls	r2, r3, #8
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	619a      	str	r2, [r3, #24]
      break;
 8001e7c:	e084      	b.n	8001f88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	68b9      	ldr	r1, [r7, #8]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f000 fa65 	bl	8002354 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	69da      	ldr	r2, [r3, #28]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f042 0208 	orr.w	r2, r2, #8
 8001e98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	69da      	ldr	r2, [r3, #28]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f022 0204 	bic.w	r2, r2, #4
 8001ea8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	69d9      	ldr	r1, [r3, #28]
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	691a      	ldr	r2, [r3, #16]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	61da      	str	r2, [r3, #28]
      break;
 8001ebc:	e064      	b.n	8001f88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	68b9      	ldr	r1, [r7, #8]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f000 facd 	bl	8002464 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	69da      	ldr	r2, [r3, #28]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ed8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	69da      	ldr	r2, [r3, #28]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ee8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	69d9      	ldr	r1, [r3, #28]
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	691b      	ldr	r3, [r3, #16]
 8001ef4:	021a      	lsls	r2, r3, #8
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	430a      	orrs	r2, r1
 8001efc:	61da      	str	r2, [r3, #28]
      break;
 8001efe:	e043      	b.n	8001f88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	68b9      	ldr	r1, [r7, #8]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f000 fb16 	bl	8002538 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f042 0208 	orr.w	r2, r2, #8
 8001f1a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f022 0204 	bic.w	r2, r2, #4
 8001f2a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	691a      	ldr	r2, [r3, #16]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8001f3e:	e023      	b.n	8001f88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	68b9      	ldr	r1, [r7, #8]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f000 fb5a 	bl	8002600 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f5a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f6a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	021a      	lsls	r2, r3, #8
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8001f80:	e002      	b.n	8001f88 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	75fb      	strb	r3, [r7, #23]
      break;
 8001f86:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001f90:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3718      	adds	r7, #24
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop

08001f9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a40      	ldr	r2, [pc, #256]	; (8002100 <TIM_Base_SetConfig+0x114>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d013      	beq.n	800202c <TIM_Base_SetConfig+0x40>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800200a:	d00f      	beq.n	800202c <TIM_Base_SetConfig+0x40>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a3d      	ldr	r2, [pc, #244]	; (8002104 <TIM_Base_SetConfig+0x118>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d00b      	beq.n	800202c <TIM_Base_SetConfig+0x40>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a3c      	ldr	r2, [pc, #240]	; (8002108 <TIM_Base_SetConfig+0x11c>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d007      	beq.n	800202c <TIM_Base_SetConfig+0x40>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a3b      	ldr	r2, [pc, #236]	; (800210c <TIM_Base_SetConfig+0x120>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d003      	beq.n	800202c <TIM_Base_SetConfig+0x40>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a3a      	ldr	r2, [pc, #232]	; (8002110 <TIM_Base_SetConfig+0x124>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d108      	bne.n	800203e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002032:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	4313      	orrs	r3, r2
 800203c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a2f      	ldr	r2, [pc, #188]	; (8002100 <TIM_Base_SetConfig+0x114>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d01f      	beq.n	8002086 <TIM_Base_SetConfig+0x9a>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800204c:	d01b      	beq.n	8002086 <TIM_Base_SetConfig+0x9a>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a2c      	ldr	r2, [pc, #176]	; (8002104 <TIM_Base_SetConfig+0x118>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d017      	beq.n	8002086 <TIM_Base_SetConfig+0x9a>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a2b      	ldr	r2, [pc, #172]	; (8002108 <TIM_Base_SetConfig+0x11c>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d013      	beq.n	8002086 <TIM_Base_SetConfig+0x9a>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a2a      	ldr	r2, [pc, #168]	; (800210c <TIM_Base_SetConfig+0x120>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d00f      	beq.n	8002086 <TIM_Base_SetConfig+0x9a>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a29      	ldr	r2, [pc, #164]	; (8002110 <TIM_Base_SetConfig+0x124>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d00b      	beq.n	8002086 <TIM_Base_SetConfig+0x9a>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a28      	ldr	r2, [pc, #160]	; (8002114 <TIM_Base_SetConfig+0x128>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d007      	beq.n	8002086 <TIM_Base_SetConfig+0x9a>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a27      	ldr	r2, [pc, #156]	; (8002118 <TIM_Base_SetConfig+0x12c>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d003      	beq.n	8002086 <TIM_Base_SetConfig+0x9a>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a26      	ldr	r2, [pc, #152]	; (800211c <TIM_Base_SetConfig+0x130>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d108      	bne.n	8002098 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800208c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	68fa      	ldr	r2, [r7, #12]
 8002094:	4313      	orrs	r3, r2
 8002096:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	695b      	ldr	r3, [r3, #20]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	68fa      	ldr	r2, [r7, #12]
 80020aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	689a      	ldr	r2, [r3, #8]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4a10      	ldr	r2, [pc, #64]	; (8002100 <TIM_Base_SetConfig+0x114>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d00f      	beq.n	80020e4 <TIM_Base_SetConfig+0xf8>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4a12      	ldr	r2, [pc, #72]	; (8002110 <TIM_Base_SetConfig+0x124>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d00b      	beq.n	80020e4 <TIM_Base_SetConfig+0xf8>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4a11      	ldr	r2, [pc, #68]	; (8002114 <TIM_Base_SetConfig+0x128>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d007      	beq.n	80020e4 <TIM_Base_SetConfig+0xf8>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4a10      	ldr	r2, [pc, #64]	; (8002118 <TIM_Base_SetConfig+0x12c>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d003      	beq.n	80020e4 <TIM_Base_SetConfig+0xf8>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4a0f      	ldr	r2, [pc, #60]	; (800211c <TIM_Base_SetConfig+0x130>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d103      	bne.n	80020ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	691a      	ldr	r2, [r3, #16]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	615a      	str	r2, [r3, #20]
}
 80020f2:	bf00      	nop
 80020f4:	3714      	adds	r7, #20
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	40012c00 	.word	0x40012c00
 8002104:	40000400 	.word	0x40000400
 8002108:	40000800 	.word	0x40000800
 800210c:	40000c00 	.word	0x40000c00
 8002110:	40013400 	.word	0x40013400
 8002114:	40014000 	.word	0x40014000
 8002118:	40014400 	.word	0x40014400
 800211c:	40014800 	.word	0x40014800

08002120 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002120:	b480      	push	{r7}
 8002122:	b087      	sub	sp, #28
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a1b      	ldr	r3, [r3, #32]
 800212e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a1b      	ldr	r3, [r3, #32]
 8002134:	f023 0201 	bic.w	r2, r3, #1
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	699b      	ldr	r3, [r3, #24]
 8002146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800214e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002152:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f023 0303 	bic.w	r3, r3, #3
 800215a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	68fa      	ldr	r2, [r7, #12]
 8002162:	4313      	orrs	r3, r2
 8002164:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	f023 0302 	bic.w	r3, r3, #2
 800216c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	697a      	ldr	r2, [r7, #20]
 8002174:	4313      	orrs	r3, r2
 8002176:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a2c      	ldr	r2, [pc, #176]	; (800222c <TIM_OC1_SetConfig+0x10c>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d00f      	beq.n	80021a0 <TIM_OC1_SetConfig+0x80>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a2b      	ldr	r2, [pc, #172]	; (8002230 <TIM_OC1_SetConfig+0x110>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d00b      	beq.n	80021a0 <TIM_OC1_SetConfig+0x80>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a2a      	ldr	r2, [pc, #168]	; (8002234 <TIM_OC1_SetConfig+0x114>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d007      	beq.n	80021a0 <TIM_OC1_SetConfig+0x80>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a29      	ldr	r2, [pc, #164]	; (8002238 <TIM_OC1_SetConfig+0x118>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d003      	beq.n	80021a0 <TIM_OC1_SetConfig+0x80>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4a28      	ldr	r2, [pc, #160]	; (800223c <TIM_OC1_SetConfig+0x11c>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d10c      	bne.n	80021ba <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	f023 0308 	bic.w	r3, r3, #8
 80021a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	697a      	ldr	r2, [r7, #20]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	f023 0304 	bic.w	r3, r3, #4
 80021b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a1b      	ldr	r2, [pc, #108]	; (800222c <TIM_OC1_SetConfig+0x10c>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d00f      	beq.n	80021e2 <TIM_OC1_SetConfig+0xc2>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a1a      	ldr	r2, [pc, #104]	; (8002230 <TIM_OC1_SetConfig+0x110>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d00b      	beq.n	80021e2 <TIM_OC1_SetConfig+0xc2>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a19      	ldr	r2, [pc, #100]	; (8002234 <TIM_OC1_SetConfig+0x114>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d007      	beq.n	80021e2 <TIM_OC1_SetConfig+0xc2>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a18      	ldr	r2, [pc, #96]	; (8002238 <TIM_OC1_SetConfig+0x118>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d003      	beq.n	80021e2 <TIM_OC1_SetConfig+0xc2>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a17      	ldr	r2, [pc, #92]	; (800223c <TIM_OC1_SetConfig+0x11c>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d111      	bne.n	8002206 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80021f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	695b      	ldr	r3, [r3, #20]
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	693a      	ldr	r2, [r7, #16]
 8002202:	4313      	orrs	r3, r2
 8002204:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	693a      	ldr	r2, [r7, #16]
 800220a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	685a      	ldr	r2, [r3, #4]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	697a      	ldr	r2, [r7, #20]
 800221e:	621a      	str	r2, [r3, #32]
}
 8002220:	bf00      	nop
 8002222:	371c      	adds	r7, #28
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr
 800222c:	40012c00 	.word	0x40012c00
 8002230:	40013400 	.word	0x40013400
 8002234:	40014000 	.word	0x40014000
 8002238:	40014400 	.word	0x40014400
 800223c:	40014800 	.word	0x40014800

08002240 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002240:	b480      	push	{r7}
 8002242:	b087      	sub	sp, #28
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a1b      	ldr	r3, [r3, #32]
 800224e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6a1b      	ldr	r3, [r3, #32]
 8002254:	f023 0210 	bic.w	r2, r3, #16
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800226e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002272:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800227a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	021b      	lsls	r3, r3, #8
 8002282:	68fa      	ldr	r2, [r7, #12]
 8002284:	4313      	orrs	r3, r2
 8002286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	f023 0320 	bic.w	r3, r3, #32
 800228e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	011b      	lsls	r3, r3, #4
 8002296:	697a      	ldr	r2, [r7, #20]
 8002298:	4313      	orrs	r3, r2
 800229a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4a28      	ldr	r2, [pc, #160]	; (8002340 <TIM_OC2_SetConfig+0x100>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d003      	beq.n	80022ac <TIM_OC2_SetConfig+0x6c>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	4a27      	ldr	r2, [pc, #156]	; (8002344 <TIM_OC2_SetConfig+0x104>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d10d      	bne.n	80022c8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	011b      	lsls	r3, r3, #4
 80022ba:	697a      	ldr	r2, [r7, #20]
 80022bc:	4313      	orrs	r3, r2
 80022be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80022c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	4a1d      	ldr	r2, [pc, #116]	; (8002340 <TIM_OC2_SetConfig+0x100>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d00f      	beq.n	80022f0 <TIM_OC2_SetConfig+0xb0>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	4a1c      	ldr	r2, [pc, #112]	; (8002344 <TIM_OC2_SetConfig+0x104>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d00b      	beq.n	80022f0 <TIM_OC2_SetConfig+0xb0>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	4a1b      	ldr	r2, [pc, #108]	; (8002348 <TIM_OC2_SetConfig+0x108>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d007      	beq.n	80022f0 <TIM_OC2_SetConfig+0xb0>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4a1a      	ldr	r2, [pc, #104]	; (800234c <TIM_OC2_SetConfig+0x10c>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d003      	beq.n	80022f0 <TIM_OC2_SetConfig+0xb0>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4a19      	ldr	r2, [pc, #100]	; (8002350 <TIM_OC2_SetConfig+0x110>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d113      	bne.n	8002318 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80022f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80022fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	695b      	ldr	r3, [r3, #20]
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	4313      	orrs	r3, r2
 800230a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	4313      	orrs	r3, r2
 8002316:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	693a      	ldr	r2, [r7, #16]
 800231c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	68fa      	ldr	r2, [r7, #12]
 8002322:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685a      	ldr	r2, [r3, #4]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	697a      	ldr	r2, [r7, #20]
 8002330:	621a      	str	r2, [r3, #32]
}
 8002332:	bf00      	nop
 8002334:	371c      	adds	r7, #28
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	40012c00 	.word	0x40012c00
 8002344:	40013400 	.word	0x40013400
 8002348:	40014000 	.word	0x40014000
 800234c:	40014400 	.word	0x40014400
 8002350:	40014800 	.word	0x40014800

08002354 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002354:	b480      	push	{r7}
 8002356:	b087      	sub	sp, #28
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a1b      	ldr	r3, [r3, #32]
 8002362:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6a1b      	ldr	r3, [r3, #32]
 8002368:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	69db      	ldr	r3, [r3, #28]
 800237a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002386:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f023 0303 	bic.w	r3, r3, #3
 800238e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68fa      	ldr	r2, [r7, #12]
 8002396:	4313      	orrs	r3, r2
 8002398:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80023a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	021b      	lsls	r3, r3, #8
 80023a8:	697a      	ldr	r2, [r7, #20]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a27      	ldr	r2, [pc, #156]	; (8002450 <TIM_OC3_SetConfig+0xfc>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d003      	beq.n	80023be <TIM_OC3_SetConfig+0x6a>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a26      	ldr	r2, [pc, #152]	; (8002454 <TIM_OC3_SetConfig+0x100>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d10d      	bne.n	80023da <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80023c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	021b      	lsls	r3, r3, #8
 80023cc:	697a      	ldr	r2, [r7, #20]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80023d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a1c      	ldr	r2, [pc, #112]	; (8002450 <TIM_OC3_SetConfig+0xfc>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d00f      	beq.n	8002402 <TIM_OC3_SetConfig+0xae>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a1b      	ldr	r2, [pc, #108]	; (8002454 <TIM_OC3_SetConfig+0x100>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d00b      	beq.n	8002402 <TIM_OC3_SetConfig+0xae>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a1a      	ldr	r2, [pc, #104]	; (8002458 <TIM_OC3_SetConfig+0x104>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d007      	beq.n	8002402 <TIM_OC3_SetConfig+0xae>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a19      	ldr	r2, [pc, #100]	; (800245c <TIM_OC3_SetConfig+0x108>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d003      	beq.n	8002402 <TIM_OC3_SetConfig+0xae>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a18      	ldr	r2, [pc, #96]	; (8002460 <TIM_OC3_SetConfig+0x10c>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d113      	bne.n	800242a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002408:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002410:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	695b      	ldr	r3, [r3, #20]
 8002416:	011b      	lsls	r3, r3, #4
 8002418:	693a      	ldr	r2, [r7, #16]
 800241a:	4313      	orrs	r3, r2
 800241c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	699b      	ldr	r3, [r3, #24]
 8002422:	011b      	lsls	r3, r3, #4
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	4313      	orrs	r3, r2
 8002428:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	693a      	ldr	r2, [r7, #16]
 800242e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	68fa      	ldr	r2, [r7, #12]
 8002434:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	685a      	ldr	r2, [r3, #4]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	697a      	ldr	r2, [r7, #20]
 8002442:	621a      	str	r2, [r3, #32]
}
 8002444:	bf00      	nop
 8002446:	371c      	adds	r7, #28
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr
 8002450:	40012c00 	.word	0x40012c00
 8002454:	40013400 	.word	0x40013400
 8002458:	40014000 	.word	0x40014000
 800245c:	40014400 	.word	0x40014400
 8002460:	40014800 	.word	0x40014800

08002464 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002464:	b480      	push	{r7}
 8002466:	b087      	sub	sp, #28
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a1b      	ldr	r3, [r3, #32]
 8002472:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a1b      	ldr	r3, [r3, #32]
 8002478:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	69db      	ldr	r3, [r3, #28]
 800248a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002492:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002496:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800249e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	021b      	lsls	r3, r3, #8
 80024a6:	68fa      	ldr	r2, [r7, #12]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80024b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	031b      	lsls	r3, r3, #12
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	4313      	orrs	r3, r2
 80024be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	4a18      	ldr	r2, [pc, #96]	; (8002524 <TIM_OC4_SetConfig+0xc0>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d00f      	beq.n	80024e8 <TIM_OC4_SetConfig+0x84>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	4a17      	ldr	r2, [pc, #92]	; (8002528 <TIM_OC4_SetConfig+0xc4>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d00b      	beq.n	80024e8 <TIM_OC4_SetConfig+0x84>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	4a16      	ldr	r2, [pc, #88]	; (800252c <TIM_OC4_SetConfig+0xc8>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d007      	beq.n	80024e8 <TIM_OC4_SetConfig+0x84>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4a15      	ldr	r2, [pc, #84]	; (8002530 <TIM_OC4_SetConfig+0xcc>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d003      	beq.n	80024e8 <TIM_OC4_SetConfig+0x84>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	4a14      	ldr	r2, [pc, #80]	; (8002534 <TIM_OC4_SetConfig+0xd0>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d109      	bne.n	80024fc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80024ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	695b      	ldr	r3, [r3, #20]
 80024f4:	019b      	lsls	r3, r3, #6
 80024f6:	697a      	ldr	r2, [r7, #20]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	697a      	ldr	r2, [r7, #20]
 8002500:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	68fa      	ldr	r2, [r7, #12]
 8002506:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685a      	ldr	r2, [r3, #4]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	621a      	str	r2, [r3, #32]
}
 8002516:	bf00      	nop
 8002518:	371c      	adds	r7, #28
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	40012c00 	.word	0x40012c00
 8002528:	40013400 	.word	0x40013400
 800252c:	40014000 	.word	0x40014000
 8002530:	40014400 	.word	0x40014400
 8002534:	40014800 	.word	0x40014800

08002538 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002538:	b480      	push	{r7}
 800253a:	b087      	sub	sp, #28
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a1b      	ldr	r3, [r3, #32]
 8002546:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a1b      	ldr	r3, [r3, #32]
 800254c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800255e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800256a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68fa      	ldr	r2, [r7, #12]
 8002572:	4313      	orrs	r3, r2
 8002574:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800257c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	041b      	lsls	r3, r3, #16
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	4313      	orrs	r3, r2
 8002588:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a17      	ldr	r2, [pc, #92]	; (80025ec <TIM_OC5_SetConfig+0xb4>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d00f      	beq.n	80025b2 <TIM_OC5_SetConfig+0x7a>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a16      	ldr	r2, [pc, #88]	; (80025f0 <TIM_OC5_SetConfig+0xb8>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d00b      	beq.n	80025b2 <TIM_OC5_SetConfig+0x7a>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a15      	ldr	r2, [pc, #84]	; (80025f4 <TIM_OC5_SetConfig+0xbc>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d007      	beq.n	80025b2 <TIM_OC5_SetConfig+0x7a>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a14      	ldr	r2, [pc, #80]	; (80025f8 <TIM_OC5_SetConfig+0xc0>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d003      	beq.n	80025b2 <TIM_OC5_SetConfig+0x7a>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a13      	ldr	r2, [pc, #76]	; (80025fc <TIM_OC5_SetConfig+0xc4>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d109      	bne.n	80025c6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025b8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	021b      	lsls	r3, r3, #8
 80025c0:	697a      	ldr	r2, [r7, #20]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	697a      	ldr	r2, [r7, #20]
 80025ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	685a      	ldr	r2, [r3, #4]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	693a      	ldr	r2, [r7, #16]
 80025de:	621a      	str	r2, [r3, #32]
}
 80025e0:	bf00      	nop
 80025e2:	371c      	adds	r7, #28
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr
 80025ec:	40012c00 	.word	0x40012c00
 80025f0:	40013400 	.word	0x40013400
 80025f4:	40014000 	.word	0x40014000
 80025f8:	40014400 	.word	0x40014400
 80025fc:	40014800 	.word	0x40014800

08002600 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002600:	b480      	push	{r7}
 8002602:	b087      	sub	sp, #28
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a1b      	ldr	r3, [r3, #32]
 800260e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a1b      	ldr	r3, [r3, #32]
 8002614:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800262e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002632:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	021b      	lsls	r3, r3, #8
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	4313      	orrs	r3, r2
 800263e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002646:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	051b      	lsls	r3, r3, #20
 800264e:	693a      	ldr	r2, [r7, #16]
 8002650:	4313      	orrs	r3, r2
 8002652:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	4a18      	ldr	r2, [pc, #96]	; (80026b8 <TIM_OC6_SetConfig+0xb8>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d00f      	beq.n	800267c <TIM_OC6_SetConfig+0x7c>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4a17      	ldr	r2, [pc, #92]	; (80026bc <TIM_OC6_SetConfig+0xbc>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d00b      	beq.n	800267c <TIM_OC6_SetConfig+0x7c>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	4a16      	ldr	r2, [pc, #88]	; (80026c0 <TIM_OC6_SetConfig+0xc0>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d007      	beq.n	800267c <TIM_OC6_SetConfig+0x7c>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4a15      	ldr	r2, [pc, #84]	; (80026c4 <TIM_OC6_SetConfig+0xc4>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d003      	beq.n	800267c <TIM_OC6_SetConfig+0x7c>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	4a14      	ldr	r2, [pc, #80]	; (80026c8 <TIM_OC6_SetConfig+0xc8>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d109      	bne.n	8002690 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002682:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	695b      	ldr	r3, [r3, #20]
 8002688:	029b      	lsls	r3, r3, #10
 800268a:	697a      	ldr	r2, [r7, #20]
 800268c:	4313      	orrs	r3, r2
 800268e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	68fa      	ldr	r2, [r7, #12]
 800269a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685a      	ldr	r2, [r3, #4]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	693a      	ldr	r2, [r7, #16]
 80026a8:	621a      	str	r2, [r3, #32]
}
 80026aa:	bf00      	nop
 80026ac:	371c      	adds	r7, #28
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	40012c00 	.word	0x40012c00
 80026bc:	40013400 	.word	0x40013400
 80026c0:	40014000 	.word	0x40014000
 80026c4:	40014400 	.word	0x40014400
 80026c8:	40014800 	.word	0x40014800

080026cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b085      	sub	sp, #20
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d101      	bne.n	80026e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80026e0:	2302      	movs	r3, #2
 80026e2:	e068      	b.n	80027b6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2202      	movs	r2, #2
 80026f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a2e      	ldr	r2, [pc, #184]	; (80027c4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d004      	beq.n	8002718 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a2d      	ldr	r2, [pc, #180]	; (80027c8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d108      	bne.n	800272a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800271e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	68fa      	ldr	r2, [r7, #12]
 8002726:	4313      	orrs	r3, r2
 8002728:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002730:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	4313      	orrs	r3, r2
 800273a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	68fa      	ldr	r2, [r7, #12]
 8002742:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a1e      	ldr	r2, [pc, #120]	; (80027c4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d01d      	beq.n	800278a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002756:	d018      	beq.n	800278a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a1b      	ldr	r2, [pc, #108]	; (80027cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d013      	beq.n	800278a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a1a      	ldr	r2, [pc, #104]	; (80027d0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d00e      	beq.n	800278a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a18      	ldr	r2, [pc, #96]	; (80027d4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d009      	beq.n	800278a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a13      	ldr	r2, [pc, #76]	; (80027c8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d004      	beq.n	800278a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a14      	ldr	r2, [pc, #80]	; (80027d8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d10c      	bne.n	80027a4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002790:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	68ba      	ldr	r2, [r7, #8]
 8002798:	4313      	orrs	r3, r2
 800279a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	68ba      	ldr	r2, [r7, #8]
 80027a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3714      	adds	r7, #20
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	40012c00 	.word	0x40012c00
 80027c8:	40013400 	.word	0x40013400
 80027cc:	40000400 	.word	0x40000400
 80027d0:	40000800 	.word	0x40000800
 80027d4:	40000c00 	.word	0x40000c00
 80027d8:	40014000 	.word	0x40014000

080027dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80027e4:	bf00      	nop
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80027f8:	bf00      	nop
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800280c:	bf00      	nop
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002818:	b480      	push	{r7}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
 800281e:	4603      	mov	r3, r0
 8002820:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002822:	2300      	movs	r3, #0
 8002824:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002826:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800282a:	2b84      	cmp	r3, #132	; 0x84
 800282c:	d005      	beq.n	800283a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800282e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	4413      	add	r3, r2
 8002836:	3303      	adds	r3, #3
 8002838:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800283a:	68fb      	ldr	r3, [r7, #12]
}
 800283c:	4618      	mov	r0, r3
 800283e:	3714      	adds	r7, #20
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr

08002848 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800284c:	f000 fade 	bl	8002e0c <vTaskStartScheduler>
  
  return osOK;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	bd80      	pop	{r7, pc}

08002856 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002856:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002858:	b089      	sub	sp, #36	; 0x24
 800285a:	af04      	add	r7, sp, #16
 800285c:	6078      	str	r0, [r7, #4]
 800285e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	695b      	ldr	r3, [r3, #20]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d020      	beq.n	80028aa <osThreadCreate+0x54>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d01c      	beq.n	80028aa <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685c      	ldr	r4, [r3, #4]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	691e      	ldr	r6, [r3, #16]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002882:	4618      	mov	r0, r3
 8002884:	f7ff ffc8 	bl	8002818 <makeFreeRtosPriority>
 8002888:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	695b      	ldr	r3, [r3, #20]
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002892:	9202      	str	r2, [sp, #8]
 8002894:	9301      	str	r3, [sp, #4]
 8002896:	9100      	str	r1, [sp, #0]
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	4632      	mov	r2, r6
 800289c:	4629      	mov	r1, r5
 800289e:	4620      	mov	r0, r4
 80028a0:	f000 f8ed 	bl	8002a7e <xTaskCreateStatic>
 80028a4:	4603      	mov	r3, r0
 80028a6:	60fb      	str	r3, [r7, #12]
 80028a8:	e01c      	b.n	80028e4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685c      	ldr	r4, [r3, #4]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80028b6:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80028be:	4618      	mov	r0, r3
 80028c0:	f7ff ffaa 	bl	8002818 <makeFreeRtosPriority>
 80028c4:	4602      	mov	r2, r0
 80028c6:	f107 030c 	add.w	r3, r7, #12
 80028ca:	9301      	str	r3, [sp, #4]
 80028cc:	9200      	str	r2, [sp, #0]
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	4632      	mov	r2, r6
 80028d2:	4629      	mov	r1, r5
 80028d4:	4620      	mov	r0, r4
 80028d6:	f000 f92f 	bl	8002b38 <xTaskCreate>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d001      	beq.n	80028e4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80028e0:	2300      	movs	r3, #0
 80028e2:	e000      	b.n	80028e6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80028e4:	68fb      	ldr	r3, [r7, #12]
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3714      	adds	r7, #20
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

080028ee <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b084      	sub	sp, #16
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <osDelay+0x16>
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	e000      	b.n	8002906 <osDelay+0x18>
 8002904:	2301      	movs	r3, #1
 8002906:	4618      	mov	r0, r3
 8002908:	f000 fa4c 	bl	8002da4 <vTaskDelay>
  
  return osOK;
 800290c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800290e:	4618      	mov	r0, r3
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002916:	b480      	push	{r7}
 8002918:	b083      	sub	sp, #12
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f103 0208 	add.w	r2, r3, #8
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800292e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f103 0208 	add.w	r2, r3, #8
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f103 0208 	add.w	r2, r3, #8
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800294a:	bf00      	nop
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr

08002956 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002956:	b480      	push	{r7}
 8002958:	b083      	sub	sp, #12
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002964:	bf00      	nop
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002970:	b480      	push	{r7}
 8002972:	b085      	sub	sp, #20
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	68fa      	ldr	r2, [r7, #12]
 8002984:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	689a      	ldr	r2, [r3, #8]
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	683a      	ldr	r2, [r7, #0]
 8002994:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	683a      	ldr	r2, [r7, #0]
 800299a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	1c5a      	adds	r2, r3, #1
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	601a      	str	r2, [r3, #0]
}
 80029ac:	bf00      	nop
 80029ae:	3714      	adds	r7, #20
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80029b8:	b480      	push	{r7}
 80029ba:	b085      	sub	sp, #20
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029ce:	d103      	bne.n	80029d8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	60fb      	str	r3, [r7, #12]
 80029d6:	e00c      	b.n	80029f2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	3308      	adds	r3, #8
 80029dc:	60fb      	str	r3, [r7, #12]
 80029de:	e002      	b.n	80029e6 <vListInsert+0x2e>
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	60fb      	str	r3, [r7, #12]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	68ba      	ldr	r2, [r7, #8]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d2f6      	bcs.n	80029e0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	685a      	ldr	r2, [r3, #4]
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	683a      	ldr	r2, [r7, #0]
 8002a00:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	68fa      	ldr	r2, [r7, #12]
 8002a06:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	683a      	ldr	r2, [r7, #0]
 8002a0c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	1c5a      	adds	r2, r3, #1
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	601a      	str	r2, [r3, #0]
}
 8002a1e:	bf00      	nop
 8002a20:	3714      	adds	r7, #20
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr

08002a2a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002a2a:	b480      	push	{r7}
 8002a2c:	b085      	sub	sp, #20
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	6892      	ldr	r2, [r2, #8]
 8002a40:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	6852      	ldr	r2, [r2, #4]
 8002a4a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d103      	bne.n	8002a5e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	689a      	ldr	r2, [r3, #8]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	1e5a      	subs	r2, r3, #1
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3714      	adds	r7, #20
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr

08002a7e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b08e      	sub	sp, #56	; 0x38
 8002a82:	af04      	add	r7, sp, #16
 8002a84:	60f8      	str	r0, [r7, #12]
 8002a86:	60b9      	str	r1, [r7, #8]
 8002a88:	607a      	str	r2, [r7, #4]
 8002a8a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d10a      	bne.n	8002aa8 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a96:	f383 8811 	msr	BASEPRI, r3
 8002a9a:	f3bf 8f6f 	isb	sy
 8002a9e:	f3bf 8f4f 	dsb	sy
 8002aa2:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002aa4:	bf00      	nop
 8002aa6:	e7fe      	b.n	8002aa6 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d10a      	bne.n	8002ac4 <xTaskCreateStatic+0x46>
	__asm volatile
 8002aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ab2:	f383 8811 	msr	BASEPRI, r3
 8002ab6:	f3bf 8f6f 	isb	sy
 8002aba:	f3bf 8f4f 	dsb	sy
 8002abe:	61fb      	str	r3, [r7, #28]
}
 8002ac0:	bf00      	nop
 8002ac2:	e7fe      	b.n	8002ac2 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002ac4:	2354      	movs	r3, #84	; 0x54
 8002ac6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	2b54      	cmp	r3, #84	; 0x54
 8002acc:	d00a      	beq.n	8002ae4 <xTaskCreateStatic+0x66>
	__asm volatile
 8002ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ad2:	f383 8811 	msr	BASEPRI, r3
 8002ad6:	f3bf 8f6f 	isb	sy
 8002ada:	f3bf 8f4f 	dsb	sy
 8002ade:	61bb      	str	r3, [r7, #24]
}
 8002ae0:	bf00      	nop
 8002ae2:	e7fe      	b.n	8002ae2 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002ae4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d01e      	beq.n	8002b2a <xTaskCreateStatic+0xac>
 8002aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d01b      	beq.n	8002b2a <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002af4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002afa:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afe:	2202      	movs	r2, #2
 8002b00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002b04:	2300      	movs	r3, #0
 8002b06:	9303      	str	r3, [sp, #12]
 8002b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0a:	9302      	str	r3, [sp, #8]
 8002b0c:	f107 0314 	add.w	r3, r7, #20
 8002b10:	9301      	str	r3, [sp, #4]
 8002b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b14:	9300      	str	r3, [sp, #0]
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	68b9      	ldr	r1, [r7, #8]
 8002b1c:	68f8      	ldr	r0, [r7, #12]
 8002b1e:	f000 f850 	bl	8002bc2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002b22:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002b24:	f000 f8d4 	bl	8002cd0 <prvAddNewTaskToReadyList>
 8002b28:	e001      	b.n	8002b2e <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002b2e:	697b      	ldr	r3, [r7, #20]
	}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3728      	adds	r7, #40	; 0x28
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b08c      	sub	sp, #48	; 0x30
 8002b3c:	af04      	add	r7, sp, #16
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	603b      	str	r3, [r7, #0]
 8002b44:	4613      	mov	r3, r2
 8002b46:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002b48:	88fb      	ldrh	r3, [r7, #6]
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f000 fee3 	bl	8003918 <pvPortMalloc>
 8002b52:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00e      	beq.n	8002b78 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002b5a:	2054      	movs	r0, #84	; 0x54
 8002b5c:	f000 fedc 	bl	8003918 <pvPortMalloc>
 8002b60:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d003      	beq.n	8002b70 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	697a      	ldr	r2, [r7, #20]
 8002b6c:	631a      	str	r2, [r3, #48]	; 0x30
 8002b6e:	e005      	b.n	8002b7c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002b70:	6978      	ldr	r0, [r7, #20]
 8002b72:	f000 ff9d 	bl	8003ab0 <vPortFree>
 8002b76:	e001      	b.n	8002b7c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d017      	beq.n	8002bb2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002b8a:	88fa      	ldrh	r2, [r7, #6]
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	9303      	str	r3, [sp, #12]
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	9302      	str	r3, [sp, #8]
 8002b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b96:	9301      	str	r3, [sp, #4]
 8002b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b9a:	9300      	str	r3, [sp, #0]
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	68b9      	ldr	r1, [r7, #8]
 8002ba0:	68f8      	ldr	r0, [r7, #12]
 8002ba2:	f000 f80e 	bl	8002bc2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002ba6:	69f8      	ldr	r0, [r7, #28]
 8002ba8:	f000 f892 	bl	8002cd0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002bac:	2301      	movs	r3, #1
 8002bae:	61bb      	str	r3, [r7, #24]
 8002bb0:	e002      	b.n	8002bb8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002bb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002bb6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002bb8:	69bb      	ldr	r3, [r7, #24]
	}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3720      	adds	r7, #32
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b088      	sub	sp, #32
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	60f8      	str	r0, [r7, #12]
 8002bca:	60b9      	str	r1, [r7, #8]
 8002bcc:	607a      	str	r2, [r7, #4]
 8002bce:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	4413      	add	r3, r2
 8002be0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	f023 0307 	bic.w	r3, r3, #7
 8002be8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	f003 0307 	and.w	r3, r3, #7
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d00a      	beq.n	8002c0a <prvInitialiseNewTask+0x48>
	__asm volatile
 8002bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bf8:	f383 8811 	msr	BASEPRI, r3
 8002bfc:	f3bf 8f6f 	isb	sy
 8002c00:	f3bf 8f4f 	dsb	sy
 8002c04:	617b      	str	r3, [r7, #20]
}
 8002c06:	bf00      	nop
 8002c08:	e7fe      	b.n	8002c08 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d01f      	beq.n	8002c50 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002c10:	2300      	movs	r3, #0
 8002c12:	61fb      	str	r3, [r7, #28]
 8002c14:	e012      	b.n	8002c3c <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002c16:	68ba      	ldr	r2, [r7, #8]
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	4413      	add	r3, r2
 8002c1c:	7819      	ldrb	r1, [r3, #0]
 8002c1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	4413      	add	r3, r2
 8002c24:	3334      	adds	r3, #52	; 0x34
 8002c26:	460a      	mov	r2, r1
 8002c28:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002c2a:	68ba      	ldr	r2, [r7, #8]
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	4413      	add	r3, r2
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d006      	beq.n	8002c44 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	3301      	adds	r3, #1
 8002c3a:	61fb      	str	r3, [r7, #28]
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	2b0f      	cmp	r3, #15
 8002c40:	d9e9      	bls.n	8002c16 <prvInitialiseNewTask+0x54>
 8002c42:	e000      	b.n	8002c46 <prvInitialiseNewTask+0x84>
			{
				break;
 8002c44:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c4e:	e003      	b.n	8002c58 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c52:	2200      	movs	r2, #0
 8002c54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c5a:	2b06      	cmp	r3, #6
 8002c5c:	d901      	bls.n	8002c62 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002c5e:	2306      	movs	r3, #6
 8002c60:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c66:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c6c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c70:	2200      	movs	r2, #0
 8002c72:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c76:	3304      	adds	r3, #4
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7ff fe6c 	bl	8002956 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c80:	3318      	adds	r3, #24
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7ff fe67 	bl	8002956 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c8c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c90:	f1c3 0207 	rsb	r2, r3, #7
 8002c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c96:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c9c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002cac:	683a      	ldr	r2, [r7, #0]
 8002cae:	68f9      	ldr	r1, [r7, #12]
 8002cb0:	69b8      	ldr	r0, [r7, #24]
 8002cb2:	f000 fc23 	bl	80034fc <pxPortInitialiseStack>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cba:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d002      	beq.n	8002cc8 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cc6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002cc8:	bf00      	nop
 8002cca:	3720      	adds	r7, #32
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002cd8:	f000 fd3c 	bl	8003754 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002cdc:	4b2a      	ldr	r3, [pc, #168]	; (8002d88 <prvAddNewTaskToReadyList+0xb8>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	4a29      	ldr	r2, [pc, #164]	; (8002d88 <prvAddNewTaskToReadyList+0xb8>)
 8002ce4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002ce6:	4b29      	ldr	r3, [pc, #164]	; (8002d8c <prvAddNewTaskToReadyList+0xbc>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d109      	bne.n	8002d02 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002cee:	4a27      	ldr	r2, [pc, #156]	; (8002d8c <prvAddNewTaskToReadyList+0xbc>)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002cf4:	4b24      	ldr	r3, [pc, #144]	; (8002d88 <prvAddNewTaskToReadyList+0xb8>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d110      	bne.n	8002d1e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002cfc:	f000 fabc 	bl	8003278 <prvInitialiseTaskLists>
 8002d00:	e00d      	b.n	8002d1e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002d02:	4b23      	ldr	r3, [pc, #140]	; (8002d90 <prvAddNewTaskToReadyList+0xc0>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d109      	bne.n	8002d1e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002d0a:	4b20      	ldr	r3, [pc, #128]	; (8002d8c <prvAddNewTaskToReadyList+0xbc>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d802      	bhi.n	8002d1e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002d18:	4a1c      	ldr	r2, [pc, #112]	; (8002d8c <prvAddNewTaskToReadyList+0xbc>)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002d1e:	4b1d      	ldr	r3, [pc, #116]	; (8002d94 <prvAddNewTaskToReadyList+0xc4>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	3301      	adds	r3, #1
 8002d24:	4a1b      	ldr	r2, [pc, #108]	; (8002d94 <prvAddNewTaskToReadyList+0xc4>)
 8002d26:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	409a      	lsls	r2, r3
 8002d30:	4b19      	ldr	r3, [pc, #100]	; (8002d98 <prvAddNewTaskToReadyList+0xc8>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	4a18      	ldr	r2, [pc, #96]	; (8002d98 <prvAddNewTaskToReadyList+0xc8>)
 8002d38:	6013      	str	r3, [r2, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d3e:	4613      	mov	r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	4413      	add	r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	4a15      	ldr	r2, [pc, #84]	; (8002d9c <prvAddNewTaskToReadyList+0xcc>)
 8002d48:	441a      	add	r2, r3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	3304      	adds	r3, #4
 8002d4e:	4619      	mov	r1, r3
 8002d50:	4610      	mov	r0, r2
 8002d52:	f7ff fe0d 	bl	8002970 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002d56:	f000 fd2d 	bl	80037b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002d5a:	4b0d      	ldr	r3, [pc, #52]	; (8002d90 <prvAddNewTaskToReadyList+0xc0>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d00e      	beq.n	8002d80 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002d62:	4b0a      	ldr	r3, [pc, #40]	; (8002d8c <prvAddNewTaskToReadyList+0xbc>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d207      	bcs.n	8002d80 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002d70:	4b0b      	ldr	r3, [pc, #44]	; (8002da0 <prvAddNewTaskToReadyList+0xd0>)
 8002d72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d76:	601a      	str	r2, [r3, #0]
 8002d78:	f3bf 8f4f 	dsb	sy
 8002d7c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002d80:	bf00      	nop
 8002d82:	3708      	adds	r7, #8
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	200003d4 	.word	0x200003d4
 8002d8c:	200002d4 	.word	0x200002d4
 8002d90:	200003e0 	.word	0x200003e0
 8002d94:	200003f0 	.word	0x200003f0
 8002d98:	200003dc 	.word	0x200003dc
 8002d9c:	200002d8 	.word	0x200002d8
 8002da0:	e000ed04 	.word	0xe000ed04

08002da4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002dac:	2300      	movs	r3, #0
 8002dae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d017      	beq.n	8002de6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002db6:	4b13      	ldr	r3, [pc, #76]	; (8002e04 <vTaskDelay+0x60>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d00a      	beq.n	8002dd4 <vTaskDelay+0x30>
	__asm volatile
 8002dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc2:	f383 8811 	msr	BASEPRI, r3
 8002dc6:	f3bf 8f6f 	isb	sy
 8002dca:	f3bf 8f4f 	dsb	sy
 8002dce:	60bb      	str	r3, [r7, #8]
}
 8002dd0:	bf00      	nop
 8002dd2:	e7fe      	b.n	8002dd2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002dd4:	f000 f87a 	bl	8002ecc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002dd8:	2100      	movs	r1, #0
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 fb28 	bl	8003430 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002de0:	f000 f882 	bl	8002ee8 <xTaskResumeAll>
 8002de4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d107      	bne.n	8002dfc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002dec:	4b06      	ldr	r3, [pc, #24]	; (8002e08 <vTaskDelay+0x64>)
 8002dee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002df2:	601a      	str	r2, [r3, #0]
 8002df4:	f3bf 8f4f 	dsb	sy
 8002df8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002dfc:	bf00      	nop
 8002dfe:	3710      	adds	r7, #16
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	200003fc 	.word	0x200003fc
 8002e08:	e000ed04 	.word	0xe000ed04

08002e0c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b08a      	sub	sp, #40	; 0x28
 8002e10:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002e12:	2300      	movs	r3, #0
 8002e14:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002e16:	2300      	movs	r3, #0
 8002e18:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002e1a:	463a      	mov	r2, r7
 8002e1c:	1d39      	adds	r1, r7, #4
 8002e1e:	f107 0308 	add.w	r3, r7, #8
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7fd f9d4 	bl	80001d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002e28:	6839      	ldr	r1, [r7, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	68ba      	ldr	r2, [r7, #8]
 8002e2e:	9202      	str	r2, [sp, #8]
 8002e30:	9301      	str	r3, [sp, #4]
 8002e32:	2300      	movs	r3, #0
 8002e34:	9300      	str	r3, [sp, #0]
 8002e36:	2300      	movs	r3, #0
 8002e38:	460a      	mov	r2, r1
 8002e3a:	491e      	ldr	r1, [pc, #120]	; (8002eb4 <vTaskStartScheduler+0xa8>)
 8002e3c:	481e      	ldr	r0, [pc, #120]	; (8002eb8 <vTaskStartScheduler+0xac>)
 8002e3e:	f7ff fe1e 	bl	8002a7e <xTaskCreateStatic>
 8002e42:	4603      	mov	r3, r0
 8002e44:	4a1d      	ldr	r2, [pc, #116]	; (8002ebc <vTaskStartScheduler+0xb0>)
 8002e46:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002e48:	4b1c      	ldr	r3, [pc, #112]	; (8002ebc <vTaskStartScheduler+0xb0>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d002      	beq.n	8002e56 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002e50:	2301      	movs	r3, #1
 8002e52:	617b      	str	r3, [r7, #20]
 8002e54:	e001      	b.n	8002e5a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002e56:	2300      	movs	r3, #0
 8002e58:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d116      	bne.n	8002e8e <vTaskStartScheduler+0x82>
	__asm volatile
 8002e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e64:	f383 8811 	msr	BASEPRI, r3
 8002e68:	f3bf 8f6f 	isb	sy
 8002e6c:	f3bf 8f4f 	dsb	sy
 8002e70:	613b      	str	r3, [r7, #16]
}
 8002e72:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002e74:	4b12      	ldr	r3, [pc, #72]	; (8002ec0 <vTaskStartScheduler+0xb4>)
 8002e76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e7a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002e7c:	4b11      	ldr	r3, [pc, #68]	; (8002ec4 <vTaskStartScheduler+0xb8>)
 8002e7e:	2201      	movs	r2, #1
 8002e80:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002e82:	4b11      	ldr	r3, [pc, #68]	; (8002ec8 <vTaskStartScheduler+0xbc>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002e88:	f000 fbc2 	bl	8003610 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002e8c:	e00e      	b.n	8002eac <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e94:	d10a      	bne.n	8002eac <vTaskStartScheduler+0xa0>
	__asm volatile
 8002e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e9a:	f383 8811 	msr	BASEPRI, r3
 8002e9e:	f3bf 8f6f 	isb	sy
 8002ea2:	f3bf 8f4f 	dsb	sy
 8002ea6:	60fb      	str	r3, [r7, #12]
}
 8002ea8:	bf00      	nop
 8002eaa:	e7fe      	b.n	8002eaa <vTaskStartScheduler+0x9e>
}
 8002eac:	bf00      	nop
 8002eae:	3718      	adds	r7, #24
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	08003d84 	.word	0x08003d84
 8002eb8:	08003249 	.word	0x08003249
 8002ebc:	200003f8 	.word	0x200003f8
 8002ec0:	200003f4 	.word	0x200003f4
 8002ec4:	200003e0 	.word	0x200003e0
 8002ec8:	200003d8 	.word	0x200003d8

08002ecc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002ed0:	4b04      	ldr	r3, [pc, #16]	; (8002ee4 <vTaskSuspendAll+0x18>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	4a03      	ldr	r2, [pc, #12]	; (8002ee4 <vTaskSuspendAll+0x18>)
 8002ed8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002eda:	bf00      	nop
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr
 8002ee4:	200003fc 	.word	0x200003fc

08002ee8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002ef6:	4b41      	ldr	r3, [pc, #260]	; (8002ffc <xTaskResumeAll+0x114>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d10a      	bne.n	8002f14 <xTaskResumeAll+0x2c>
	__asm volatile
 8002efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f02:	f383 8811 	msr	BASEPRI, r3
 8002f06:	f3bf 8f6f 	isb	sy
 8002f0a:	f3bf 8f4f 	dsb	sy
 8002f0e:	603b      	str	r3, [r7, #0]
}
 8002f10:	bf00      	nop
 8002f12:	e7fe      	b.n	8002f12 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002f14:	f000 fc1e 	bl	8003754 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002f18:	4b38      	ldr	r3, [pc, #224]	; (8002ffc <xTaskResumeAll+0x114>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	3b01      	subs	r3, #1
 8002f1e:	4a37      	ldr	r2, [pc, #220]	; (8002ffc <xTaskResumeAll+0x114>)
 8002f20:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f22:	4b36      	ldr	r3, [pc, #216]	; (8002ffc <xTaskResumeAll+0x114>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d161      	bne.n	8002fee <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002f2a:	4b35      	ldr	r3, [pc, #212]	; (8003000 <xTaskResumeAll+0x118>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d05d      	beq.n	8002fee <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f32:	e02e      	b.n	8002f92 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f34:	4b33      	ldr	r3, [pc, #204]	; (8003004 <xTaskResumeAll+0x11c>)
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	3318      	adds	r3, #24
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7ff fd72 	bl	8002a2a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	3304      	adds	r3, #4
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7ff fd6d 	bl	8002a2a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f54:	2201      	movs	r2, #1
 8002f56:	409a      	lsls	r2, r3
 8002f58:	4b2b      	ldr	r3, [pc, #172]	; (8003008 <xTaskResumeAll+0x120>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	4a2a      	ldr	r2, [pc, #168]	; (8003008 <xTaskResumeAll+0x120>)
 8002f60:	6013      	str	r3, [r2, #0]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f66:	4613      	mov	r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	4413      	add	r3, r2
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	4a27      	ldr	r2, [pc, #156]	; (800300c <xTaskResumeAll+0x124>)
 8002f70:	441a      	add	r2, r3
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	3304      	adds	r3, #4
 8002f76:	4619      	mov	r1, r3
 8002f78:	4610      	mov	r0, r2
 8002f7a:	f7ff fcf9 	bl	8002970 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f82:	4b23      	ldr	r3, [pc, #140]	; (8003010 <xTaskResumeAll+0x128>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d302      	bcc.n	8002f92 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002f8c:	4b21      	ldr	r3, [pc, #132]	; (8003014 <xTaskResumeAll+0x12c>)
 8002f8e:	2201      	movs	r2, #1
 8002f90:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f92:	4b1c      	ldr	r3, [pc, #112]	; (8003004 <xTaskResumeAll+0x11c>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1cc      	bne.n	8002f34 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d001      	beq.n	8002fa4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002fa0:	f000 fa08 	bl	80033b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002fa4:	4b1c      	ldr	r3, [pc, #112]	; (8003018 <xTaskResumeAll+0x130>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d010      	beq.n	8002fd2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002fb0:	f000 f836 	bl	8003020 <xTaskIncrementTick>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d002      	beq.n	8002fc0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8002fba:	4b16      	ldr	r3, [pc, #88]	; (8003014 <xTaskResumeAll+0x12c>)
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d1f1      	bne.n	8002fb0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8002fcc:	4b12      	ldr	r3, [pc, #72]	; (8003018 <xTaskResumeAll+0x130>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002fd2:	4b10      	ldr	r3, [pc, #64]	; (8003014 <xTaskResumeAll+0x12c>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d009      	beq.n	8002fee <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002fde:	4b0f      	ldr	r3, [pc, #60]	; (800301c <xTaskResumeAll+0x134>)
 8002fe0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fe4:	601a      	str	r2, [r3, #0]
 8002fe6:	f3bf 8f4f 	dsb	sy
 8002fea:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002fee:	f000 fbe1 	bl	80037b4 <vPortExitCritical>

	return xAlreadyYielded;
 8002ff2:	68bb      	ldr	r3, [r7, #8]
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3710      	adds	r7, #16
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	200003fc 	.word	0x200003fc
 8003000:	200003d4 	.word	0x200003d4
 8003004:	20000394 	.word	0x20000394
 8003008:	200003dc 	.word	0x200003dc
 800300c:	200002d8 	.word	0x200002d8
 8003010:	200002d4 	.word	0x200002d4
 8003014:	200003e8 	.word	0x200003e8
 8003018:	200003e4 	.word	0x200003e4
 800301c:	e000ed04 	.word	0xe000ed04

08003020 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b086      	sub	sp, #24
 8003024:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003026:	2300      	movs	r3, #0
 8003028:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800302a:	4b4e      	ldr	r3, [pc, #312]	; (8003164 <xTaskIncrementTick+0x144>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2b00      	cmp	r3, #0
 8003030:	f040 808e 	bne.w	8003150 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003034:	4b4c      	ldr	r3, [pc, #304]	; (8003168 <xTaskIncrementTick+0x148>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	3301      	adds	r3, #1
 800303a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800303c:	4a4a      	ldr	r2, [pc, #296]	; (8003168 <xTaskIncrementTick+0x148>)
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d120      	bne.n	800308a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003048:	4b48      	ldr	r3, [pc, #288]	; (800316c <xTaskIncrementTick+0x14c>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00a      	beq.n	8003068 <xTaskIncrementTick+0x48>
	__asm volatile
 8003052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003056:	f383 8811 	msr	BASEPRI, r3
 800305a:	f3bf 8f6f 	isb	sy
 800305e:	f3bf 8f4f 	dsb	sy
 8003062:	603b      	str	r3, [r7, #0]
}
 8003064:	bf00      	nop
 8003066:	e7fe      	b.n	8003066 <xTaskIncrementTick+0x46>
 8003068:	4b40      	ldr	r3, [pc, #256]	; (800316c <xTaskIncrementTick+0x14c>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	60fb      	str	r3, [r7, #12]
 800306e:	4b40      	ldr	r3, [pc, #256]	; (8003170 <xTaskIncrementTick+0x150>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a3e      	ldr	r2, [pc, #248]	; (800316c <xTaskIncrementTick+0x14c>)
 8003074:	6013      	str	r3, [r2, #0]
 8003076:	4a3e      	ldr	r2, [pc, #248]	; (8003170 <xTaskIncrementTick+0x150>)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6013      	str	r3, [r2, #0]
 800307c:	4b3d      	ldr	r3, [pc, #244]	; (8003174 <xTaskIncrementTick+0x154>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	3301      	adds	r3, #1
 8003082:	4a3c      	ldr	r2, [pc, #240]	; (8003174 <xTaskIncrementTick+0x154>)
 8003084:	6013      	str	r3, [r2, #0]
 8003086:	f000 f995 	bl	80033b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800308a:	4b3b      	ldr	r3, [pc, #236]	; (8003178 <xTaskIncrementTick+0x158>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	693a      	ldr	r2, [r7, #16]
 8003090:	429a      	cmp	r2, r3
 8003092:	d348      	bcc.n	8003126 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003094:	4b35      	ldr	r3, [pc, #212]	; (800316c <xTaskIncrementTick+0x14c>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d104      	bne.n	80030a8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800309e:	4b36      	ldr	r3, [pc, #216]	; (8003178 <xTaskIncrementTick+0x158>)
 80030a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80030a4:	601a      	str	r2, [r3, #0]
					break;
 80030a6:	e03e      	b.n	8003126 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030a8:	4b30      	ldr	r3, [pc, #192]	; (800316c <xTaskIncrementTick+0x14c>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d203      	bcs.n	80030c8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80030c0:	4a2d      	ldr	r2, [pc, #180]	; (8003178 <xTaskIncrementTick+0x158>)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80030c6:	e02e      	b.n	8003126 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	3304      	adds	r3, #4
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7ff fcac 	bl	8002a2a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d004      	beq.n	80030e4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	3318      	adds	r3, #24
 80030de:	4618      	mov	r0, r3
 80030e0:	f7ff fca3 	bl	8002a2a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e8:	2201      	movs	r2, #1
 80030ea:	409a      	lsls	r2, r3
 80030ec:	4b23      	ldr	r3, [pc, #140]	; (800317c <xTaskIncrementTick+0x15c>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	4a22      	ldr	r2, [pc, #136]	; (800317c <xTaskIncrementTick+0x15c>)
 80030f4:	6013      	str	r3, [r2, #0]
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030fa:	4613      	mov	r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	4413      	add	r3, r2
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	4a1f      	ldr	r2, [pc, #124]	; (8003180 <xTaskIncrementTick+0x160>)
 8003104:	441a      	add	r2, r3
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	3304      	adds	r3, #4
 800310a:	4619      	mov	r1, r3
 800310c:	4610      	mov	r0, r2
 800310e:	f7ff fc2f 	bl	8002970 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003116:	4b1b      	ldr	r3, [pc, #108]	; (8003184 <xTaskIncrementTick+0x164>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800311c:	429a      	cmp	r2, r3
 800311e:	d3b9      	bcc.n	8003094 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003120:	2301      	movs	r3, #1
 8003122:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003124:	e7b6      	b.n	8003094 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003126:	4b17      	ldr	r3, [pc, #92]	; (8003184 <xTaskIncrementTick+0x164>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800312c:	4914      	ldr	r1, [pc, #80]	; (8003180 <xTaskIncrementTick+0x160>)
 800312e:	4613      	mov	r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	4413      	add	r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	440b      	add	r3, r1
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2b01      	cmp	r3, #1
 800313c:	d901      	bls.n	8003142 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800313e:	2301      	movs	r3, #1
 8003140:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003142:	4b11      	ldr	r3, [pc, #68]	; (8003188 <xTaskIncrementTick+0x168>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d007      	beq.n	800315a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800314a:	2301      	movs	r3, #1
 800314c:	617b      	str	r3, [r7, #20]
 800314e:	e004      	b.n	800315a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003150:	4b0e      	ldr	r3, [pc, #56]	; (800318c <xTaskIncrementTick+0x16c>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	3301      	adds	r3, #1
 8003156:	4a0d      	ldr	r2, [pc, #52]	; (800318c <xTaskIncrementTick+0x16c>)
 8003158:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800315a:	697b      	ldr	r3, [r7, #20]
}
 800315c:	4618      	mov	r0, r3
 800315e:	3718      	adds	r7, #24
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	200003fc 	.word	0x200003fc
 8003168:	200003d8 	.word	0x200003d8
 800316c:	2000038c 	.word	0x2000038c
 8003170:	20000390 	.word	0x20000390
 8003174:	200003ec 	.word	0x200003ec
 8003178:	200003f4 	.word	0x200003f4
 800317c:	200003dc 	.word	0x200003dc
 8003180:	200002d8 	.word	0x200002d8
 8003184:	200002d4 	.word	0x200002d4
 8003188:	200003e8 	.word	0x200003e8
 800318c:	200003e4 	.word	0x200003e4

08003190 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003190:	b480      	push	{r7}
 8003192:	b087      	sub	sp, #28
 8003194:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003196:	4b27      	ldr	r3, [pc, #156]	; (8003234 <vTaskSwitchContext+0xa4>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d003      	beq.n	80031a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800319e:	4b26      	ldr	r3, [pc, #152]	; (8003238 <vTaskSwitchContext+0xa8>)
 80031a0:	2201      	movs	r2, #1
 80031a2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80031a4:	e03f      	b.n	8003226 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80031a6:	4b24      	ldr	r3, [pc, #144]	; (8003238 <vTaskSwitchContext+0xa8>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031ac:	4b23      	ldr	r3, [pc, #140]	; (800323c <vTaskSwitchContext+0xac>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	fab3 f383 	clz	r3, r3
 80031b8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80031ba:	7afb      	ldrb	r3, [r7, #11]
 80031bc:	f1c3 031f 	rsb	r3, r3, #31
 80031c0:	617b      	str	r3, [r7, #20]
 80031c2:	491f      	ldr	r1, [pc, #124]	; (8003240 <vTaskSwitchContext+0xb0>)
 80031c4:	697a      	ldr	r2, [r7, #20]
 80031c6:	4613      	mov	r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	4413      	add	r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	440b      	add	r3, r1
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d10a      	bne.n	80031ec <vTaskSwitchContext+0x5c>
	__asm volatile
 80031d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031da:	f383 8811 	msr	BASEPRI, r3
 80031de:	f3bf 8f6f 	isb	sy
 80031e2:	f3bf 8f4f 	dsb	sy
 80031e6:	607b      	str	r3, [r7, #4]
}
 80031e8:	bf00      	nop
 80031ea:	e7fe      	b.n	80031ea <vTaskSwitchContext+0x5a>
 80031ec:	697a      	ldr	r2, [r7, #20]
 80031ee:	4613      	mov	r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	4413      	add	r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	4a12      	ldr	r2, [pc, #72]	; (8003240 <vTaskSwitchContext+0xb0>)
 80031f8:	4413      	add	r3, r2
 80031fa:	613b      	str	r3, [r7, #16]
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	685a      	ldr	r2, [r3, #4]
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	605a      	str	r2, [r3, #4]
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	685a      	ldr	r2, [r3, #4]
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	3308      	adds	r3, #8
 800320e:	429a      	cmp	r2, r3
 8003210:	d104      	bne.n	800321c <vTaskSwitchContext+0x8c>
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	685a      	ldr	r2, [r3, #4]
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	605a      	str	r2, [r3, #4]
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	4a08      	ldr	r2, [pc, #32]	; (8003244 <vTaskSwitchContext+0xb4>)
 8003224:	6013      	str	r3, [r2, #0]
}
 8003226:	bf00      	nop
 8003228:	371c      	adds	r7, #28
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	200003fc 	.word	0x200003fc
 8003238:	200003e8 	.word	0x200003e8
 800323c:	200003dc 	.word	0x200003dc
 8003240:	200002d8 	.word	0x200002d8
 8003244:	200002d4 	.word	0x200002d4

08003248 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003250:	f000 f852 	bl	80032f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003254:	4b06      	ldr	r3, [pc, #24]	; (8003270 <prvIdleTask+0x28>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2b01      	cmp	r3, #1
 800325a:	d9f9      	bls.n	8003250 <prvIdleTask+0x8>
			{
				taskYIELD();
 800325c:	4b05      	ldr	r3, [pc, #20]	; (8003274 <prvIdleTask+0x2c>)
 800325e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003262:	601a      	str	r2, [r3, #0]
 8003264:	f3bf 8f4f 	dsb	sy
 8003268:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800326c:	e7f0      	b.n	8003250 <prvIdleTask+0x8>
 800326e:	bf00      	nop
 8003270:	200002d8 	.word	0x200002d8
 8003274:	e000ed04 	.word	0xe000ed04

08003278 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800327e:	2300      	movs	r3, #0
 8003280:	607b      	str	r3, [r7, #4]
 8003282:	e00c      	b.n	800329e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	4613      	mov	r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	4413      	add	r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	4a12      	ldr	r2, [pc, #72]	; (80032d8 <prvInitialiseTaskLists+0x60>)
 8003290:	4413      	add	r3, r2
 8003292:	4618      	mov	r0, r3
 8003294:	f7ff fb3f 	bl	8002916 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	3301      	adds	r3, #1
 800329c:	607b      	str	r3, [r7, #4]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2b06      	cmp	r3, #6
 80032a2:	d9ef      	bls.n	8003284 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80032a4:	480d      	ldr	r0, [pc, #52]	; (80032dc <prvInitialiseTaskLists+0x64>)
 80032a6:	f7ff fb36 	bl	8002916 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80032aa:	480d      	ldr	r0, [pc, #52]	; (80032e0 <prvInitialiseTaskLists+0x68>)
 80032ac:	f7ff fb33 	bl	8002916 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80032b0:	480c      	ldr	r0, [pc, #48]	; (80032e4 <prvInitialiseTaskLists+0x6c>)
 80032b2:	f7ff fb30 	bl	8002916 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80032b6:	480c      	ldr	r0, [pc, #48]	; (80032e8 <prvInitialiseTaskLists+0x70>)
 80032b8:	f7ff fb2d 	bl	8002916 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80032bc:	480b      	ldr	r0, [pc, #44]	; (80032ec <prvInitialiseTaskLists+0x74>)
 80032be:	f7ff fb2a 	bl	8002916 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80032c2:	4b0b      	ldr	r3, [pc, #44]	; (80032f0 <prvInitialiseTaskLists+0x78>)
 80032c4:	4a05      	ldr	r2, [pc, #20]	; (80032dc <prvInitialiseTaskLists+0x64>)
 80032c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80032c8:	4b0a      	ldr	r3, [pc, #40]	; (80032f4 <prvInitialiseTaskLists+0x7c>)
 80032ca:	4a05      	ldr	r2, [pc, #20]	; (80032e0 <prvInitialiseTaskLists+0x68>)
 80032cc:	601a      	str	r2, [r3, #0]
}
 80032ce:	bf00      	nop
 80032d0:	3708      	adds	r7, #8
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	200002d8 	.word	0x200002d8
 80032dc:	20000364 	.word	0x20000364
 80032e0:	20000378 	.word	0x20000378
 80032e4:	20000394 	.word	0x20000394
 80032e8:	200003a8 	.word	0x200003a8
 80032ec:	200003c0 	.word	0x200003c0
 80032f0:	2000038c 	.word	0x2000038c
 80032f4:	20000390 	.word	0x20000390

080032f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80032fe:	e019      	b.n	8003334 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003300:	f000 fa28 	bl	8003754 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003304:	4b10      	ldr	r3, [pc, #64]	; (8003348 <prvCheckTasksWaitingTermination+0x50>)
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	3304      	adds	r3, #4
 8003310:	4618      	mov	r0, r3
 8003312:	f7ff fb8a 	bl	8002a2a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003316:	4b0d      	ldr	r3, [pc, #52]	; (800334c <prvCheckTasksWaitingTermination+0x54>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	3b01      	subs	r3, #1
 800331c:	4a0b      	ldr	r2, [pc, #44]	; (800334c <prvCheckTasksWaitingTermination+0x54>)
 800331e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003320:	4b0b      	ldr	r3, [pc, #44]	; (8003350 <prvCheckTasksWaitingTermination+0x58>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	3b01      	subs	r3, #1
 8003326:	4a0a      	ldr	r2, [pc, #40]	; (8003350 <prvCheckTasksWaitingTermination+0x58>)
 8003328:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800332a:	f000 fa43 	bl	80037b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 f810 	bl	8003354 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003334:	4b06      	ldr	r3, [pc, #24]	; (8003350 <prvCheckTasksWaitingTermination+0x58>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d1e1      	bne.n	8003300 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800333c:	bf00      	nop
 800333e:	bf00      	nop
 8003340:	3708      	adds	r7, #8
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	200003a8 	.word	0x200003a8
 800334c:	200003d4 	.word	0x200003d4
 8003350:	200003bc 	.word	0x200003bc

08003354 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003362:	2b00      	cmp	r3, #0
 8003364:	d108      	bne.n	8003378 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336a:	4618      	mov	r0, r3
 800336c:	f000 fba0 	bl	8003ab0 <vPortFree>
				vPortFree( pxTCB );
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f000 fb9d 	bl	8003ab0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003376:	e018      	b.n	80033aa <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800337e:	2b01      	cmp	r3, #1
 8003380:	d103      	bne.n	800338a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f000 fb94 	bl	8003ab0 <vPortFree>
	}
 8003388:	e00f      	b.n	80033aa <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003390:	2b02      	cmp	r3, #2
 8003392:	d00a      	beq.n	80033aa <prvDeleteTCB+0x56>
	__asm volatile
 8003394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003398:	f383 8811 	msr	BASEPRI, r3
 800339c:	f3bf 8f6f 	isb	sy
 80033a0:	f3bf 8f4f 	dsb	sy
 80033a4:	60fb      	str	r3, [r7, #12]
}
 80033a6:	bf00      	nop
 80033a8:	e7fe      	b.n	80033a8 <prvDeleteTCB+0x54>
	}
 80033aa:	bf00      	nop
 80033ac:	3710      	adds	r7, #16
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
	...

080033b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033ba:	4b0c      	ldr	r3, [pc, #48]	; (80033ec <prvResetNextTaskUnblockTime+0x38>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d104      	bne.n	80033ce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80033c4:	4b0a      	ldr	r3, [pc, #40]	; (80033f0 <prvResetNextTaskUnblockTime+0x3c>)
 80033c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80033ca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80033cc:	e008      	b.n	80033e0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033ce:	4b07      	ldr	r3, [pc, #28]	; (80033ec <prvResetNextTaskUnblockTime+0x38>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	4a04      	ldr	r2, [pc, #16]	; (80033f0 <prvResetNextTaskUnblockTime+0x3c>)
 80033de:	6013      	str	r3, [r2, #0]
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr
 80033ec:	2000038c 	.word	0x2000038c
 80033f0:	200003f4 	.word	0x200003f4

080033f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80033fa:	4b0b      	ldr	r3, [pc, #44]	; (8003428 <xTaskGetSchedulerState+0x34>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d102      	bne.n	8003408 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003402:	2301      	movs	r3, #1
 8003404:	607b      	str	r3, [r7, #4]
 8003406:	e008      	b.n	800341a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003408:	4b08      	ldr	r3, [pc, #32]	; (800342c <xTaskGetSchedulerState+0x38>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d102      	bne.n	8003416 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003410:	2302      	movs	r3, #2
 8003412:	607b      	str	r3, [r7, #4]
 8003414:	e001      	b.n	800341a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003416:	2300      	movs	r3, #0
 8003418:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800341a:	687b      	ldr	r3, [r7, #4]
	}
 800341c:	4618      	mov	r0, r3
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr
 8003428:	200003e0 	.word	0x200003e0
 800342c:	200003fc 	.word	0x200003fc

08003430 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800343a:	4b29      	ldr	r3, [pc, #164]	; (80034e0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003440:	4b28      	ldr	r3, [pc, #160]	; (80034e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	3304      	adds	r3, #4
 8003446:	4618      	mov	r0, r3
 8003448:	f7ff faef 	bl	8002a2a <uxListRemove>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d10b      	bne.n	800346a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003452:	4b24      	ldr	r3, [pc, #144]	; (80034e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003458:	2201      	movs	r2, #1
 800345a:	fa02 f303 	lsl.w	r3, r2, r3
 800345e:	43da      	mvns	r2, r3
 8003460:	4b21      	ldr	r3, [pc, #132]	; (80034e8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4013      	ands	r3, r2
 8003466:	4a20      	ldr	r2, [pc, #128]	; (80034e8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003468:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003470:	d10a      	bne.n	8003488 <prvAddCurrentTaskToDelayedList+0x58>
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d007      	beq.n	8003488 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003478:	4b1a      	ldr	r3, [pc, #104]	; (80034e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	3304      	adds	r3, #4
 800347e:	4619      	mov	r1, r3
 8003480:	481a      	ldr	r0, [pc, #104]	; (80034ec <prvAddCurrentTaskToDelayedList+0xbc>)
 8003482:	f7ff fa75 	bl	8002970 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003486:	e026      	b.n	80034d6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003488:	68fa      	ldr	r2, [r7, #12]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4413      	add	r3, r2
 800348e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003490:	4b14      	ldr	r3, [pc, #80]	; (80034e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	68ba      	ldr	r2, [r7, #8]
 8003496:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003498:	68ba      	ldr	r2, [r7, #8]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	429a      	cmp	r2, r3
 800349e:	d209      	bcs.n	80034b4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80034a0:	4b13      	ldr	r3, [pc, #76]	; (80034f0 <prvAddCurrentTaskToDelayedList+0xc0>)
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	4b0f      	ldr	r3, [pc, #60]	; (80034e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	3304      	adds	r3, #4
 80034aa:	4619      	mov	r1, r3
 80034ac:	4610      	mov	r0, r2
 80034ae:	f7ff fa83 	bl	80029b8 <vListInsert>
}
 80034b2:	e010      	b.n	80034d6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80034b4:	4b0f      	ldr	r3, [pc, #60]	; (80034f4 <prvAddCurrentTaskToDelayedList+0xc4>)
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	4b0a      	ldr	r3, [pc, #40]	; (80034e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	3304      	adds	r3, #4
 80034be:	4619      	mov	r1, r3
 80034c0:	4610      	mov	r0, r2
 80034c2:	f7ff fa79 	bl	80029b8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80034c6:	4b0c      	ldr	r3, [pc, #48]	; (80034f8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	68ba      	ldr	r2, [r7, #8]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d202      	bcs.n	80034d6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80034d0:	4a09      	ldr	r2, [pc, #36]	; (80034f8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	6013      	str	r3, [r2, #0]
}
 80034d6:	bf00      	nop
 80034d8:	3710      	adds	r7, #16
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	200003d8 	.word	0x200003d8
 80034e4:	200002d4 	.word	0x200002d4
 80034e8:	200003dc 	.word	0x200003dc
 80034ec:	200003c0 	.word	0x200003c0
 80034f0:	20000390 	.word	0x20000390
 80034f4:	2000038c 	.word	0x2000038c
 80034f8:	200003f4 	.word	0x200003f4

080034fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80034fc:	b480      	push	{r7}
 80034fe:	b085      	sub	sp, #20
 8003500:	af00      	add	r7, sp, #0
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	3b04      	subs	r3, #4
 800350c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003514:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	3b04      	subs	r3, #4
 800351a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	f023 0201 	bic.w	r2, r3, #1
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	3b04      	subs	r3, #4
 800352a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800352c:	4a0c      	ldr	r2, [pc, #48]	; (8003560 <pxPortInitialiseStack+0x64>)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	3b14      	subs	r3, #20
 8003536:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	3b04      	subs	r3, #4
 8003542:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f06f 0202 	mvn.w	r2, #2
 800354a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	3b20      	subs	r3, #32
 8003550:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003552:	68fb      	ldr	r3, [r7, #12]
}
 8003554:	4618      	mov	r0, r3
 8003556:	3714      	adds	r7, #20
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr
 8003560:	08003565 	.word	0x08003565

08003564 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003564:	b480      	push	{r7}
 8003566:	b085      	sub	sp, #20
 8003568:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800356a:	2300      	movs	r3, #0
 800356c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800356e:	4b12      	ldr	r3, [pc, #72]	; (80035b8 <prvTaskExitError+0x54>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003576:	d00a      	beq.n	800358e <prvTaskExitError+0x2a>
	__asm volatile
 8003578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800357c:	f383 8811 	msr	BASEPRI, r3
 8003580:	f3bf 8f6f 	isb	sy
 8003584:	f3bf 8f4f 	dsb	sy
 8003588:	60fb      	str	r3, [r7, #12]
}
 800358a:	bf00      	nop
 800358c:	e7fe      	b.n	800358c <prvTaskExitError+0x28>
	__asm volatile
 800358e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003592:	f383 8811 	msr	BASEPRI, r3
 8003596:	f3bf 8f6f 	isb	sy
 800359a:	f3bf 8f4f 	dsb	sy
 800359e:	60bb      	str	r3, [r7, #8]
}
 80035a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80035a2:	bf00      	nop
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d0fc      	beq.n	80035a4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80035aa:	bf00      	nop
 80035ac:	bf00      	nop
 80035ae:	3714      	adds	r7, #20
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr
 80035b8:	2000000c 	.word	0x2000000c
 80035bc:	00000000 	.word	0x00000000

080035c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80035c0:	4b07      	ldr	r3, [pc, #28]	; (80035e0 <pxCurrentTCBConst2>)
 80035c2:	6819      	ldr	r1, [r3, #0]
 80035c4:	6808      	ldr	r0, [r1, #0]
 80035c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035ca:	f380 8809 	msr	PSP, r0
 80035ce:	f3bf 8f6f 	isb	sy
 80035d2:	f04f 0000 	mov.w	r0, #0
 80035d6:	f380 8811 	msr	BASEPRI, r0
 80035da:	4770      	bx	lr
 80035dc:	f3af 8000 	nop.w

080035e0 <pxCurrentTCBConst2>:
 80035e0:	200002d4 	.word	0x200002d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80035e4:	bf00      	nop
 80035e6:	bf00      	nop

080035e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80035e8:	4808      	ldr	r0, [pc, #32]	; (800360c <prvPortStartFirstTask+0x24>)
 80035ea:	6800      	ldr	r0, [r0, #0]
 80035ec:	6800      	ldr	r0, [r0, #0]
 80035ee:	f380 8808 	msr	MSP, r0
 80035f2:	f04f 0000 	mov.w	r0, #0
 80035f6:	f380 8814 	msr	CONTROL, r0
 80035fa:	b662      	cpsie	i
 80035fc:	b661      	cpsie	f
 80035fe:	f3bf 8f4f 	dsb	sy
 8003602:	f3bf 8f6f 	isb	sy
 8003606:	df00      	svc	0
 8003608:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800360a:	bf00      	nop
 800360c:	e000ed08 	.word	0xe000ed08

08003610 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b086      	sub	sp, #24
 8003614:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003616:	4b46      	ldr	r3, [pc, #280]	; (8003730 <xPortStartScheduler+0x120>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a46      	ldr	r2, [pc, #280]	; (8003734 <xPortStartScheduler+0x124>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d10a      	bne.n	8003636 <xPortStartScheduler+0x26>
	__asm volatile
 8003620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003624:	f383 8811 	msr	BASEPRI, r3
 8003628:	f3bf 8f6f 	isb	sy
 800362c:	f3bf 8f4f 	dsb	sy
 8003630:	613b      	str	r3, [r7, #16]
}
 8003632:	bf00      	nop
 8003634:	e7fe      	b.n	8003634 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003636:	4b3e      	ldr	r3, [pc, #248]	; (8003730 <xPortStartScheduler+0x120>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a3f      	ldr	r2, [pc, #252]	; (8003738 <xPortStartScheduler+0x128>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d10a      	bne.n	8003656 <xPortStartScheduler+0x46>
	__asm volatile
 8003640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003644:	f383 8811 	msr	BASEPRI, r3
 8003648:	f3bf 8f6f 	isb	sy
 800364c:	f3bf 8f4f 	dsb	sy
 8003650:	60fb      	str	r3, [r7, #12]
}
 8003652:	bf00      	nop
 8003654:	e7fe      	b.n	8003654 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003656:	4b39      	ldr	r3, [pc, #228]	; (800373c <xPortStartScheduler+0x12c>)
 8003658:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	b2db      	uxtb	r3, r3
 8003660:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	22ff      	movs	r2, #255	; 0xff
 8003666:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	b2db      	uxtb	r3, r3
 800366e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003670:	78fb      	ldrb	r3, [r7, #3]
 8003672:	b2db      	uxtb	r3, r3
 8003674:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003678:	b2da      	uxtb	r2, r3
 800367a:	4b31      	ldr	r3, [pc, #196]	; (8003740 <xPortStartScheduler+0x130>)
 800367c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800367e:	4b31      	ldr	r3, [pc, #196]	; (8003744 <xPortStartScheduler+0x134>)
 8003680:	2207      	movs	r2, #7
 8003682:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003684:	e009      	b.n	800369a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003686:	4b2f      	ldr	r3, [pc, #188]	; (8003744 <xPortStartScheduler+0x134>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	3b01      	subs	r3, #1
 800368c:	4a2d      	ldr	r2, [pc, #180]	; (8003744 <xPortStartScheduler+0x134>)
 800368e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003690:	78fb      	ldrb	r3, [r7, #3]
 8003692:	b2db      	uxtb	r3, r3
 8003694:	005b      	lsls	r3, r3, #1
 8003696:	b2db      	uxtb	r3, r3
 8003698:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800369a:	78fb      	ldrb	r3, [r7, #3]
 800369c:	b2db      	uxtb	r3, r3
 800369e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036a2:	2b80      	cmp	r3, #128	; 0x80
 80036a4:	d0ef      	beq.n	8003686 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80036a6:	4b27      	ldr	r3, [pc, #156]	; (8003744 <xPortStartScheduler+0x134>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f1c3 0307 	rsb	r3, r3, #7
 80036ae:	2b04      	cmp	r3, #4
 80036b0:	d00a      	beq.n	80036c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80036b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b6:	f383 8811 	msr	BASEPRI, r3
 80036ba:	f3bf 8f6f 	isb	sy
 80036be:	f3bf 8f4f 	dsb	sy
 80036c2:	60bb      	str	r3, [r7, #8]
}
 80036c4:	bf00      	nop
 80036c6:	e7fe      	b.n	80036c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80036c8:	4b1e      	ldr	r3, [pc, #120]	; (8003744 <xPortStartScheduler+0x134>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	021b      	lsls	r3, r3, #8
 80036ce:	4a1d      	ldr	r2, [pc, #116]	; (8003744 <xPortStartScheduler+0x134>)
 80036d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80036d2:	4b1c      	ldr	r3, [pc, #112]	; (8003744 <xPortStartScheduler+0x134>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80036da:	4a1a      	ldr	r2, [pc, #104]	; (8003744 <xPortStartScheduler+0x134>)
 80036dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	b2da      	uxtb	r2, r3
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80036e6:	4b18      	ldr	r3, [pc, #96]	; (8003748 <xPortStartScheduler+0x138>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a17      	ldr	r2, [pc, #92]	; (8003748 <xPortStartScheduler+0x138>)
 80036ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80036f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80036f2:	4b15      	ldr	r3, [pc, #84]	; (8003748 <xPortStartScheduler+0x138>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a14      	ldr	r2, [pc, #80]	; (8003748 <xPortStartScheduler+0x138>)
 80036f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80036fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80036fe:	f000 f8dd 	bl	80038bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003702:	4b12      	ldr	r3, [pc, #72]	; (800374c <xPortStartScheduler+0x13c>)
 8003704:	2200      	movs	r2, #0
 8003706:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003708:	f000 f8fc 	bl	8003904 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800370c:	4b10      	ldr	r3, [pc, #64]	; (8003750 <xPortStartScheduler+0x140>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a0f      	ldr	r2, [pc, #60]	; (8003750 <xPortStartScheduler+0x140>)
 8003712:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003716:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003718:	f7ff ff66 	bl	80035e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800371c:	f7ff fd38 	bl	8003190 <vTaskSwitchContext>
	prvTaskExitError();
 8003720:	f7ff ff20 	bl	8003564 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3718      	adds	r7, #24
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	e000ed00 	.word	0xe000ed00
 8003734:	410fc271 	.word	0x410fc271
 8003738:	410fc270 	.word	0x410fc270
 800373c:	e000e400 	.word	0xe000e400
 8003740:	20000400 	.word	0x20000400
 8003744:	20000404 	.word	0x20000404
 8003748:	e000ed20 	.word	0xe000ed20
 800374c:	2000000c 	.word	0x2000000c
 8003750:	e000ef34 	.word	0xe000ef34

08003754 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
	__asm volatile
 800375a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800375e:	f383 8811 	msr	BASEPRI, r3
 8003762:	f3bf 8f6f 	isb	sy
 8003766:	f3bf 8f4f 	dsb	sy
 800376a:	607b      	str	r3, [r7, #4]
}
 800376c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800376e:	4b0f      	ldr	r3, [pc, #60]	; (80037ac <vPortEnterCritical+0x58>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	3301      	adds	r3, #1
 8003774:	4a0d      	ldr	r2, [pc, #52]	; (80037ac <vPortEnterCritical+0x58>)
 8003776:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003778:	4b0c      	ldr	r3, [pc, #48]	; (80037ac <vPortEnterCritical+0x58>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2b01      	cmp	r3, #1
 800377e:	d10f      	bne.n	80037a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003780:	4b0b      	ldr	r3, [pc, #44]	; (80037b0 <vPortEnterCritical+0x5c>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00a      	beq.n	80037a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800378a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800378e:	f383 8811 	msr	BASEPRI, r3
 8003792:	f3bf 8f6f 	isb	sy
 8003796:	f3bf 8f4f 	dsb	sy
 800379a:	603b      	str	r3, [r7, #0]
}
 800379c:	bf00      	nop
 800379e:	e7fe      	b.n	800379e <vPortEnterCritical+0x4a>
	}
}
 80037a0:	bf00      	nop
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr
 80037ac:	2000000c 	.word	0x2000000c
 80037b0:	e000ed04 	.word	0xe000ed04

080037b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80037ba:	4b12      	ldr	r3, [pc, #72]	; (8003804 <vPortExitCritical+0x50>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d10a      	bne.n	80037d8 <vPortExitCritical+0x24>
	__asm volatile
 80037c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037c6:	f383 8811 	msr	BASEPRI, r3
 80037ca:	f3bf 8f6f 	isb	sy
 80037ce:	f3bf 8f4f 	dsb	sy
 80037d2:	607b      	str	r3, [r7, #4]
}
 80037d4:	bf00      	nop
 80037d6:	e7fe      	b.n	80037d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80037d8:	4b0a      	ldr	r3, [pc, #40]	; (8003804 <vPortExitCritical+0x50>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	3b01      	subs	r3, #1
 80037de:	4a09      	ldr	r2, [pc, #36]	; (8003804 <vPortExitCritical+0x50>)
 80037e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80037e2:	4b08      	ldr	r3, [pc, #32]	; (8003804 <vPortExitCritical+0x50>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d105      	bne.n	80037f6 <vPortExitCritical+0x42>
 80037ea:	2300      	movs	r3, #0
 80037ec:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80037f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80037f6:	bf00      	nop
 80037f8:	370c      	adds	r7, #12
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop
 8003804:	2000000c 	.word	0x2000000c
	...

08003810 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003810:	f3ef 8009 	mrs	r0, PSP
 8003814:	f3bf 8f6f 	isb	sy
 8003818:	4b15      	ldr	r3, [pc, #84]	; (8003870 <pxCurrentTCBConst>)
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	f01e 0f10 	tst.w	lr, #16
 8003820:	bf08      	it	eq
 8003822:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003826:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800382a:	6010      	str	r0, [r2, #0]
 800382c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003830:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003834:	f380 8811 	msr	BASEPRI, r0
 8003838:	f3bf 8f4f 	dsb	sy
 800383c:	f3bf 8f6f 	isb	sy
 8003840:	f7ff fca6 	bl	8003190 <vTaskSwitchContext>
 8003844:	f04f 0000 	mov.w	r0, #0
 8003848:	f380 8811 	msr	BASEPRI, r0
 800384c:	bc09      	pop	{r0, r3}
 800384e:	6819      	ldr	r1, [r3, #0]
 8003850:	6808      	ldr	r0, [r1, #0]
 8003852:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003856:	f01e 0f10 	tst.w	lr, #16
 800385a:	bf08      	it	eq
 800385c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003860:	f380 8809 	msr	PSP, r0
 8003864:	f3bf 8f6f 	isb	sy
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop
 800386c:	f3af 8000 	nop.w

08003870 <pxCurrentTCBConst>:
 8003870:	200002d4 	.word	0x200002d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003874:	bf00      	nop
 8003876:	bf00      	nop

08003878 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
	__asm volatile
 800387e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003882:	f383 8811 	msr	BASEPRI, r3
 8003886:	f3bf 8f6f 	isb	sy
 800388a:	f3bf 8f4f 	dsb	sy
 800388e:	607b      	str	r3, [r7, #4]
}
 8003890:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003892:	f7ff fbc5 	bl	8003020 <xTaskIncrementTick>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d003      	beq.n	80038a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800389c:	4b06      	ldr	r3, [pc, #24]	; (80038b8 <xPortSysTickHandler+0x40>)
 800389e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038a2:	601a      	str	r2, [r3, #0]
 80038a4:	2300      	movs	r3, #0
 80038a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	f383 8811 	msr	BASEPRI, r3
}
 80038ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80038b0:	bf00      	nop
 80038b2:	3708      	adds	r7, #8
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	e000ed04 	.word	0xe000ed04

080038bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80038bc:	b480      	push	{r7}
 80038be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80038c0:	4b0b      	ldr	r3, [pc, #44]	; (80038f0 <vPortSetupTimerInterrupt+0x34>)
 80038c2:	2200      	movs	r2, #0
 80038c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80038c6:	4b0b      	ldr	r3, [pc, #44]	; (80038f4 <vPortSetupTimerInterrupt+0x38>)
 80038c8:	2200      	movs	r2, #0
 80038ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80038cc:	4b0a      	ldr	r3, [pc, #40]	; (80038f8 <vPortSetupTimerInterrupt+0x3c>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a0a      	ldr	r2, [pc, #40]	; (80038fc <vPortSetupTimerInterrupt+0x40>)
 80038d2:	fba2 2303 	umull	r2, r3, r2, r3
 80038d6:	099b      	lsrs	r3, r3, #6
 80038d8:	4a09      	ldr	r2, [pc, #36]	; (8003900 <vPortSetupTimerInterrupt+0x44>)
 80038da:	3b01      	subs	r3, #1
 80038dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80038de:	4b04      	ldr	r3, [pc, #16]	; (80038f0 <vPortSetupTimerInterrupt+0x34>)
 80038e0:	2207      	movs	r2, #7
 80038e2:	601a      	str	r2, [r3, #0]
}
 80038e4:	bf00      	nop
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	e000e010 	.word	0xe000e010
 80038f4:	e000e018 	.word	0xe000e018
 80038f8:	20000000 	.word	0x20000000
 80038fc:	10624dd3 	.word	0x10624dd3
 8003900:	e000e014 	.word	0xe000e014

08003904 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003904:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003914 <vPortEnableVFP+0x10>
 8003908:	6801      	ldr	r1, [r0, #0]
 800390a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800390e:	6001      	str	r1, [r0, #0]
 8003910:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003912:	bf00      	nop
 8003914:	e000ed88 	.word	0xe000ed88

08003918 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b08a      	sub	sp, #40	; 0x28
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003920:	2300      	movs	r3, #0
 8003922:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003924:	f7ff fad2 	bl	8002ecc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003928:	4b5b      	ldr	r3, [pc, #364]	; (8003a98 <pvPortMalloc+0x180>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d101      	bne.n	8003934 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003930:	f000 f920 	bl	8003b74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003934:	4b59      	ldr	r3, [pc, #356]	; (8003a9c <pvPortMalloc+0x184>)
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4013      	ands	r3, r2
 800393c:	2b00      	cmp	r3, #0
 800393e:	f040 8093 	bne.w	8003a68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d01d      	beq.n	8003984 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003948:	2208      	movs	r2, #8
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4413      	add	r3, r2
 800394e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f003 0307 	and.w	r3, r3, #7
 8003956:	2b00      	cmp	r3, #0
 8003958:	d014      	beq.n	8003984 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f023 0307 	bic.w	r3, r3, #7
 8003960:	3308      	adds	r3, #8
 8003962:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f003 0307 	and.w	r3, r3, #7
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00a      	beq.n	8003984 <pvPortMalloc+0x6c>
	__asm volatile
 800396e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003972:	f383 8811 	msr	BASEPRI, r3
 8003976:	f3bf 8f6f 	isb	sy
 800397a:	f3bf 8f4f 	dsb	sy
 800397e:	617b      	str	r3, [r7, #20]
}
 8003980:	bf00      	nop
 8003982:	e7fe      	b.n	8003982 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d06e      	beq.n	8003a68 <pvPortMalloc+0x150>
 800398a:	4b45      	ldr	r3, [pc, #276]	; (8003aa0 <pvPortMalloc+0x188>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	429a      	cmp	r2, r3
 8003992:	d869      	bhi.n	8003a68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003994:	4b43      	ldr	r3, [pc, #268]	; (8003aa4 <pvPortMalloc+0x18c>)
 8003996:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003998:	4b42      	ldr	r3, [pc, #264]	; (8003aa4 <pvPortMalloc+0x18c>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800399e:	e004      	b.n	80039aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80039a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80039a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80039aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d903      	bls.n	80039bc <pvPortMalloc+0xa4>
 80039b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d1f1      	bne.n	80039a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80039bc:	4b36      	ldr	r3, [pc, #216]	; (8003a98 <pvPortMalloc+0x180>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d050      	beq.n	8003a68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80039c6:	6a3b      	ldr	r3, [r7, #32]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2208      	movs	r2, #8
 80039cc:	4413      	add	r3, r2
 80039ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80039d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	6a3b      	ldr	r3, [r7, #32]
 80039d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80039d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039da:	685a      	ldr	r2, [r3, #4]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	1ad2      	subs	r2, r2, r3
 80039e0:	2308      	movs	r3, #8
 80039e2:	005b      	lsls	r3, r3, #1
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d91f      	bls.n	8003a28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80039e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4413      	add	r3, r2
 80039ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80039f0:	69bb      	ldr	r3, [r7, #24]
 80039f2:	f003 0307 	and.w	r3, r3, #7
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00a      	beq.n	8003a10 <pvPortMalloc+0xf8>
	__asm volatile
 80039fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039fe:	f383 8811 	msr	BASEPRI, r3
 8003a02:	f3bf 8f6f 	isb	sy
 8003a06:	f3bf 8f4f 	dsb	sy
 8003a0a:	613b      	str	r3, [r7, #16]
}
 8003a0c:	bf00      	nop
 8003a0e:	e7fe      	b.n	8003a0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a12:	685a      	ldr	r2, [r3, #4]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	1ad2      	subs	r2, r2, r3
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003a22:	69b8      	ldr	r0, [r7, #24]
 8003a24:	f000 f908 	bl	8003c38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003a28:	4b1d      	ldr	r3, [pc, #116]	; (8003aa0 <pvPortMalloc+0x188>)
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	4a1b      	ldr	r2, [pc, #108]	; (8003aa0 <pvPortMalloc+0x188>)
 8003a34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003a36:	4b1a      	ldr	r3, [pc, #104]	; (8003aa0 <pvPortMalloc+0x188>)
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	4b1b      	ldr	r3, [pc, #108]	; (8003aa8 <pvPortMalloc+0x190>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d203      	bcs.n	8003a4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003a42:	4b17      	ldr	r3, [pc, #92]	; (8003aa0 <pvPortMalloc+0x188>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a18      	ldr	r2, [pc, #96]	; (8003aa8 <pvPortMalloc+0x190>)
 8003a48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4c:	685a      	ldr	r2, [r3, #4]
 8003a4e:	4b13      	ldr	r3, [pc, #76]	; (8003a9c <pvPortMalloc+0x184>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	431a      	orrs	r2, r3
 8003a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003a5e:	4b13      	ldr	r3, [pc, #76]	; (8003aac <pvPortMalloc+0x194>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	3301      	adds	r3, #1
 8003a64:	4a11      	ldr	r2, [pc, #68]	; (8003aac <pvPortMalloc+0x194>)
 8003a66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003a68:	f7ff fa3e 	bl	8002ee8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	f003 0307 	and.w	r3, r3, #7
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00a      	beq.n	8003a8c <pvPortMalloc+0x174>
	__asm volatile
 8003a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a7a:	f383 8811 	msr	BASEPRI, r3
 8003a7e:	f3bf 8f6f 	isb	sy
 8003a82:	f3bf 8f4f 	dsb	sy
 8003a86:	60fb      	str	r3, [r7, #12]
}
 8003a88:	bf00      	nop
 8003a8a:	e7fe      	b.n	8003a8a <pvPortMalloc+0x172>
	return pvReturn;
 8003a8c:	69fb      	ldr	r3, [r7, #28]
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3728      	adds	r7, #40	; 0x28
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	20002b20 	.word	0x20002b20
 8003a9c:	20002b34 	.word	0x20002b34
 8003aa0:	20002b24 	.word	0x20002b24
 8003aa4:	20002b18 	.word	0x20002b18
 8003aa8:	20002b28 	.word	0x20002b28
 8003aac:	20002b2c 	.word	0x20002b2c

08003ab0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b086      	sub	sp, #24
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d04d      	beq.n	8003b5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003ac2:	2308      	movs	r3, #8
 8003ac4:	425b      	negs	r3, r3
 8003ac6:	697a      	ldr	r2, [r7, #20]
 8003ac8:	4413      	add	r3, r2
 8003aca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	685a      	ldr	r2, [r3, #4]
 8003ad4:	4b24      	ldr	r3, [pc, #144]	; (8003b68 <vPortFree+0xb8>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4013      	ands	r3, r2
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d10a      	bne.n	8003af4 <vPortFree+0x44>
	__asm volatile
 8003ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae2:	f383 8811 	msr	BASEPRI, r3
 8003ae6:	f3bf 8f6f 	isb	sy
 8003aea:	f3bf 8f4f 	dsb	sy
 8003aee:	60fb      	str	r3, [r7, #12]
}
 8003af0:	bf00      	nop
 8003af2:	e7fe      	b.n	8003af2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00a      	beq.n	8003b12 <vPortFree+0x62>
	__asm volatile
 8003afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b00:	f383 8811 	msr	BASEPRI, r3
 8003b04:	f3bf 8f6f 	isb	sy
 8003b08:	f3bf 8f4f 	dsb	sy
 8003b0c:	60bb      	str	r3, [r7, #8]
}
 8003b0e:	bf00      	nop
 8003b10:	e7fe      	b.n	8003b10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	685a      	ldr	r2, [r3, #4]
 8003b16:	4b14      	ldr	r3, [pc, #80]	; (8003b68 <vPortFree+0xb8>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d01e      	beq.n	8003b5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d11a      	bne.n	8003b5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	685a      	ldr	r2, [r3, #4]
 8003b2c:	4b0e      	ldr	r3, [pc, #56]	; (8003b68 <vPortFree+0xb8>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	43db      	mvns	r3, r3
 8003b32:	401a      	ands	r2, r3
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003b38:	f7ff f9c8 	bl	8002ecc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	685a      	ldr	r2, [r3, #4]
 8003b40:	4b0a      	ldr	r3, [pc, #40]	; (8003b6c <vPortFree+0xbc>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4413      	add	r3, r2
 8003b46:	4a09      	ldr	r2, [pc, #36]	; (8003b6c <vPortFree+0xbc>)
 8003b48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003b4a:	6938      	ldr	r0, [r7, #16]
 8003b4c:	f000 f874 	bl	8003c38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003b50:	4b07      	ldr	r3, [pc, #28]	; (8003b70 <vPortFree+0xc0>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	3301      	adds	r3, #1
 8003b56:	4a06      	ldr	r2, [pc, #24]	; (8003b70 <vPortFree+0xc0>)
 8003b58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003b5a:	f7ff f9c5 	bl	8002ee8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003b5e:	bf00      	nop
 8003b60:	3718      	adds	r7, #24
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	20002b34 	.word	0x20002b34
 8003b6c:	20002b24 	.word	0x20002b24
 8003b70:	20002b30 	.word	0x20002b30

08003b74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003b74:	b480      	push	{r7}
 8003b76:	b085      	sub	sp, #20
 8003b78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003b7a:	f242 7310 	movw	r3, #10000	; 0x2710
 8003b7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003b80:	4b27      	ldr	r3, [pc, #156]	; (8003c20 <prvHeapInit+0xac>)
 8003b82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f003 0307 	and.w	r3, r3, #7
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d00c      	beq.n	8003ba8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	3307      	adds	r3, #7
 8003b92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f023 0307 	bic.w	r3, r3, #7
 8003b9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003b9c:	68ba      	ldr	r2, [r7, #8]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	4a1f      	ldr	r2, [pc, #124]	; (8003c20 <prvHeapInit+0xac>)
 8003ba4:	4413      	add	r3, r2
 8003ba6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003bac:	4a1d      	ldr	r2, [pc, #116]	; (8003c24 <prvHeapInit+0xb0>)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003bb2:	4b1c      	ldr	r3, [pc, #112]	; (8003c24 <prvHeapInit+0xb0>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	68ba      	ldr	r2, [r7, #8]
 8003bbc:	4413      	add	r3, r2
 8003bbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003bc0:	2208      	movs	r2, #8
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	1a9b      	subs	r3, r3, r2
 8003bc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f023 0307 	bic.w	r3, r3, #7
 8003bce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	4a15      	ldr	r2, [pc, #84]	; (8003c28 <prvHeapInit+0xb4>)
 8003bd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003bd6:	4b14      	ldr	r3, [pc, #80]	; (8003c28 <prvHeapInit+0xb4>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003bde:	4b12      	ldr	r3, [pc, #72]	; (8003c28 <prvHeapInit+0xb4>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	2200      	movs	r2, #0
 8003be4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	68fa      	ldr	r2, [r7, #12]
 8003bee:	1ad2      	subs	r2, r2, r3
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003bf4:	4b0c      	ldr	r3, [pc, #48]	; (8003c28 <prvHeapInit+0xb4>)
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	4a0a      	ldr	r2, [pc, #40]	; (8003c2c <prvHeapInit+0xb8>)
 8003c02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	4a09      	ldr	r2, [pc, #36]	; (8003c30 <prvHeapInit+0xbc>)
 8003c0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003c0c:	4b09      	ldr	r3, [pc, #36]	; (8003c34 <prvHeapInit+0xc0>)
 8003c0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003c12:	601a      	str	r2, [r3, #0]
}
 8003c14:	bf00      	nop
 8003c16:	3714      	adds	r7, #20
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr
 8003c20:	20000408 	.word	0x20000408
 8003c24:	20002b18 	.word	0x20002b18
 8003c28:	20002b20 	.word	0x20002b20
 8003c2c:	20002b28 	.word	0x20002b28
 8003c30:	20002b24 	.word	0x20002b24
 8003c34:	20002b34 	.word	0x20002b34

08003c38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b085      	sub	sp, #20
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003c40:	4b28      	ldr	r3, [pc, #160]	; (8003ce4 <prvInsertBlockIntoFreeList+0xac>)
 8003c42:	60fb      	str	r3, [r7, #12]
 8003c44:	e002      	b.n	8003c4c <prvInsertBlockIntoFreeList+0x14>
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	60fb      	str	r3, [r7, #12]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d8f7      	bhi.n	8003c46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	68ba      	ldr	r2, [r7, #8]
 8003c60:	4413      	add	r3, r2
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d108      	bne.n	8003c7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	685a      	ldr	r2, [r3, #4]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	441a      	add	r2, r3
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	68ba      	ldr	r2, [r7, #8]
 8003c84:	441a      	add	r2, r3
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d118      	bne.n	8003cc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	4b15      	ldr	r3, [pc, #84]	; (8003ce8 <prvInsertBlockIntoFreeList+0xb0>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d00d      	beq.n	8003cb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685a      	ldr	r2, [r3, #4]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	441a      	add	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	601a      	str	r2, [r3, #0]
 8003cb4:	e008      	b.n	8003cc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003cb6:	4b0c      	ldr	r3, [pc, #48]	; (8003ce8 <prvInsertBlockIntoFreeList+0xb0>)
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	601a      	str	r2, [r3, #0]
 8003cbe:	e003      	b.n	8003cc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003cc8:	68fa      	ldr	r2, [r7, #12]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d002      	beq.n	8003cd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003cd6:	bf00      	nop
 8003cd8:	3714      	adds	r7, #20
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop
 8003ce4:	20002b18 	.word	0x20002b18
 8003ce8:	20002b20 	.word	0x20002b20

08003cec <memset>:
 8003cec:	4402      	add	r2, r0
 8003cee:	4603      	mov	r3, r0
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d100      	bne.n	8003cf6 <memset+0xa>
 8003cf4:	4770      	bx	lr
 8003cf6:	f803 1b01 	strb.w	r1, [r3], #1
 8003cfa:	e7f9      	b.n	8003cf0 <memset+0x4>

08003cfc <__libc_init_array>:
 8003cfc:	b570      	push	{r4, r5, r6, lr}
 8003cfe:	4d0d      	ldr	r5, [pc, #52]	; (8003d34 <__libc_init_array+0x38>)
 8003d00:	4c0d      	ldr	r4, [pc, #52]	; (8003d38 <__libc_init_array+0x3c>)
 8003d02:	1b64      	subs	r4, r4, r5
 8003d04:	10a4      	asrs	r4, r4, #2
 8003d06:	2600      	movs	r6, #0
 8003d08:	42a6      	cmp	r6, r4
 8003d0a:	d109      	bne.n	8003d20 <__libc_init_array+0x24>
 8003d0c:	4d0b      	ldr	r5, [pc, #44]	; (8003d3c <__libc_init_array+0x40>)
 8003d0e:	4c0c      	ldr	r4, [pc, #48]	; (8003d40 <__libc_init_array+0x44>)
 8003d10:	f000 f818 	bl	8003d44 <_init>
 8003d14:	1b64      	subs	r4, r4, r5
 8003d16:	10a4      	asrs	r4, r4, #2
 8003d18:	2600      	movs	r6, #0
 8003d1a:	42a6      	cmp	r6, r4
 8003d1c:	d105      	bne.n	8003d2a <__libc_init_array+0x2e>
 8003d1e:	bd70      	pop	{r4, r5, r6, pc}
 8003d20:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d24:	4798      	blx	r3
 8003d26:	3601      	adds	r6, #1
 8003d28:	e7ee      	b.n	8003d08 <__libc_init_array+0xc>
 8003d2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d2e:	4798      	blx	r3
 8003d30:	3601      	adds	r6, #1
 8003d32:	e7f2      	b.n	8003d1a <__libc_init_array+0x1e>
 8003d34:	08003dcc 	.word	0x08003dcc
 8003d38:	08003dcc 	.word	0x08003dcc
 8003d3c:	08003dcc 	.word	0x08003dcc
 8003d40:	08003dd0 	.word	0x08003dd0

08003d44 <_init>:
 8003d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d46:	bf00      	nop
 8003d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d4a:	bc08      	pop	{r3}
 8003d4c:	469e      	mov	lr, r3
 8003d4e:	4770      	bx	lr

08003d50 <_fini>:
 8003d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d52:	bf00      	nop
 8003d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d56:	bc08      	pop	{r3}
 8003d58:	469e      	mov	lr, r3
 8003d5a:	4770      	bx	lr
