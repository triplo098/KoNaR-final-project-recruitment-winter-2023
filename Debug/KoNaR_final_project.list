
KoNaR_final_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bfe4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  0800c178  0800c178  0001c178  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c59c  0800c59c  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c59c  0800c59c  0001c59c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c5a4  0800c5a4  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c5a4  0800c5a4  0001c5a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c5a8  0800c5a8  0001c5a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800c5ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002de4  200001d8  0800c784  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002fbc  0800c784  00022fbc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019ae4  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003782  00000000  00000000  00039d2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001828  00000000  00000000  0003d4b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012d9  00000000  00000000  0003ece0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a258  00000000  00000000  0003ffb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b3e1  00000000  00000000  0006a211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00100aa3  00000000  00000000  000855f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000077d4  00000000  00000000  00186098  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0018d86c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c15c 	.word	0x0800c15c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800c15c 	.word	0x0800c15c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	4a07      	ldr	r2, [pc, #28]	; (8000f70 <vApplicationGetIdleTaskMemory+0x2c>)
 8000f54:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	4a06      	ldr	r2, [pc, #24]	; (8000f74 <vApplicationGetIdleTaskMemory+0x30>)
 8000f5a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2280      	movs	r2, #128	; 0x80
 8000f60:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f62:	bf00      	nop
 8000f64:	3714      	adds	r7, #20
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	200001f4 	.word	0x200001f4
 8000f74:	20000248 	.word	0x20000248

08000f78 <lsm6dsl_write_it>:

#define LSM6DSL_I2C_ADDRESS (0b01101011<<1)

static uint8_t sensor_buffer[64];

void lsm6dsl_write_it(uint8_t address, uint8_t value) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af02      	add	r7, sp, #8
 8000f7e:	4603      	mov	r3, r0
 8000f80:	460a      	mov	r2, r1
 8000f82:	71fb      	strb	r3, [r7, #7]
 8000f84:	4613      	mov	r3, r2
 8000f86:	71bb      	strb	r3, [r7, #6]
	  HAL_I2C_Mem_Write_IT(&hi2c1, LSM6DSL_I2C_ADDRESS, address, 1, &value, 1);
 8000f88:	79fb      	ldrb	r3, [r7, #7]
 8000f8a:	b29a      	uxth	r2, r3
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	9301      	str	r3, [sp, #4]
 8000f90:	1dbb      	adds	r3, r7, #6
 8000f92:	9300      	str	r3, [sp, #0]
 8000f94:	2301      	movs	r3, #1
 8000f96:	21d6      	movs	r1, #214	; 0xd6
 8000f98:	4803      	ldr	r0, [pc, #12]	; (8000fa8 <lsm6dsl_write_it+0x30>)
 8000f9a:	f001 fc3d 	bl	8002818 <HAL_I2C_Mem_Write_IT>
}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000448 	.word	0x20000448

08000fac <lsm6dsl_read_it>:

void lsm6dsl_read_it(uint8_t address, uint8_t num) {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af02      	add	r7, sp, #8
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	460a      	mov	r2, r1
 8000fb6:	71fb      	strb	r3, [r7, #7]
 8000fb8:	4613      	mov	r3, r2
 8000fba:	71bb      	strb	r3, [r7, #6]
	  HAL_I2C_Mem_Read_IT(&hi2c1, LSM6DSL_I2C_ADDRESS, address, 1, sensor_buffer, num);
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	b29a      	uxth	r2, r3
 8000fc0:	79bb      	ldrb	r3, [r7, #6]
 8000fc2:	b29b      	uxth	r3, r3
 8000fc4:	9301      	str	r3, [sp, #4]
 8000fc6:	4b05      	ldr	r3, [pc, #20]	; (8000fdc <lsm6dsl_read_it+0x30>)
 8000fc8:	9300      	str	r3, [sp, #0]
 8000fca:	2301      	movs	r3, #1
 8000fcc:	21d6      	movs	r1, #214	; 0xd6
 8000fce:	4804      	ldr	r0, [pc, #16]	; (8000fe0 <lsm6dsl_read_it+0x34>)
 8000fd0:	f001 fcac 	bl	800292c <HAL_I2C_Mem_Read_IT>
}
 8000fd4:	bf00      	nop
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	200005c4 	.word	0x200005c4
 8000fe0:	20000448 	.word	0x20000448

08000fe4 <lsm6dsl_read>:

void lsm6dsl_read(uint8_t address, uint8_t* dest,uint8_t num) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af04      	add	r7, sp, #16
 8000fea:	4603      	mov	r3, r0
 8000fec:	6039      	str	r1, [r7, #0]
 8000fee:	71fb      	strb	r3, [r7, #7]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	71bb      	strb	r3, [r7, #6]
	  HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_I2C_ADDRESS, address, 1, dest, num, HAL_MAX_DELAY);
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	b29a      	uxth	r2, r3
 8000ff8:	79bb      	ldrb	r3, [r7, #6]
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001000:	9102      	str	r1, [sp, #8]
 8001002:	9301      	str	r3, [sp, #4]
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	9300      	str	r3, [sp, #0]
 8001008:	2301      	movs	r3, #1
 800100a:	21d6      	movs	r1, #214	; 0xd6
 800100c:	4803      	ldr	r0, [pc, #12]	; (800101c <lsm6dsl_read+0x38>)
 800100e:	f001 fae9 	bl	80025e4 <HAL_I2C_Mem_Read>
}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000448 	.word	0x20000448

08001020 <HAL_I2C_MemRxCpltCallback>:



void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
	if(hi2c == &hi2c1) {
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	4a06      	ldr	r2, [pc, #24]	; (8001044 <HAL_I2C_MemRxCpltCallback+0x24>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d102      	bne.n	8001036 <HAL_I2C_MemRxCpltCallback+0x16>
		data_ready_flag = true;
 8001030:	4b05      	ldr	r3, [pc, #20]	; (8001048 <HAL_I2C_MemRxCpltCallback+0x28>)
 8001032:	2201      	movs	r2, #1
 8001034:	701a      	strb	r2, [r3, #0]
	}
}
 8001036:	bf00      	nop
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	20000448 	.word	0x20000448
 8001048:	200005c2 	.word	0x200005c2

0800104c <HAL_TIM_PeriodElapsedCallback>:




void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]

	if (htim == &htim2) {
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	4a0a      	ldr	r2, [pc, #40]	; (8001080 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d103      	bne.n	8001064 <HAL_TIM_PeriodElapsedCallback+0x18>

		blink_flag = true;
 800105c:	4b09      	ldr	r3, [pc, #36]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800105e:	2201      	movs	r2, #1
 8001060:	701a      	strb	r2, [r3, #0]

		data_send_flag = true;

	}

}
 8001062:	e006      	b.n	8001072 <HAL_TIM_PeriodElapsedCallback+0x26>
	} else if (htim == &htim3) {
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4a08      	ldr	r2, [pc, #32]	; (8001088 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d102      	bne.n	8001072 <HAL_TIM_PeriodElapsedCallback+0x26>
		data_send_flag = true;
 800106c:	4b07      	ldr	r3, [pc, #28]	; (800108c <HAL_TIM_PeriodElapsedCallback+0x40>)
 800106e:	2201      	movs	r2, #1
 8001070:	701a      	strb	r2, [r3, #0]
}
 8001072:	bf00      	nop
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	2000049c 	.word	0x2000049c
 8001084:	200005c0 	.word	0x200005c0
 8001088:	200004e8 	.word	0x200004e8
 800108c:	200005c3 	.word	0x200005c3

08001090 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == B1_Pin) {
 800109a:	88fb      	ldrh	r3, [r7, #6]
 800109c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80010a0:	d103      	bne.n	80010aa <HAL_GPIO_EXTI_Callback+0x1a>

		button_flag = true;
 80010a2:	4b08      	ldr	r3, [pc, #32]	; (80010c4 <HAL_GPIO_EXTI_Callback+0x34>)
 80010a4:	2201      	movs	r2, #1
 80010a6:	701a      	strb	r2, [r3, #0]
	} else if (GPIO_Pin == GPIO_PIN_10) {

		data_ready_flag = true;

	}
}
 80010a8:	e006      	b.n	80010b8 <HAL_GPIO_EXTI_Callback+0x28>
	} else if (GPIO_Pin == GPIO_PIN_10) {
 80010aa:	88fb      	ldrh	r3, [r7, #6]
 80010ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010b0:	d102      	bne.n	80010b8 <HAL_GPIO_EXTI_Callback+0x28>
		data_ready_flag = true;
 80010b2:	4b05      	ldr	r3, [pc, #20]	; (80010c8 <HAL_GPIO_EXTI_Callback+0x38>)
 80010b4:	2201      	movs	r2, #1
 80010b6:	701a      	strb	r2, [r3, #0]
}
 80010b8:	bf00      	nop
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	200005c1 	.word	0x200005c1
 80010c8:	200005c2 	.word	0x200005c2

080010cc <blink>:
//		transmitCompleteFlag = true;
//	}
//
//}

void blink(void *param) {
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]

	while(1) {

		if (blink_flag == true) {
 80010d4:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <blink+0x24>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d0fa      	beq.n	80010d4 <blink+0x8>

			blink_flag = false;
 80010de:	4b04      	ldr	r3, [pc, #16]	; (80010f0 <blink+0x24>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(DIODE_GPIO_Port, DIODE_Pin);
 80010e4:	2110      	movs	r1, #16
 80010e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ea:	f001 f9ad 	bl	8002448 <HAL_GPIO_TogglePin>
		if (blink_flag == true) {
 80010ee:	e7f1      	b.n	80010d4 <blink+0x8>
 80010f0:	200005c0 	.word	0x200005c0

080010f4 <button>:

	}

}

void button(void *param) {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b092      	sub	sp, #72	; 0x48
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]

	char buffer[64] = {0};
 80010fc:	2300      	movs	r3, #0
 80010fe:	60bb      	str	r3, [r7, #8]
 8001100:	f107 030c 	add.w	r3, r7, #12
 8001104:	223c      	movs	r2, #60	; 0x3c
 8001106:	2100      	movs	r1, #0
 8001108:	4618      	mov	r0, r3
 800110a:	f008 ff2e 	bl	8009f6a <memset>

	while (1) {

		if (button_flag == true) {
 800110e:	4b0e      	ldr	r3, [pc, #56]	; (8001148 <button+0x54>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	b2db      	uxtb	r3, r3
 8001114:	2b00      	cmp	r3, #0
 8001116:	d0fa      	beq.n	800110e <button+0x1a>

			button_flag = false;
 8001118:	4b0b      	ldr	r3, [pc, #44]	; (8001148 <button+0x54>)
 800111a:	2200      	movs	r2, #0
 800111c:	701a      	strb	r2, [r3, #0]
			snprintf((char*) buffer, sizeof(buffer), "Button Pressed!\r\n");
 800111e:	f107 0308 	add.w	r3, r7, #8
 8001122:	4a0a      	ldr	r2, [pc, #40]	; (800114c <button+0x58>)
 8001124:	2140      	movs	r1, #64	; 0x40
 8001126:	4618      	mov	r0, r3
 8001128:	f008 fe88 	bl	8009e3c <sniprintf>
			HAL_UART_Transmit_IT(&huart2, (uint8_t*) buffer, strlen((char*)buffer));
 800112c:	f107 0308 	add.w	r3, r7, #8
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff f89d 	bl	8000270 <strlen>
 8001136:	4603      	mov	r3, r0
 8001138:	b29a      	uxth	r2, r3
 800113a:	f107 0308 	add.w	r3, r7, #8
 800113e:	4619      	mov	r1, r3
 8001140:	4803      	ldr	r0, [pc, #12]	; (8001150 <button+0x5c>)
 8001142:	f005 fdaf 	bl	8006ca4 <HAL_UART_Transmit_IT>
		if (button_flag == true) {
 8001146:	e7e2      	b.n	800110e <button+0x1a>
 8001148:	200005c1 	.word	0x200005c1
 800114c:	0800c178 	.word	0x0800c178
 8001150:	20000534 	.word	0x20000534

08001154 <sensor>:

		}
	}
}

void sensor(void *param) {
 8001154:	b580      	push	{r7, lr}
 8001156:	b096      	sub	sp, #88	; 0x58
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]


	char str[64] = {0};
 800115c:	2300      	movs	r3, #0
 800115e:	613b      	str	r3, [r7, #16]
 8001160:	f107 0314 	add.w	r3, r7, #20
 8001164:	223c      	movs	r2, #60	; 0x3c
 8001166:	2100      	movs	r1, #0
 8001168:	4618      	mov	r0, r3
 800116a:	f008 fefe 	bl	8009f6a <memset>

	uint8_t who_i_am;
//	HAL_I2C_Mem_Read_IT(&hi2c1, LSM6DSL_I2C_ADDRESS, LSM6DSL_WHO_AM_I, 1, &who_i_am, 1);
//	lsm6dsl_read_it(LSM6DSL_I2C_ADDRESS, 1);
	lsm6dsl_read(LSM6DSL_WHO_AM_I, &who_i_am, 1);
 800116e:	f107 030f 	add.w	r3, r7, #15
 8001172:	2201      	movs	r2, #1
 8001174:	4619      	mov	r1, r3
 8001176:	200f      	movs	r0, #15
 8001178:	f7ff ff34 	bl	8000fe4 <lsm6dsl_read>

	if(who_i_am == 0b01101010) {
 800117c:	7bfb      	ldrb	r3, [r7, #15]
 800117e:	2b6a      	cmp	r3, #106	; 0x6a
 8001180:	d104      	bne.n	800118c <sensor+0x38>

		HAL_GPIO_TogglePin(DIODE_GPIO_Port, DIODE_Pin);
 8001182:	2110      	movs	r1, #16
 8001184:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001188:	f001 f95e 	bl	8002448 <HAL_GPIO_TogglePin>

	}

	  lsm6dsl_write_it(LSM6DSL_CTRL3_C, (1 << 7) | (1) );
 800118c:	2181      	movs	r1, #129	; 0x81
 800118e:	2012      	movs	r0, #18
 8001190:	f7ff fef2 	bl	8000f78 <lsm6dsl_write_it>
	  lsm6dsl_write_it(LSM6DSL_CTRL1_XL, 1 << 3);
 8001194:	2108      	movs	r1, #8
 8001196:	2010      	movs	r0, #16
 8001198:	f7ff feee 	bl	8000f78 <lsm6dsl_write_it>
	  lsm6dsl_write_it(LSM6DSL_INT1_CTRL, 1);
 800119c:	2101      	movs	r1, #1
 800119e:	200d      	movs	r0, #13
 80011a0:	f7ff feea 	bl	8000f78 <lsm6dsl_write_it>


	  //starti interupt reading
		lsm6dsl_read_it(LSM6DSL_OUTX_L_XL, 2);
 80011a4:	2102      	movs	r1, #2
 80011a6:	2028      	movs	r0, #40	; 0x28
 80011a8:	f7ff ff00 	bl	8000fac <lsm6dsl_read_it>



	while (1) {

		if (data_ready_flag == true && data_send_flag == true) {
 80011ac:	4b21      	ldr	r3, [pc, #132]	; (8001234 <sensor+0xe0>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d0fa      	beq.n	80011ac <sensor+0x58>
 80011b6:	4b20      	ldr	r3, [pc, #128]	; (8001238 <sensor+0xe4>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d0f5      	beq.n	80011ac <sensor+0x58>

			data_ready_flag = false;
 80011c0:	4b1c      	ldr	r3, [pc, #112]	; (8001234 <sensor+0xe0>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	701a      	strb	r2, [r3, #0]
			data_send_flag = false;
 80011c6:	4b1c      	ldr	r3, [pc, #112]	; (8001238 <sensor+0xe4>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	701a      	strb	r2, [r3, #0]

			lsm6dsl_read_it(LSM6DSL_OUTX_L_XL, 2);
 80011cc:	2102      	movs	r1, #2
 80011ce:	2028      	movs	r0, #40	; 0x28
 80011d0:	f7ff feec 	bl	8000fac <lsm6dsl_read_it>


			const uint16_t acc_x = (((uint16_t)sensor_buffer[1]<<8)) | sensor_buffer[0];
 80011d4:	4b19      	ldr	r3, [pc, #100]	; (800123c <sensor+0xe8>)
 80011d6:	785b      	ldrb	r3, [r3, #1]
 80011d8:	021b      	lsls	r3, r3, #8
 80011da:	b21a      	sxth	r2, r3
 80011dc:	4b17      	ldr	r3, [pc, #92]	; (800123c <sensor+0xe8>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	b21b      	sxth	r3, r3
 80011e2:	4313      	orrs	r3, r2
 80011e4:	b21b      	sxth	r3, r3
 80011e6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56


			//TODO find information about how to interpret magnetometr value
			const float acc = acc_x/1.0;
 80011ea:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff f998 	bl	8000524 <__aeabi_i2d>
 80011f4:	4602      	mov	r2, r0
 80011f6:	460b      	mov	r3, r1
 80011f8:	4610      	mov	r0, r2
 80011fa:	4619      	mov	r1, r3
 80011fc:	f7ff fcd4 	bl	8000ba8 <__aeabi_d2f>
 8001200:	4603      	mov	r3, r0
 8001202:	653b      	str	r3, [r7, #80]	; 0x50

			//TODO
//			button_flag = false
//			snprintf((char*) buffer, sizeof(buffer), "Button Pressed!\r\n");
//			HAL_UART_Transmit_IT(&huart2, (uint8_t*) buffer, strlen((char*)buffer));
			sprintf(str, "Mag off X %+2.3f\n\r", acc);
 8001204:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001206:	f7ff f99f 	bl	8000548 <__aeabi_f2d>
 800120a:	4602      	mov	r2, r0
 800120c:	460b      	mov	r3, r1
 800120e:	f107 0010 	add.w	r0, r7, #16
 8001212:	490b      	ldr	r1, [pc, #44]	; (8001240 <sensor+0xec>)
 8001214:	f008 fe46 	bl	8009ea4 <siprintf>

			HAL_UART_Transmit_IT(&huart2,  (uint8_t *) str, strlen(str));
 8001218:	f107 0310 	add.w	r3, r7, #16
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff f827 	bl	8000270 <strlen>
 8001222:	4603      	mov	r3, r0
 8001224:	b29a      	uxth	r2, r3
 8001226:	f107 0310 	add.w	r3, r7, #16
 800122a:	4619      	mov	r1, r3
 800122c:	4805      	ldr	r0, [pc, #20]	; (8001244 <sensor+0xf0>)
 800122e:	f005 fd39 	bl	8006ca4 <HAL_UART_Transmit_IT>
		if (data_ready_flag == true && data_send_flag == true) {
 8001232:	e7bb      	b.n	80011ac <sensor+0x58>
 8001234:	200005c2 	.word	0x200005c2
 8001238:	200005c3 	.word	0x200005c3
 800123c:	200005c4 	.word	0x200005c4
 8001240:	0800c18c 	.word	0x0800c18c
 8001244:	20000534 	.word	0x20000534

08001248 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001248:	b5b0      	push	{r4, r5, r7, lr}
 800124a:	b08a      	sub	sp, #40	; 0x28
 800124c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800124e:	f000 fd1f 	bl	8001c90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001252:	f000 f853 	bl	80012fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001256:	f000 f9c5 	bl	80015e4 <MX_GPIO_Init>
  MX_TIM2_Init();
 800125a:	f000 f8e1 	bl	8001420 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800125e:	f000 f991 	bl	8001584 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001262:	f000 f937 	bl	80014d4 <MX_TIM3_Init>
  MX_I2C1_Init();
 8001266:	f000 f89b 	bl	80013a0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */


  //starting timer for LED blink 13 Hz
  HAL_TIM_Base_Start_IT(&htim2);
 800126a:	481c      	ldr	r0, [pc, #112]	; (80012dc <main+0x94>)
 800126c:	f004 fce0 	bl	8005c30 <HAL_TIM_Base_Start_IT>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001270:	4b1b      	ldr	r3, [pc, #108]	; (80012e0 <main+0x98>)
 8001272:	1d3c      	adds	r4, r7, #4
 8001274:	461d      	mov	r5, r3
 8001276:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001278:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800127a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800127e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001282:	1d3b      	adds	r3, r7, #4
 8001284:	2100      	movs	r1, #0
 8001286:	4618      	mov	r0, r3
 8001288:	f006 fe66 	bl	8007f58 <osThreadCreate>
 800128c:	4603      	mov	r3, r0
 800128e:	4a15      	ldr	r2, [pc, #84]	; (80012e4 <main+0x9c>)
 8001290:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001292:	f006 fe5a 	bl	8007f4a <osKernelStart>
  /* USER CODE BEGIN WHILE */




  xTaskCreate(blink, "blink", 512, NULL, 5, NULL);
 8001296:	2300      	movs	r3, #0
 8001298:	9301      	str	r3, [sp, #4]
 800129a:	2305      	movs	r3, #5
 800129c:	9300      	str	r3, [sp, #0]
 800129e:	2300      	movs	r3, #0
 80012a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012a4:	4910      	ldr	r1, [pc, #64]	; (80012e8 <main+0xa0>)
 80012a6:	4811      	ldr	r0, [pc, #68]	; (80012ec <main+0xa4>)
 80012a8:	f006 ffc7 	bl	800823a <xTaskCreate>
  xTaskCreate(button, "button", 512, NULL, 5, NULL);
 80012ac:	2300      	movs	r3, #0
 80012ae:	9301      	str	r3, [sp, #4]
 80012b0:	2305      	movs	r3, #5
 80012b2:	9300      	str	r3, [sp, #0]
 80012b4:	2300      	movs	r3, #0
 80012b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012ba:	490d      	ldr	r1, [pc, #52]	; (80012f0 <main+0xa8>)
 80012bc:	480d      	ldr	r0, [pc, #52]	; (80012f4 <main+0xac>)
 80012be:	f006 ffbc 	bl	800823a <xTaskCreate>
  xTaskCreate(sensor, "button", 512, NULL, 5, NULL);
 80012c2:	2300      	movs	r3, #0
 80012c4:	9301      	str	r3, [sp, #4]
 80012c6:	2305      	movs	r3, #5
 80012c8:	9300      	str	r3, [sp, #0]
 80012ca:	2300      	movs	r3, #0
 80012cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012d0:	4907      	ldr	r1, [pc, #28]	; (80012f0 <main+0xa8>)
 80012d2:	4809      	ldr	r0, [pc, #36]	; (80012f8 <main+0xb0>)
 80012d4:	f006 ffb1 	bl	800823a <xTaskCreate>

  while (1)
 80012d8:	e7fe      	b.n	80012d8 <main+0x90>
 80012da:	bf00      	nop
 80012dc:	2000049c 	.word	0x2000049c
 80012e0:	0800c1bc 	.word	0x0800c1bc
 80012e4:	200005bc 	.word	0x200005bc
 80012e8:	0800c1a0 	.word	0x0800c1a0
 80012ec:	080010cd 	.word	0x080010cd
 80012f0:	0800c1a8 	.word	0x0800c1a8
 80012f4:	080010f5 	.word	0x080010f5
 80012f8:	08001155 	.word	0x08001155

080012fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b096      	sub	sp, #88	; 0x58
 8001300:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001302:	f107 0314 	add.w	r3, r7, #20
 8001306:	2244      	movs	r2, #68	; 0x44
 8001308:	2100      	movs	r1, #0
 800130a:	4618      	mov	r0, r3
 800130c:	f008 fe2d 	bl	8009f6a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001310:	463b      	mov	r3, r7
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	605a      	str	r2, [r3, #4]
 8001318:	609a      	str	r2, [r3, #8]
 800131a:	60da      	str	r2, [r3, #12]
 800131c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800131e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001322:	f003 f973 	bl	800460c <HAL_PWREx_ControlVoltageScaling>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800132c:	f000 f9e0 	bl	80016f0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001330:	2302      	movs	r3, #2
 8001332:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001334:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001338:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800133a:	2310      	movs	r3, #16
 800133c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800133e:	2302      	movs	r3, #2
 8001340:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001342:	2302      	movs	r3, #2
 8001344:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001346:	2301      	movs	r3, #1
 8001348:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800134a:	230a      	movs	r3, #10
 800134c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800134e:	2307      	movs	r3, #7
 8001350:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001352:	2302      	movs	r3, #2
 8001354:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001356:	2302      	movs	r3, #2
 8001358:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800135a:	f107 0314 	add.w	r3, r7, #20
 800135e:	4618      	mov	r0, r3
 8001360:	f003 f9aa 	bl	80046b8 <HAL_RCC_OscConfig>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800136a:	f000 f9c1 	bl	80016f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800136e:	230f      	movs	r3, #15
 8001370:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001372:	2303      	movs	r3, #3
 8001374:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001376:	2300      	movs	r3, #0
 8001378:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800137a:	2300      	movs	r3, #0
 800137c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800137e:	2300      	movs	r3, #0
 8001380:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001382:	463b      	mov	r3, r7
 8001384:	2104      	movs	r1, #4
 8001386:	4618      	mov	r0, r3
 8001388:	f003 fd72 	bl	8004e70 <HAL_RCC_ClockConfig>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001392:	f000 f9ad 	bl	80016f0 <Error_Handler>
  }
}
 8001396:	bf00      	nop
 8001398:	3758      	adds	r7, #88	; 0x58
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
	...

080013a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013a4:	4b1b      	ldr	r3, [pc, #108]	; (8001414 <MX_I2C1_Init+0x74>)
 80013a6:	4a1c      	ldr	r2, [pc, #112]	; (8001418 <MX_I2C1_Init+0x78>)
 80013a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80013aa:	4b1a      	ldr	r3, [pc, #104]	; (8001414 <MX_I2C1_Init+0x74>)
 80013ac:	4a1b      	ldr	r2, [pc, #108]	; (800141c <MX_I2C1_Init+0x7c>)
 80013ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80013b0:	4b18      	ldr	r3, [pc, #96]	; (8001414 <MX_I2C1_Init+0x74>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013b6:	4b17      	ldr	r3, [pc, #92]	; (8001414 <MX_I2C1_Init+0x74>)
 80013b8:	2201      	movs	r2, #1
 80013ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013bc:	4b15      	ldr	r3, [pc, #84]	; (8001414 <MX_I2C1_Init+0x74>)
 80013be:	2200      	movs	r2, #0
 80013c0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80013c2:	4b14      	ldr	r3, [pc, #80]	; (8001414 <MX_I2C1_Init+0x74>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80013c8:	4b12      	ldr	r3, [pc, #72]	; (8001414 <MX_I2C1_Init+0x74>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013ce:	4b11      	ldr	r3, [pc, #68]	; (8001414 <MX_I2C1_Init+0x74>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013d4:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <MX_I2C1_Init+0x74>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013da:	480e      	ldr	r0, [pc, #56]	; (8001414 <MX_I2C1_Init+0x74>)
 80013dc:	f001 f866 	bl	80024ac <HAL_I2C_Init>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80013e6:	f000 f983 	bl	80016f0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013ea:	2100      	movs	r1, #0
 80013ec:	4809      	ldr	r0, [pc, #36]	; (8001414 <MX_I2C1_Init+0x74>)
 80013ee:	f003 f867 	bl	80044c0 <HAL_I2CEx_ConfigAnalogFilter>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80013f8:	f000 f97a 	bl	80016f0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80013fc:	2100      	movs	r1, #0
 80013fe:	4805      	ldr	r0, [pc, #20]	; (8001414 <MX_I2C1_Init+0x74>)
 8001400:	f003 f8a9 	bl	8004556 <HAL_I2CEx_ConfigDigitalFilter>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800140a:	f000 f971 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	20000448 	.word	0x20000448
 8001418:	40005400 	.word	0x40005400
 800141c:	10909cec 	.word	0x10909cec

08001420 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b08a      	sub	sp, #40	; 0x28
 8001424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001426:	f107 031c 	add.w	r3, r7, #28
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]
 8001430:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001432:	463b      	mov	r3, r7
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	609a      	str	r2, [r3, #8]
 800143c:	60da      	str	r2, [r3, #12]
 800143e:	611a      	str	r2, [r3, #16]
 8001440:	615a      	str	r2, [r3, #20]
 8001442:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001444:	4b22      	ldr	r3, [pc, #136]	; (80014d0 <MX_TIM2_Init+0xb0>)
 8001446:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800144a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1108;
 800144c:	4b20      	ldr	r3, [pc, #128]	; (80014d0 <MX_TIM2_Init+0xb0>)
 800144e:	f240 4254 	movw	r2, #1108	; 0x454
 8001452:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001454:	4b1e      	ldr	r3, [pc, #120]	; (80014d0 <MX_TIM2_Init+0xb0>)
 8001456:	2200      	movs	r2, #0
 8001458:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5548;
 800145a:	4b1d      	ldr	r3, [pc, #116]	; (80014d0 <MX_TIM2_Init+0xb0>)
 800145c:	f241 52ac 	movw	r2, #5548	; 0x15ac
 8001460:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001462:	4b1b      	ldr	r3, [pc, #108]	; (80014d0 <MX_TIM2_Init+0xb0>)
 8001464:	2200      	movs	r2, #0
 8001466:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001468:	4b19      	ldr	r3, [pc, #100]	; (80014d0 <MX_TIM2_Init+0xb0>)
 800146a:	2200      	movs	r2, #0
 800146c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800146e:	4818      	ldr	r0, [pc, #96]	; (80014d0 <MX_TIM2_Init+0xb0>)
 8001470:	f004 fca5 	bl	8005dbe <HAL_TIM_PWM_Init>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 800147a:	f000 f939 	bl	80016f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800147e:	2300      	movs	r3, #0
 8001480:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001482:	2300      	movs	r3, #0
 8001484:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001486:	f107 031c 	add.w	r3, r7, #28
 800148a:	4619      	mov	r1, r3
 800148c:	4810      	ldr	r0, [pc, #64]	; (80014d0 <MX_TIM2_Init+0xb0>)
 800148e:	f005 fb15 	bl	8006abc <HAL_TIMEx_MasterConfigSynchronization>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8001498:	f000 f92a 	bl	80016f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800149c:	2360      	movs	r3, #96	; 0x60
 800149e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80014a0:	2300      	movs	r3, #0
 80014a2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014a4:	2300      	movs	r3, #0
 80014a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014a8:	2300      	movs	r3, #0
 80014aa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014ac:	463b      	mov	r3, r7
 80014ae:	2200      	movs	r2, #0
 80014b0:	4619      	mov	r1, r3
 80014b2:	4807      	ldr	r0, [pc, #28]	; (80014d0 <MX_TIM2_Init+0xb0>)
 80014b4:	f004 fe56 	bl	8006164 <HAL_TIM_PWM_ConfigChannel>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 80014be:	f000 f917 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80014c2:	4803      	ldr	r0, [pc, #12]	; (80014d0 <MX_TIM2_Init+0xb0>)
 80014c4:	f000 f9f2 	bl	80018ac <HAL_TIM_MspPostInit>

}
 80014c8:	bf00      	nop
 80014ca:	3728      	adds	r7, #40	; 0x28
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	2000049c 	.word	0x2000049c

080014d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b08a      	sub	sp, #40	; 0x28
 80014d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014da:	f107 031c 	add.w	r3, r7, #28
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	605a      	str	r2, [r3, #4]
 80014e4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014e6:	463b      	mov	r3, r7
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]
 80014f4:	615a      	str	r2, [r3, #20]
 80014f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014f8:	4b20      	ldr	r3, [pc, #128]	; (800157c <MX_TIM3_Init+0xa8>)
 80014fa:	4a21      	ldr	r2, [pc, #132]	; (8001580 <MX_TIM3_Init+0xac>)
 80014fc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 55516;
 80014fe:	4b1f      	ldr	r3, [pc, #124]	; (800157c <MX_TIM3_Init+0xa8>)
 8001500:	f64d 02dc 	movw	r2, #55516	; 0xd8dc
 8001504:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001506:	4b1d      	ldr	r3, [pc, #116]	; (800157c <MX_TIM3_Init+0xa8>)
 8001508:	2200      	movs	r2, #0
 800150a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800150c:	4b1b      	ldr	r3, [pc, #108]	; (800157c <MX_TIM3_Init+0xa8>)
 800150e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001512:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001514:	4b19      	ldr	r3, [pc, #100]	; (800157c <MX_TIM3_Init+0xa8>)
 8001516:	2200      	movs	r2, #0
 8001518:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800151a:	4b18      	ldr	r3, [pc, #96]	; (800157c <MX_TIM3_Init+0xa8>)
 800151c:	2200      	movs	r2, #0
 800151e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001520:	4816      	ldr	r0, [pc, #88]	; (800157c <MX_TIM3_Init+0xa8>)
 8001522:	f004 fbf5 	bl	8005d10 <HAL_TIM_OC_Init>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 800152c:	f000 f8e0 	bl	80016f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001530:	2300      	movs	r3, #0
 8001532:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001534:	2300      	movs	r3, #0
 8001536:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001538:	f107 031c 	add.w	r3, r7, #28
 800153c:	4619      	mov	r1, r3
 800153e:	480f      	ldr	r0, [pc, #60]	; (800157c <MX_TIM3_Init+0xa8>)
 8001540:	f005 fabc 	bl	8006abc <HAL_TIMEx_MasterConfigSynchronization>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800154a:	f000 f8d1 	bl	80016f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800154e:	2300      	movs	r3, #0
 8001550:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001552:	2300      	movs	r3, #0
 8001554:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001556:	2300      	movs	r3, #0
 8001558:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800155a:	2300      	movs	r3, #0
 800155c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800155e:	463b      	mov	r3, r7
 8001560:	2200      	movs	r2, #0
 8001562:	4619      	mov	r1, r3
 8001564:	4805      	ldr	r0, [pc, #20]	; (800157c <MX_TIM3_Init+0xa8>)
 8001566:	f004 fd83 	bl	8006070 <HAL_TIM_OC_ConfigChannel>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8001570:	f000 f8be 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001574:	bf00      	nop
 8001576:	3728      	adds	r7, #40	; 0x28
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	200004e8 	.word	0x200004e8
 8001580:	40000400 	.word	0x40000400

08001584 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001588:	4b14      	ldr	r3, [pc, #80]	; (80015dc <MX_USART2_UART_Init+0x58>)
 800158a:	4a15      	ldr	r2, [pc, #84]	; (80015e0 <MX_USART2_UART_Init+0x5c>)
 800158c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800158e:	4b13      	ldr	r3, [pc, #76]	; (80015dc <MX_USART2_UART_Init+0x58>)
 8001590:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001594:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001596:	4b11      	ldr	r3, [pc, #68]	; (80015dc <MX_USART2_UART_Init+0x58>)
 8001598:	2200      	movs	r2, #0
 800159a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800159c:	4b0f      	ldr	r3, [pc, #60]	; (80015dc <MX_USART2_UART_Init+0x58>)
 800159e:	2200      	movs	r2, #0
 80015a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015a2:	4b0e      	ldr	r3, [pc, #56]	; (80015dc <MX_USART2_UART_Init+0x58>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015a8:	4b0c      	ldr	r3, [pc, #48]	; (80015dc <MX_USART2_UART_Init+0x58>)
 80015aa:	220c      	movs	r2, #12
 80015ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ae:	4b0b      	ldr	r3, [pc, #44]	; (80015dc <MX_USART2_UART_Init+0x58>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015b4:	4b09      	ldr	r3, [pc, #36]	; (80015dc <MX_USART2_UART_Init+0x58>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015ba:	4b08      	ldr	r3, [pc, #32]	; (80015dc <MX_USART2_UART_Init+0x58>)
 80015bc:	2200      	movs	r2, #0
 80015be:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015c0:	4b06      	ldr	r3, [pc, #24]	; (80015dc <MX_USART2_UART_Init+0x58>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015c6:	4805      	ldr	r0, [pc, #20]	; (80015dc <MX_USART2_UART_Init+0x58>)
 80015c8:	f005 fb1e 	bl	8006c08 <HAL_UART_Init>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80015d2:	f000 f88d 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	20000534 	.word	0x20000534
 80015e0:	40004400 	.word	0x40004400

080015e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b08a      	sub	sp, #40	; 0x28
 80015e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ea:	f107 0314 	add.w	r3, r7, #20
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	605a      	str	r2, [r3, #4]
 80015f4:	609a      	str	r2, [r3, #8]
 80015f6:	60da      	str	r2, [r3, #12]
 80015f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015fa:	4b36      	ldr	r3, [pc, #216]	; (80016d4 <MX_GPIO_Init+0xf0>)
 80015fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015fe:	4a35      	ldr	r2, [pc, #212]	; (80016d4 <MX_GPIO_Init+0xf0>)
 8001600:	f043 0304 	orr.w	r3, r3, #4
 8001604:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001606:	4b33      	ldr	r3, [pc, #204]	; (80016d4 <MX_GPIO_Init+0xf0>)
 8001608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160a:	f003 0304 	and.w	r3, r3, #4
 800160e:	613b      	str	r3, [r7, #16]
 8001610:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001612:	4b30      	ldr	r3, [pc, #192]	; (80016d4 <MX_GPIO_Init+0xf0>)
 8001614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001616:	4a2f      	ldr	r2, [pc, #188]	; (80016d4 <MX_GPIO_Init+0xf0>)
 8001618:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800161c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800161e:	4b2d      	ldr	r3, [pc, #180]	; (80016d4 <MX_GPIO_Init+0xf0>)
 8001620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800162a:	4b2a      	ldr	r3, [pc, #168]	; (80016d4 <MX_GPIO_Init+0xf0>)
 800162c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162e:	4a29      	ldr	r2, [pc, #164]	; (80016d4 <MX_GPIO_Init+0xf0>)
 8001630:	f043 0301 	orr.w	r3, r3, #1
 8001634:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001636:	4b27      	ldr	r3, [pc, #156]	; (80016d4 <MX_GPIO_Init+0xf0>)
 8001638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	60bb      	str	r3, [r7, #8]
 8001640:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001642:	4b24      	ldr	r3, [pc, #144]	; (80016d4 <MX_GPIO_Init+0xf0>)
 8001644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001646:	4a23      	ldr	r2, [pc, #140]	; (80016d4 <MX_GPIO_Init+0xf0>)
 8001648:	f043 0302 	orr.w	r3, r3, #2
 800164c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800164e:	4b21      	ldr	r3, [pc, #132]	; (80016d4 <MX_GPIO_Init+0xf0>)
 8001650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	607b      	str	r3, [r7, #4]
 8001658:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIODE_GPIO_Port, DIODE_Pin, GPIO_PIN_RESET);
 800165a:	2200      	movs	r2, #0
 800165c:	2110      	movs	r1, #16
 800165e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001662:	f000 fed9 	bl	8002418 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001666:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800166a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800166c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001670:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	2300      	movs	r3, #0
 8001674:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001676:	f107 0314 	add.w	r3, r7, #20
 800167a:	4619      	mov	r1, r3
 800167c:	4816      	ldr	r0, [pc, #88]	; (80016d8 <MX_GPIO_Init+0xf4>)
 800167e:	f000 fd21 	bl	80020c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIODE_Pin */
  GPIO_InitStruct.Pin = DIODE_Pin;
 8001682:	2310      	movs	r3, #16
 8001684:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001686:	2301      	movs	r3, #1
 8001688:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168a:	2300      	movs	r3, #0
 800168c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168e:	2300      	movs	r3, #0
 8001690:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIODE_GPIO_Port, &GPIO_InitStruct);
 8001692:	f107 0314 	add.w	r3, r7, #20
 8001696:	4619      	mov	r1, r3
 8001698:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800169c:	f000 fd12 	bl	80020c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016a6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80016aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ac:	2300      	movs	r3, #0
 80016ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b0:	f107 0314 	add.w	r3, r7, #20
 80016b4:	4619      	mov	r1, r3
 80016b6:	4809      	ldr	r0, [pc, #36]	; (80016dc <MX_GPIO_Init+0xf8>)
 80016b8:	f000 fd04 	bl	80020c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80016bc:	2200      	movs	r2, #0
 80016be:	2105      	movs	r1, #5
 80016c0:	2028      	movs	r0, #40	; 0x28
 80016c2:	f000 fc3c 	bl	8001f3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80016c6:	2028      	movs	r0, #40	; 0x28
 80016c8:	f000 fc55 	bl	8001f76 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016cc:	bf00      	nop
 80016ce:	3728      	adds	r7, #40	; 0x28
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	40021000 	.word	0x40021000
 80016d8:	48000800 	.word	0x48000800
 80016dc:	48000400 	.word	0x48000400

080016e0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80016e8:	2001      	movs	r0, #1
 80016ea:	f006 fc81 	bl	8007ff0 <osDelay>
 80016ee:	e7fb      	b.n	80016e8 <StartDefaultTask+0x8>

080016f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016f4:	b672      	cpsid	i
}
 80016f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016f8:	e7fe      	b.n	80016f8 <Error_Handler+0x8>
	...

080016fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001702:	4b11      	ldr	r3, [pc, #68]	; (8001748 <HAL_MspInit+0x4c>)
 8001704:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001706:	4a10      	ldr	r2, [pc, #64]	; (8001748 <HAL_MspInit+0x4c>)
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	6613      	str	r3, [r2, #96]	; 0x60
 800170e:	4b0e      	ldr	r3, [pc, #56]	; (8001748 <HAL_MspInit+0x4c>)
 8001710:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	607b      	str	r3, [r7, #4]
 8001718:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800171a:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <HAL_MspInit+0x4c>)
 800171c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800171e:	4a0a      	ldr	r2, [pc, #40]	; (8001748 <HAL_MspInit+0x4c>)
 8001720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001724:	6593      	str	r3, [r2, #88]	; 0x58
 8001726:	4b08      	ldr	r3, [pc, #32]	; (8001748 <HAL_MspInit+0x4c>)
 8001728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800172a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800172e:	603b      	str	r3, [r7, #0]
 8001730:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001732:	2200      	movs	r2, #0
 8001734:	210f      	movs	r1, #15
 8001736:	f06f 0001 	mvn.w	r0, #1
 800173a:	f000 fc00 	bl	8001f3e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800173e:	bf00      	nop
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40021000 	.word	0x40021000

0800174c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b0ac      	sub	sp, #176	; 0xb0
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001754:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	609a      	str	r2, [r3, #8]
 8001760:	60da      	str	r2, [r3, #12]
 8001762:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001764:	f107 0314 	add.w	r3, r7, #20
 8001768:	2288      	movs	r2, #136	; 0x88
 800176a:	2100      	movs	r1, #0
 800176c:	4618      	mov	r0, r3
 800176e:	f008 fbfc 	bl	8009f6a <memset>
  if(hi2c->Instance==I2C1)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a25      	ldr	r2, [pc, #148]	; (800180c <HAL_I2C_MspInit+0xc0>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d142      	bne.n	8001802 <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800177c:	2340      	movs	r3, #64	; 0x40
 800177e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001780:	2300      	movs	r3, #0
 8001782:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001784:	f107 0314 	add.w	r3, r7, #20
 8001788:	4618      	mov	r0, r3
 800178a:	f003 fd95 	bl	80052b8 <HAL_RCCEx_PeriphCLKConfig>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001794:	f7ff ffac 	bl	80016f0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001798:	4b1d      	ldr	r3, [pc, #116]	; (8001810 <HAL_I2C_MspInit+0xc4>)
 800179a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800179c:	4a1c      	ldr	r2, [pc, #112]	; (8001810 <HAL_I2C_MspInit+0xc4>)
 800179e:	f043 0302 	orr.w	r3, r3, #2
 80017a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017a4:	4b1a      	ldr	r3, [pc, #104]	; (8001810 <HAL_I2C_MspInit+0xc4>)
 80017a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a8:	f003 0302 	and.w	r3, r3, #2
 80017ac:	613b      	str	r3, [r7, #16]
 80017ae:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017b0:	23c0      	movs	r3, #192	; 0xc0
 80017b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017b6:	2312      	movs	r3, #18
 80017b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017bc:	2300      	movs	r3, #0
 80017be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c2:	2303      	movs	r3, #3
 80017c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017c8:	2304      	movs	r3, #4
 80017ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ce:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017d2:	4619      	mov	r1, r3
 80017d4:	480f      	ldr	r0, [pc, #60]	; (8001814 <HAL_I2C_MspInit+0xc8>)
 80017d6:	f000 fc75 	bl	80020c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017da:	4b0d      	ldr	r3, [pc, #52]	; (8001810 <HAL_I2C_MspInit+0xc4>)
 80017dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017de:	4a0c      	ldr	r2, [pc, #48]	; (8001810 <HAL_I2C_MspInit+0xc4>)
 80017e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017e4:	6593      	str	r3, [r2, #88]	; 0x58
 80017e6:	4b0a      	ldr	r3, [pc, #40]	; (8001810 <HAL_I2C_MspInit+0xc4>)
 80017e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80017f2:	2200      	movs	r2, #0
 80017f4:	2105      	movs	r1, #5
 80017f6:	201f      	movs	r0, #31
 80017f8:	f000 fba1 	bl	8001f3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80017fc:	201f      	movs	r0, #31
 80017fe:	f000 fbba 	bl	8001f76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001802:	bf00      	nop
 8001804:	37b0      	adds	r7, #176	; 0xb0
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40005400 	.word	0x40005400
 8001810:	40021000 	.word	0x40021000
 8001814:	48000400 	.word	0x48000400

08001818 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001828:	d113      	bne.n	8001852 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800182a:	4b0c      	ldr	r3, [pc, #48]	; (800185c <HAL_TIM_PWM_MspInit+0x44>)
 800182c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800182e:	4a0b      	ldr	r2, [pc, #44]	; (800185c <HAL_TIM_PWM_MspInit+0x44>)
 8001830:	f043 0301 	orr.w	r3, r3, #1
 8001834:	6593      	str	r3, [r2, #88]	; 0x58
 8001836:	4b09      	ldr	r3, [pc, #36]	; (800185c <HAL_TIM_PWM_MspInit+0x44>)
 8001838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001842:	2200      	movs	r2, #0
 8001844:	2105      	movs	r1, #5
 8001846:	201c      	movs	r0, #28
 8001848:	f000 fb79 	bl	8001f3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800184c:	201c      	movs	r0, #28
 800184e:	f000 fb92 	bl	8001f76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001852:	bf00      	nop
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40021000 	.word	0x40021000

08001860 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM3)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a0d      	ldr	r2, [pc, #52]	; (80018a4 <HAL_TIM_OC_MspInit+0x44>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d113      	bne.n	800189a <HAL_TIM_OC_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001872:	4b0d      	ldr	r3, [pc, #52]	; (80018a8 <HAL_TIM_OC_MspInit+0x48>)
 8001874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001876:	4a0c      	ldr	r2, [pc, #48]	; (80018a8 <HAL_TIM_OC_MspInit+0x48>)
 8001878:	f043 0302 	orr.w	r3, r3, #2
 800187c:	6593      	str	r3, [r2, #88]	; 0x58
 800187e:	4b0a      	ldr	r3, [pc, #40]	; (80018a8 <HAL_TIM_OC_MspInit+0x48>)
 8001880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800188a:	2200      	movs	r2, #0
 800188c:	2105      	movs	r1, #5
 800188e:	201d      	movs	r0, #29
 8001890:	f000 fb55 	bl	8001f3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001894:	201d      	movs	r0, #29
 8001896:	f000 fb6e 	bl	8001f76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800189a:	bf00      	nop
 800189c:	3710      	adds	r7, #16
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40000400 	.word	0x40000400
 80018a8:	40021000 	.word	0x40021000

080018ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b088      	sub	sp, #32
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b4:	f107 030c 	add.w	r3, r7, #12
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	60da      	str	r2, [r3, #12]
 80018c2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018cc:	d11c      	bne.n	8001908 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ce:	4b10      	ldr	r3, [pc, #64]	; (8001910 <HAL_TIM_MspPostInit+0x64>)
 80018d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d2:	4a0f      	ldr	r2, [pc, #60]	; (8001910 <HAL_TIM_MspPostInit+0x64>)
 80018d4:	f043 0301 	orr.w	r3, r3, #1
 80018d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018da:	4b0d      	ldr	r3, [pc, #52]	; (8001910 <HAL_TIM_MspPostInit+0x64>)
 80018dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	60bb      	str	r3, [r7, #8]
 80018e4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80018e6:	2320      	movs	r3, #32
 80018e8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ea:	2302      	movs	r3, #2
 80018ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ee:	2300      	movs	r3, #0
 80018f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f2:	2300      	movs	r3, #0
 80018f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80018f6:	2301      	movs	r3, #1
 80018f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018fa:	f107 030c 	add.w	r3, r7, #12
 80018fe:	4619      	mov	r1, r3
 8001900:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001904:	f000 fbde 	bl	80020c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001908:	bf00      	nop
 800190a:	3720      	adds	r7, #32
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	40021000 	.word	0x40021000

08001914 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b0ac      	sub	sp, #176	; 0xb0
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800191c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]
 8001926:	609a      	str	r2, [r3, #8]
 8001928:	60da      	str	r2, [r3, #12]
 800192a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800192c:	f107 0314 	add.w	r3, r7, #20
 8001930:	2288      	movs	r2, #136	; 0x88
 8001932:	2100      	movs	r1, #0
 8001934:	4618      	mov	r0, r3
 8001936:	f008 fb18 	bl	8009f6a <memset>
  if(huart->Instance==USART2)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a25      	ldr	r2, [pc, #148]	; (80019d4 <HAL_UART_MspInit+0xc0>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d143      	bne.n	80019cc <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001944:	2302      	movs	r3, #2
 8001946:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001948:	2300      	movs	r3, #0
 800194a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800194c:	f107 0314 	add.w	r3, r7, #20
 8001950:	4618      	mov	r0, r3
 8001952:	f003 fcb1 	bl	80052b8 <HAL_RCCEx_PeriphCLKConfig>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800195c:	f7ff fec8 	bl	80016f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001960:	4b1d      	ldr	r3, [pc, #116]	; (80019d8 <HAL_UART_MspInit+0xc4>)
 8001962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001964:	4a1c      	ldr	r2, [pc, #112]	; (80019d8 <HAL_UART_MspInit+0xc4>)
 8001966:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800196a:	6593      	str	r3, [r2, #88]	; 0x58
 800196c:	4b1a      	ldr	r3, [pc, #104]	; (80019d8 <HAL_UART_MspInit+0xc4>)
 800196e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001970:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001974:	613b      	str	r3, [r7, #16]
 8001976:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001978:	4b17      	ldr	r3, [pc, #92]	; (80019d8 <HAL_UART_MspInit+0xc4>)
 800197a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800197c:	4a16      	ldr	r2, [pc, #88]	; (80019d8 <HAL_UART_MspInit+0xc4>)
 800197e:	f043 0301 	orr.w	r3, r3, #1
 8001982:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001984:	4b14      	ldr	r3, [pc, #80]	; (80019d8 <HAL_UART_MspInit+0xc4>)
 8001986:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001988:	f003 0301 	and.w	r3, r3, #1
 800198c:	60fb      	str	r3, [r7, #12]
 800198e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001990:	230c      	movs	r3, #12
 8001992:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001996:	2302      	movs	r3, #2
 8001998:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199c:	2300      	movs	r3, #0
 800199e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a2:	2303      	movs	r3, #3
 80019a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019a8:	2307      	movs	r3, #7
 80019aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ae:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80019b2:	4619      	mov	r1, r3
 80019b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019b8:	f000 fb84 	bl	80020c4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80019bc:	2200      	movs	r2, #0
 80019be:	2105      	movs	r1, #5
 80019c0:	2026      	movs	r0, #38	; 0x26
 80019c2:	f000 fabc 	bl	8001f3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80019c6:	2026      	movs	r0, #38	; 0x26
 80019c8:	f000 fad5 	bl	8001f76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019cc:	bf00      	nop
 80019ce:	37b0      	adds	r7, #176	; 0xb0
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	40004400 	.word	0x40004400
 80019d8:	40021000 	.word	0x40021000

080019dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019e0:	e7fe      	b.n	80019e0 <NMI_Handler+0x4>

080019e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019e2:	b480      	push	{r7}
 80019e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019e6:	e7fe      	b.n	80019e6 <HardFault_Handler+0x4>

080019e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019ec:	e7fe      	b.n	80019ec <MemManage_Handler+0x4>

080019ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019ee:	b480      	push	{r7}
 80019f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019f2:	e7fe      	b.n	80019f2 <BusFault_Handler+0x4>

080019f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019f8:	e7fe      	b.n	80019f8 <UsageFault_Handler+0x4>

080019fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019fa:	b480      	push	{r7}
 80019fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019fe:	bf00      	nop
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a0c:	f000 f99c 	bl	8001d48 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001a10:	f007 f872 	bl	8008af8 <xTaskGetSchedulerState>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d001      	beq.n	8001a1e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001a1a:	f007 faad 	bl	8008f78 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
	...

08001a24 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a28:	4802      	ldr	r0, [pc, #8]	; (8001a34 <TIM2_IRQHandler+0x10>)
 8001a2a:	f004 fa1f 	bl	8005e6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	2000049c 	.word	0x2000049c

08001a38 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001a3c:	4802      	ldr	r0, [pc, #8]	; (8001a48 <TIM3_IRQHandler+0x10>)
 8001a3e:	f004 fa15 	bl	8005e6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	200004e8 	.word	0x200004e8

08001a4c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001a50:	4802      	ldr	r0, [pc, #8]	; (8001a5c <I2C1_EV_IRQHandler+0x10>)
 8001a52:	f000 fff1 	bl	8002a38 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20000448 	.word	0x20000448

08001a60 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a64:	4802      	ldr	r0, [pc, #8]	; (8001a70 <USART2_IRQHandler+0x10>)
 8001a66:	f005 f97b 	bl	8006d60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	20000534 	.word	0x20000534

08001a74 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001a78:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001a7c:	f000 fcfe 	bl	800247c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001a80:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001a84:	f000 fcfa 	bl	800247c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a88:	bf00      	nop
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  return 1;
 8001a90:	2301      	movs	r3, #1
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <_kill>:

int _kill(int pid, int sig)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001aa6:	f008 fab3 	bl	800a010 <__errno>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2216      	movs	r2, #22
 8001aae:	601a      	str	r2, [r3, #0]
  return -1;
 8001ab0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3708      	adds	r7, #8
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}

08001abc <_exit>:

void _exit (int status)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ac4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f7ff ffe7 	bl	8001a9c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ace:	e7fe      	b.n	8001ace <_exit+0x12>

08001ad0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001adc:	2300      	movs	r3, #0
 8001ade:	617b      	str	r3, [r7, #20]
 8001ae0:	e00a      	b.n	8001af8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ae2:	f3af 8000 	nop.w
 8001ae6:	4601      	mov	r1, r0
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	1c5a      	adds	r2, r3, #1
 8001aec:	60ba      	str	r2, [r7, #8]
 8001aee:	b2ca      	uxtb	r2, r1
 8001af0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	3301      	adds	r3, #1
 8001af6:	617b      	str	r3, [r7, #20]
 8001af8:	697a      	ldr	r2, [r7, #20]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	dbf0      	blt.n	8001ae2 <_read+0x12>
  }

  return len;
 8001b00:	687b      	ldr	r3, [r7, #4]
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3718      	adds	r7, #24
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b086      	sub	sp, #24
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	60f8      	str	r0, [r7, #12]
 8001b12:	60b9      	str	r1, [r7, #8]
 8001b14:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b16:	2300      	movs	r3, #0
 8001b18:	617b      	str	r3, [r7, #20]
 8001b1a:	e009      	b.n	8001b30 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	1c5a      	adds	r2, r3, #1
 8001b20:	60ba      	str	r2, [r7, #8]
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	617b      	str	r3, [r7, #20]
 8001b30:	697a      	ldr	r2, [r7, #20]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	dbf1      	blt.n	8001b1c <_write+0x12>
  }
  return len;
 8001b38:	687b      	ldr	r3, [r7, #4]
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3718      	adds	r7, #24
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <_close>:

int _close(int file)
{
 8001b42:	b480      	push	{r7}
 8001b44:	b083      	sub	sp, #12
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	b083      	sub	sp, #12
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
 8001b62:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b6a:	605a      	str	r2, [r3, #4]
  return 0;
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr

08001b7a <_isatty>:

int _isatty(int file)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	b083      	sub	sp, #12
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b82:	2301      	movs	r3, #1
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b085      	sub	sp, #20
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3714      	adds	r7, #20
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
	...

08001bac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bb4:	4a14      	ldr	r2, [pc, #80]	; (8001c08 <_sbrk+0x5c>)
 8001bb6:	4b15      	ldr	r3, [pc, #84]	; (8001c0c <_sbrk+0x60>)
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bc0:	4b13      	ldr	r3, [pc, #76]	; (8001c10 <_sbrk+0x64>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d102      	bne.n	8001bce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bc8:	4b11      	ldr	r3, [pc, #68]	; (8001c10 <_sbrk+0x64>)
 8001bca:	4a12      	ldr	r2, [pc, #72]	; (8001c14 <_sbrk+0x68>)
 8001bcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bce:	4b10      	ldr	r3, [pc, #64]	; (8001c10 <_sbrk+0x64>)
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	693a      	ldr	r2, [r7, #16]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d207      	bcs.n	8001bec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bdc:	f008 fa18 	bl	800a010 <__errno>
 8001be0:	4603      	mov	r3, r0
 8001be2:	220c      	movs	r2, #12
 8001be4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001be6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bea:	e009      	b.n	8001c00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bec:	4b08      	ldr	r3, [pc, #32]	; (8001c10 <_sbrk+0x64>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bf2:	4b07      	ldr	r3, [pc, #28]	; (8001c10 <_sbrk+0x64>)
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	4a05      	ldr	r2, [pc, #20]	; (8001c10 <_sbrk+0x64>)
 8001bfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3718      	adds	r7, #24
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	20018000 	.word	0x20018000
 8001c0c:	00000400 	.word	0x00000400
 8001c10:	20000604 	.word	0x20000604
 8001c14:	20002fc0 	.word	0x20002fc0

08001c18 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001c1c:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <SystemInit+0x20>)
 8001c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c22:	4a05      	ldr	r2, [pc, #20]	; (8001c38 <SystemInit+0x20>)
 8001c24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001c2c:	bf00      	nop
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	e000ed00 	.word	0xe000ed00

08001c3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001c3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c74 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c40:	f7ff ffea 	bl	8001c18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c44:	480c      	ldr	r0, [pc, #48]	; (8001c78 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c46:	490d      	ldr	r1, [pc, #52]	; (8001c7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c48:	4a0d      	ldr	r2, [pc, #52]	; (8001c80 <LoopForever+0xe>)
  movs r3, #0
 8001c4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c4c:	e002      	b.n	8001c54 <LoopCopyDataInit>

08001c4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c52:	3304      	adds	r3, #4

08001c54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c58:	d3f9      	bcc.n	8001c4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c5a:	4a0a      	ldr	r2, [pc, #40]	; (8001c84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c5c:	4c0a      	ldr	r4, [pc, #40]	; (8001c88 <LoopForever+0x16>)
  movs r3, #0
 8001c5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c60:	e001      	b.n	8001c66 <LoopFillZerobss>

08001c62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c64:	3204      	adds	r2, #4

08001c66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c68:	d3fb      	bcc.n	8001c62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c6a:	f008 f9d7 	bl	800a01c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c6e:	f7ff faeb 	bl	8001248 <main>

08001c72 <LoopForever>:

LoopForever:
    b LoopForever
 8001c72:	e7fe      	b.n	8001c72 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001c74:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001c78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c7c:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001c80:	0800c5ac 	.word	0x0800c5ac
  ldr r2, =_sbss
 8001c84:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001c88:	20002fbc 	.word	0x20002fbc

08001c8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c8c:	e7fe      	b.n	8001c8c <ADC1_2_IRQHandler>
	...

08001c90 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c96:	2300      	movs	r3, #0
 8001c98:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c9a:	4b0c      	ldr	r3, [pc, #48]	; (8001ccc <HAL_Init+0x3c>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a0b      	ldr	r2, [pc, #44]	; (8001ccc <HAL_Init+0x3c>)
 8001ca0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ca4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ca6:	2003      	movs	r0, #3
 8001ca8:	f000 f93e 	bl	8001f28 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cac:	200f      	movs	r0, #15
 8001cae:	f000 f80f 	bl	8001cd0 <HAL_InitTick>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d002      	beq.n	8001cbe <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	71fb      	strb	r3, [r7, #7]
 8001cbc:	e001      	b.n	8001cc2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001cbe:	f7ff fd1d 	bl	80016fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001cc2:	79fb      	ldrb	r3, [r7, #7]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3708      	adds	r7, #8
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	40022000 	.word	0x40022000

08001cd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001cdc:	4b17      	ldr	r3, [pc, #92]	; (8001d3c <HAL_InitTick+0x6c>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d023      	beq.n	8001d2c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001ce4:	4b16      	ldr	r3, [pc, #88]	; (8001d40 <HAL_InitTick+0x70>)
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	4b14      	ldr	r3, [pc, #80]	; (8001d3c <HAL_InitTick+0x6c>)
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	4619      	mov	r1, r3
 8001cee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f000 f949 	bl	8001f92 <HAL_SYSTICK_Config>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d10f      	bne.n	8001d26 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2b0f      	cmp	r3, #15
 8001d0a:	d809      	bhi.n	8001d20 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	6879      	ldr	r1, [r7, #4]
 8001d10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d14:	f000 f913 	bl	8001f3e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d18:	4a0a      	ldr	r2, [pc, #40]	; (8001d44 <HAL_InitTick+0x74>)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6013      	str	r3, [r2, #0]
 8001d1e:	e007      	b.n	8001d30 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	73fb      	strb	r3, [r7, #15]
 8001d24:	e004      	b.n	8001d30 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	73fb      	strb	r3, [r7, #15]
 8001d2a:	e001      	b.n	8001d30 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	20000008 	.word	0x20000008
 8001d40:	20000000 	.word	0x20000000
 8001d44:	20000004 	.word	0x20000004

08001d48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d4c:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <HAL_IncTick+0x20>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	461a      	mov	r2, r3
 8001d52:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <HAL_IncTick+0x24>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4413      	add	r3, r2
 8001d58:	4a04      	ldr	r2, [pc, #16]	; (8001d6c <HAL_IncTick+0x24>)
 8001d5a:	6013      	str	r3, [r2, #0]
}
 8001d5c:	bf00      	nop
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	20000008 	.word	0x20000008
 8001d6c:	20000608 	.word	0x20000608

08001d70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  return uwTick;
 8001d74:	4b03      	ldr	r3, [pc, #12]	; (8001d84 <HAL_GetTick+0x14>)
 8001d76:	681b      	ldr	r3, [r3, #0]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	20000608 	.word	0x20000608

08001d88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f003 0307 	and.w	r3, r3, #7
 8001d96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d98:	4b0c      	ldr	r3, [pc, #48]	; (8001dcc <__NVIC_SetPriorityGrouping+0x44>)
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d9e:	68ba      	ldr	r2, [r7, #8]
 8001da0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001da4:	4013      	ands	r3, r2
 8001da6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001db0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001db4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001db8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dba:	4a04      	ldr	r2, [pc, #16]	; (8001dcc <__NVIC_SetPriorityGrouping+0x44>)
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	60d3      	str	r3, [r2, #12]
}
 8001dc0:	bf00      	nop
 8001dc2:	3714      	adds	r7, #20
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	e000ed00 	.word	0xe000ed00

08001dd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dd4:	4b04      	ldr	r3, [pc, #16]	; (8001de8 <__NVIC_GetPriorityGrouping+0x18>)
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	0a1b      	lsrs	r3, r3, #8
 8001dda:	f003 0307 	and.w	r3, r3, #7
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	e000ed00 	.word	0xe000ed00

08001dec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	db0b      	blt.n	8001e16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dfe:	79fb      	ldrb	r3, [r7, #7]
 8001e00:	f003 021f 	and.w	r2, r3, #31
 8001e04:	4907      	ldr	r1, [pc, #28]	; (8001e24 <__NVIC_EnableIRQ+0x38>)
 8001e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0a:	095b      	lsrs	r3, r3, #5
 8001e0c:	2001      	movs	r0, #1
 8001e0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e16:	bf00      	nop
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	e000e100 	.word	0xe000e100

08001e28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	4603      	mov	r3, r0
 8001e30:	6039      	str	r1, [r7, #0]
 8001e32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	db0a      	blt.n	8001e52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	b2da      	uxtb	r2, r3
 8001e40:	490c      	ldr	r1, [pc, #48]	; (8001e74 <__NVIC_SetPriority+0x4c>)
 8001e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e46:	0112      	lsls	r2, r2, #4
 8001e48:	b2d2      	uxtb	r2, r2
 8001e4a:	440b      	add	r3, r1
 8001e4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e50:	e00a      	b.n	8001e68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	b2da      	uxtb	r2, r3
 8001e56:	4908      	ldr	r1, [pc, #32]	; (8001e78 <__NVIC_SetPriority+0x50>)
 8001e58:	79fb      	ldrb	r3, [r7, #7]
 8001e5a:	f003 030f 	and.w	r3, r3, #15
 8001e5e:	3b04      	subs	r3, #4
 8001e60:	0112      	lsls	r2, r2, #4
 8001e62:	b2d2      	uxtb	r2, r2
 8001e64:	440b      	add	r3, r1
 8001e66:	761a      	strb	r2, [r3, #24]
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr
 8001e74:	e000e100 	.word	0xe000e100
 8001e78:	e000ed00 	.word	0xe000ed00

08001e7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b089      	sub	sp, #36	; 0x24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	60b9      	str	r1, [r7, #8]
 8001e86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	f003 0307 	and.w	r3, r3, #7
 8001e8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	f1c3 0307 	rsb	r3, r3, #7
 8001e96:	2b04      	cmp	r3, #4
 8001e98:	bf28      	it	cs
 8001e9a:	2304      	movcs	r3, #4
 8001e9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	3304      	adds	r3, #4
 8001ea2:	2b06      	cmp	r3, #6
 8001ea4:	d902      	bls.n	8001eac <NVIC_EncodePriority+0x30>
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	3b03      	subs	r3, #3
 8001eaa:	e000      	b.n	8001eae <NVIC_EncodePriority+0x32>
 8001eac:	2300      	movs	r3, #0
 8001eae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	43da      	mvns	r2, r3
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	401a      	ands	r2, r3
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ec4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	fa01 f303 	lsl.w	r3, r1, r3
 8001ece:	43d9      	mvns	r1, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed4:	4313      	orrs	r3, r2
         );
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3724      	adds	r7, #36	; 0x24
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
	...

08001ee4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ef4:	d301      	bcc.n	8001efa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e00f      	b.n	8001f1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001efa:	4a0a      	ldr	r2, [pc, #40]	; (8001f24 <SysTick_Config+0x40>)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	3b01      	subs	r3, #1
 8001f00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f02:	210f      	movs	r1, #15
 8001f04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f08:	f7ff ff8e 	bl	8001e28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f0c:	4b05      	ldr	r3, [pc, #20]	; (8001f24 <SysTick_Config+0x40>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f12:	4b04      	ldr	r3, [pc, #16]	; (8001f24 <SysTick_Config+0x40>)
 8001f14:	2207      	movs	r2, #7
 8001f16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	e000e010 	.word	0xe000e010

08001f28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f7ff ff29 	bl	8001d88 <__NVIC_SetPriorityGrouping>
}
 8001f36:	bf00      	nop
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b086      	sub	sp, #24
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	4603      	mov	r3, r0
 8001f46:	60b9      	str	r1, [r7, #8]
 8001f48:	607a      	str	r2, [r7, #4]
 8001f4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f50:	f7ff ff3e 	bl	8001dd0 <__NVIC_GetPriorityGrouping>
 8001f54:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	68b9      	ldr	r1, [r7, #8]
 8001f5a:	6978      	ldr	r0, [r7, #20]
 8001f5c:	f7ff ff8e 	bl	8001e7c <NVIC_EncodePriority>
 8001f60:	4602      	mov	r2, r0
 8001f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f66:	4611      	mov	r1, r2
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7ff ff5d 	bl	8001e28 <__NVIC_SetPriority>
}
 8001f6e:	bf00      	nop
 8001f70:	3718      	adds	r7, #24
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b082      	sub	sp, #8
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7ff ff31 	bl	8001dec <__NVIC_EnableIRQ>
}
 8001f8a:	bf00      	nop
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b082      	sub	sp, #8
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f7ff ffa2 	bl	8001ee4 <SysTick_Config>
 8001fa0:	4603      	mov	r3, r0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001faa:	b480      	push	{r7}
 8001fac:	b085      	sub	sp, #20
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d008      	beq.n	8001fd4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2204      	movs	r2, #4
 8001fc6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e022      	b.n	800201a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f022 020e 	bic.w	r2, r2, #14
 8001fe2:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f022 0201 	bic.w	r2, r2, #1
 8001ff2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff8:	f003 021c 	and.w	r2, r3, #28
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002000:	2101      	movs	r1, #1
 8002002:	fa01 f202 	lsl.w	r2, r1, r2
 8002006:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2201      	movs	r2, #1
 800200c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002018:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800201a:	4618      	mov	r0, r3
 800201c:	3714      	adds	r7, #20
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b084      	sub	sp, #16
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800202e:	2300      	movs	r3, #0
 8002030:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2b02      	cmp	r3, #2
 800203c:	d005      	beq.n	800204a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2204      	movs	r2, #4
 8002042:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	73fb      	strb	r3, [r7, #15]
 8002048:	e029      	b.n	800209e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f022 020e 	bic.w	r2, r2, #14
 8002058:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f022 0201 	bic.w	r2, r2, #1
 8002068:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206e:	f003 021c 	and.w	r2, r3, #28
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	2101      	movs	r1, #1
 8002078:	fa01 f202 	lsl.w	r2, r1, r2
 800207c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2201      	movs	r2, #1
 8002082:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002092:	2b00      	cmp	r3, #0
 8002094:	d003      	beq.n	800209e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	4798      	blx	r3
    }
  }
  return status;
 800209e:	7bfb      	ldrb	r3, [r7, #15]
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3710      	adds	r7, #16
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80020b6:	b2db      	uxtb	r3, r3
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b087      	sub	sp, #28
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020ce:	2300      	movs	r3, #0
 80020d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020d2:	e17f      	b.n	80023d4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	2101      	movs	r1, #1
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	fa01 f303 	lsl.w	r3, r1, r3
 80020e0:	4013      	ands	r3, r2
 80020e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f000 8171 	beq.w	80023ce <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f003 0303 	and.w	r3, r3, #3
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d005      	beq.n	8002104 <HAL_GPIO_Init+0x40>
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f003 0303 	and.w	r3, r3, #3
 8002100:	2b02      	cmp	r3, #2
 8002102:	d130      	bne.n	8002166 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	2203      	movs	r2, #3
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	43db      	mvns	r3, r3
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	4013      	ands	r3, r2
 800211a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	68da      	ldr	r2, [r3, #12]
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	fa02 f303 	lsl.w	r3, r2, r3
 8002128:	693a      	ldr	r2, [r7, #16]
 800212a:	4313      	orrs	r3, r2
 800212c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	693a      	ldr	r2, [r7, #16]
 8002132:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800213a:	2201      	movs	r2, #1
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	fa02 f303 	lsl.w	r3, r2, r3
 8002142:	43db      	mvns	r3, r3
 8002144:	693a      	ldr	r2, [r7, #16]
 8002146:	4013      	ands	r3, r2
 8002148:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	091b      	lsrs	r3, r3, #4
 8002150:	f003 0201 	and.w	r2, r3, #1
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	fa02 f303 	lsl.w	r3, r2, r3
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	4313      	orrs	r3, r2
 800215e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	693a      	ldr	r2, [r7, #16]
 8002164:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f003 0303 	and.w	r3, r3, #3
 800216e:	2b03      	cmp	r3, #3
 8002170:	d118      	bne.n	80021a4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002176:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002178:	2201      	movs	r2, #1
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	43db      	mvns	r3, r3
 8002182:	693a      	ldr	r2, [r7, #16]
 8002184:	4013      	ands	r3, r2
 8002186:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	08db      	lsrs	r3, r3, #3
 800218e:	f003 0201 	and.w	r2, r3, #1
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	693a      	ldr	r2, [r7, #16]
 800219a:	4313      	orrs	r3, r2
 800219c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	693a      	ldr	r2, [r7, #16]
 80021a2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f003 0303 	and.w	r3, r3, #3
 80021ac:	2b03      	cmp	r3, #3
 80021ae:	d017      	beq.n	80021e0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	2203      	movs	r2, #3
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	43db      	mvns	r3, r3
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	4013      	ands	r3, r2
 80021c6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	689a      	ldr	r2, [r3, #8]
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	693a      	ldr	r2, [r7, #16]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	693a      	ldr	r2, [r7, #16]
 80021de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f003 0303 	and.w	r3, r3, #3
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d123      	bne.n	8002234 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	08da      	lsrs	r2, r3, #3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	3208      	adds	r2, #8
 80021f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	f003 0307 	and.w	r3, r3, #7
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	220f      	movs	r2, #15
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	43db      	mvns	r3, r3
 800220a:	693a      	ldr	r2, [r7, #16]
 800220c:	4013      	ands	r3, r2
 800220e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	691a      	ldr	r2, [r3, #16]
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	f003 0307 	and.w	r3, r3, #7
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	693a      	ldr	r2, [r7, #16]
 8002222:	4313      	orrs	r3, r2
 8002224:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	08da      	lsrs	r2, r3, #3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	3208      	adds	r2, #8
 800222e:	6939      	ldr	r1, [r7, #16]
 8002230:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	2203      	movs	r2, #3
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	43db      	mvns	r3, r3
 8002246:	693a      	ldr	r2, [r7, #16]
 8002248:	4013      	ands	r3, r2
 800224a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f003 0203 	and.w	r2, r3, #3
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	693a      	ldr	r2, [r7, #16]
 800225e:	4313      	orrs	r3, r2
 8002260:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	693a      	ldr	r2, [r7, #16]
 8002266:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002270:	2b00      	cmp	r3, #0
 8002272:	f000 80ac 	beq.w	80023ce <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002276:	4b5f      	ldr	r3, [pc, #380]	; (80023f4 <HAL_GPIO_Init+0x330>)
 8002278:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800227a:	4a5e      	ldr	r2, [pc, #376]	; (80023f4 <HAL_GPIO_Init+0x330>)
 800227c:	f043 0301 	orr.w	r3, r3, #1
 8002280:	6613      	str	r3, [r2, #96]	; 0x60
 8002282:	4b5c      	ldr	r3, [pc, #368]	; (80023f4 <HAL_GPIO_Init+0x330>)
 8002284:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	60bb      	str	r3, [r7, #8]
 800228c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800228e:	4a5a      	ldr	r2, [pc, #360]	; (80023f8 <HAL_GPIO_Init+0x334>)
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	089b      	lsrs	r3, r3, #2
 8002294:	3302      	adds	r3, #2
 8002296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800229a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	f003 0303 	and.w	r3, r3, #3
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	220f      	movs	r2, #15
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	43db      	mvns	r3, r3
 80022ac:	693a      	ldr	r2, [r7, #16]
 80022ae:	4013      	ands	r3, r2
 80022b0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80022b8:	d025      	beq.n	8002306 <HAL_GPIO_Init+0x242>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a4f      	ldr	r2, [pc, #316]	; (80023fc <HAL_GPIO_Init+0x338>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d01f      	beq.n	8002302 <HAL_GPIO_Init+0x23e>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a4e      	ldr	r2, [pc, #312]	; (8002400 <HAL_GPIO_Init+0x33c>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d019      	beq.n	80022fe <HAL_GPIO_Init+0x23a>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a4d      	ldr	r2, [pc, #308]	; (8002404 <HAL_GPIO_Init+0x340>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d013      	beq.n	80022fa <HAL_GPIO_Init+0x236>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a4c      	ldr	r2, [pc, #304]	; (8002408 <HAL_GPIO_Init+0x344>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d00d      	beq.n	80022f6 <HAL_GPIO_Init+0x232>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a4b      	ldr	r2, [pc, #300]	; (800240c <HAL_GPIO_Init+0x348>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d007      	beq.n	80022f2 <HAL_GPIO_Init+0x22e>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a4a      	ldr	r2, [pc, #296]	; (8002410 <HAL_GPIO_Init+0x34c>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d101      	bne.n	80022ee <HAL_GPIO_Init+0x22a>
 80022ea:	2306      	movs	r3, #6
 80022ec:	e00c      	b.n	8002308 <HAL_GPIO_Init+0x244>
 80022ee:	2307      	movs	r3, #7
 80022f0:	e00a      	b.n	8002308 <HAL_GPIO_Init+0x244>
 80022f2:	2305      	movs	r3, #5
 80022f4:	e008      	b.n	8002308 <HAL_GPIO_Init+0x244>
 80022f6:	2304      	movs	r3, #4
 80022f8:	e006      	b.n	8002308 <HAL_GPIO_Init+0x244>
 80022fa:	2303      	movs	r3, #3
 80022fc:	e004      	b.n	8002308 <HAL_GPIO_Init+0x244>
 80022fe:	2302      	movs	r3, #2
 8002300:	e002      	b.n	8002308 <HAL_GPIO_Init+0x244>
 8002302:	2301      	movs	r3, #1
 8002304:	e000      	b.n	8002308 <HAL_GPIO_Init+0x244>
 8002306:	2300      	movs	r3, #0
 8002308:	697a      	ldr	r2, [r7, #20]
 800230a:	f002 0203 	and.w	r2, r2, #3
 800230e:	0092      	lsls	r2, r2, #2
 8002310:	4093      	lsls	r3, r2
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	4313      	orrs	r3, r2
 8002316:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002318:	4937      	ldr	r1, [pc, #220]	; (80023f8 <HAL_GPIO_Init+0x334>)
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	089b      	lsrs	r3, r3, #2
 800231e:	3302      	adds	r3, #2
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002326:	4b3b      	ldr	r3, [pc, #236]	; (8002414 <HAL_GPIO_Init+0x350>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	43db      	mvns	r3, r3
 8002330:	693a      	ldr	r2, [r7, #16]
 8002332:	4013      	ands	r3, r2
 8002334:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d003      	beq.n	800234a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	4313      	orrs	r3, r2
 8002348:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800234a:	4a32      	ldr	r2, [pc, #200]	; (8002414 <HAL_GPIO_Init+0x350>)
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002350:	4b30      	ldr	r3, [pc, #192]	; (8002414 <HAL_GPIO_Init+0x350>)
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	43db      	mvns	r3, r3
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	4013      	ands	r3, r2
 800235e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d003      	beq.n	8002374 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800236c:	693a      	ldr	r2, [r7, #16]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	4313      	orrs	r3, r2
 8002372:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002374:	4a27      	ldr	r2, [pc, #156]	; (8002414 <HAL_GPIO_Init+0x350>)
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800237a:	4b26      	ldr	r3, [pc, #152]	; (8002414 <HAL_GPIO_Init+0x350>)
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	43db      	mvns	r3, r3
 8002384:	693a      	ldr	r2, [r7, #16]
 8002386:	4013      	ands	r3, r2
 8002388:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d003      	beq.n	800239e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	4313      	orrs	r3, r2
 800239c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800239e:	4a1d      	ldr	r2, [pc, #116]	; (8002414 <HAL_GPIO_Init+0x350>)
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80023a4:	4b1b      	ldr	r3, [pc, #108]	; (8002414 <HAL_GPIO_Init+0x350>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	43db      	mvns	r3, r3
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	4013      	ands	r3, r2
 80023b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d003      	beq.n	80023c8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80023c0:	693a      	ldr	r2, [r7, #16]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80023c8:	4a12      	ldr	r2, [pc, #72]	; (8002414 <HAL_GPIO_Init+0x350>)
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	3301      	adds	r3, #1
 80023d2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	fa22 f303 	lsr.w	r3, r2, r3
 80023de:	2b00      	cmp	r3, #0
 80023e0:	f47f ae78 	bne.w	80020d4 <HAL_GPIO_Init+0x10>
  }
}
 80023e4:	bf00      	nop
 80023e6:	bf00      	nop
 80023e8:	371c      	adds	r7, #28
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	40021000 	.word	0x40021000
 80023f8:	40010000 	.word	0x40010000
 80023fc:	48000400 	.word	0x48000400
 8002400:	48000800 	.word	0x48000800
 8002404:	48000c00 	.word	0x48000c00
 8002408:	48001000 	.word	0x48001000
 800240c:	48001400 	.word	0x48001400
 8002410:	48001800 	.word	0x48001800
 8002414:	40010400 	.word	0x40010400

08002418 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	460b      	mov	r3, r1
 8002422:	807b      	strh	r3, [r7, #2]
 8002424:	4613      	mov	r3, r2
 8002426:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002428:	787b      	ldrb	r3, [r7, #1]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d003      	beq.n	8002436 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800242e:	887a      	ldrh	r2, [r7, #2]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002434:	e002      	b.n	800243c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002436:	887a      	ldrh	r2, [r7, #2]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800243c:	bf00      	nop
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002448:	b480      	push	{r7}
 800244a:	b085      	sub	sp, #20
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	460b      	mov	r3, r1
 8002452:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	695b      	ldr	r3, [r3, #20]
 8002458:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800245a:	887a      	ldrh	r2, [r7, #2]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	4013      	ands	r3, r2
 8002460:	041a      	lsls	r2, r3, #16
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	43d9      	mvns	r1, r3
 8002466:	887b      	ldrh	r3, [r7, #2]
 8002468:	400b      	ands	r3, r1
 800246a:	431a      	orrs	r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	619a      	str	r2, [r3, #24]
}
 8002470:	bf00      	nop
 8002472:	3714      	adds	r7, #20
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	4603      	mov	r3, r0
 8002484:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002486:	4b08      	ldr	r3, [pc, #32]	; (80024a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002488:	695a      	ldr	r2, [r3, #20]
 800248a:	88fb      	ldrh	r3, [r7, #6]
 800248c:	4013      	ands	r3, r2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d006      	beq.n	80024a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002492:	4a05      	ldr	r2, [pc, #20]	; (80024a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002494:	88fb      	ldrh	r3, [r7, #6]
 8002496:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002498:	88fb      	ldrh	r3, [r7, #6]
 800249a:	4618      	mov	r0, r3
 800249c:	f7fe fdf8 	bl	8001090 <HAL_GPIO_EXTI_Callback>
  }
}
 80024a0:	bf00      	nop
 80024a2:	3708      	adds	r7, #8
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	40010400 	.word	0x40010400

080024ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e08d      	b.n	80025da <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d106      	bne.n	80024d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f7ff f93a 	bl	800174c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2224      	movs	r2, #36	; 0x24
 80024dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f022 0201 	bic.w	r2, r2, #1
 80024ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685a      	ldr	r2, [r3, #4]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024fc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	689a      	ldr	r2, [r3, #8]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800250c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	2b01      	cmp	r3, #1
 8002514:	d107      	bne.n	8002526 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	689a      	ldr	r2, [r3, #8]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002522:	609a      	str	r2, [r3, #8]
 8002524:	e006      	b.n	8002534 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	689a      	ldr	r2, [r3, #8]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002532:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	2b02      	cmp	r3, #2
 800253a:	d108      	bne.n	800254e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	685a      	ldr	r2, [r3, #4]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800254a:	605a      	str	r2, [r3, #4]
 800254c:	e007      	b.n	800255e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	685a      	ldr	r2, [r3, #4]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800255c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	6812      	ldr	r2, [r2, #0]
 8002568:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800256c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002570:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68da      	ldr	r2, [r3, #12]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002580:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	691a      	ldr	r2, [r3, #16]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	695b      	ldr	r3, [r3, #20]
 800258a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	699b      	ldr	r3, [r3, #24]
 8002592:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	430a      	orrs	r2, r1
 800259a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	69d9      	ldr	r1, [r3, #28]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a1a      	ldr	r2, [r3, #32]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	430a      	orrs	r2, r1
 80025aa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f042 0201 	orr.w	r2, r2, #1
 80025ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2220      	movs	r2, #32
 80025c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
	...

080025e4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b088      	sub	sp, #32
 80025e8:	af02      	add	r7, sp, #8
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	4608      	mov	r0, r1
 80025ee:	4611      	mov	r1, r2
 80025f0:	461a      	mov	r2, r3
 80025f2:	4603      	mov	r3, r0
 80025f4:	817b      	strh	r3, [r7, #10]
 80025f6:	460b      	mov	r3, r1
 80025f8:	813b      	strh	r3, [r7, #8]
 80025fa:	4613      	mov	r3, r2
 80025fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002604:	b2db      	uxtb	r3, r3
 8002606:	2b20      	cmp	r3, #32
 8002608:	f040 80fd 	bne.w	8002806 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800260c:	6a3b      	ldr	r3, [r7, #32]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d002      	beq.n	8002618 <HAL_I2C_Mem_Read+0x34>
 8002612:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002614:	2b00      	cmp	r3, #0
 8002616:	d105      	bne.n	8002624 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800261e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e0f1      	b.n	8002808 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800262a:	2b01      	cmp	r3, #1
 800262c:	d101      	bne.n	8002632 <HAL_I2C_Mem_Read+0x4e>
 800262e:	2302      	movs	r3, #2
 8002630:	e0ea      	b.n	8002808 <HAL_I2C_Mem_Read+0x224>
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2201      	movs	r2, #1
 8002636:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800263a:	f7ff fb99 	bl	8001d70 <HAL_GetTick>
 800263e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	9300      	str	r3, [sp, #0]
 8002644:	2319      	movs	r3, #25
 8002646:	2201      	movs	r2, #1
 8002648:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800264c:	68f8      	ldr	r0, [r7, #12]
 800264e:	f001 fc6a 	bl	8003f26 <I2C_WaitOnFlagUntilTimeout>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e0d5      	b.n	8002808 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2222      	movs	r2, #34	; 0x22
 8002660:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2240      	movs	r2, #64	; 0x40
 8002668:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2200      	movs	r2, #0
 8002670:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6a3a      	ldr	r2, [r7, #32]
 8002676:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800267c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2200      	movs	r2, #0
 8002682:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002684:	88f8      	ldrh	r0, [r7, #6]
 8002686:	893a      	ldrh	r2, [r7, #8]
 8002688:	8979      	ldrh	r1, [r7, #10]
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	9301      	str	r3, [sp, #4]
 800268e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002690:	9300      	str	r3, [sp, #0]
 8002692:	4603      	mov	r3, r0
 8002694:	68f8      	ldr	r0, [r7, #12]
 8002696:	f000 ff4d 	bl	8003534 <I2C_RequestMemoryRead>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d005      	beq.n	80026ac <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e0ad      	b.n	8002808 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	2bff      	cmp	r3, #255	; 0xff
 80026b4:	d90e      	bls.n	80026d4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	22ff      	movs	r2, #255	; 0xff
 80026ba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c0:	b2da      	uxtb	r2, r3
 80026c2:	8979      	ldrh	r1, [r7, #10]
 80026c4:	4b52      	ldr	r3, [pc, #328]	; (8002810 <HAL_I2C_Mem_Read+0x22c>)
 80026c6:	9300      	str	r3, [sp, #0]
 80026c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026cc:	68f8      	ldr	r0, [r7, #12]
 80026ce:	f001 fde3 	bl	8004298 <I2C_TransferConfig>
 80026d2:	e00f      	b.n	80026f4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d8:	b29a      	uxth	r2, r3
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e2:	b2da      	uxtb	r2, r3
 80026e4:	8979      	ldrh	r1, [r7, #10]
 80026e6:	4b4a      	ldr	r3, [pc, #296]	; (8002810 <HAL_I2C_Mem_Read+0x22c>)
 80026e8:	9300      	str	r3, [sp, #0]
 80026ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026ee:	68f8      	ldr	r0, [r7, #12]
 80026f0:	f001 fdd2 	bl	8004298 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	9300      	str	r3, [sp, #0]
 80026f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026fa:	2200      	movs	r2, #0
 80026fc:	2104      	movs	r1, #4
 80026fe:	68f8      	ldr	r0, [r7, #12]
 8002700:	f001 fc11 	bl	8003f26 <I2C_WaitOnFlagUntilTimeout>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e07c      	b.n	8002808 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002718:	b2d2      	uxtb	r2, r2
 800271a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002720:	1c5a      	adds	r2, r3, #1
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800272a:	3b01      	subs	r3, #1
 800272c:	b29a      	uxth	r2, r3
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002736:	b29b      	uxth	r3, r3
 8002738:	3b01      	subs	r3, #1
 800273a:	b29a      	uxth	r2, r3
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002744:	b29b      	uxth	r3, r3
 8002746:	2b00      	cmp	r3, #0
 8002748:	d034      	beq.n	80027b4 <HAL_I2C_Mem_Read+0x1d0>
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800274e:	2b00      	cmp	r3, #0
 8002750:	d130      	bne.n	80027b4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	9300      	str	r3, [sp, #0]
 8002756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002758:	2200      	movs	r2, #0
 800275a:	2180      	movs	r1, #128	; 0x80
 800275c:	68f8      	ldr	r0, [r7, #12]
 800275e:	f001 fbe2 	bl	8003f26 <I2C_WaitOnFlagUntilTimeout>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d001      	beq.n	800276c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e04d      	b.n	8002808 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002770:	b29b      	uxth	r3, r3
 8002772:	2bff      	cmp	r3, #255	; 0xff
 8002774:	d90e      	bls.n	8002794 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	22ff      	movs	r2, #255	; 0xff
 800277a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002780:	b2da      	uxtb	r2, r3
 8002782:	8979      	ldrh	r1, [r7, #10]
 8002784:	2300      	movs	r3, #0
 8002786:	9300      	str	r3, [sp, #0]
 8002788:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800278c:	68f8      	ldr	r0, [r7, #12]
 800278e:	f001 fd83 	bl	8004298 <I2C_TransferConfig>
 8002792:	e00f      	b.n	80027b4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002798:	b29a      	uxth	r2, r3
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027a2:	b2da      	uxtb	r2, r3
 80027a4:	8979      	ldrh	r1, [r7, #10]
 80027a6:	2300      	movs	r3, #0
 80027a8:	9300      	str	r3, [sp, #0]
 80027aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027ae:	68f8      	ldr	r0, [r7, #12]
 80027b0:	f001 fd72 	bl	8004298 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d19a      	bne.n	80026f4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027be:	697a      	ldr	r2, [r7, #20]
 80027c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027c2:	68f8      	ldr	r0, [r7, #12]
 80027c4:	f001 fc45 	bl	8004052 <I2C_WaitOnSTOPFlagUntilTimeout>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d001      	beq.n	80027d2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e01a      	b.n	8002808 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2220      	movs	r2, #32
 80027d8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	6859      	ldr	r1, [r3, #4]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	4b0b      	ldr	r3, [pc, #44]	; (8002814 <HAL_I2C_Mem_Read+0x230>)
 80027e6:	400b      	ands	r3, r1
 80027e8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2220      	movs	r2, #32
 80027ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002802:	2300      	movs	r3, #0
 8002804:	e000      	b.n	8002808 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002806:	2302      	movs	r3, #2
  }
}
 8002808:	4618      	mov	r0, r3
 800280a:	3718      	adds	r7, #24
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	80002400 	.word	0x80002400
 8002814:	fe00e800 	.word	0xfe00e800

08002818 <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b086      	sub	sp, #24
 800281c:	af02      	add	r7, sp, #8
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	4608      	mov	r0, r1
 8002822:	4611      	mov	r1, r2
 8002824:	461a      	mov	r2, r3
 8002826:	4603      	mov	r3, r0
 8002828:	817b      	strh	r3, [r7, #10]
 800282a:	460b      	mov	r3, r1
 800282c:	813b      	strh	r3, [r7, #8]
 800282e:	4613      	mov	r3, r2
 8002830:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b20      	cmp	r3, #32
 800283c:	d16a      	bne.n	8002914 <HAL_I2C_Mem_Write_IT+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d002      	beq.n	800284a <HAL_I2C_Mem_Write_IT+0x32>
 8002844:	8bbb      	ldrh	r3, [r7, #28]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d105      	bne.n	8002856 <HAL_I2C_Mem_Write_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002850:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e05f      	b.n	8002916 <HAL_I2C_Mem_Write_IT+0xfe>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	699b      	ldr	r3, [r3, #24]
 800285c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002860:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002864:	d101      	bne.n	800286a <HAL_I2C_Mem_Write_IT+0x52>
    {
      return HAL_BUSY;
 8002866:	2302      	movs	r3, #2
 8002868:	e055      	b.n	8002916 <HAL_I2C_Mem_Write_IT+0xfe>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002870:	2b01      	cmp	r3, #1
 8002872:	d101      	bne.n	8002878 <HAL_I2C_Mem_Write_IT+0x60>
 8002874:	2302      	movs	r3, #2
 8002876:	e04e      	b.n	8002916 <HAL_I2C_Mem_Write_IT+0xfe>
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2221      	movs	r2, #33	; 0x21
 8002884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2240      	movs	r2, #64	; 0x40
 800288c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2200      	movs	r2, #0
 8002894:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->XferSize    = 0U;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2200      	movs	r2, #0
 800289a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->pBuffPtr    = pData;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	8bba      	ldrh	r2, [r7, #28]
 80028a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	4a1d      	ldr	r2, [pc, #116]	; (8002920 <HAL_I2C_Mem_Write_IT+0x108>)
 80028ac:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	4a1c      	ldr	r2, [pc, #112]	; (8002924 <HAL_I2C_Mem_Write_IT+0x10c>)
 80028b2:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->Devaddress  = DevAddress;
 80028b4:	897a      	ldrh	r2, [r7, #10]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80028ba:	88fb      	ldrh	r3, [r7, #6]
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d109      	bne.n	80028d4 <HAL_I2C_Mem_Write_IT+0xbc>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80028c0:	893b      	ldrh	r3, [r7, #8]
 80028c2:	b2da      	uxtb	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80028d0:	651a      	str	r2, [r3, #80]	; 0x50
 80028d2:	e00b      	b.n	80028ec <HAL_I2C_Mem_Write_IT+0xd4>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80028d4:	893b      	ldrh	r3, [r7, #8]
 80028d6:	0a1b      	lsrs	r3, r3, #8
 80028d8:	b29b      	uxth	r3, r3
 80028da:	b2da      	uxtb	r2, r3
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 80028e2:	893b      	ldrh	r3, [r7, #8]
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	461a      	mov	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80028ec:	88fb      	ldrh	r3, [r7, #6]
 80028ee:	b2da      	uxtb	r2, r3
 80028f0:	8979      	ldrh	r1, [r7, #10]
 80028f2:	4b0d      	ldr	r3, [pc, #52]	; (8002928 <HAL_I2C_Mem_Write_IT+0x110>)
 80028f4:	9300      	str	r3, [sp, #0]
 80028f6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	f001 fccc 	bl	8004298 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2200      	movs	r2, #0
 8002904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002908:	2101      	movs	r1, #1
 800290a:	68f8      	ldr	r0, [r7, #12]
 800290c:	f001 fcf6 	bl	80042fc <I2C_Enable_IRQ>

    return HAL_OK;
 8002910:	2300      	movs	r3, #0
 8002912:	e000      	b.n	8002916 <HAL_I2C_Mem_Write_IT+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002914:	2302      	movs	r3, #2
  }
}
 8002916:	4618      	mov	r0, r3
 8002918:	3710      	adds	r7, #16
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	ffff0000 	.word	0xffff0000
 8002924:	08002b29 	.word	0x08002b29
 8002928:	80002000 	.word	0x80002000

0800292c <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af02      	add	r7, sp, #8
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	4608      	mov	r0, r1
 8002936:	4611      	mov	r1, r2
 8002938:	461a      	mov	r2, r3
 800293a:	4603      	mov	r3, r0
 800293c:	817b      	strh	r3, [r7, #10]
 800293e:	460b      	mov	r3, r1
 8002940:	813b      	strh	r3, [r7, #8]
 8002942:	4613      	mov	r3, r2
 8002944:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2b20      	cmp	r3, #32
 8002950:	d166      	bne.n	8002a20 <HAL_I2C_Mem_Read_IT+0xf4>
  {
    if ((pData == NULL) || (Size == 0U))
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d002      	beq.n	800295e <HAL_I2C_Mem_Read_IT+0x32>
 8002958:	8bbb      	ldrh	r3, [r7, #28]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d105      	bne.n	800296a <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002964:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e05b      	b.n	8002a22 <HAL_I2C_Mem_Read_IT+0xf6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	699b      	ldr	r3, [r3, #24]
 8002970:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002974:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002978:	d101      	bne.n	800297e <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 800297a:	2302      	movs	r3, #2
 800297c:	e051      	b.n	8002a22 <HAL_I2C_Mem_Read_IT+0xf6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002984:	2b01      	cmp	r3, #1
 8002986:	d101      	bne.n	800298c <HAL_I2C_Mem_Read_IT+0x60>
 8002988:	2302      	movs	r3, #2
 800298a:	e04a      	b.n	8002a22 <HAL_I2C_Mem_Read_IT+0xf6>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2222      	movs	r2, #34	; 0x22
 8002998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2240      	movs	r2, #64	; 0x40
 80029a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2200      	movs	r2, #0
 80029a8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	8bba      	ldrh	r2, [r7, #28]
 80029b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	4a1c      	ldr	r2, [pc, #112]	; (8002a2c <HAL_I2C_Mem_Read_IT+0x100>)
 80029ba:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	4a1c      	ldr	r2, [pc, #112]	; (8002a30 <HAL_I2C_Mem_Read_IT+0x104>)
 80029c0:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->Devaddress  = DevAddress;
 80029c2:	897a      	ldrh	r2, [r7, #10]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80029c8:	88fb      	ldrh	r3, [r7, #6]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d109      	bne.n	80029e2 <HAL_I2C_Mem_Read_IT+0xb6>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80029ce:	893b      	ldrh	r3, [r7, #8]
 80029d0:	b2da      	uxtb	r2, r3
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80029de:	651a      	str	r2, [r3, #80]	; 0x50
 80029e0:	e00b      	b.n	80029fa <HAL_I2C_Mem_Read_IT+0xce>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80029e2:	893b      	ldrh	r3, [r7, #8]
 80029e4:	0a1b      	lsrs	r3, r3, #8
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	b2da      	uxtb	r2, r3
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	629a      	str	r2, [r3, #40]	; 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 80029f0:	893b      	ldrh	r3, [r7, #8]
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	461a      	mov	r2, r3
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80029fa:	88fb      	ldrh	r3, [r7, #6]
 80029fc:	b2da      	uxtb	r2, r3
 80029fe:	8979      	ldrh	r1, [r7, #10]
 8002a00:	4b0c      	ldr	r3, [pc, #48]	; (8002a34 <HAL_I2C_Mem_Read_IT+0x108>)
 8002a02:	9300      	str	r3, [sp, #0]
 8002a04:	2300      	movs	r3, #0
 8002a06:	68f8      	ldr	r0, [r7, #12]
 8002a08:	f001 fc46 	bl	8004298 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002a14:	2101      	movs	r1, #1
 8002a16:	68f8      	ldr	r0, [r7, #12]
 8002a18:	f001 fc70 	bl	80042fc <I2C_Enable_IRQ>

    return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	e000      	b.n	8002a22 <HAL_I2C_Mem_Read_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 8002a20:	2302      	movs	r3, #2
  }
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3710      	adds	r7, #16
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	ffff0000 	.word	0xffff0000
 8002a30:	08002b29 	.word	0x08002b29
 8002a34:	80002000 	.word	0x80002000

08002a38 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	699b      	ldr	r3, [r3, #24]
 8002a46:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d005      	beq.n	8002a64 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a5c:	68ba      	ldr	r2, [r7, #8]
 8002a5e:	68f9      	ldr	r1, [r7, #12]
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	4798      	blx	r3
  }
}
 8002a64:	bf00      	nop
 8002a66:	3710      	adds	r7, #16
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002a74:	bf00      	nop
 8002a76:	370c      	adds	r7, #12
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002a88:	bf00      	nop
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002a9c:	bf00      	nop
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002ab0:	bf00      	nop
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	70fb      	strb	r3, [r7, #3]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002acc:	bf00      	nop
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002ae0:	bf00      	nop
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002af4:	bf00      	nop
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002b08:	bf00      	nop
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                        uint32_t ITSources)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b088      	sub	sp, #32
 8002b2c:	af02      	add	r7, sp, #8
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8002b34:	4b8d      	ldr	r3, [pc, #564]	; (8002d6c <I2C_Mem_ISR_IT+0x244>)
 8002b36:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d101      	bne.n	8002b4a <I2C_Mem_ISR_IT+0x22>
 8002b46:	2302      	movs	r3, #2
 8002b48:	e10c      	b.n	8002d64 <I2C_Mem_ISR_IT+0x23c>
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	f003 0310 	and.w	r3, r3, #16
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d012      	beq.n	8002b82 <I2C_Mem_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00d      	beq.n	8002b82 <I2C_Mem_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2210      	movs	r2, #16
 8002b6c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b72:	f043 0204 	orr.w	r2, r3, #4
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	f001 f991 	bl	8003ea2 <I2C_Flush_TXDR>
 8002b80:	e0dd      	b.n	8002d3e <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	f003 0304 	and.w	r3, r3, #4
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d022      	beq.n	8002bd2 <I2C_Mem_ISR_IT+0xaa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d01d      	beq.n	8002bd2 <I2C_Mem_ISR_IT+0xaa>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	f023 0304 	bic.w	r3, r3, #4
 8002b9c:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba8:	b2d2      	uxtb	r2, r2
 8002baa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb0:	1c5a      	adds	r2, r3, #1
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	b29a      	uxth	r2, r3
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	3b01      	subs	r3, #1
 8002bca:	b29a      	uxth	r2, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002bd0:	e0b5      	b.n	8002d3e <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	f003 0302 	and.w	r3, r3, #2
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d02c      	beq.n	8002c36 <I2C_Mem_ISR_IT+0x10e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d027      	beq.n	8002c36 <I2C_Mem_ISR_IT+0x10e>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bee:	d118      	bne.n	8002c22 <I2C_Mem_ISR_IT+0xfa>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf4:	781a      	ldrb	r2, [r3, #0]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c00:	1c5a      	adds	r2, r3, #1
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	b29a      	uxth	r2, r3
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8002c20:	e08d      	b.n	8002d3e <I2C_Mem_ISR_IT+0x216>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68fa      	ldr	r2, [r7, #12]
 8002c28:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002c2a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c32:	651a      	str	r2, [r3, #80]	; 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8002c34:	e083      	b.n	8002d3e <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d03c      	beq.n	8002cba <I2C_Mem_ISR_IT+0x192>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d037      	beq.n	8002cba <I2C_Mem_ISR_IT+0x192>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d02c      	beq.n	8002cae <I2C_Mem_ISR_IT+0x186>
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d128      	bne.n	8002cae <I2C_Mem_ISR_IT+0x186>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	2bff      	cmp	r3, #255	; 0xff
 8002c64:	d910      	bls.n	8002c88 <I2C_Mem_ISR_IT+0x160>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	22ff      	movs	r2, #255	; 0xff
 8002c6a:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c70:	b299      	uxth	r1, r3
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c76:	b2da      	uxtb	r2, r3
 8002c78:	2300      	movs	r3, #0
 8002c7a:	9300      	str	r3, [sp, #0]
 8002c7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c80:	68f8      	ldr	r0, [r7, #12]
 8002c82:	f001 fb09 	bl	8004298 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c86:	e017      	b.n	8002cb8 <I2C_Mem_ISR_IT+0x190>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c8c:	b29a      	uxth	r2, r3
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c96:	b299      	uxth	r1, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c9c:	b2da      	uxtb	r2, r3
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	9300      	str	r3, [sp, #0]
 8002ca2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ca6:	68f8      	ldr	r0, [r7, #12]
 8002ca8:	f001 faf6 	bl	8004298 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cac:	e004      	b.n	8002cb8 <I2C_Mem_ISR_IT+0x190>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002cae:	2140      	movs	r1, #64	; 0x40
 8002cb0:	68f8      	ldr	r0, [r7, #12]
 8002cb2:	f000 ffdf 	bl	8003c74 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002cb6:	e042      	b.n	8002d3e <I2C_Mem_ISR_IT+0x216>
 8002cb8:	e041      	b.n	8002d3e <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d03c      	beq.n	8002d3e <I2C_Mem_ISR_IT+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d037      	beq.n	8002d3e <I2C_Mem_ISR_IT+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002cce:	2101      	movs	r1, #1
 8002cd0:	68f8      	ldr	r0, [r7, #12]
 8002cd2:	f001 fb97 	bl	8004404 <I2C_Disable_IRQ>

    /* Enable ERR, TC, STOP, NACK and RXI interrupts */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002cd6:	2102      	movs	r1, #2
 8002cd8:	68f8      	ldr	r0, [r7, #12]
 8002cda:	f001 fb0f 	bl	80042fc <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	2b22      	cmp	r3, #34	; 0x22
 8002ce8:	d101      	bne.n	8002cee <I2C_Mem_ISR_IT+0x1c6>
    {
      direction = I2C_GENERATE_START_READ;
 8002cea:	4b21      	ldr	r3, [pc, #132]	; (8002d70 <I2C_Mem_ISR_IT+0x248>)
 8002cec:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	2bff      	cmp	r3, #255	; 0xff
 8002cf6:	d910      	bls.n	8002d1a <I2C_Mem_ISR_IT+0x1f2>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	22ff      	movs	r2, #255	; 0xff
 8002cfc:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d02:	b299      	uxth	r1, r3
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d08:	b2da      	uxtb	r2, r3
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	9300      	str	r3, [sp, #0]
 8002d0e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d12:	68f8      	ldr	r0, [r7, #12]
 8002d14:	f001 fac0 	bl	8004298 <I2C_TransferConfig>
 8002d18:	e011      	b.n	8002d3e <I2C_Mem_ISR_IT+0x216>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d1e:	b29a      	uxth	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d28:	b299      	uxth	r1, r3
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d2e:	b2da      	uxtb	r2, r3
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	9300      	str	r3, [sp, #0]
 8002d34:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d38:	68f8      	ldr	r0, [r7, #12]
 8002d3a:	f001 faad 	bl	8004298 <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	f003 0320 	and.w	r3, r3, #32
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d008      	beq.n	8002d5a <I2C_Mem_ISR_IT+0x232>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d003      	beq.n	8002d5a <I2C_Mem_ISR_IT+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8002d52:	6939      	ldr	r1, [r7, #16]
 8002d54:	68f8      	ldr	r0, [r7, #12]
 8002d56:	f000 fd5f 	bl	8003818 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3718      	adds	r7, #24
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	80002000 	.word	0x80002000
 8002d70:	80002400 	.word	0x80002400

08002d74 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b086      	sub	sp, #24
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d84:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d101      	bne.n	8002d98 <I2C_Slave_ISR_IT+0x24>
 8002d94:	2302      	movs	r3, #2
 8002d96:	e0e1      	b.n	8002f5c <I2C_Slave_ISR_IT+0x1e8>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	f003 0320 	and.w	r3, r3, #32
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d008      	beq.n	8002dbc <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d003      	beq.n	8002dbc <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002db4:	6939      	ldr	r1, [r7, #16]
 8002db6:	68f8      	ldr	r0, [r7, #12]
 8002db8:	f000 fdf6 	bl	80039a8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	f003 0310 	and.w	r3, r3, #16
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d04b      	beq.n	8002e5e <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d046      	beq.n	8002e5e <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d128      	bne.n	8002e2c <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b28      	cmp	r3, #40	; 0x28
 8002de4:	d108      	bne.n	8002df8 <I2C_Slave_ISR_IT+0x84>
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002dec:	d104      	bne.n	8002df8 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002dee:	6939      	ldr	r1, [r7, #16]
 8002df0:	68f8      	ldr	r0, [r7, #12]
 8002df2:	f000 feeb 	bl	8003bcc <I2C_ITListenCplt>
 8002df6:	e031      	b.n	8002e5c <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	2b29      	cmp	r3, #41	; 0x29
 8002e02:	d10e      	bne.n	8002e22 <I2C_Slave_ISR_IT+0xae>
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e0a:	d00a      	beq.n	8002e22 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2210      	movs	r2, #16
 8002e12:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002e14:	68f8      	ldr	r0, [r7, #12]
 8002e16:	f001 f844 	bl	8003ea2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002e1a:	68f8      	ldr	r0, [r7, #12]
 8002e1c:	f000 fc9f 	bl	800375e <I2C_ITSlaveSeqCplt>
 8002e20:	e01c      	b.n	8002e5c <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2210      	movs	r2, #16
 8002e28:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002e2a:	e08f      	b.n	8002f4c <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2210      	movs	r2, #16
 8002e32:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e38:	f043 0204 	orr.w	r2, r3, #4
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d003      	beq.n	8002e4e <I2C_Slave_ISR_IT+0xda>
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e4c:	d17e      	bne.n	8002f4c <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e52:	4619      	mov	r1, r3
 8002e54:	68f8      	ldr	r0, [r7, #12]
 8002e56:	f000 ff0d 	bl	8003c74 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002e5a:	e077      	b.n	8002f4c <I2C_Slave_ISR_IT+0x1d8>
 8002e5c:	e076      	b.n	8002f4c <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	f003 0304 	and.w	r3, r3, #4
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d02f      	beq.n	8002ec8 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d02a      	beq.n	8002ec8 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d018      	beq.n	8002eae <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e86:	b2d2      	uxtb	r2, r2
 8002e88:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8e:	1c5a      	adds	r2, r3, #1
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e98:	3b01      	subs	r3, #1
 8002e9a:	b29a      	uxth	r2, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	b29a      	uxth	r2, r3
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d14b      	bne.n	8002f50 <I2C_Slave_ISR_IT+0x1dc>
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ebe:	d047      	beq.n	8002f50 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002ec0:	68f8      	ldr	r0, [r7, #12]
 8002ec2:	f000 fc4c 	bl	800375e <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002ec6:	e043      	b.n	8002f50 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	f003 0308 	and.w	r3, r3, #8
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d009      	beq.n	8002ee6 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d004      	beq.n	8002ee6 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002edc:	6939      	ldr	r1, [r7, #16]
 8002ede:	68f8      	ldr	r0, [r7, #12]
 8002ee0:	f000 fb7c 	bl	80035dc <I2C_ITAddrCplt>
 8002ee4:	e035      	b.n	8002f52 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	f003 0302 	and.w	r3, r3, #2
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d030      	beq.n	8002f52 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d02b      	beq.n	8002f52 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d018      	beq.n	8002f36 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f08:	781a      	ldrb	r2, [r3, #0]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f14:	1c5a      	adds	r2, r3, #1
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	3b01      	subs	r3, #1
 8002f22:	b29a      	uxth	r2, r3
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f2c:	3b01      	subs	r3, #1
 8002f2e:	b29a      	uxth	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	851a      	strh	r2, [r3, #40]	; 0x28
 8002f34:	e00d      	b.n	8002f52 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f3c:	d002      	beq.n	8002f44 <I2C_Slave_ISR_IT+0x1d0>
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d106      	bne.n	8002f52 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002f44:	68f8      	ldr	r0, [r7, #12]
 8002f46:	f000 fc0a 	bl	800375e <I2C_ITSlaveSeqCplt>
 8002f4a:	e002      	b.n	8002f52 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8002f4c:	bf00      	nop
 8002f4e:	e000      	b.n	8002f52 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8002f50:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3718      	adds	r7, #24
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b088      	sub	sp, #32
 8002f68:	af02      	add	r7, sp, #8
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d101      	bne.n	8002f7e <I2C_Master_ISR_DMA+0x1a>
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	e0d9      	b.n	8003132 <I2C_Master_ISR_DMA+0x1ce>
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2201      	movs	r2, #1
 8002f82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	f003 0310 	and.w	r3, r3, #16
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d016      	beq.n	8002fbe <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d011      	beq.n	8002fbe <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2210      	movs	r2, #16
 8002fa0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa6:	f043 0204 	orr.w	r2, r3, #4
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002fae:	2120      	movs	r1, #32
 8002fb0:	68f8      	ldr	r0, [r7, #12]
 8002fb2:	f001 f9a3 	bl	80042fc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002fb6:	68f8      	ldr	r0, [r7, #12]
 8002fb8:	f000 ff73 	bl	8003ea2 <I2C_Flush_TXDR>
 8002fbc:	e0b4      	b.n	8003128 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d071      	beq.n	80030ac <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d06c      	beq.n	80030ac <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fe0:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d04e      	beq.n	800308a <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ff8:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	2bff      	cmp	r3, #255	; 0xff
 8003002:	d906      	bls.n	8003012 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	22ff      	movs	r2, #255	; 0xff
 8003008:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800300a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800300e:	617b      	str	r3, [r7, #20]
 8003010:	e010      	b.n	8003034 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003016:	b29a      	uxth	r2, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003020:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003024:	d003      	beq.n	800302e <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302a:	617b      	str	r3, [r7, #20]
 800302c:	e002      	b.n	8003034 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800302e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003032:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003038:	b2da      	uxtb	r2, r3
 800303a:	8a79      	ldrh	r1, [r7, #18]
 800303c:	2300      	movs	r3, #0
 800303e:	9300      	str	r3, [sp, #0]
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	68f8      	ldr	r0, [r7, #12]
 8003044:	f001 f928 	bl	8004298 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800304c:	b29a      	uxth	r2, r3
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	b29a      	uxth	r2, r3
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b22      	cmp	r3, #34	; 0x22
 8003064:	d108      	bne.n	8003078 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003074:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003076:	e057      	b.n	8003128 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003086:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003088:	e04e      	b.n	8003128 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003094:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003098:	d003      	beq.n	80030a2 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800309a:	68f8      	ldr	r0, [r7, #12]
 800309c:	f000 fb22 	bl	80036e4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80030a0:	e042      	b.n	8003128 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80030a2:	2140      	movs	r1, #64	; 0x40
 80030a4:	68f8      	ldr	r0, [r7, #12]
 80030a6:	f000 fde5 	bl	8003c74 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80030aa:	e03d      	b.n	8003128 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d028      	beq.n	8003108 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d023      	beq.n	8003108 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d119      	bne.n	80030fe <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80030d8:	d025      	beq.n	8003126 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030de:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80030e2:	d108      	bne.n	80030f6 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	685a      	ldr	r2, [r3, #4]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030f2:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80030f4:	e017      	b.n	8003126 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80030f6:	68f8      	ldr	r0, [r7, #12]
 80030f8:	f000 faf4 	bl	80036e4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80030fc:	e013      	b.n	8003126 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80030fe:	2140      	movs	r1, #64	; 0x40
 8003100:	68f8      	ldr	r0, [r7, #12]
 8003102:	f000 fdb7 	bl	8003c74 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003106:	e00e      	b.n	8003126 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	f003 0320 	and.w	r3, r3, #32
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00a      	beq.n	8003128 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003118:	2b00      	cmp	r3, #0
 800311a:	d005      	beq.n	8003128 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800311c:	68b9      	ldr	r1, [r7, #8]
 800311e:	68f8      	ldr	r0, [r7, #12]
 8003120:	f000 fb7a 	bl	8003818 <I2C_ITMasterCplt>
 8003124:	e000      	b.n	8003128 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8003126:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	3718      	adds	r7, #24
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
	...

0800313c <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b088      	sub	sp, #32
 8003140:	af02      	add	r7, sp, #8
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8003148:	4b8d      	ldr	r3, [pc, #564]	; (8003380 <I2C_Mem_ISR_DMA+0x244>)
 800314a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003152:	2b01      	cmp	r3, #1
 8003154:	d101      	bne.n	800315a <I2C_Mem_ISR_DMA+0x1e>
 8003156:	2302      	movs	r3, #2
 8003158:	e10e      	b.n	8003378 <I2C_Mem_ISR_DMA+0x23c>
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2201      	movs	r2, #1
 800315e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	f003 0310 	and.w	r3, r3, #16
 8003168:	2b00      	cmp	r3, #0
 800316a:	d016      	beq.n	800319a <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003172:	2b00      	cmp	r3, #0
 8003174:	d011      	beq.n	800319a <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2210      	movs	r2, #16
 800317c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003182:	f043 0204 	orr.w	r2, r3, #4
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800318a:	2120      	movs	r1, #32
 800318c:	68f8      	ldr	r0, [r7, #12]
 800318e:	f001 f8b5 	bl	80042fc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003192:	68f8      	ldr	r0, [r7, #12]
 8003194:	f000 fe85 	bl	8003ea2 <I2C_Flush_TXDR>
 8003198:	e0e9      	b.n	800336e <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	f003 0302 	and.w	r3, r3, #2
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d00e      	beq.n	80031c2 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d009      	beq.n	80031c2 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	68fa      	ldr	r2, [r7, #12]
 80031b4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80031b6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80031be:	651a      	str	r2, [r3, #80]	; 0x50
 80031c0:	e0d5      	b.n	800336e <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d05f      	beq.n	800328c <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d05a      	beq.n	800328c <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80031d6:	2101      	movs	r1, #1
 80031d8:	68f8      	ldr	r0, [r7, #12]
 80031da:	f001 f913 	bl	8004404 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80031de:	2110      	movs	r1, #16
 80031e0:	68f8      	ldr	r0, [r7, #12]
 80031e2:	f001 f88b 	bl	80042fc <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d048      	beq.n	8003282 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	2bff      	cmp	r3, #255	; 0xff
 80031f8:	d910      	bls.n	800321c <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	22ff      	movs	r2, #255	; 0xff
 80031fe:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003204:	b299      	uxth	r1, r3
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800320a:	b2da      	uxtb	r2, r3
 800320c:	2300      	movs	r3, #0
 800320e:	9300      	str	r3, [sp, #0]
 8003210:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003214:	68f8      	ldr	r0, [r7, #12]
 8003216:	f001 f83f 	bl	8004298 <I2C_TransferConfig>
 800321a:	e011      	b.n	8003240 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003220:	b29a      	uxth	r2, r3
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800322a:	b299      	uxth	r1, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003230:	b2da      	uxtb	r2, r3
 8003232:	2300      	movs	r3, #0
 8003234:	9300      	str	r3, [sp, #0]
 8003236:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800323a:	68f8      	ldr	r0, [r7, #12]
 800323c:	f001 f82c 	bl	8004298 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003244:	b29a      	uxth	r2, r3
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	b29a      	uxth	r2, r3
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b22      	cmp	r3, #34	; 0x22
 800325c:	d108      	bne.n	8003270 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800326c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800326e:	e07e      	b.n	800336e <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800327e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003280:	e075      	b.n	800336e <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003282:	2140      	movs	r1, #64	; 0x40
 8003284:	68f8      	ldr	r0, [r7, #12]
 8003286:	f000 fcf5 	bl	8003c74 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800328a:	e070      	b.n	800336e <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003292:	2b00      	cmp	r3, #0
 8003294:	d05d      	beq.n	8003352 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800329c:	2b00      	cmp	r3, #0
 800329e:	d058      	beq.n	8003352 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80032a0:	2101      	movs	r1, #1
 80032a2:	68f8      	ldr	r0, [r7, #12]
 80032a4:	f001 f8ae 	bl	8004404 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80032a8:	2110      	movs	r1, #16
 80032aa:	68f8      	ldr	r0, [r7, #12]
 80032ac:	f001 f826 	bl	80042fc <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	2b22      	cmp	r3, #34	; 0x22
 80032ba:	d101      	bne.n	80032c0 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 80032bc:	4b31      	ldr	r3, [pc, #196]	; (8003384 <I2C_Mem_ISR_DMA+0x248>)
 80032be:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	2bff      	cmp	r3, #255	; 0xff
 80032c8:	d910      	bls.n	80032ec <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	22ff      	movs	r2, #255	; 0xff
 80032ce:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032d4:	b299      	uxth	r1, r3
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032da:	b2da      	uxtb	r2, r3
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	9300      	str	r3, [sp, #0]
 80032e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032e4:	68f8      	ldr	r0, [r7, #12]
 80032e6:	f000 ffd7 	bl	8004298 <I2C_TransferConfig>
 80032ea:	e011      	b.n	8003310 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032fa:	b299      	uxth	r1, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003300:	b2da      	uxtb	r2, r3
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	9300      	str	r3, [sp, #0]
 8003306:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800330a:	68f8      	ldr	r0, [r7, #12]
 800330c:	f000 ffc4 	bl	8004298 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003314:	b29a      	uxth	r2, r3
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	b29a      	uxth	r2, r3
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b22      	cmp	r3, #34	; 0x22
 800332c:	d108      	bne.n	8003340 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800333c:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800333e:	e016      	b.n	800336e <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800334e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003350:	e00d      	b.n	800336e <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	f003 0320 	and.w	r3, r3, #32
 8003358:	2b00      	cmp	r3, #0
 800335a:	d008      	beq.n	800336e <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003362:	2b00      	cmp	r3, #0
 8003364:	d003      	beq.n	800336e <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003366:	68b9      	ldr	r1, [r7, #8]
 8003368:	68f8      	ldr	r0, [r7, #12]
 800336a:	f000 fa55 	bl	8003818 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	3718      	adds	r7, #24
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	80002000 	.word	0x80002000
 8003384:	80002400 	.word	0x80002400

08003388 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b088      	sub	sp, #32
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	60b9      	str	r1, [r7, #8]
 8003392:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003398:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800339a:	2300      	movs	r3, #0
 800339c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d101      	bne.n	80033ac <I2C_Slave_ISR_DMA+0x24>
 80033a8:	2302      	movs	r3, #2
 80033aa:	e0bf      	b.n	800352c <I2C_Slave_ISR_DMA+0x1a4>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	f003 0320 	and.w	r3, r3, #32
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d008      	beq.n	80033d0 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d003      	beq.n	80033d0 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80033c8:	68b9      	ldr	r1, [r7, #8]
 80033ca:	68f8      	ldr	r0, [r7, #12]
 80033cc:	f000 faec 	bl	80039a8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	f003 0310 	and.w	r3, r3, #16
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	f000 8095 	beq.w	8003506 <I2C_Slave_ISR_DMA+0x17e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	f000 808f 	beq.w	8003506 <I2C_Slave_ISR_DMA+0x17e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d104      	bne.n	80033fc <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d07d      	beq.n	80034f8 <I2C_Slave_ISR_DMA+0x170>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003400:	2b00      	cmp	r3, #0
 8003402:	d00c      	beq.n	800341e <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d007      	beq.n	800341e <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 800341a:	2301      	movs	r3, #1
 800341c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00c      	beq.n	8003440 <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d007      	beq.n	8003440 <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d101      	bne.n	8003440 <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 800343c:	2301      	movs	r3, #1
 800343e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d128      	bne.n	8003498 <I2C_Slave_ISR_DMA+0x110>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800344c:	b2db      	uxtb	r3, r3
 800344e:	2b28      	cmp	r3, #40	; 0x28
 8003450:	d108      	bne.n	8003464 <I2C_Slave_ISR_DMA+0xdc>
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003458:	d104      	bne.n	8003464 <I2C_Slave_ISR_DMA+0xdc>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800345a:	68b9      	ldr	r1, [r7, #8]
 800345c:	68f8      	ldr	r0, [r7, #12]
 800345e:	f000 fbb5 	bl	8003bcc <I2C_ITListenCplt>
 8003462:	e048      	b.n	80034f6 <I2C_Slave_ISR_DMA+0x16e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800346a:	b2db      	uxtb	r3, r3
 800346c:	2b29      	cmp	r3, #41	; 0x29
 800346e:	d10e      	bne.n	800348e <I2C_Slave_ISR_DMA+0x106>
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003476:	d00a      	beq.n	800348e <I2C_Slave_ISR_DMA+0x106>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2210      	movs	r2, #16
 800347e:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8003480:	68f8      	ldr	r0, [r7, #12]
 8003482:	f000 fd0e 	bl	8003ea2 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8003486:	68f8      	ldr	r0, [r7, #12]
 8003488:	f000 f969 	bl	800375e <I2C_ITSlaveSeqCplt>
 800348c:	e033      	b.n	80034f6 <I2C_Slave_ISR_DMA+0x16e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2210      	movs	r2, #16
 8003494:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8003496:	e034      	b.n	8003502 <I2C_Slave_ISR_DMA+0x17a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2210      	movs	r2, #16
 800349e:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a4:	f043 0204 	orr.w	r2, r3, #4
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034b2:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d003      	beq.n	80034c2 <I2C_Slave_ISR_DMA+0x13a>
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034c0:	d11f      	bne.n	8003502 <I2C_Slave_ISR_DMA+0x17a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80034c2:	7dfb      	ldrb	r3, [r7, #23]
 80034c4:	2b21      	cmp	r3, #33	; 0x21
 80034c6:	d002      	beq.n	80034ce <I2C_Slave_ISR_DMA+0x146>
 80034c8:	7dfb      	ldrb	r3, [r7, #23]
 80034ca:	2b29      	cmp	r3, #41	; 0x29
 80034cc:	d103      	bne.n	80034d6 <I2C_Slave_ISR_DMA+0x14e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2221      	movs	r2, #33	; 0x21
 80034d2:	631a      	str	r2, [r3, #48]	; 0x30
 80034d4:	e008      	b.n	80034e8 <I2C_Slave_ISR_DMA+0x160>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80034d6:	7dfb      	ldrb	r3, [r7, #23]
 80034d8:	2b22      	cmp	r3, #34	; 0x22
 80034da:	d002      	beq.n	80034e2 <I2C_Slave_ISR_DMA+0x15a>
 80034dc:	7dfb      	ldrb	r3, [r7, #23]
 80034de:	2b2a      	cmp	r3, #42	; 0x2a
 80034e0:	d102      	bne.n	80034e8 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2222      	movs	r2, #34	; 0x22
 80034e6:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ec:	4619      	mov	r1, r3
 80034ee:	68f8      	ldr	r0, [r7, #12]
 80034f0:	f000 fbc0 	bl	8003c74 <I2C_ITError>
      if (treatdmanack == 1U)
 80034f4:	e005      	b.n	8003502 <I2C_Slave_ISR_DMA+0x17a>
 80034f6:	e004      	b.n	8003502 <I2C_Slave_ISR_DMA+0x17a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2210      	movs	r2, #16
 80034fe:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003500:	e00f      	b.n	8003522 <I2C_Slave_ISR_DMA+0x19a>
      if (treatdmanack == 1U)
 8003502:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003504:	e00d      	b.n	8003522 <I2C_Slave_ISR_DMA+0x19a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	f003 0308 	and.w	r3, r3, #8
 800350c:	2b00      	cmp	r3, #0
 800350e:	d008      	beq.n	8003522 <I2C_Slave_ISR_DMA+0x19a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003516:	2b00      	cmp	r3, #0
 8003518:	d003      	beq.n	8003522 <I2C_Slave_ISR_DMA+0x19a>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800351a:	68b9      	ldr	r1, [r7, #8]
 800351c:	68f8      	ldr	r0, [r7, #12]
 800351e:	f000 f85d 	bl	80035dc <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800352a:	2300      	movs	r3, #0
}
 800352c:	4618      	mov	r0, r3
 800352e:	3720      	adds	r7, #32
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}

08003534 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b086      	sub	sp, #24
 8003538:	af02      	add	r7, sp, #8
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	4608      	mov	r0, r1
 800353e:	4611      	mov	r1, r2
 8003540:	461a      	mov	r2, r3
 8003542:	4603      	mov	r3, r0
 8003544:	817b      	strh	r3, [r7, #10]
 8003546:	460b      	mov	r3, r1
 8003548:	813b      	strh	r3, [r7, #8]
 800354a:	4613      	mov	r3, r2
 800354c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800354e:	88fb      	ldrh	r3, [r7, #6]
 8003550:	b2da      	uxtb	r2, r3
 8003552:	8979      	ldrh	r1, [r7, #10]
 8003554:	4b20      	ldr	r3, [pc, #128]	; (80035d8 <I2C_RequestMemoryRead+0xa4>)
 8003556:	9300      	str	r3, [sp, #0]
 8003558:	2300      	movs	r3, #0
 800355a:	68f8      	ldr	r0, [r7, #12]
 800355c:	f000 fe9c 	bl	8004298 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003560:	69fa      	ldr	r2, [r7, #28]
 8003562:	69b9      	ldr	r1, [r7, #24]
 8003564:	68f8      	ldr	r0, [r7, #12]
 8003566:	f000 fd2d 	bl	8003fc4 <I2C_WaitOnTXISFlagUntilTimeout>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d001      	beq.n	8003574 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e02c      	b.n	80035ce <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003574:	88fb      	ldrh	r3, [r7, #6]
 8003576:	2b01      	cmp	r3, #1
 8003578:	d105      	bne.n	8003586 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800357a:	893b      	ldrh	r3, [r7, #8]
 800357c:	b2da      	uxtb	r2, r3
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	629a      	str	r2, [r3, #40]	; 0x28
 8003584:	e015      	b.n	80035b2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003586:	893b      	ldrh	r3, [r7, #8]
 8003588:	0a1b      	lsrs	r3, r3, #8
 800358a:	b29b      	uxth	r3, r3
 800358c:	b2da      	uxtb	r2, r3
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003594:	69fa      	ldr	r2, [r7, #28]
 8003596:	69b9      	ldr	r1, [r7, #24]
 8003598:	68f8      	ldr	r0, [r7, #12]
 800359a:	f000 fd13 	bl	8003fc4 <I2C_WaitOnTXISFlagUntilTimeout>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d001      	beq.n	80035a8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e012      	b.n	80035ce <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80035a8:	893b      	ldrh	r3, [r7, #8]
 80035aa:	b2da      	uxtb	r2, r3
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	9300      	str	r3, [sp, #0]
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	2200      	movs	r2, #0
 80035ba:	2140      	movs	r1, #64	; 0x40
 80035bc:	68f8      	ldr	r0, [r7, #12]
 80035be:	f000 fcb2 	bl	8003f26 <I2C_WaitOnFlagUntilTimeout>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d001      	beq.n	80035cc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e000      	b.n	80035ce <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3710      	adds	r7, #16
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	80002000 	.word	0x80002000

080035dc <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80035f2:	2b28      	cmp	r3, #40	; 0x28
 80035f4:	d16a      	bne.n	80036cc <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	0c1b      	lsrs	r3, r3, #16
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	f003 0301 	and.w	r3, r3, #1
 8003604:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	699b      	ldr	r3, [r3, #24]
 800360c:	0c1b      	lsrs	r3, r3, #16
 800360e:	b29b      	uxth	r3, r3
 8003610:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003614:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	b29b      	uxth	r3, r3
 800361e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003622:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	b29b      	uxth	r3, r3
 800362c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003630:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	2b02      	cmp	r3, #2
 8003638:	d138      	bne.n	80036ac <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800363a:	897b      	ldrh	r3, [r7, #10]
 800363c:	09db      	lsrs	r3, r3, #7
 800363e:	b29a      	uxth	r2, r3
 8003640:	89bb      	ldrh	r3, [r7, #12]
 8003642:	4053      	eors	r3, r2
 8003644:	b29b      	uxth	r3, r3
 8003646:	f003 0306 	and.w	r3, r3, #6
 800364a:	2b00      	cmp	r3, #0
 800364c:	d11c      	bne.n	8003688 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800364e:	897b      	ldrh	r3, [r7, #10]
 8003650:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003656:	1c5a      	adds	r2, r3, #1
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003660:	2b02      	cmp	r3, #2
 8003662:	d13b      	bne.n	80036dc <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2208      	movs	r2, #8
 8003670:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800367a:	89ba      	ldrh	r2, [r7, #12]
 800367c:	7bfb      	ldrb	r3, [r7, #15]
 800367e:	4619      	mov	r1, r3
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f7ff fa1b 	bl	8002abc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003686:	e029      	b.n	80036dc <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003688:	893b      	ldrh	r3, [r7, #8]
 800368a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800368c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f000 feb7 	bl	8004404 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800369e:	89ba      	ldrh	r2, [r7, #12]
 80036a0:	7bfb      	ldrb	r3, [r7, #15]
 80036a2:	4619      	mov	r1, r3
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f7ff fa09 	bl	8002abc <HAL_I2C_AddrCallback>
}
 80036aa:	e017      	b.n	80036dc <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80036ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f000 fea7 	bl	8004404 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80036be:	89ba      	ldrh	r2, [r7, #12]
 80036c0:	7bfb      	ldrb	r3, [r7, #15]
 80036c2:	4619      	mov	r1, r3
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f7ff f9f9 	bl	8002abc <HAL_I2C_AddrCallback>
}
 80036ca:	e007      	b.n	80036dc <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2208      	movs	r2, #8
 80036d2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80036dc:	bf00      	nop
 80036de:	3710      	adds	r7, #16
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	2b21      	cmp	r3, #33	; 0x21
 80036fe:	d115      	bne.n	800372c <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2220      	movs	r2, #32
 8003704:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2211      	movs	r2, #17
 800370c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003714:	2101      	movs	r1, #1
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f000 fe74 	bl	8004404 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f7ff f9a1 	bl	8002a6c <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800372a:	e014      	b.n	8003756 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2220      	movs	r2, #32
 8003730:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2212      	movs	r2, #18
 8003738:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003740:	2102      	movs	r1, #2
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 fe5e 	bl	8004404 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f7ff f995 	bl	8002a80 <HAL_I2C_MasterRxCpltCallback>
}
 8003756:	bf00      	nop
 8003758:	3708      	adds	r7, #8
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}

0800375e <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800375e:	b580      	push	{r7, lr}
 8003760:	b084      	sub	sp, #16
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d008      	beq.n	8003792 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800378e:	601a      	str	r2, [r3, #0]
 8003790:	e00c      	b.n	80037ac <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d007      	beq.n	80037ac <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037aa:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	2b29      	cmp	r3, #41	; 0x29
 80037b6:	d112      	bne.n	80037de <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2228      	movs	r2, #40	; 0x28
 80037bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2221      	movs	r2, #33	; 0x21
 80037c4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80037c6:	2101      	movs	r1, #1
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 fe1b 	bl	8004404 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f7ff f95c 	bl	8002a94 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80037dc:	e017      	b.n	800380e <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	2b2a      	cmp	r3, #42	; 0x2a
 80037e8:	d111      	bne.n	800380e <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2228      	movs	r2, #40	; 0x28
 80037ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2222      	movs	r2, #34	; 0x22
 80037f6:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80037f8:	2102      	movs	r1, #2
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 fe02 	bl	8004404 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f7ff f94d 	bl	8002aa8 <HAL_I2C_SlaveRxCpltCallback>
}
 800380e:	bf00      	nop
 8003810:	3710      	adds	r7, #16
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
	...

08003818 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b086      	sub	sp, #24
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2220      	movs	r2, #32
 800382c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003834:	b2db      	uxtb	r3, r3
 8003836:	2b21      	cmp	r3, #33	; 0x21
 8003838:	d107      	bne.n	800384a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800383a:	2101      	movs	r1, #1
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f000 fde1 	bl	8004404 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2211      	movs	r2, #17
 8003846:	631a      	str	r2, [r3, #48]	; 0x30
 8003848:	e00c      	b.n	8003864 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003850:	b2db      	uxtb	r3, r3
 8003852:	2b22      	cmp	r3, #34	; 0x22
 8003854:	d106      	bne.n	8003864 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003856:	2102      	movs	r1, #2
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f000 fdd3 	bl	8004404 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2212      	movs	r2, #18
 8003862:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	6859      	ldr	r1, [r3, #4]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	4b4c      	ldr	r3, [pc, #304]	; (80039a0 <I2C_ITMasterCplt+0x188>)
 8003870:	400b      	ands	r3, r1
 8003872:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a49      	ldr	r2, [pc, #292]	; (80039a4 <I2C_ITMasterCplt+0x18c>)
 800387e:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	f003 0310 	and.w	r3, r3, #16
 8003886:	2b00      	cmp	r3, #0
 8003888:	d009      	beq.n	800389e <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2210      	movs	r2, #16
 8003890:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003896:	f043 0204 	orr.w	r2, r3, #4
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	2b60      	cmp	r3, #96	; 0x60
 80038a8:	d10a      	bne.n	80038c0 <I2C_ITMasterCplt+0xa8>
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	f003 0304 	and.w	r3, r3, #4
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d005      	beq.n	80038c0 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80038be:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f000 faee 	bl	8003ea2 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ca:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	2b60      	cmp	r3, #96	; 0x60
 80038d6:	d002      	beq.n	80038de <I2C_ITMasterCplt+0xc6>
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d006      	beq.n	80038ec <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e2:	4619      	mov	r1, r3
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f000 f9c5 	bl	8003c74 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80038ea:	e054      	b.n	8003996 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	2b21      	cmp	r3, #33	; 0x21
 80038f6:	d124      	bne.n	8003942 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2220      	movs	r2, #32
 80038fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b40      	cmp	r3, #64	; 0x40
 8003910:	d10b      	bne.n	800392a <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f7ff f8e2 	bl	8002aec <HAL_I2C_MemTxCpltCallback>
}
 8003928:	e035      	b.n	8003996 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f7ff f896 	bl	8002a6c <HAL_I2C_MasterTxCpltCallback>
}
 8003940:	e029      	b.n	8003996 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003948:	b2db      	uxtb	r3, r3
 800394a:	2b22      	cmp	r3, #34	; 0x22
 800394c:	d123      	bne.n	8003996 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2220      	movs	r2, #32
 8003952:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003962:	b2db      	uxtb	r3, r3
 8003964:	2b40      	cmp	r3, #64	; 0x40
 8003966:	d10b      	bne.n	8003980 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f7fd fb51 	bl	8001020 <HAL_I2C_MemRxCpltCallback>
}
 800397e:	e00a      	b.n	8003996 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f7ff f875 	bl	8002a80 <HAL_I2C_MasterRxCpltCallback>
}
 8003996:	bf00      	nop
 8003998:	3718      	adds	r7, #24
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	fe00e800 	.word	0xfe00e800
 80039a4:	ffff0000 	.word	0xffff0000

080039a8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b086      	sub	sp, #24
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039c4:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2220      	movs	r2, #32
 80039cc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80039ce:	7bfb      	ldrb	r3, [r7, #15]
 80039d0:	2b21      	cmp	r3, #33	; 0x21
 80039d2:	d002      	beq.n	80039da <I2C_ITSlaveCplt+0x32>
 80039d4:	7bfb      	ldrb	r3, [r7, #15]
 80039d6:	2b29      	cmp	r3, #41	; 0x29
 80039d8:	d108      	bne.n	80039ec <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80039da:	f248 0101 	movw	r1, #32769	; 0x8001
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f000 fd10 	bl	8004404 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2221      	movs	r2, #33	; 0x21
 80039e8:	631a      	str	r2, [r3, #48]	; 0x30
 80039ea:	e019      	b.n	8003a20 <I2C_ITSlaveCplt+0x78>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80039ec:	7bfb      	ldrb	r3, [r7, #15]
 80039ee:	2b22      	cmp	r3, #34	; 0x22
 80039f0:	d002      	beq.n	80039f8 <I2C_ITSlaveCplt+0x50>
 80039f2:	7bfb      	ldrb	r3, [r7, #15]
 80039f4:	2b2a      	cmp	r3, #42	; 0x2a
 80039f6:	d108      	bne.n	8003a0a <I2C_ITSlaveCplt+0x62>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80039f8:	f248 0102 	movw	r1, #32770	; 0x8002
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 fd01 	bl	8004404 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2222      	movs	r2, #34	; 0x22
 8003a06:	631a      	str	r2, [r3, #48]	; 0x30
 8003a08:	e00a      	b.n	8003a20 <I2C_ITSlaveCplt+0x78>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8003a0a:	7bfb      	ldrb	r3, [r7, #15]
 8003a0c:	2b28      	cmp	r3, #40	; 0x28
 8003a0e:	d107      	bne.n	8003a20 <I2C_ITSlaveCplt+0x78>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8003a10:	f248 0103 	movw	r1, #32771	; 0x8003
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f000 fcf5 	bl	8004404 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	685a      	ldr	r2, [r3, #4]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a2e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	6859      	ldr	r1, [r3, #4]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	4b62      	ldr	r3, [pc, #392]	; (8003bc4 <I2C_ITSlaveCplt+0x21c>)
 8003a3c:	400b      	ands	r3, r1
 8003a3e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f000 fa2e 	bl	8003ea2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d013      	beq.n	8003a78 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003a5e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d01f      	beq.n	8003aa8 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	b29a      	uxth	r2, r3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a76:	e017      	b.n	8003aa8 <I2C_ITSlaveCplt+0x100>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d012      	beq.n	8003aa8 <I2C_ITSlaveCplt+0x100>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a90:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d006      	beq.n	8003aa8 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	b29a      	uxth	r2, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	f003 0304 	and.w	r3, r3, #4
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d020      	beq.n	8003af4 <I2C_ITSlaveCplt+0x14c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	f023 0304 	bic.w	r3, r3, #4
 8003ab8:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac4:	b2d2      	uxtb	r2, r2
 8003ac6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003acc:	1c5a      	adds	r2, r3, #1
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00c      	beq.n	8003af4 <I2C_ITSlaveCplt+0x14c>
    {
      hi2c->XferSize--;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ade:	3b01      	subs	r3, #1
 8003ae0:	b29a      	uxth	r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	3b01      	subs	r3, #1
 8003aee:	b29a      	uxth	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d005      	beq.n	8003b0a <I2C_ITSlaveCplt+0x162>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b02:	f043 0204 	orr.w	r2, r3, #4
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d010      	beq.n	8003b42 <I2C_ITSlaveCplt+0x19a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b24:	4619      	mov	r1, r3
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 f8a4 	bl	8003c74 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	2b28      	cmp	r3, #40	; 0x28
 8003b36:	d141      	bne.n	8003bbc <I2C_ITSlaveCplt+0x214>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003b38:	6979      	ldr	r1, [r7, #20]
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 f846 	bl	8003bcc <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003b40:	e03c      	b.n	8003bbc <I2C_ITSlaveCplt+0x214>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b46:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b4a:	d014      	beq.n	8003b76 <I2C_ITSlaveCplt+0x1ce>
    I2C_ITSlaveSeqCplt(hi2c);
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f7ff fe06 	bl	800375e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a1c      	ldr	r2, [pc, #112]	; (8003bc8 <I2C_ITSlaveCplt+0x220>)
 8003b56:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2220      	movs	r2, #32
 8003b5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f7fe ffb2 	bl	8002ad8 <HAL_I2C_ListenCpltCallback>
}
 8003b74:	e022      	b.n	8003bbc <I2C_ITSlaveCplt+0x214>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	2b22      	cmp	r3, #34	; 0x22
 8003b80:	d10e      	bne.n	8003ba0 <I2C_ITSlaveCplt+0x1f8>
    hi2c->State = HAL_I2C_STATE_READY;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2220      	movs	r2, #32
 8003b86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f7fe ff85 	bl	8002aa8 <HAL_I2C_SlaveRxCpltCallback>
}
 8003b9e:	e00d      	b.n	8003bbc <I2C_ITSlaveCplt+0x214>
    hi2c->State = HAL_I2C_STATE_READY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2220      	movs	r2, #32
 8003ba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f7fe ff6c 	bl	8002a94 <HAL_I2C_SlaveTxCpltCallback>
}
 8003bbc:	bf00      	nop
 8003bbe:	3718      	adds	r7, #24
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	fe00e800 	.word	0xfe00e800
 8003bc8:	ffff0000 	.word	0xffff0000

08003bcc <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a25      	ldr	r2, [pc, #148]	; (8003c70 <I2C_ITListenCplt+0xa4>)
 8003bda:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2220      	movs	r2, #32
 8003be6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	f003 0304 	and.w	r3, r3, #4
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d022      	beq.n	8003c48 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0c:	b2d2      	uxtb	r2, r2
 8003c0e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c14:	1c5a      	adds	r2, r3, #1
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d012      	beq.n	8003c48 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c26:	3b01      	subs	r3, #1
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	3b01      	subs	r3, #1
 8003c36:	b29a      	uxth	r2, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c40:	f043 0204 	orr.w	r2, r3, #4
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003c48:	f248 0103 	movw	r1, #32771	; 0x8003
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f000 fbd9 	bl	8004404 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2210      	movs	r2, #16
 8003c58:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f7fe ff38 	bl	8002ad8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003c68:	bf00      	nop
 8003c6a:	3708      	adds	r7, #8
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	ffff0000 	.word	0xffff0000

08003c74 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c84:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a6d      	ldr	r2, [pc, #436]	; (8003e48 <I2C_ITError+0x1d4>)
 8003c92:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	431a      	orrs	r2, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003ca6:	7bfb      	ldrb	r3, [r7, #15]
 8003ca8:	2b28      	cmp	r3, #40	; 0x28
 8003caa:	d005      	beq.n	8003cb8 <I2C_ITError+0x44>
 8003cac:	7bfb      	ldrb	r3, [r7, #15]
 8003cae:	2b29      	cmp	r3, #41	; 0x29
 8003cb0:	d002      	beq.n	8003cb8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003cb2:	7bfb      	ldrb	r3, [r7, #15]
 8003cb4:	2b2a      	cmp	r3, #42	; 0x2a
 8003cb6:	d10b      	bne.n	8003cd0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003cb8:	2103      	movs	r1, #3
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f000 fba2 	bl	8004404 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2228      	movs	r2, #40	; 0x28
 8003cc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a60      	ldr	r2, [pc, #384]	; (8003e4c <I2C_ITError+0x1d8>)
 8003ccc:	635a      	str	r2, [r3, #52]	; 0x34
 8003cce:	e030      	b.n	8003d32 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003cd0:	f248 0103 	movw	r1, #32771	; 0x8003
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f000 fb95 	bl	8004404 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 f8e1 	bl	8003ea2 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	2b60      	cmp	r3, #96	; 0x60
 8003cea:	d01f      	beq.n	8003d2c <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2220      	movs	r2, #32
 8003cf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	699b      	ldr	r3, [r3, #24]
 8003cfa:	f003 0320 	and.w	r3, r3, #32
 8003cfe:	2b20      	cmp	r3, #32
 8003d00:	d114      	bne.n	8003d2c <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	699b      	ldr	r3, [r3, #24]
 8003d08:	f003 0310 	and.w	r3, r3, #16
 8003d0c:	2b10      	cmp	r3, #16
 8003d0e:	d109      	bne.n	8003d24 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2210      	movs	r2, #16
 8003d16:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d1c:	f043 0204 	orr.w	r2, r3, #4
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2220      	movs	r2, #32
 8003d2a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d36:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d039      	beq.n	8003db4 <I2C_ITError+0x140>
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	2b11      	cmp	r3, #17
 8003d44:	d002      	beq.n	8003d4c <I2C_ITError+0xd8>
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	2b21      	cmp	r3, #33	; 0x21
 8003d4a:	d133      	bne.n	8003db4 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d5a:	d107      	bne.n	8003d6c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003d6a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d70:	4618      	mov	r0, r3
 8003d72:	f7fe f999 	bl	80020a8 <HAL_DMA_GetState>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d017      	beq.n	8003dac <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d80:	4a33      	ldr	r2, [pc, #204]	; (8003e50 <I2C_ITError+0x1dc>)
 8003d82:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d90:	4618      	mov	r0, r3
 8003d92:	f7fe f948 	bl	8002026 <HAL_DMA_Abort_IT>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d04d      	beq.n	8003e38 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003da6:	4610      	mov	r0, r2
 8003da8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003daa:	e045      	b.n	8003e38 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f000 f851 	bl	8003e54 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003db2:	e041      	b.n	8003e38 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d039      	beq.n	8003e30 <I2C_ITError+0x1bc>
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	2b12      	cmp	r3, #18
 8003dc0:	d002      	beq.n	8003dc8 <I2C_ITError+0x154>
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	2b22      	cmp	r3, #34	; 0x22
 8003dc6:	d133      	bne.n	8003e30 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003dd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dd6:	d107      	bne.n	8003de8 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003de6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dec:	4618      	mov	r0, r3
 8003dee:	f7fe f95b 	bl	80020a8 <HAL_DMA_GetState>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d017      	beq.n	8003e28 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dfc:	4a14      	ldr	r2, [pc, #80]	; (8003e50 <I2C_ITError+0x1dc>)
 8003dfe:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7fe f90a 	bl	8002026 <HAL_DMA_Abort_IT>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d011      	beq.n	8003e3c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003e22:	4610      	mov	r0, r2
 8003e24:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003e26:	e009      	b.n	8003e3c <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f000 f813 	bl	8003e54 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003e2e:	e005      	b.n	8003e3c <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f000 f80f 	bl	8003e54 <I2C_TreatErrorCallback>
  }
}
 8003e36:	e002      	b.n	8003e3e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003e38:	bf00      	nop
 8003e3a:	e000      	b.n	8003e3e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003e3c:	bf00      	nop
}
 8003e3e:	bf00      	nop
 8003e40:	3710      	adds	r7, #16
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	ffff0000 	.word	0xffff0000
 8003e4c:	08002d75 	.word	0x08002d75
 8003e50:	08003eeb 	.word	0x08003eeb

08003e54 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	2b60      	cmp	r3, #96	; 0x60
 8003e66:	d10e      	bne.n	8003e86 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2220      	movs	r2, #32
 8003e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f7fe fe48 	bl	8002b14 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003e84:	e009      	b.n	8003e9a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f7fe fe33 	bl	8002b00 <HAL_I2C_ErrorCallback>
}
 8003e9a:	bf00      	nop
 8003e9c:	3708      	adds	r7, #8
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}

08003ea2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003ea2:	b480      	push	{r7}
 8003ea4:	b083      	sub	sp, #12
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	699b      	ldr	r3, [r3, #24]
 8003eb0:	f003 0302 	and.w	r3, r3, #2
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d103      	bne.n	8003ec0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	699b      	ldr	r3, [r3, #24]
 8003ec6:	f003 0301 	and.w	r3, r3, #1
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d007      	beq.n	8003ede <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	699a      	ldr	r2, [r3, #24]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f042 0201 	orr.w	r2, r2, #1
 8003edc:	619a      	str	r2, [r3, #24]
  }
}
 8003ede:	bf00      	nop
 8003ee0:	370c      	adds	r7, #12
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr

08003eea <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003eea:	b580      	push	{r7, lr}
 8003eec:	b084      	sub	sp, #16
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d003      	beq.n	8003f08 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f04:	2200      	movs	r2, #0
 8003f06:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d003      	beq.n	8003f18 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f14:	2200      	movs	r2, #0
 8003f16:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8003f18:	68f8      	ldr	r0, [r7, #12]
 8003f1a:	f7ff ff9b 	bl	8003e54 <I2C_TreatErrorCallback>
}
 8003f1e:	bf00      	nop
 8003f20:	3710      	adds	r7, #16
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}

08003f26 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003f26:	b580      	push	{r7, lr}
 8003f28:	b084      	sub	sp, #16
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	60f8      	str	r0, [r7, #12]
 8003f2e:	60b9      	str	r1, [r7, #8]
 8003f30:	603b      	str	r3, [r7, #0]
 8003f32:	4613      	mov	r3, r2
 8003f34:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f36:	e031      	b.n	8003f9c <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f3e:	d02d      	beq.n	8003f9c <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f40:	f7fd ff16 	bl	8001d70 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	683a      	ldr	r2, [r7, #0]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d302      	bcc.n	8003f56 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d122      	bne.n	8003f9c <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	699a      	ldr	r2, [r3, #24]
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	4013      	ands	r3, r2
 8003f60:	68ba      	ldr	r2, [r7, #8]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	bf0c      	ite	eq
 8003f66:	2301      	moveq	r3, #1
 8003f68:	2300      	movne	r3, #0
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	79fb      	ldrb	r3, [r7, #7]
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d113      	bne.n	8003f9c <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f78:	f043 0220 	orr.w	r2, r3, #32
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2220      	movs	r2, #32
 8003f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e00f      	b.n	8003fbc <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	699a      	ldr	r2, [r3, #24]
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	68ba      	ldr	r2, [r7, #8]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	bf0c      	ite	eq
 8003fac:	2301      	moveq	r3, #1
 8003fae:	2300      	movne	r3, #0
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	79fb      	ldrb	r3, [r7, #7]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d0be      	beq.n	8003f38 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fba:	2300      	movs	r3, #0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3710      	adds	r7, #16
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	60b9      	str	r1, [r7, #8]
 8003fce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003fd0:	e033      	b.n	800403a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	68b9      	ldr	r1, [r7, #8]
 8003fd6:	68f8      	ldr	r0, [r7, #12]
 8003fd8:	f000 f87e 	bl	80040d8 <I2C_IsErrorOccurred>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d001      	beq.n	8003fe6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e031      	b.n	800404a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fec:	d025      	beq.n	800403a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fee:	f7fd febf 	bl	8001d70 <HAL_GetTick>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	68ba      	ldr	r2, [r7, #8]
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d302      	bcc.n	8004004 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d11a      	bne.n	800403a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	f003 0302 	and.w	r3, r3, #2
 800400e:	2b02      	cmp	r3, #2
 8004010:	d013      	beq.n	800403a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004016:	f043 0220 	orr.w	r2, r3, #32
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2220      	movs	r2, #32
 8004022:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2200      	movs	r2, #0
 800402a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e007      	b.n	800404a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	699b      	ldr	r3, [r3, #24]
 8004040:	f003 0302 	and.w	r3, r3, #2
 8004044:	2b02      	cmp	r3, #2
 8004046:	d1c4      	bne.n	8003fd2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	3710      	adds	r7, #16
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}

08004052 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004052:	b580      	push	{r7, lr}
 8004054:	b084      	sub	sp, #16
 8004056:	af00      	add	r7, sp, #0
 8004058:	60f8      	str	r0, [r7, #12]
 800405a:	60b9      	str	r1, [r7, #8]
 800405c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800405e:	e02f      	b.n	80040c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	68b9      	ldr	r1, [r7, #8]
 8004064:	68f8      	ldr	r0, [r7, #12]
 8004066:	f000 f837 	bl	80040d8 <I2C_IsErrorOccurred>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d001      	beq.n	8004074 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e02d      	b.n	80040d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004074:	f7fd fe7c 	bl	8001d70 <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	68ba      	ldr	r2, [r7, #8]
 8004080:	429a      	cmp	r2, r3
 8004082:	d302      	bcc.n	800408a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d11a      	bne.n	80040c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	699b      	ldr	r3, [r3, #24]
 8004090:	f003 0320 	and.w	r3, r3, #32
 8004094:	2b20      	cmp	r3, #32
 8004096:	d013      	beq.n	80040c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800409c:	f043 0220 	orr.w	r2, r3, #32
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2220      	movs	r2, #32
 80040a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e007      	b.n	80040d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	f003 0320 	and.w	r3, r3, #32
 80040ca:	2b20      	cmp	r3, #32
 80040cc:	d1c8      	bne.n	8004060 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3710      	adds	r7, #16
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b08a      	sub	sp, #40	; 0x28
 80040dc:	af00      	add	r7, sp, #0
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040e4:	2300      	movs	r3, #0
 80040e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	699b      	ldr	r3, [r3, #24]
 80040f0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80040f2:	2300      	movs	r3, #0
 80040f4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	f003 0310 	and.w	r3, r3, #16
 8004100:	2b00      	cmp	r3, #0
 8004102:	d068      	beq.n	80041d6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2210      	movs	r2, #16
 800410a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800410c:	e049      	b.n	80041a2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004114:	d045      	beq.n	80041a2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004116:	f7fd fe2b 	bl	8001d70 <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	68ba      	ldr	r2, [r7, #8]
 8004122:	429a      	cmp	r2, r3
 8004124:	d302      	bcc.n	800412c <I2C_IsErrorOccurred+0x54>
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d13a      	bne.n	80041a2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004136:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800413e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	699b      	ldr	r3, [r3, #24]
 8004146:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800414a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800414e:	d121      	bne.n	8004194 <I2C_IsErrorOccurred+0xbc>
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004156:	d01d      	beq.n	8004194 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004158:	7cfb      	ldrb	r3, [r7, #19]
 800415a:	2b20      	cmp	r3, #32
 800415c:	d01a      	beq.n	8004194 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	685a      	ldr	r2, [r3, #4]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800416c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800416e:	f7fd fdff 	bl	8001d70 <HAL_GetTick>
 8004172:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004174:	e00e      	b.n	8004194 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004176:	f7fd fdfb 	bl	8001d70 <HAL_GetTick>
 800417a:	4602      	mov	r2, r0
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	2b19      	cmp	r3, #25
 8004182:	d907      	bls.n	8004194 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004184:	6a3b      	ldr	r3, [r7, #32]
 8004186:	f043 0320 	orr.w	r3, r3, #32
 800418a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8004192:	e006      	b.n	80041a2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	699b      	ldr	r3, [r3, #24]
 800419a:	f003 0320 	and.w	r3, r3, #32
 800419e:	2b20      	cmp	r3, #32
 80041a0:	d1e9      	bne.n	8004176 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	699b      	ldr	r3, [r3, #24]
 80041a8:	f003 0320 	and.w	r3, r3, #32
 80041ac:	2b20      	cmp	r3, #32
 80041ae:	d003      	beq.n	80041b8 <I2C_IsErrorOccurred+0xe0>
 80041b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d0aa      	beq.n	800410e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80041b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d103      	bne.n	80041c8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2220      	movs	r2, #32
 80041c6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80041c8:	6a3b      	ldr	r3, [r7, #32]
 80041ca:	f043 0304 	orr.w	r3, r3, #4
 80041ce:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	699b      	ldr	r3, [r3, #24]
 80041dc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80041de:	69bb      	ldr	r3, [r7, #24]
 80041e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d00b      	beq.n	8004200 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80041e8:	6a3b      	ldr	r3, [r7, #32]
 80041ea:	f043 0301 	orr.w	r3, r3, #1
 80041ee:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80041f8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004200:	69bb      	ldr	r3, [r7, #24]
 8004202:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004206:	2b00      	cmp	r3, #0
 8004208:	d00b      	beq.n	8004222 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800420a:	6a3b      	ldr	r3, [r7, #32]
 800420c:	f043 0308 	orr.w	r3, r3, #8
 8004210:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800421a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004228:	2b00      	cmp	r3, #0
 800422a:	d00b      	beq.n	8004244 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800422c:	6a3b      	ldr	r3, [r7, #32]
 800422e:	f043 0302 	orr.w	r3, r3, #2
 8004232:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f44f 7200 	mov.w	r2, #512	; 0x200
 800423c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004244:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004248:	2b00      	cmp	r3, #0
 800424a:	d01c      	beq.n	8004286 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800424c:	68f8      	ldr	r0, [r7, #12]
 800424e:	f7ff fe28 	bl	8003ea2 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	6859      	ldr	r1, [r3, #4]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	4b0d      	ldr	r3, [pc, #52]	; (8004294 <I2C_IsErrorOccurred+0x1bc>)
 800425e:	400b      	ands	r3, r1
 8004260:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004266:	6a3b      	ldr	r3, [r7, #32]
 8004268:	431a      	orrs	r2, r3
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2220      	movs	r2, #32
 8004272:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2200      	movs	r2, #0
 800427a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2200      	movs	r2, #0
 8004282:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004286:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800428a:	4618      	mov	r0, r3
 800428c:	3728      	adds	r7, #40	; 0x28
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	fe00e800 	.word	0xfe00e800

08004298 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004298:	b480      	push	{r7}
 800429a:	b087      	sub	sp, #28
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	607b      	str	r3, [r7, #4]
 80042a2:	460b      	mov	r3, r1
 80042a4:	817b      	strh	r3, [r7, #10]
 80042a6:	4613      	mov	r3, r2
 80042a8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80042aa:	897b      	ldrh	r3, [r7, #10]
 80042ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80042b0:	7a7b      	ldrb	r3, [r7, #9]
 80042b2:	041b      	lsls	r3, r3, #16
 80042b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80042b8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80042be:	6a3b      	ldr	r3, [r7, #32]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80042c6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	685a      	ldr	r2, [r3, #4]
 80042ce:	6a3b      	ldr	r3, [r7, #32]
 80042d0:	0d5b      	lsrs	r3, r3, #21
 80042d2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80042d6:	4b08      	ldr	r3, [pc, #32]	; (80042f8 <I2C_TransferConfig+0x60>)
 80042d8:	430b      	orrs	r3, r1
 80042da:	43db      	mvns	r3, r3
 80042dc:	ea02 0103 	and.w	r1, r2, r3
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	697a      	ldr	r2, [r7, #20]
 80042e6:	430a      	orrs	r2, r1
 80042e8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80042ea:	bf00      	nop
 80042ec:	371c      	adds	r7, #28
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr
 80042f6:	bf00      	nop
 80042f8:	03ff63ff 	.word	0x03ff63ff

080042fc <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b085      	sub	sp, #20
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	460b      	mov	r3, r1
 8004306:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004308:	2300      	movs	r3, #0
 800430a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004310:	4a39      	ldr	r2, [pc, #228]	; (80043f8 <I2C_Enable_IRQ+0xfc>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d032      	beq.n	800437c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800431a:	4a38      	ldr	r2, [pc, #224]	; (80043fc <I2C_Enable_IRQ+0x100>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d02d      	beq.n	800437c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8004324:	4a36      	ldr	r2, [pc, #216]	; (8004400 <I2C_Enable_IRQ+0x104>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d028      	beq.n	800437c <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800432a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800432e:	2b00      	cmp	r3, #0
 8004330:	da03      	bge.n	800433a <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004338:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800433a:	887b      	ldrh	r3, [r7, #2]
 800433c:	f003 0301 	and.w	r3, r3, #1
 8004340:	2b00      	cmp	r3, #0
 8004342:	d003      	beq.n	800434c <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800434a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800434c:	887b      	ldrh	r3, [r7, #2]
 800434e:	f003 0302 	and.w	r3, r3, #2
 8004352:	2b00      	cmp	r3, #0
 8004354:	d003      	beq.n	800435e <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800435c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800435e:	887b      	ldrh	r3, [r7, #2]
 8004360:	2b10      	cmp	r3, #16
 8004362:	d103      	bne.n	800436c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800436a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800436c:	887b      	ldrh	r3, [r7, #2]
 800436e:	2b20      	cmp	r3, #32
 8004370:	d133      	bne.n	80043da <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f043 0320 	orr.w	r3, r3, #32
 8004378:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800437a:	e02e      	b.n	80043da <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800437c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004380:	2b00      	cmp	r3, #0
 8004382:	da03      	bge.n	800438c <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800438a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800438c:	887b      	ldrh	r3, [r7, #2]
 800438e:	f003 0301 	and.w	r3, r3, #1
 8004392:	2b00      	cmp	r3, #0
 8004394:	d003      	beq.n	800439e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800439c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800439e:	887b      	ldrh	r3, [r7, #2]
 80043a0:	f003 0302 	and.w	r3, r3, #2
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d003      	beq.n	80043b0 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 80043ae:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80043b0:	887b      	ldrh	r3, [r7, #2]
 80043b2:	2b10      	cmp	r3, #16
 80043b4:	d103      	bne.n	80043be <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80043bc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80043be:	887b      	ldrh	r3, [r7, #2]
 80043c0:	2b20      	cmp	r3, #32
 80043c2:	d103      	bne.n	80043cc <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80043ca:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80043cc:	887b      	ldrh	r3, [r7, #2]
 80043ce:	2b40      	cmp	r3, #64	; 0x40
 80043d0:	d103      	bne.n	80043da <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043d8:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	6819      	ldr	r1, [r3, #0]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68fa      	ldr	r2, [r7, #12]
 80043e6:	430a      	orrs	r2, r1
 80043e8:	601a      	str	r2, [r3, #0]
}
 80043ea:	bf00      	nop
 80043ec:	3714      	adds	r7, #20
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	08002f65 	.word	0x08002f65
 80043fc:	08003389 	.word	0x08003389
 8004400:	0800313d 	.word	0x0800313d

08004404 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004404:	b480      	push	{r7}
 8004406:	b085      	sub	sp, #20
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	460b      	mov	r3, r1
 800440e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004410:	2300      	movs	r3, #0
 8004412:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004414:	887b      	ldrh	r3, [r7, #2]
 8004416:	f003 0301 	and.w	r3, r3, #1
 800441a:	2b00      	cmp	r3, #0
 800441c:	d00f      	beq.n	800443e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8004424:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800442c:	b2db      	uxtb	r3, r3
 800442e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004432:	2b28      	cmp	r3, #40	; 0x28
 8004434:	d003      	beq.n	800443e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800443c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800443e:	887b      	ldrh	r3, [r7, #2]
 8004440:	f003 0302 	and.w	r3, r3, #2
 8004444:	2b00      	cmp	r3, #0
 8004446:	d00f      	beq.n	8004468 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800444e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004456:	b2db      	uxtb	r3, r3
 8004458:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800445c:	2b28      	cmp	r3, #40	; 0x28
 800445e:	d003      	beq.n	8004468 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004466:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004468:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800446c:	2b00      	cmp	r3, #0
 800446e:	da03      	bge.n	8004478 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004476:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004478:	887b      	ldrh	r3, [r7, #2]
 800447a:	2b10      	cmp	r3, #16
 800447c:	d103      	bne.n	8004486 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004484:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004486:	887b      	ldrh	r3, [r7, #2]
 8004488:	2b20      	cmp	r3, #32
 800448a:	d103      	bne.n	8004494 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f043 0320 	orr.w	r3, r3, #32
 8004492:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004494:	887b      	ldrh	r3, [r7, #2]
 8004496:	2b40      	cmp	r3, #64	; 0x40
 8004498:	d103      	bne.n	80044a2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044a0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	6819      	ldr	r1, [r3, #0]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	43da      	mvns	r2, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	400a      	ands	r2, r1
 80044b2:	601a      	str	r2, [r3, #0]
}
 80044b4:	bf00      	nop
 80044b6:	3714      	adds	r7, #20
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr

080044c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	2b20      	cmp	r3, #32
 80044d4:	d138      	bne.n	8004548 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d101      	bne.n	80044e4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80044e0:	2302      	movs	r3, #2
 80044e2:	e032      	b.n	800454a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2224      	movs	r2, #36	; 0x24
 80044f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f022 0201 	bic.w	r2, r2, #1
 8004502:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004512:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	6819      	ldr	r1, [r3, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	683a      	ldr	r2, [r7, #0]
 8004520:	430a      	orrs	r2, r1
 8004522:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f042 0201 	orr.w	r2, r2, #1
 8004532:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2220      	movs	r2, #32
 8004538:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004544:	2300      	movs	r3, #0
 8004546:	e000      	b.n	800454a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004548:	2302      	movs	r3, #2
  }
}
 800454a:	4618      	mov	r0, r3
 800454c:	370c      	adds	r7, #12
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr

08004556 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004556:	b480      	push	{r7}
 8004558:	b085      	sub	sp, #20
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
 800455e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004566:	b2db      	uxtb	r3, r3
 8004568:	2b20      	cmp	r3, #32
 800456a:	d139      	bne.n	80045e0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004572:	2b01      	cmp	r3, #1
 8004574:	d101      	bne.n	800457a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004576:	2302      	movs	r3, #2
 8004578:	e033      	b.n	80045e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2201      	movs	r2, #1
 800457e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2224      	movs	r2, #36	; 0x24
 8004586:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f022 0201 	bic.w	r2, r2, #1
 8004598:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80045a8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	021b      	lsls	r3, r3, #8
 80045ae:	68fa      	ldr	r2, [r7, #12]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68fa      	ldr	r2, [r7, #12]
 80045ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f042 0201 	orr.w	r2, r2, #1
 80045ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2220      	movs	r2, #32
 80045d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80045dc:	2300      	movs	r3, #0
 80045de:	e000      	b.n	80045e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80045e0:	2302      	movs	r3, #2
  }
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3714      	adds	r7, #20
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr
	...

080045f0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80045f0:	b480      	push	{r7}
 80045f2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80045f4:	4b04      	ldr	r3, [pc, #16]	; (8004608 <HAL_PWREx_GetVoltageRange+0x18>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr
 8004606:	bf00      	nop
 8004608:	40007000 	.word	0x40007000

0800460c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800460c:	b480      	push	{r7}
 800460e:	b085      	sub	sp, #20
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800461a:	d130      	bne.n	800467e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800461c:	4b23      	ldr	r3, [pc, #140]	; (80046ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004624:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004628:	d038      	beq.n	800469c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800462a:	4b20      	ldr	r3, [pc, #128]	; (80046ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004632:	4a1e      	ldr	r2, [pc, #120]	; (80046ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004634:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004638:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800463a:	4b1d      	ldr	r3, [pc, #116]	; (80046b0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2232      	movs	r2, #50	; 0x32
 8004640:	fb02 f303 	mul.w	r3, r2, r3
 8004644:	4a1b      	ldr	r2, [pc, #108]	; (80046b4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004646:	fba2 2303 	umull	r2, r3, r2, r3
 800464a:	0c9b      	lsrs	r3, r3, #18
 800464c:	3301      	adds	r3, #1
 800464e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004650:	e002      	b.n	8004658 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	3b01      	subs	r3, #1
 8004656:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004658:	4b14      	ldr	r3, [pc, #80]	; (80046ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800465a:	695b      	ldr	r3, [r3, #20]
 800465c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004660:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004664:	d102      	bne.n	800466c <HAL_PWREx_ControlVoltageScaling+0x60>
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d1f2      	bne.n	8004652 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800466c:	4b0f      	ldr	r3, [pc, #60]	; (80046ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800466e:	695b      	ldr	r3, [r3, #20]
 8004670:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004674:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004678:	d110      	bne.n	800469c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e00f      	b.n	800469e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800467e:	4b0b      	ldr	r3, [pc, #44]	; (80046ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004686:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800468a:	d007      	beq.n	800469c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800468c:	4b07      	ldr	r3, [pc, #28]	; (80046ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004694:	4a05      	ldr	r2, [pc, #20]	; (80046ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004696:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800469a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3714      	adds	r7, #20
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	40007000 	.word	0x40007000
 80046b0:	20000000 	.word	0x20000000
 80046b4:	431bde83 	.word	0x431bde83

080046b8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b088      	sub	sp, #32
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d101      	bne.n	80046ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e3ca      	b.n	8004e60 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046ca:	4b97      	ldr	r3, [pc, #604]	; (8004928 <HAL_RCC_OscConfig+0x270>)
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	f003 030c 	and.w	r3, r3, #12
 80046d2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80046d4:	4b94      	ldr	r3, [pc, #592]	; (8004928 <HAL_RCC_OscConfig+0x270>)
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	f003 0303 	and.w	r3, r3, #3
 80046dc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0310 	and.w	r3, r3, #16
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	f000 80e4 	beq.w	80048b4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d007      	beq.n	8004702 <HAL_RCC_OscConfig+0x4a>
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	2b0c      	cmp	r3, #12
 80046f6:	f040 808b 	bne.w	8004810 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	f040 8087 	bne.w	8004810 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004702:	4b89      	ldr	r3, [pc, #548]	; (8004928 <HAL_RCC_OscConfig+0x270>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0302 	and.w	r3, r3, #2
 800470a:	2b00      	cmp	r3, #0
 800470c:	d005      	beq.n	800471a <HAL_RCC_OscConfig+0x62>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	699b      	ldr	r3, [r3, #24]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d101      	bne.n	800471a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e3a2      	b.n	8004e60 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a1a      	ldr	r2, [r3, #32]
 800471e:	4b82      	ldr	r3, [pc, #520]	; (8004928 <HAL_RCC_OscConfig+0x270>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 0308 	and.w	r3, r3, #8
 8004726:	2b00      	cmp	r3, #0
 8004728:	d004      	beq.n	8004734 <HAL_RCC_OscConfig+0x7c>
 800472a:	4b7f      	ldr	r3, [pc, #508]	; (8004928 <HAL_RCC_OscConfig+0x270>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004732:	e005      	b.n	8004740 <HAL_RCC_OscConfig+0x88>
 8004734:	4b7c      	ldr	r3, [pc, #496]	; (8004928 <HAL_RCC_OscConfig+0x270>)
 8004736:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800473a:	091b      	lsrs	r3, r3, #4
 800473c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004740:	4293      	cmp	r3, r2
 8004742:	d223      	bcs.n	800478c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6a1b      	ldr	r3, [r3, #32]
 8004748:	4618      	mov	r0, r3
 800474a:	f000 fd55 	bl	80051f8 <RCC_SetFlashLatencyFromMSIRange>
 800474e:	4603      	mov	r3, r0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d001      	beq.n	8004758 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e383      	b.n	8004e60 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004758:	4b73      	ldr	r3, [pc, #460]	; (8004928 <HAL_RCC_OscConfig+0x270>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a72      	ldr	r2, [pc, #456]	; (8004928 <HAL_RCC_OscConfig+0x270>)
 800475e:	f043 0308 	orr.w	r3, r3, #8
 8004762:	6013      	str	r3, [r2, #0]
 8004764:	4b70      	ldr	r3, [pc, #448]	; (8004928 <HAL_RCC_OscConfig+0x270>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a1b      	ldr	r3, [r3, #32]
 8004770:	496d      	ldr	r1, [pc, #436]	; (8004928 <HAL_RCC_OscConfig+0x270>)
 8004772:	4313      	orrs	r3, r2
 8004774:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004776:	4b6c      	ldr	r3, [pc, #432]	; (8004928 <HAL_RCC_OscConfig+0x270>)
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	69db      	ldr	r3, [r3, #28]
 8004782:	021b      	lsls	r3, r3, #8
 8004784:	4968      	ldr	r1, [pc, #416]	; (8004928 <HAL_RCC_OscConfig+0x270>)
 8004786:	4313      	orrs	r3, r2
 8004788:	604b      	str	r3, [r1, #4]
 800478a:	e025      	b.n	80047d8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800478c:	4b66      	ldr	r3, [pc, #408]	; (8004928 <HAL_RCC_OscConfig+0x270>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a65      	ldr	r2, [pc, #404]	; (8004928 <HAL_RCC_OscConfig+0x270>)
 8004792:	f043 0308 	orr.w	r3, r3, #8
 8004796:	6013      	str	r3, [r2, #0]
 8004798:	4b63      	ldr	r3, [pc, #396]	; (8004928 <HAL_RCC_OscConfig+0x270>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a1b      	ldr	r3, [r3, #32]
 80047a4:	4960      	ldr	r1, [pc, #384]	; (8004928 <HAL_RCC_OscConfig+0x270>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80047aa:	4b5f      	ldr	r3, [pc, #380]	; (8004928 <HAL_RCC_OscConfig+0x270>)
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	69db      	ldr	r3, [r3, #28]
 80047b6:	021b      	lsls	r3, r3, #8
 80047b8:	495b      	ldr	r1, [pc, #364]	; (8004928 <HAL_RCC_OscConfig+0x270>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80047be:	69bb      	ldr	r3, [r7, #24]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d109      	bne.n	80047d8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6a1b      	ldr	r3, [r3, #32]
 80047c8:	4618      	mov	r0, r3
 80047ca:	f000 fd15 	bl	80051f8 <RCC_SetFlashLatencyFromMSIRange>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d001      	beq.n	80047d8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e343      	b.n	8004e60 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80047d8:	f000 fc4a 	bl	8005070 <HAL_RCC_GetSysClockFreq>
 80047dc:	4602      	mov	r2, r0
 80047de:	4b52      	ldr	r3, [pc, #328]	; (8004928 <HAL_RCC_OscConfig+0x270>)
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	091b      	lsrs	r3, r3, #4
 80047e4:	f003 030f 	and.w	r3, r3, #15
 80047e8:	4950      	ldr	r1, [pc, #320]	; (800492c <HAL_RCC_OscConfig+0x274>)
 80047ea:	5ccb      	ldrb	r3, [r1, r3]
 80047ec:	f003 031f 	and.w	r3, r3, #31
 80047f0:	fa22 f303 	lsr.w	r3, r2, r3
 80047f4:	4a4e      	ldr	r2, [pc, #312]	; (8004930 <HAL_RCC_OscConfig+0x278>)
 80047f6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80047f8:	4b4e      	ldr	r3, [pc, #312]	; (8004934 <HAL_RCC_OscConfig+0x27c>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4618      	mov	r0, r3
 80047fe:	f7fd fa67 	bl	8001cd0 <HAL_InitTick>
 8004802:	4603      	mov	r3, r0
 8004804:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004806:	7bfb      	ldrb	r3, [r7, #15]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d052      	beq.n	80048b2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800480c:	7bfb      	ldrb	r3, [r7, #15]
 800480e:	e327      	b.n	8004e60 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	699b      	ldr	r3, [r3, #24]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d032      	beq.n	800487e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004818:	4b43      	ldr	r3, [pc, #268]	; (8004928 <HAL_RCC_OscConfig+0x270>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a42      	ldr	r2, [pc, #264]	; (8004928 <HAL_RCC_OscConfig+0x270>)
 800481e:	f043 0301 	orr.w	r3, r3, #1
 8004822:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004824:	f7fd faa4 	bl	8001d70 <HAL_GetTick>
 8004828:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800482a:	e008      	b.n	800483e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800482c:	f7fd faa0 	bl	8001d70 <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	2b02      	cmp	r3, #2
 8004838:	d901      	bls.n	800483e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e310      	b.n	8004e60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800483e:	4b3a      	ldr	r3, [pc, #232]	; (8004928 <HAL_RCC_OscConfig+0x270>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0302 	and.w	r3, r3, #2
 8004846:	2b00      	cmp	r3, #0
 8004848:	d0f0      	beq.n	800482c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800484a:	4b37      	ldr	r3, [pc, #220]	; (8004928 <HAL_RCC_OscConfig+0x270>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a36      	ldr	r2, [pc, #216]	; (8004928 <HAL_RCC_OscConfig+0x270>)
 8004850:	f043 0308 	orr.w	r3, r3, #8
 8004854:	6013      	str	r3, [r2, #0]
 8004856:	4b34      	ldr	r3, [pc, #208]	; (8004928 <HAL_RCC_OscConfig+0x270>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a1b      	ldr	r3, [r3, #32]
 8004862:	4931      	ldr	r1, [pc, #196]	; (8004928 <HAL_RCC_OscConfig+0x270>)
 8004864:	4313      	orrs	r3, r2
 8004866:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004868:	4b2f      	ldr	r3, [pc, #188]	; (8004928 <HAL_RCC_OscConfig+0x270>)
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	69db      	ldr	r3, [r3, #28]
 8004874:	021b      	lsls	r3, r3, #8
 8004876:	492c      	ldr	r1, [pc, #176]	; (8004928 <HAL_RCC_OscConfig+0x270>)
 8004878:	4313      	orrs	r3, r2
 800487a:	604b      	str	r3, [r1, #4]
 800487c:	e01a      	b.n	80048b4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800487e:	4b2a      	ldr	r3, [pc, #168]	; (8004928 <HAL_RCC_OscConfig+0x270>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a29      	ldr	r2, [pc, #164]	; (8004928 <HAL_RCC_OscConfig+0x270>)
 8004884:	f023 0301 	bic.w	r3, r3, #1
 8004888:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800488a:	f7fd fa71 	bl	8001d70 <HAL_GetTick>
 800488e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004890:	e008      	b.n	80048a4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004892:	f7fd fa6d 	bl	8001d70 <HAL_GetTick>
 8004896:	4602      	mov	r2, r0
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	2b02      	cmp	r3, #2
 800489e:	d901      	bls.n	80048a4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80048a0:	2303      	movs	r3, #3
 80048a2:	e2dd      	b.n	8004e60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80048a4:	4b20      	ldr	r3, [pc, #128]	; (8004928 <HAL_RCC_OscConfig+0x270>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0302 	and.w	r3, r3, #2
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d1f0      	bne.n	8004892 <HAL_RCC_OscConfig+0x1da>
 80048b0:	e000      	b.n	80048b4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80048b2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0301 	and.w	r3, r3, #1
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d074      	beq.n	80049aa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80048c0:	69bb      	ldr	r3, [r7, #24]
 80048c2:	2b08      	cmp	r3, #8
 80048c4:	d005      	beq.n	80048d2 <HAL_RCC_OscConfig+0x21a>
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	2b0c      	cmp	r3, #12
 80048ca:	d10e      	bne.n	80048ea <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	2b03      	cmp	r3, #3
 80048d0:	d10b      	bne.n	80048ea <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048d2:	4b15      	ldr	r3, [pc, #84]	; (8004928 <HAL_RCC_OscConfig+0x270>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d064      	beq.n	80049a8 <HAL_RCC_OscConfig+0x2f0>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d160      	bne.n	80049a8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e2ba      	b.n	8004e60 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048f2:	d106      	bne.n	8004902 <HAL_RCC_OscConfig+0x24a>
 80048f4:	4b0c      	ldr	r3, [pc, #48]	; (8004928 <HAL_RCC_OscConfig+0x270>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a0b      	ldr	r2, [pc, #44]	; (8004928 <HAL_RCC_OscConfig+0x270>)
 80048fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048fe:	6013      	str	r3, [r2, #0]
 8004900:	e026      	b.n	8004950 <HAL_RCC_OscConfig+0x298>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800490a:	d115      	bne.n	8004938 <HAL_RCC_OscConfig+0x280>
 800490c:	4b06      	ldr	r3, [pc, #24]	; (8004928 <HAL_RCC_OscConfig+0x270>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a05      	ldr	r2, [pc, #20]	; (8004928 <HAL_RCC_OscConfig+0x270>)
 8004912:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004916:	6013      	str	r3, [r2, #0]
 8004918:	4b03      	ldr	r3, [pc, #12]	; (8004928 <HAL_RCC_OscConfig+0x270>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a02      	ldr	r2, [pc, #8]	; (8004928 <HAL_RCC_OscConfig+0x270>)
 800491e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004922:	6013      	str	r3, [r2, #0]
 8004924:	e014      	b.n	8004950 <HAL_RCC_OscConfig+0x298>
 8004926:	bf00      	nop
 8004928:	40021000 	.word	0x40021000
 800492c:	0800c1e0 	.word	0x0800c1e0
 8004930:	20000000 	.word	0x20000000
 8004934:	20000004 	.word	0x20000004
 8004938:	4ba0      	ldr	r3, [pc, #640]	; (8004bbc <HAL_RCC_OscConfig+0x504>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a9f      	ldr	r2, [pc, #636]	; (8004bbc <HAL_RCC_OscConfig+0x504>)
 800493e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004942:	6013      	str	r3, [r2, #0]
 8004944:	4b9d      	ldr	r3, [pc, #628]	; (8004bbc <HAL_RCC_OscConfig+0x504>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a9c      	ldr	r2, [pc, #624]	; (8004bbc <HAL_RCC_OscConfig+0x504>)
 800494a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800494e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d013      	beq.n	8004980 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004958:	f7fd fa0a 	bl	8001d70 <HAL_GetTick>
 800495c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800495e:	e008      	b.n	8004972 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004960:	f7fd fa06 	bl	8001d70 <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	2b64      	cmp	r3, #100	; 0x64
 800496c:	d901      	bls.n	8004972 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e276      	b.n	8004e60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004972:	4b92      	ldr	r3, [pc, #584]	; (8004bbc <HAL_RCC_OscConfig+0x504>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d0f0      	beq.n	8004960 <HAL_RCC_OscConfig+0x2a8>
 800497e:	e014      	b.n	80049aa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004980:	f7fd f9f6 	bl	8001d70 <HAL_GetTick>
 8004984:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004986:	e008      	b.n	800499a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004988:	f7fd f9f2 	bl	8001d70 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	2b64      	cmp	r3, #100	; 0x64
 8004994:	d901      	bls.n	800499a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e262      	b.n	8004e60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800499a:	4b88      	ldr	r3, [pc, #544]	; (8004bbc <HAL_RCC_OscConfig+0x504>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d1f0      	bne.n	8004988 <HAL_RCC_OscConfig+0x2d0>
 80049a6:	e000      	b.n	80049aa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0302 	and.w	r3, r3, #2
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d060      	beq.n	8004a78 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	2b04      	cmp	r3, #4
 80049ba:	d005      	beq.n	80049c8 <HAL_RCC_OscConfig+0x310>
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	2b0c      	cmp	r3, #12
 80049c0:	d119      	bne.n	80049f6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	2b02      	cmp	r3, #2
 80049c6:	d116      	bne.n	80049f6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049c8:	4b7c      	ldr	r3, [pc, #496]	; (8004bbc <HAL_RCC_OscConfig+0x504>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d005      	beq.n	80049e0 <HAL_RCC_OscConfig+0x328>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d101      	bne.n	80049e0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e23f      	b.n	8004e60 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049e0:	4b76      	ldr	r3, [pc, #472]	; (8004bbc <HAL_RCC_OscConfig+0x504>)
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	691b      	ldr	r3, [r3, #16]
 80049ec:	061b      	lsls	r3, r3, #24
 80049ee:	4973      	ldr	r1, [pc, #460]	; (8004bbc <HAL_RCC_OscConfig+0x504>)
 80049f0:	4313      	orrs	r3, r2
 80049f2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049f4:	e040      	b.n	8004a78 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d023      	beq.n	8004a46 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049fe:	4b6f      	ldr	r3, [pc, #444]	; (8004bbc <HAL_RCC_OscConfig+0x504>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a6e      	ldr	r2, [pc, #440]	; (8004bbc <HAL_RCC_OscConfig+0x504>)
 8004a04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a0a:	f7fd f9b1 	bl	8001d70 <HAL_GetTick>
 8004a0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a10:	e008      	b.n	8004a24 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a12:	f7fd f9ad 	bl	8001d70 <HAL_GetTick>
 8004a16:	4602      	mov	r2, r0
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	d901      	bls.n	8004a24 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	e21d      	b.n	8004e60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a24:	4b65      	ldr	r3, [pc, #404]	; (8004bbc <HAL_RCC_OscConfig+0x504>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d0f0      	beq.n	8004a12 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a30:	4b62      	ldr	r3, [pc, #392]	; (8004bbc <HAL_RCC_OscConfig+0x504>)
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	691b      	ldr	r3, [r3, #16]
 8004a3c:	061b      	lsls	r3, r3, #24
 8004a3e:	495f      	ldr	r1, [pc, #380]	; (8004bbc <HAL_RCC_OscConfig+0x504>)
 8004a40:	4313      	orrs	r3, r2
 8004a42:	604b      	str	r3, [r1, #4]
 8004a44:	e018      	b.n	8004a78 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a46:	4b5d      	ldr	r3, [pc, #372]	; (8004bbc <HAL_RCC_OscConfig+0x504>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a5c      	ldr	r2, [pc, #368]	; (8004bbc <HAL_RCC_OscConfig+0x504>)
 8004a4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a52:	f7fd f98d 	bl	8001d70 <HAL_GetTick>
 8004a56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a58:	e008      	b.n	8004a6c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a5a:	f7fd f989 	bl	8001d70 <HAL_GetTick>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	d901      	bls.n	8004a6c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	e1f9      	b.n	8004e60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a6c:	4b53      	ldr	r3, [pc, #332]	; (8004bbc <HAL_RCC_OscConfig+0x504>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d1f0      	bne.n	8004a5a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0308 	and.w	r3, r3, #8
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d03c      	beq.n	8004afe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	695b      	ldr	r3, [r3, #20]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d01c      	beq.n	8004ac6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a8c:	4b4b      	ldr	r3, [pc, #300]	; (8004bbc <HAL_RCC_OscConfig+0x504>)
 8004a8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a92:	4a4a      	ldr	r2, [pc, #296]	; (8004bbc <HAL_RCC_OscConfig+0x504>)
 8004a94:	f043 0301 	orr.w	r3, r3, #1
 8004a98:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a9c:	f7fd f968 	bl	8001d70 <HAL_GetTick>
 8004aa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004aa2:	e008      	b.n	8004ab6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004aa4:	f7fd f964 	bl	8001d70 <HAL_GetTick>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	d901      	bls.n	8004ab6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	e1d4      	b.n	8004e60 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ab6:	4b41      	ldr	r3, [pc, #260]	; (8004bbc <HAL_RCC_OscConfig+0x504>)
 8004ab8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004abc:	f003 0302 	and.w	r3, r3, #2
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d0ef      	beq.n	8004aa4 <HAL_RCC_OscConfig+0x3ec>
 8004ac4:	e01b      	b.n	8004afe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ac6:	4b3d      	ldr	r3, [pc, #244]	; (8004bbc <HAL_RCC_OscConfig+0x504>)
 8004ac8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004acc:	4a3b      	ldr	r2, [pc, #236]	; (8004bbc <HAL_RCC_OscConfig+0x504>)
 8004ace:	f023 0301 	bic.w	r3, r3, #1
 8004ad2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ad6:	f7fd f94b 	bl	8001d70 <HAL_GetTick>
 8004ada:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004adc:	e008      	b.n	8004af0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ade:	f7fd f947 	bl	8001d70 <HAL_GetTick>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	d901      	bls.n	8004af0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e1b7      	b.n	8004e60 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004af0:	4b32      	ldr	r3, [pc, #200]	; (8004bbc <HAL_RCC_OscConfig+0x504>)
 8004af2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004af6:	f003 0302 	and.w	r3, r3, #2
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d1ef      	bne.n	8004ade <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0304 	and.w	r3, r3, #4
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	f000 80a6 	beq.w	8004c58 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004b10:	4b2a      	ldr	r3, [pc, #168]	; (8004bbc <HAL_RCC_OscConfig+0x504>)
 8004b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d10d      	bne.n	8004b38 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b1c:	4b27      	ldr	r3, [pc, #156]	; (8004bbc <HAL_RCC_OscConfig+0x504>)
 8004b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b20:	4a26      	ldr	r2, [pc, #152]	; (8004bbc <HAL_RCC_OscConfig+0x504>)
 8004b22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b26:	6593      	str	r3, [r2, #88]	; 0x58
 8004b28:	4b24      	ldr	r3, [pc, #144]	; (8004bbc <HAL_RCC_OscConfig+0x504>)
 8004b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b30:	60bb      	str	r3, [r7, #8]
 8004b32:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b34:	2301      	movs	r3, #1
 8004b36:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b38:	4b21      	ldr	r3, [pc, #132]	; (8004bc0 <HAL_RCC_OscConfig+0x508>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d118      	bne.n	8004b76 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b44:	4b1e      	ldr	r3, [pc, #120]	; (8004bc0 <HAL_RCC_OscConfig+0x508>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a1d      	ldr	r2, [pc, #116]	; (8004bc0 <HAL_RCC_OscConfig+0x508>)
 8004b4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b4e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b50:	f7fd f90e 	bl	8001d70 <HAL_GetTick>
 8004b54:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b56:	e008      	b.n	8004b6a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b58:	f7fd f90a 	bl	8001d70 <HAL_GetTick>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d901      	bls.n	8004b6a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	e17a      	b.n	8004e60 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b6a:	4b15      	ldr	r3, [pc, #84]	; (8004bc0 <HAL_RCC_OscConfig+0x508>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d0f0      	beq.n	8004b58 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d108      	bne.n	8004b90 <HAL_RCC_OscConfig+0x4d8>
 8004b7e:	4b0f      	ldr	r3, [pc, #60]	; (8004bbc <HAL_RCC_OscConfig+0x504>)
 8004b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b84:	4a0d      	ldr	r2, [pc, #52]	; (8004bbc <HAL_RCC_OscConfig+0x504>)
 8004b86:	f043 0301 	orr.w	r3, r3, #1
 8004b8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b8e:	e029      	b.n	8004be4 <HAL_RCC_OscConfig+0x52c>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	2b05      	cmp	r3, #5
 8004b96:	d115      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x50c>
 8004b98:	4b08      	ldr	r3, [pc, #32]	; (8004bbc <HAL_RCC_OscConfig+0x504>)
 8004b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b9e:	4a07      	ldr	r2, [pc, #28]	; (8004bbc <HAL_RCC_OscConfig+0x504>)
 8004ba0:	f043 0304 	orr.w	r3, r3, #4
 8004ba4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ba8:	4b04      	ldr	r3, [pc, #16]	; (8004bbc <HAL_RCC_OscConfig+0x504>)
 8004baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bae:	4a03      	ldr	r2, [pc, #12]	; (8004bbc <HAL_RCC_OscConfig+0x504>)
 8004bb0:	f043 0301 	orr.w	r3, r3, #1
 8004bb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004bb8:	e014      	b.n	8004be4 <HAL_RCC_OscConfig+0x52c>
 8004bba:	bf00      	nop
 8004bbc:	40021000 	.word	0x40021000
 8004bc0:	40007000 	.word	0x40007000
 8004bc4:	4b9c      	ldr	r3, [pc, #624]	; (8004e38 <HAL_RCC_OscConfig+0x780>)
 8004bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bca:	4a9b      	ldr	r2, [pc, #620]	; (8004e38 <HAL_RCC_OscConfig+0x780>)
 8004bcc:	f023 0301 	bic.w	r3, r3, #1
 8004bd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004bd4:	4b98      	ldr	r3, [pc, #608]	; (8004e38 <HAL_RCC_OscConfig+0x780>)
 8004bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bda:	4a97      	ldr	r2, [pc, #604]	; (8004e38 <HAL_RCC_OscConfig+0x780>)
 8004bdc:	f023 0304 	bic.w	r3, r3, #4
 8004be0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d016      	beq.n	8004c1a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bec:	f7fd f8c0 	bl	8001d70 <HAL_GetTick>
 8004bf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bf2:	e00a      	b.n	8004c0a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bf4:	f7fd f8bc 	bl	8001d70 <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d901      	bls.n	8004c0a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e12a      	b.n	8004e60 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c0a:	4b8b      	ldr	r3, [pc, #556]	; (8004e38 <HAL_RCC_OscConfig+0x780>)
 8004c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c10:	f003 0302 	and.w	r3, r3, #2
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d0ed      	beq.n	8004bf4 <HAL_RCC_OscConfig+0x53c>
 8004c18:	e015      	b.n	8004c46 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c1a:	f7fd f8a9 	bl	8001d70 <HAL_GetTick>
 8004c1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c20:	e00a      	b.n	8004c38 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c22:	f7fd f8a5 	bl	8001d70 <HAL_GetTick>
 8004c26:	4602      	mov	r2, r0
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	1ad3      	subs	r3, r2, r3
 8004c2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d901      	bls.n	8004c38 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004c34:	2303      	movs	r3, #3
 8004c36:	e113      	b.n	8004e60 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c38:	4b7f      	ldr	r3, [pc, #508]	; (8004e38 <HAL_RCC_OscConfig+0x780>)
 8004c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c3e:	f003 0302 	and.w	r3, r3, #2
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d1ed      	bne.n	8004c22 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c46:	7ffb      	ldrb	r3, [r7, #31]
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d105      	bne.n	8004c58 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c4c:	4b7a      	ldr	r3, [pc, #488]	; (8004e38 <HAL_RCC_OscConfig+0x780>)
 8004c4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c50:	4a79      	ldr	r2, [pc, #484]	; (8004e38 <HAL_RCC_OscConfig+0x780>)
 8004c52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c56:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	f000 80fe 	beq.w	8004e5e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c66:	2b02      	cmp	r3, #2
 8004c68:	f040 80d0 	bne.w	8004e0c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004c6c:	4b72      	ldr	r3, [pc, #456]	; (8004e38 <HAL_RCC_OscConfig+0x780>)
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	f003 0203 	and.w	r2, r3, #3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d130      	bne.n	8004ce2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8a:	3b01      	subs	r3, #1
 8004c8c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d127      	bne.n	8004ce2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c9c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d11f      	bne.n	8004ce2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004cac:	2a07      	cmp	r2, #7
 8004cae:	bf14      	ite	ne
 8004cb0:	2201      	movne	r2, #1
 8004cb2:	2200      	moveq	r2, #0
 8004cb4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d113      	bne.n	8004ce2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cc4:	085b      	lsrs	r3, r3, #1
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d109      	bne.n	8004ce2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd8:	085b      	lsrs	r3, r3, #1
 8004cda:	3b01      	subs	r3, #1
 8004cdc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d06e      	beq.n	8004dc0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	2b0c      	cmp	r3, #12
 8004ce6:	d069      	beq.n	8004dbc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004ce8:	4b53      	ldr	r3, [pc, #332]	; (8004e38 <HAL_RCC_OscConfig+0x780>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d105      	bne.n	8004d00 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004cf4:	4b50      	ldr	r3, [pc, #320]	; (8004e38 <HAL_RCC_OscConfig+0x780>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d001      	beq.n	8004d04 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e0ad      	b.n	8004e60 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004d04:	4b4c      	ldr	r3, [pc, #304]	; (8004e38 <HAL_RCC_OscConfig+0x780>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a4b      	ldr	r2, [pc, #300]	; (8004e38 <HAL_RCC_OscConfig+0x780>)
 8004d0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d0e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004d10:	f7fd f82e 	bl	8001d70 <HAL_GetTick>
 8004d14:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d16:	e008      	b.n	8004d2a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d18:	f7fd f82a 	bl	8001d70 <HAL_GetTick>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d901      	bls.n	8004d2a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e09a      	b.n	8004e60 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d2a:	4b43      	ldr	r3, [pc, #268]	; (8004e38 <HAL_RCC_OscConfig+0x780>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d1f0      	bne.n	8004d18 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d36:	4b40      	ldr	r3, [pc, #256]	; (8004e38 <HAL_RCC_OscConfig+0x780>)
 8004d38:	68da      	ldr	r2, [r3, #12]
 8004d3a:	4b40      	ldr	r3, [pc, #256]	; (8004e3c <HAL_RCC_OscConfig+0x784>)
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004d46:	3a01      	subs	r2, #1
 8004d48:	0112      	lsls	r2, r2, #4
 8004d4a:	4311      	orrs	r1, r2
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004d50:	0212      	lsls	r2, r2, #8
 8004d52:	4311      	orrs	r1, r2
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004d58:	0852      	lsrs	r2, r2, #1
 8004d5a:	3a01      	subs	r2, #1
 8004d5c:	0552      	lsls	r2, r2, #21
 8004d5e:	4311      	orrs	r1, r2
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004d64:	0852      	lsrs	r2, r2, #1
 8004d66:	3a01      	subs	r2, #1
 8004d68:	0652      	lsls	r2, r2, #25
 8004d6a:	4311      	orrs	r1, r2
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d70:	0912      	lsrs	r2, r2, #4
 8004d72:	0452      	lsls	r2, r2, #17
 8004d74:	430a      	orrs	r2, r1
 8004d76:	4930      	ldr	r1, [pc, #192]	; (8004e38 <HAL_RCC_OscConfig+0x780>)
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004d7c:	4b2e      	ldr	r3, [pc, #184]	; (8004e38 <HAL_RCC_OscConfig+0x780>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a2d      	ldr	r2, [pc, #180]	; (8004e38 <HAL_RCC_OscConfig+0x780>)
 8004d82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d86:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d88:	4b2b      	ldr	r3, [pc, #172]	; (8004e38 <HAL_RCC_OscConfig+0x780>)
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	4a2a      	ldr	r2, [pc, #168]	; (8004e38 <HAL_RCC_OscConfig+0x780>)
 8004d8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d92:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004d94:	f7fc ffec 	bl	8001d70 <HAL_GetTick>
 8004d98:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d9a:	e008      	b.n	8004dae <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d9c:	f7fc ffe8 	bl	8001d70 <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	2b02      	cmp	r3, #2
 8004da8:	d901      	bls.n	8004dae <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e058      	b.n	8004e60 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004dae:	4b22      	ldr	r3, [pc, #136]	; (8004e38 <HAL_RCC_OscConfig+0x780>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d0f0      	beq.n	8004d9c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004dba:	e050      	b.n	8004e5e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e04f      	b.n	8004e60 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004dc0:	4b1d      	ldr	r3, [pc, #116]	; (8004e38 <HAL_RCC_OscConfig+0x780>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d148      	bne.n	8004e5e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004dcc:	4b1a      	ldr	r3, [pc, #104]	; (8004e38 <HAL_RCC_OscConfig+0x780>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a19      	ldr	r2, [pc, #100]	; (8004e38 <HAL_RCC_OscConfig+0x780>)
 8004dd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004dd6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004dd8:	4b17      	ldr	r3, [pc, #92]	; (8004e38 <HAL_RCC_OscConfig+0x780>)
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	4a16      	ldr	r2, [pc, #88]	; (8004e38 <HAL_RCC_OscConfig+0x780>)
 8004dde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004de2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004de4:	f7fc ffc4 	bl	8001d70 <HAL_GetTick>
 8004de8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004dea:	e008      	b.n	8004dfe <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dec:	f7fc ffc0 	bl	8001d70 <HAL_GetTick>
 8004df0:	4602      	mov	r2, r0
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d901      	bls.n	8004dfe <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e030      	b.n	8004e60 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004dfe:	4b0e      	ldr	r3, [pc, #56]	; (8004e38 <HAL_RCC_OscConfig+0x780>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d0f0      	beq.n	8004dec <HAL_RCC_OscConfig+0x734>
 8004e0a:	e028      	b.n	8004e5e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	2b0c      	cmp	r3, #12
 8004e10:	d023      	beq.n	8004e5a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e12:	4b09      	ldr	r3, [pc, #36]	; (8004e38 <HAL_RCC_OscConfig+0x780>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a08      	ldr	r2, [pc, #32]	; (8004e38 <HAL_RCC_OscConfig+0x780>)
 8004e18:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e1e:	f7fc ffa7 	bl	8001d70 <HAL_GetTick>
 8004e22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e24:	e00c      	b.n	8004e40 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e26:	f7fc ffa3 	bl	8001d70 <HAL_GetTick>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d905      	bls.n	8004e40 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	e013      	b.n	8004e60 <HAL_RCC_OscConfig+0x7a8>
 8004e38:	40021000 	.word	0x40021000
 8004e3c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e40:	4b09      	ldr	r3, [pc, #36]	; (8004e68 <HAL_RCC_OscConfig+0x7b0>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d1ec      	bne.n	8004e26 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004e4c:	4b06      	ldr	r3, [pc, #24]	; (8004e68 <HAL_RCC_OscConfig+0x7b0>)
 8004e4e:	68da      	ldr	r2, [r3, #12]
 8004e50:	4905      	ldr	r1, [pc, #20]	; (8004e68 <HAL_RCC_OscConfig+0x7b0>)
 8004e52:	4b06      	ldr	r3, [pc, #24]	; (8004e6c <HAL_RCC_OscConfig+0x7b4>)
 8004e54:	4013      	ands	r3, r2
 8004e56:	60cb      	str	r3, [r1, #12]
 8004e58:	e001      	b.n	8004e5e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e000      	b.n	8004e60 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004e5e:	2300      	movs	r3, #0
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3720      	adds	r7, #32
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	40021000 	.word	0x40021000
 8004e6c:	feeefffc 	.word	0xfeeefffc

08004e70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d101      	bne.n	8004e84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	e0e7      	b.n	8005054 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e84:	4b75      	ldr	r3, [pc, #468]	; (800505c <HAL_RCC_ClockConfig+0x1ec>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 0307 	and.w	r3, r3, #7
 8004e8c:	683a      	ldr	r2, [r7, #0]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d910      	bls.n	8004eb4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e92:	4b72      	ldr	r3, [pc, #456]	; (800505c <HAL_RCC_ClockConfig+0x1ec>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f023 0207 	bic.w	r2, r3, #7
 8004e9a:	4970      	ldr	r1, [pc, #448]	; (800505c <HAL_RCC_ClockConfig+0x1ec>)
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ea2:	4b6e      	ldr	r3, [pc, #440]	; (800505c <HAL_RCC_ClockConfig+0x1ec>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0307 	and.w	r3, r3, #7
 8004eaa:	683a      	ldr	r2, [r7, #0]
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d001      	beq.n	8004eb4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e0cf      	b.n	8005054 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 0302 	and.w	r3, r3, #2
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d010      	beq.n	8004ee2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	689a      	ldr	r2, [r3, #8]
 8004ec4:	4b66      	ldr	r3, [pc, #408]	; (8005060 <HAL_RCC_ClockConfig+0x1f0>)
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d908      	bls.n	8004ee2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ed0:	4b63      	ldr	r3, [pc, #396]	; (8005060 <HAL_RCC_ClockConfig+0x1f0>)
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	4960      	ldr	r1, [pc, #384]	; (8005060 <HAL_RCC_ClockConfig+0x1f0>)
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 0301 	and.w	r3, r3, #1
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d04c      	beq.n	8004f88 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	2b03      	cmp	r3, #3
 8004ef4:	d107      	bne.n	8004f06 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ef6:	4b5a      	ldr	r3, [pc, #360]	; (8005060 <HAL_RCC_ClockConfig+0x1f0>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d121      	bne.n	8004f46 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e0a6      	b.n	8005054 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	2b02      	cmp	r3, #2
 8004f0c:	d107      	bne.n	8004f1e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f0e:	4b54      	ldr	r3, [pc, #336]	; (8005060 <HAL_RCC_ClockConfig+0x1f0>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d115      	bne.n	8004f46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e09a      	b.n	8005054 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d107      	bne.n	8004f36 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004f26:	4b4e      	ldr	r3, [pc, #312]	; (8005060 <HAL_RCC_ClockConfig+0x1f0>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0302 	and.w	r3, r3, #2
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d109      	bne.n	8004f46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e08e      	b.n	8005054 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f36:	4b4a      	ldr	r3, [pc, #296]	; (8005060 <HAL_RCC_ClockConfig+0x1f0>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d101      	bne.n	8004f46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e086      	b.n	8005054 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004f46:	4b46      	ldr	r3, [pc, #280]	; (8005060 <HAL_RCC_ClockConfig+0x1f0>)
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	f023 0203 	bic.w	r2, r3, #3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	4943      	ldr	r1, [pc, #268]	; (8005060 <HAL_RCC_ClockConfig+0x1f0>)
 8004f54:	4313      	orrs	r3, r2
 8004f56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f58:	f7fc ff0a 	bl	8001d70 <HAL_GetTick>
 8004f5c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f5e:	e00a      	b.n	8004f76 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f60:	f7fc ff06 	bl	8001d70 <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d901      	bls.n	8004f76 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	e06e      	b.n	8005054 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f76:	4b3a      	ldr	r3, [pc, #232]	; (8005060 <HAL_RCC_ClockConfig+0x1f0>)
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	f003 020c 	and.w	r2, r3, #12
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d1eb      	bne.n	8004f60 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 0302 	and.w	r3, r3, #2
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d010      	beq.n	8004fb6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	689a      	ldr	r2, [r3, #8]
 8004f98:	4b31      	ldr	r3, [pc, #196]	; (8005060 <HAL_RCC_ClockConfig+0x1f0>)
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d208      	bcs.n	8004fb6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fa4:	4b2e      	ldr	r3, [pc, #184]	; (8005060 <HAL_RCC_ClockConfig+0x1f0>)
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	492b      	ldr	r1, [pc, #172]	; (8005060 <HAL_RCC_ClockConfig+0x1f0>)
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004fb6:	4b29      	ldr	r3, [pc, #164]	; (800505c <HAL_RCC_ClockConfig+0x1ec>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 0307 	and.w	r3, r3, #7
 8004fbe:	683a      	ldr	r2, [r7, #0]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d210      	bcs.n	8004fe6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fc4:	4b25      	ldr	r3, [pc, #148]	; (800505c <HAL_RCC_ClockConfig+0x1ec>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f023 0207 	bic.w	r2, r3, #7
 8004fcc:	4923      	ldr	r1, [pc, #140]	; (800505c <HAL_RCC_ClockConfig+0x1ec>)
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fd4:	4b21      	ldr	r3, [pc, #132]	; (800505c <HAL_RCC_ClockConfig+0x1ec>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 0307 	and.w	r3, r3, #7
 8004fdc:	683a      	ldr	r2, [r7, #0]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d001      	beq.n	8004fe6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e036      	b.n	8005054 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 0304 	and.w	r3, r3, #4
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d008      	beq.n	8005004 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ff2:	4b1b      	ldr	r3, [pc, #108]	; (8005060 <HAL_RCC_ClockConfig+0x1f0>)
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	4918      	ldr	r1, [pc, #96]	; (8005060 <HAL_RCC_ClockConfig+0x1f0>)
 8005000:	4313      	orrs	r3, r2
 8005002:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0308 	and.w	r3, r3, #8
 800500c:	2b00      	cmp	r3, #0
 800500e:	d009      	beq.n	8005024 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005010:	4b13      	ldr	r3, [pc, #76]	; (8005060 <HAL_RCC_ClockConfig+0x1f0>)
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	691b      	ldr	r3, [r3, #16]
 800501c:	00db      	lsls	r3, r3, #3
 800501e:	4910      	ldr	r1, [pc, #64]	; (8005060 <HAL_RCC_ClockConfig+0x1f0>)
 8005020:	4313      	orrs	r3, r2
 8005022:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005024:	f000 f824 	bl	8005070 <HAL_RCC_GetSysClockFreq>
 8005028:	4602      	mov	r2, r0
 800502a:	4b0d      	ldr	r3, [pc, #52]	; (8005060 <HAL_RCC_ClockConfig+0x1f0>)
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	091b      	lsrs	r3, r3, #4
 8005030:	f003 030f 	and.w	r3, r3, #15
 8005034:	490b      	ldr	r1, [pc, #44]	; (8005064 <HAL_RCC_ClockConfig+0x1f4>)
 8005036:	5ccb      	ldrb	r3, [r1, r3]
 8005038:	f003 031f 	and.w	r3, r3, #31
 800503c:	fa22 f303 	lsr.w	r3, r2, r3
 8005040:	4a09      	ldr	r2, [pc, #36]	; (8005068 <HAL_RCC_ClockConfig+0x1f8>)
 8005042:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005044:	4b09      	ldr	r3, [pc, #36]	; (800506c <HAL_RCC_ClockConfig+0x1fc>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4618      	mov	r0, r3
 800504a:	f7fc fe41 	bl	8001cd0 <HAL_InitTick>
 800504e:	4603      	mov	r3, r0
 8005050:	72fb      	strb	r3, [r7, #11]

  return status;
 8005052:	7afb      	ldrb	r3, [r7, #11]
}
 8005054:	4618      	mov	r0, r3
 8005056:	3710      	adds	r7, #16
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}
 800505c:	40022000 	.word	0x40022000
 8005060:	40021000 	.word	0x40021000
 8005064:	0800c1e0 	.word	0x0800c1e0
 8005068:	20000000 	.word	0x20000000
 800506c:	20000004 	.word	0x20000004

08005070 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005070:	b480      	push	{r7}
 8005072:	b089      	sub	sp, #36	; 0x24
 8005074:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005076:	2300      	movs	r3, #0
 8005078:	61fb      	str	r3, [r7, #28]
 800507a:	2300      	movs	r3, #0
 800507c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800507e:	4b3e      	ldr	r3, [pc, #248]	; (8005178 <HAL_RCC_GetSysClockFreq+0x108>)
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	f003 030c 	and.w	r3, r3, #12
 8005086:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005088:	4b3b      	ldr	r3, [pc, #236]	; (8005178 <HAL_RCC_GetSysClockFreq+0x108>)
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	f003 0303 	and.w	r3, r3, #3
 8005090:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d005      	beq.n	80050a4 <HAL_RCC_GetSysClockFreq+0x34>
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	2b0c      	cmp	r3, #12
 800509c:	d121      	bne.n	80050e2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d11e      	bne.n	80050e2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80050a4:	4b34      	ldr	r3, [pc, #208]	; (8005178 <HAL_RCC_GetSysClockFreq+0x108>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 0308 	and.w	r3, r3, #8
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d107      	bne.n	80050c0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80050b0:	4b31      	ldr	r3, [pc, #196]	; (8005178 <HAL_RCC_GetSysClockFreq+0x108>)
 80050b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050b6:	0a1b      	lsrs	r3, r3, #8
 80050b8:	f003 030f 	and.w	r3, r3, #15
 80050bc:	61fb      	str	r3, [r7, #28]
 80050be:	e005      	b.n	80050cc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80050c0:	4b2d      	ldr	r3, [pc, #180]	; (8005178 <HAL_RCC_GetSysClockFreq+0x108>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	091b      	lsrs	r3, r3, #4
 80050c6:	f003 030f 	and.w	r3, r3, #15
 80050ca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80050cc:	4a2b      	ldr	r2, [pc, #172]	; (800517c <HAL_RCC_GetSysClockFreq+0x10c>)
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050d4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d10d      	bne.n	80050f8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80050e0:	e00a      	b.n	80050f8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	2b04      	cmp	r3, #4
 80050e6:	d102      	bne.n	80050ee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80050e8:	4b25      	ldr	r3, [pc, #148]	; (8005180 <HAL_RCC_GetSysClockFreq+0x110>)
 80050ea:	61bb      	str	r3, [r7, #24]
 80050ec:	e004      	b.n	80050f8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	2b08      	cmp	r3, #8
 80050f2:	d101      	bne.n	80050f8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80050f4:	4b23      	ldr	r3, [pc, #140]	; (8005184 <HAL_RCC_GetSysClockFreq+0x114>)
 80050f6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	2b0c      	cmp	r3, #12
 80050fc:	d134      	bne.n	8005168 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80050fe:	4b1e      	ldr	r3, [pc, #120]	; (8005178 <HAL_RCC_GetSysClockFreq+0x108>)
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	f003 0303 	and.w	r3, r3, #3
 8005106:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	2b02      	cmp	r3, #2
 800510c:	d003      	beq.n	8005116 <HAL_RCC_GetSysClockFreq+0xa6>
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	2b03      	cmp	r3, #3
 8005112:	d003      	beq.n	800511c <HAL_RCC_GetSysClockFreq+0xac>
 8005114:	e005      	b.n	8005122 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005116:	4b1a      	ldr	r3, [pc, #104]	; (8005180 <HAL_RCC_GetSysClockFreq+0x110>)
 8005118:	617b      	str	r3, [r7, #20]
      break;
 800511a:	e005      	b.n	8005128 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800511c:	4b19      	ldr	r3, [pc, #100]	; (8005184 <HAL_RCC_GetSysClockFreq+0x114>)
 800511e:	617b      	str	r3, [r7, #20]
      break;
 8005120:	e002      	b.n	8005128 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	617b      	str	r3, [r7, #20]
      break;
 8005126:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005128:	4b13      	ldr	r3, [pc, #76]	; (8005178 <HAL_RCC_GetSysClockFreq+0x108>)
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	091b      	lsrs	r3, r3, #4
 800512e:	f003 0307 	and.w	r3, r3, #7
 8005132:	3301      	adds	r3, #1
 8005134:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005136:	4b10      	ldr	r3, [pc, #64]	; (8005178 <HAL_RCC_GetSysClockFreq+0x108>)
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	0a1b      	lsrs	r3, r3, #8
 800513c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005140:	697a      	ldr	r2, [r7, #20]
 8005142:	fb03 f202 	mul.w	r2, r3, r2
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	fbb2 f3f3 	udiv	r3, r2, r3
 800514c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800514e:	4b0a      	ldr	r3, [pc, #40]	; (8005178 <HAL_RCC_GetSysClockFreq+0x108>)
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	0e5b      	lsrs	r3, r3, #25
 8005154:	f003 0303 	and.w	r3, r3, #3
 8005158:	3301      	adds	r3, #1
 800515a:	005b      	lsls	r3, r3, #1
 800515c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800515e:	697a      	ldr	r2, [r7, #20]
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	fbb2 f3f3 	udiv	r3, r2, r3
 8005166:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005168:	69bb      	ldr	r3, [r7, #24]
}
 800516a:	4618      	mov	r0, r3
 800516c:	3724      	adds	r7, #36	; 0x24
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr
 8005176:	bf00      	nop
 8005178:	40021000 	.word	0x40021000
 800517c:	0800c1f8 	.word	0x0800c1f8
 8005180:	00f42400 	.word	0x00f42400
 8005184:	007a1200 	.word	0x007a1200

08005188 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005188:	b480      	push	{r7}
 800518a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800518c:	4b03      	ldr	r3, [pc, #12]	; (800519c <HAL_RCC_GetHCLKFreq+0x14>)
 800518e:	681b      	ldr	r3, [r3, #0]
}
 8005190:	4618      	mov	r0, r3
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr
 800519a:	bf00      	nop
 800519c:	20000000 	.word	0x20000000

080051a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80051a4:	f7ff fff0 	bl	8005188 <HAL_RCC_GetHCLKFreq>
 80051a8:	4602      	mov	r2, r0
 80051aa:	4b06      	ldr	r3, [pc, #24]	; (80051c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	0a1b      	lsrs	r3, r3, #8
 80051b0:	f003 0307 	and.w	r3, r3, #7
 80051b4:	4904      	ldr	r1, [pc, #16]	; (80051c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80051b6:	5ccb      	ldrb	r3, [r1, r3]
 80051b8:	f003 031f 	and.w	r3, r3, #31
 80051bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	40021000 	.word	0x40021000
 80051c8:	0800c1f0 	.word	0x0800c1f0

080051cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80051d0:	f7ff ffda 	bl	8005188 <HAL_RCC_GetHCLKFreq>
 80051d4:	4602      	mov	r2, r0
 80051d6:	4b06      	ldr	r3, [pc, #24]	; (80051f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	0adb      	lsrs	r3, r3, #11
 80051dc:	f003 0307 	and.w	r3, r3, #7
 80051e0:	4904      	ldr	r1, [pc, #16]	; (80051f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80051e2:	5ccb      	ldrb	r3, [r1, r3]
 80051e4:	f003 031f 	and.w	r3, r3, #31
 80051e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	40021000 	.word	0x40021000
 80051f4:	0800c1f0 	.word	0x0800c1f0

080051f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b086      	sub	sp, #24
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005200:	2300      	movs	r3, #0
 8005202:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005204:	4b2a      	ldr	r3, [pc, #168]	; (80052b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005208:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800520c:	2b00      	cmp	r3, #0
 800520e:	d003      	beq.n	8005218 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005210:	f7ff f9ee 	bl	80045f0 <HAL_PWREx_GetVoltageRange>
 8005214:	6178      	str	r0, [r7, #20]
 8005216:	e014      	b.n	8005242 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005218:	4b25      	ldr	r3, [pc, #148]	; (80052b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800521a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800521c:	4a24      	ldr	r2, [pc, #144]	; (80052b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800521e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005222:	6593      	str	r3, [r2, #88]	; 0x58
 8005224:	4b22      	ldr	r3, [pc, #136]	; (80052b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005228:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800522c:	60fb      	str	r3, [r7, #12]
 800522e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005230:	f7ff f9de 	bl	80045f0 <HAL_PWREx_GetVoltageRange>
 8005234:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005236:	4b1e      	ldr	r3, [pc, #120]	; (80052b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800523a:	4a1d      	ldr	r2, [pc, #116]	; (80052b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800523c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005240:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005248:	d10b      	bne.n	8005262 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2b80      	cmp	r3, #128	; 0x80
 800524e:	d919      	bls.n	8005284 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2ba0      	cmp	r3, #160	; 0xa0
 8005254:	d902      	bls.n	800525c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005256:	2302      	movs	r3, #2
 8005258:	613b      	str	r3, [r7, #16]
 800525a:	e013      	b.n	8005284 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800525c:	2301      	movs	r3, #1
 800525e:	613b      	str	r3, [r7, #16]
 8005260:	e010      	b.n	8005284 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2b80      	cmp	r3, #128	; 0x80
 8005266:	d902      	bls.n	800526e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005268:	2303      	movs	r3, #3
 800526a:	613b      	str	r3, [r7, #16]
 800526c:	e00a      	b.n	8005284 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2b80      	cmp	r3, #128	; 0x80
 8005272:	d102      	bne.n	800527a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005274:	2302      	movs	r3, #2
 8005276:	613b      	str	r3, [r7, #16]
 8005278:	e004      	b.n	8005284 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2b70      	cmp	r3, #112	; 0x70
 800527e:	d101      	bne.n	8005284 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005280:	2301      	movs	r3, #1
 8005282:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005284:	4b0b      	ldr	r3, [pc, #44]	; (80052b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f023 0207 	bic.w	r2, r3, #7
 800528c:	4909      	ldr	r1, [pc, #36]	; (80052b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	4313      	orrs	r3, r2
 8005292:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005294:	4b07      	ldr	r3, [pc, #28]	; (80052b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 0307 	and.w	r3, r3, #7
 800529c:	693a      	ldr	r2, [r7, #16]
 800529e:	429a      	cmp	r2, r3
 80052a0:	d001      	beq.n	80052a6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e000      	b.n	80052a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80052a6:	2300      	movs	r3, #0
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3718      	adds	r7, #24
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}
 80052b0:	40021000 	.word	0x40021000
 80052b4:	40022000 	.word	0x40022000

080052b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b086      	sub	sp, #24
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80052c0:	2300      	movs	r3, #0
 80052c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80052c4:	2300      	movs	r3, #0
 80052c6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d041      	beq.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052d8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80052dc:	d02a      	beq.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80052de:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80052e2:	d824      	bhi.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80052e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80052e8:	d008      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80052ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80052ee:	d81e      	bhi.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d00a      	beq.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x52>
 80052f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052f8:	d010      	beq.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80052fa:	e018      	b.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80052fc:	4b86      	ldr	r3, [pc, #536]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	4a85      	ldr	r2, [pc, #532]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005302:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005306:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005308:	e015      	b.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	3304      	adds	r3, #4
 800530e:	2100      	movs	r1, #0
 8005310:	4618      	mov	r0, r3
 8005312:	f000 fabb 	bl	800588c <RCCEx_PLLSAI1_Config>
 8005316:	4603      	mov	r3, r0
 8005318:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800531a:	e00c      	b.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	3320      	adds	r3, #32
 8005320:	2100      	movs	r1, #0
 8005322:	4618      	mov	r0, r3
 8005324:	f000 fba6 	bl	8005a74 <RCCEx_PLLSAI2_Config>
 8005328:	4603      	mov	r3, r0
 800532a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800532c:	e003      	b.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	74fb      	strb	r3, [r7, #19]
      break;
 8005332:	e000      	b.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005334:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005336:	7cfb      	ldrb	r3, [r7, #19]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d10b      	bne.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800533c:	4b76      	ldr	r3, [pc, #472]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800533e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005342:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800534a:	4973      	ldr	r1, [pc, #460]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800534c:	4313      	orrs	r3, r2
 800534e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005352:	e001      	b.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005354:	7cfb      	ldrb	r3, [r7, #19]
 8005356:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005360:	2b00      	cmp	r3, #0
 8005362:	d041      	beq.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005368:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800536c:	d02a      	beq.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800536e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005372:	d824      	bhi.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005374:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005378:	d008      	beq.n	800538c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800537a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800537e:	d81e      	bhi.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005380:	2b00      	cmp	r3, #0
 8005382:	d00a      	beq.n	800539a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005384:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005388:	d010      	beq.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800538a:	e018      	b.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800538c:	4b62      	ldr	r3, [pc, #392]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	4a61      	ldr	r2, [pc, #388]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005392:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005396:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005398:	e015      	b.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	3304      	adds	r3, #4
 800539e:	2100      	movs	r1, #0
 80053a0:	4618      	mov	r0, r3
 80053a2:	f000 fa73 	bl	800588c <RCCEx_PLLSAI1_Config>
 80053a6:	4603      	mov	r3, r0
 80053a8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80053aa:	e00c      	b.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	3320      	adds	r3, #32
 80053b0:	2100      	movs	r1, #0
 80053b2:	4618      	mov	r0, r3
 80053b4:	f000 fb5e 	bl	8005a74 <RCCEx_PLLSAI2_Config>
 80053b8:	4603      	mov	r3, r0
 80053ba:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80053bc:	e003      	b.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	74fb      	strb	r3, [r7, #19]
      break;
 80053c2:	e000      	b.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80053c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053c6:	7cfb      	ldrb	r3, [r7, #19]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d10b      	bne.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80053cc:	4b52      	ldr	r3, [pc, #328]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053d2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053da:	494f      	ldr	r1, [pc, #316]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053dc:	4313      	orrs	r3, r2
 80053de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80053e2:	e001      	b.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053e4:	7cfb      	ldrb	r3, [r7, #19]
 80053e6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	f000 80a0 	beq.w	8005536 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053f6:	2300      	movs	r3, #0
 80053f8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80053fa:	4b47      	ldr	r3, [pc, #284]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005402:	2b00      	cmp	r3, #0
 8005404:	d101      	bne.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005406:	2301      	movs	r3, #1
 8005408:	e000      	b.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800540a:	2300      	movs	r3, #0
 800540c:	2b00      	cmp	r3, #0
 800540e:	d00d      	beq.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005410:	4b41      	ldr	r3, [pc, #260]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005414:	4a40      	ldr	r2, [pc, #256]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005416:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800541a:	6593      	str	r3, [r2, #88]	; 0x58
 800541c:	4b3e      	ldr	r3, [pc, #248]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800541e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005420:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005424:	60bb      	str	r3, [r7, #8]
 8005426:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005428:	2301      	movs	r3, #1
 800542a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800542c:	4b3b      	ldr	r3, [pc, #236]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a3a      	ldr	r2, [pc, #232]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005432:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005436:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005438:	f7fc fc9a 	bl	8001d70 <HAL_GetTick>
 800543c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800543e:	e009      	b.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005440:	f7fc fc96 	bl	8001d70 <HAL_GetTick>
 8005444:	4602      	mov	r2, r0
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	2b02      	cmp	r3, #2
 800544c:	d902      	bls.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	74fb      	strb	r3, [r7, #19]
        break;
 8005452:	e005      	b.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005454:	4b31      	ldr	r3, [pc, #196]	; (800551c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800545c:	2b00      	cmp	r3, #0
 800545e:	d0ef      	beq.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005460:	7cfb      	ldrb	r3, [r7, #19]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d15c      	bne.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005466:	4b2c      	ldr	r3, [pc, #176]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005468:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800546c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005470:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d01f      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800547e:	697a      	ldr	r2, [r7, #20]
 8005480:	429a      	cmp	r2, r3
 8005482:	d019      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005484:	4b24      	ldr	r3, [pc, #144]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800548a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800548e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005490:	4b21      	ldr	r3, [pc, #132]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005496:	4a20      	ldr	r2, [pc, #128]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005498:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800549c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80054a0:	4b1d      	ldr	r3, [pc, #116]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054a6:	4a1c      	ldr	r2, [pc, #112]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80054b0:	4a19      	ldr	r2, [pc, #100]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	f003 0301 	and.w	r3, r3, #1
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d016      	beq.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054c2:	f7fc fc55 	bl	8001d70 <HAL_GetTick>
 80054c6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054c8:	e00b      	b.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054ca:	f7fc fc51 	bl	8001d70 <HAL_GetTick>
 80054ce:	4602      	mov	r2, r0
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	1ad3      	subs	r3, r2, r3
 80054d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80054d8:	4293      	cmp	r3, r2
 80054da:	d902      	bls.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80054dc:	2303      	movs	r3, #3
 80054de:	74fb      	strb	r3, [r7, #19]
            break;
 80054e0:	e006      	b.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054e2:	4b0d      	ldr	r3, [pc, #52]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054e8:	f003 0302 	and.w	r3, r3, #2
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d0ec      	beq.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80054f0:	7cfb      	ldrb	r3, [r7, #19]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d10c      	bne.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054f6:	4b08      	ldr	r3, [pc, #32]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005506:	4904      	ldr	r1, [pc, #16]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005508:	4313      	orrs	r3, r2
 800550a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800550e:	e009      	b.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005510:	7cfb      	ldrb	r3, [r7, #19]
 8005512:	74bb      	strb	r3, [r7, #18]
 8005514:	e006      	b.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005516:	bf00      	nop
 8005518:	40021000 	.word	0x40021000
 800551c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005520:	7cfb      	ldrb	r3, [r7, #19]
 8005522:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005524:	7c7b      	ldrb	r3, [r7, #17]
 8005526:	2b01      	cmp	r3, #1
 8005528:	d105      	bne.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800552a:	4b9e      	ldr	r3, [pc, #632]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800552c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800552e:	4a9d      	ldr	r2, [pc, #628]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005530:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005534:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 0301 	and.w	r3, r3, #1
 800553e:	2b00      	cmp	r3, #0
 8005540:	d00a      	beq.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005542:	4b98      	ldr	r3, [pc, #608]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005544:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005548:	f023 0203 	bic.w	r2, r3, #3
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005550:	4994      	ldr	r1, [pc, #592]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005552:	4313      	orrs	r3, r2
 8005554:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 0302 	and.w	r3, r3, #2
 8005560:	2b00      	cmp	r3, #0
 8005562:	d00a      	beq.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005564:	4b8f      	ldr	r3, [pc, #572]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800556a:	f023 020c 	bic.w	r2, r3, #12
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005572:	498c      	ldr	r1, [pc, #560]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005574:	4313      	orrs	r3, r2
 8005576:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 0304 	and.w	r3, r3, #4
 8005582:	2b00      	cmp	r3, #0
 8005584:	d00a      	beq.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005586:	4b87      	ldr	r3, [pc, #540]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005588:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800558c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005594:	4983      	ldr	r1, [pc, #524]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005596:	4313      	orrs	r3, r2
 8005598:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 0308 	and.w	r3, r3, #8
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d00a      	beq.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80055a8:	4b7e      	ldr	r3, [pc, #504]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055b6:	497b      	ldr	r1, [pc, #492]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055b8:	4313      	orrs	r3, r2
 80055ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 0310 	and.w	r3, r3, #16
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d00a      	beq.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80055ca:	4b76      	ldr	r3, [pc, #472]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055d8:	4972      	ldr	r1, [pc, #456]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055da:	4313      	orrs	r3, r2
 80055dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f003 0320 	and.w	r3, r3, #32
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d00a      	beq.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80055ec:	4b6d      	ldr	r3, [pc, #436]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055f2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055fa:	496a      	ldr	r1, [pc, #424]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055fc:	4313      	orrs	r3, r2
 80055fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800560a:	2b00      	cmp	r3, #0
 800560c:	d00a      	beq.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800560e:	4b65      	ldr	r3, [pc, #404]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005614:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800561c:	4961      	ldr	r1, [pc, #388]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800561e:	4313      	orrs	r3, r2
 8005620:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800562c:	2b00      	cmp	r3, #0
 800562e:	d00a      	beq.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005630:	4b5c      	ldr	r3, [pc, #368]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005636:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800563e:	4959      	ldr	r1, [pc, #356]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005640:	4313      	orrs	r3, r2
 8005642:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800564e:	2b00      	cmp	r3, #0
 8005650:	d00a      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005652:	4b54      	ldr	r3, [pc, #336]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005658:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005660:	4950      	ldr	r1, [pc, #320]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005662:	4313      	orrs	r3, r2
 8005664:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005670:	2b00      	cmp	r3, #0
 8005672:	d00a      	beq.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005674:	4b4b      	ldr	r3, [pc, #300]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800567a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005682:	4948      	ldr	r1, [pc, #288]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005684:	4313      	orrs	r3, r2
 8005686:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005692:	2b00      	cmp	r3, #0
 8005694:	d00a      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005696:	4b43      	ldr	r3, [pc, #268]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800569c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056a4:	493f      	ldr	r1, [pc, #252]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056a6:	4313      	orrs	r3, r2
 80056a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d028      	beq.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80056b8:	4b3a      	ldr	r3, [pc, #232]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056c6:	4937      	ldr	r1, [pc, #220]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056c8:	4313      	orrs	r3, r2
 80056ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056d6:	d106      	bne.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056d8:	4b32      	ldr	r3, [pc, #200]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	4a31      	ldr	r2, [pc, #196]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056e2:	60d3      	str	r3, [r2, #12]
 80056e4:	e011      	b.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80056ee:	d10c      	bne.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	3304      	adds	r3, #4
 80056f4:	2101      	movs	r1, #1
 80056f6:	4618      	mov	r0, r3
 80056f8:	f000 f8c8 	bl	800588c <RCCEx_PLLSAI1_Config>
 80056fc:	4603      	mov	r3, r0
 80056fe:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005700:	7cfb      	ldrb	r3, [r7, #19]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d001      	beq.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005706:	7cfb      	ldrb	r3, [r7, #19]
 8005708:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005712:	2b00      	cmp	r3, #0
 8005714:	d028      	beq.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005716:	4b23      	ldr	r3, [pc, #140]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800571c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005724:	491f      	ldr	r1, [pc, #124]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005726:	4313      	orrs	r3, r2
 8005728:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005730:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005734:	d106      	bne.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005736:	4b1b      	ldr	r3, [pc, #108]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	4a1a      	ldr	r2, [pc, #104]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800573c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005740:	60d3      	str	r3, [r2, #12]
 8005742:	e011      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005748:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800574c:	d10c      	bne.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	3304      	adds	r3, #4
 8005752:	2101      	movs	r1, #1
 8005754:	4618      	mov	r0, r3
 8005756:	f000 f899 	bl	800588c <RCCEx_PLLSAI1_Config>
 800575a:	4603      	mov	r3, r0
 800575c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800575e:	7cfb      	ldrb	r3, [r7, #19]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d001      	beq.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005764:	7cfb      	ldrb	r3, [r7, #19]
 8005766:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005770:	2b00      	cmp	r3, #0
 8005772:	d02b      	beq.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005774:	4b0b      	ldr	r3, [pc, #44]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800577a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005782:	4908      	ldr	r1, [pc, #32]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005784:	4313      	orrs	r3, r2
 8005786:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800578e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005792:	d109      	bne.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005794:	4b03      	ldr	r3, [pc, #12]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	4a02      	ldr	r2, [pc, #8]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800579a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800579e:	60d3      	str	r3, [r2, #12]
 80057a0:	e014      	b.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x514>
 80057a2:	bf00      	nop
 80057a4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80057b0:	d10c      	bne.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	3304      	adds	r3, #4
 80057b6:	2101      	movs	r1, #1
 80057b8:	4618      	mov	r0, r3
 80057ba:	f000 f867 	bl	800588c <RCCEx_PLLSAI1_Config>
 80057be:	4603      	mov	r3, r0
 80057c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80057c2:	7cfb      	ldrb	r3, [r7, #19]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d001      	beq.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80057c8:	7cfb      	ldrb	r3, [r7, #19]
 80057ca:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d02f      	beq.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80057d8:	4b2b      	ldr	r3, [pc, #172]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80057da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057de:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057e6:	4928      	ldr	r1, [pc, #160]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80057e8:	4313      	orrs	r3, r2
 80057ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057f6:	d10d      	bne.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	3304      	adds	r3, #4
 80057fc:	2102      	movs	r1, #2
 80057fe:	4618      	mov	r0, r3
 8005800:	f000 f844 	bl	800588c <RCCEx_PLLSAI1_Config>
 8005804:	4603      	mov	r3, r0
 8005806:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005808:	7cfb      	ldrb	r3, [r7, #19]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d014      	beq.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800580e:	7cfb      	ldrb	r3, [r7, #19]
 8005810:	74bb      	strb	r3, [r7, #18]
 8005812:	e011      	b.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005818:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800581c:	d10c      	bne.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	3320      	adds	r3, #32
 8005822:	2102      	movs	r1, #2
 8005824:	4618      	mov	r0, r3
 8005826:	f000 f925 	bl	8005a74 <RCCEx_PLLSAI2_Config>
 800582a:	4603      	mov	r3, r0
 800582c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800582e:	7cfb      	ldrb	r3, [r7, #19]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d001      	beq.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005834:	7cfb      	ldrb	r3, [r7, #19]
 8005836:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005840:	2b00      	cmp	r3, #0
 8005842:	d00a      	beq.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005844:	4b10      	ldr	r3, [pc, #64]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800584a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005852:	490d      	ldr	r1, [pc, #52]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005854:	4313      	orrs	r3, r2
 8005856:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005862:	2b00      	cmp	r3, #0
 8005864:	d00b      	beq.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005866:	4b08      	ldr	r3, [pc, #32]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800586c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005876:	4904      	ldr	r1, [pc, #16]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005878:	4313      	orrs	r3, r2
 800587a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800587e:	7cbb      	ldrb	r3, [r7, #18]
}
 8005880:	4618      	mov	r0, r3
 8005882:	3718      	adds	r7, #24
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}
 8005888:	40021000 	.word	0x40021000

0800588c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005896:	2300      	movs	r3, #0
 8005898:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800589a:	4b75      	ldr	r3, [pc, #468]	; (8005a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	f003 0303 	and.w	r3, r3, #3
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d018      	beq.n	80058d8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80058a6:	4b72      	ldr	r3, [pc, #456]	; (8005a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	f003 0203 	and.w	r2, r3, #3
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d10d      	bne.n	80058d2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
       ||
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d009      	beq.n	80058d2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80058be:	4b6c      	ldr	r3, [pc, #432]	; (8005a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	091b      	lsrs	r3, r3, #4
 80058c4:	f003 0307 	and.w	r3, r3, #7
 80058c8:	1c5a      	adds	r2, r3, #1
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	685b      	ldr	r3, [r3, #4]
       ||
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d047      	beq.n	8005962 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	73fb      	strb	r3, [r7, #15]
 80058d6:	e044      	b.n	8005962 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	2b03      	cmp	r3, #3
 80058de:	d018      	beq.n	8005912 <RCCEx_PLLSAI1_Config+0x86>
 80058e0:	2b03      	cmp	r3, #3
 80058e2:	d825      	bhi.n	8005930 <RCCEx_PLLSAI1_Config+0xa4>
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d002      	beq.n	80058ee <RCCEx_PLLSAI1_Config+0x62>
 80058e8:	2b02      	cmp	r3, #2
 80058ea:	d009      	beq.n	8005900 <RCCEx_PLLSAI1_Config+0x74>
 80058ec:	e020      	b.n	8005930 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80058ee:	4b60      	ldr	r3, [pc, #384]	; (8005a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f003 0302 	and.w	r3, r3, #2
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d11d      	bne.n	8005936 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058fe:	e01a      	b.n	8005936 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005900:	4b5b      	ldr	r3, [pc, #364]	; (8005a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005908:	2b00      	cmp	r3, #0
 800590a:	d116      	bne.n	800593a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005910:	e013      	b.n	800593a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005912:	4b57      	ldr	r3, [pc, #348]	; (8005a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800591a:	2b00      	cmp	r3, #0
 800591c:	d10f      	bne.n	800593e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800591e:	4b54      	ldr	r3, [pc, #336]	; (8005a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005926:	2b00      	cmp	r3, #0
 8005928:	d109      	bne.n	800593e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800592e:	e006      	b.n	800593e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	73fb      	strb	r3, [r7, #15]
      break;
 8005934:	e004      	b.n	8005940 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005936:	bf00      	nop
 8005938:	e002      	b.n	8005940 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800593a:	bf00      	nop
 800593c:	e000      	b.n	8005940 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800593e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005940:	7bfb      	ldrb	r3, [r7, #15]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d10d      	bne.n	8005962 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005946:	4b4a      	ldr	r3, [pc, #296]	; (8005a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6819      	ldr	r1, [r3, #0]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	3b01      	subs	r3, #1
 8005958:	011b      	lsls	r3, r3, #4
 800595a:	430b      	orrs	r3, r1
 800595c:	4944      	ldr	r1, [pc, #272]	; (8005a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 800595e:	4313      	orrs	r3, r2
 8005960:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005962:	7bfb      	ldrb	r3, [r7, #15]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d17d      	bne.n	8005a64 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005968:	4b41      	ldr	r3, [pc, #260]	; (8005a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a40      	ldr	r2, [pc, #256]	; (8005a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 800596e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005972:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005974:	f7fc f9fc 	bl	8001d70 <HAL_GetTick>
 8005978:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800597a:	e009      	b.n	8005990 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800597c:	f7fc f9f8 	bl	8001d70 <HAL_GetTick>
 8005980:	4602      	mov	r2, r0
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	1ad3      	subs	r3, r2, r3
 8005986:	2b02      	cmp	r3, #2
 8005988:	d902      	bls.n	8005990 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800598a:	2303      	movs	r3, #3
 800598c:	73fb      	strb	r3, [r7, #15]
        break;
 800598e:	e005      	b.n	800599c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005990:	4b37      	ldr	r3, [pc, #220]	; (8005a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005998:	2b00      	cmp	r3, #0
 800599a:	d1ef      	bne.n	800597c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800599c:	7bfb      	ldrb	r3, [r7, #15]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d160      	bne.n	8005a64 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d111      	bne.n	80059cc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80059a8:	4b31      	ldr	r3, [pc, #196]	; (8005a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059aa:	691b      	ldr	r3, [r3, #16]
 80059ac:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80059b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059b4:	687a      	ldr	r2, [r7, #4]
 80059b6:	6892      	ldr	r2, [r2, #8]
 80059b8:	0211      	lsls	r1, r2, #8
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	68d2      	ldr	r2, [r2, #12]
 80059be:	0912      	lsrs	r2, r2, #4
 80059c0:	0452      	lsls	r2, r2, #17
 80059c2:	430a      	orrs	r2, r1
 80059c4:	492a      	ldr	r1, [pc, #168]	; (8005a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059c6:	4313      	orrs	r3, r2
 80059c8:	610b      	str	r3, [r1, #16]
 80059ca:	e027      	b.n	8005a1c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d112      	bne.n	80059f8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80059d2:	4b27      	ldr	r3, [pc, #156]	; (8005a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80059da:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	6892      	ldr	r2, [r2, #8]
 80059e2:	0211      	lsls	r1, r2, #8
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	6912      	ldr	r2, [r2, #16]
 80059e8:	0852      	lsrs	r2, r2, #1
 80059ea:	3a01      	subs	r2, #1
 80059ec:	0552      	lsls	r2, r2, #21
 80059ee:	430a      	orrs	r2, r1
 80059f0:	491f      	ldr	r1, [pc, #124]	; (8005a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059f2:	4313      	orrs	r3, r2
 80059f4:	610b      	str	r3, [r1, #16]
 80059f6:	e011      	b.n	8005a1c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80059f8:	4b1d      	ldr	r3, [pc, #116]	; (8005a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059fa:	691b      	ldr	r3, [r3, #16]
 80059fc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005a00:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	6892      	ldr	r2, [r2, #8]
 8005a08:	0211      	lsls	r1, r2, #8
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	6952      	ldr	r2, [r2, #20]
 8005a0e:	0852      	lsrs	r2, r2, #1
 8005a10:	3a01      	subs	r2, #1
 8005a12:	0652      	lsls	r2, r2, #25
 8005a14:	430a      	orrs	r2, r1
 8005a16:	4916      	ldr	r1, [pc, #88]	; (8005a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005a1c:	4b14      	ldr	r3, [pc, #80]	; (8005a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a13      	ldr	r2, [pc, #76]	; (8005a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a22:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005a26:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a28:	f7fc f9a2 	bl	8001d70 <HAL_GetTick>
 8005a2c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005a2e:	e009      	b.n	8005a44 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a30:	f7fc f99e 	bl	8001d70 <HAL_GetTick>
 8005a34:	4602      	mov	r2, r0
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	1ad3      	subs	r3, r2, r3
 8005a3a:	2b02      	cmp	r3, #2
 8005a3c:	d902      	bls.n	8005a44 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	73fb      	strb	r3, [r7, #15]
          break;
 8005a42:	e005      	b.n	8005a50 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005a44:	4b0a      	ldr	r3, [pc, #40]	; (8005a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d0ef      	beq.n	8005a30 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005a50:	7bfb      	ldrb	r3, [r7, #15]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d106      	bne.n	8005a64 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005a56:	4b06      	ldr	r3, [pc, #24]	; (8005a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a58:	691a      	ldr	r2, [r3, #16]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	699b      	ldr	r3, [r3, #24]
 8005a5e:	4904      	ldr	r1, [pc, #16]	; (8005a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a60:	4313      	orrs	r3, r2
 8005a62:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3710      	adds	r7, #16
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	40021000 	.word	0x40021000

08005a74 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b084      	sub	sp, #16
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005a82:	4b6a      	ldr	r3, [pc, #424]	; (8005c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a84:	68db      	ldr	r3, [r3, #12]
 8005a86:	f003 0303 	and.w	r3, r3, #3
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d018      	beq.n	8005ac0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005a8e:	4b67      	ldr	r3, [pc, #412]	; (8005c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	f003 0203 	and.w	r2, r3, #3
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d10d      	bne.n	8005aba <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
       ||
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d009      	beq.n	8005aba <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005aa6:	4b61      	ldr	r3, [pc, #388]	; (8005c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005aa8:	68db      	ldr	r3, [r3, #12]
 8005aaa:	091b      	lsrs	r3, r3, #4
 8005aac:	f003 0307 	and.w	r3, r3, #7
 8005ab0:	1c5a      	adds	r2, r3, #1
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	685b      	ldr	r3, [r3, #4]
       ||
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d047      	beq.n	8005b4a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	73fb      	strb	r3, [r7, #15]
 8005abe:	e044      	b.n	8005b4a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	2b03      	cmp	r3, #3
 8005ac6:	d018      	beq.n	8005afa <RCCEx_PLLSAI2_Config+0x86>
 8005ac8:	2b03      	cmp	r3, #3
 8005aca:	d825      	bhi.n	8005b18 <RCCEx_PLLSAI2_Config+0xa4>
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d002      	beq.n	8005ad6 <RCCEx_PLLSAI2_Config+0x62>
 8005ad0:	2b02      	cmp	r3, #2
 8005ad2:	d009      	beq.n	8005ae8 <RCCEx_PLLSAI2_Config+0x74>
 8005ad4:	e020      	b.n	8005b18 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005ad6:	4b55      	ldr	r3, [pc, #340]	; (8005c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 0302 	and.w	r3, r3, #2
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d11d      	bne.n	8005b1e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ae6:	e01a      	b.n	8005b1e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005ae8:	4b50      	ldr	r3, [pc, #320]	; (8005c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d116      	bne.n	8005b22 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005af8:	e013      	b.n	8005b22 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005afa:	4b4c      	ldr	r3, [pc, #304]	; (8005c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d10f      	bne.n	8005b26 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005b06:	4b49      	ldr	r3, [pc, #292]	; (8005c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d109      	bne.n	8005b26 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005b16:	e006      	b.n	8005b26 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	73fb      	strb	r3, [r7, #15]
      break;
 8005b1c:	e004      	b.n	8005b28 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005b1e:	bf00      	nop
 8005b20:	e002      	b.n	8005b28 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005b22:	bf00      	nop
 8005b24:	e000      	b.n	8005b28 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005b26:	bf00      	nop
    }

    if(status == HAL_OK)
 8005b28:	7bfb      	ldrb	r3, [r7, #15]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d10d      	bne.n	8005b4a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005b2e:	4b3f      	ldr	r3, [pc, #252]	; (8005c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b30:	68db      	ldr	r3, [r3, #12]
 8005b32:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6819      	ldr	r1, [r3, #0]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	3b01      	subs	r3, #1
 8005b40:	011b      	lsls	r3, r3, #4
 8005b42:	430b      	orrs	r3, r1
 8005b44:	4939      	ldr	r1, [pc, #228]	; (8005c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b46:	4313      	orrs	r3, r2
 8005b48:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005b4a:	7bfb      	ldrb	r3, [r7, #15]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d167      	bne.n	8005c20 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005b50:	4b36      	ldr	r3, [pc, #216]	; (8005c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a35      	ldr	r2, [pc, #212]	; (8005c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b5c:	f7fc f908 	bl	8001d70 <HAL_GetTick>
 8005b60:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005b62:	e009      	b.n	8005b78 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005b64:	f7fc f904 	bl	8001d70 <HAL_GetTick>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	1ad3      	subs	r3, r2, r3
 8005b6e:	2b02      	cmp	r3, #2
 8005b70:	d902      	bls.n	8005b78 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005b72:	2303      	movs	r3, #3
 8005b74:	73fb      	strb	r3, [r7, #15]
        break;
 8005b76:	e005      	b.n	8005b84 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005b78:	4b2c      	ldr	r3, [pc, #176]	; (8005c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d1ef      	bne.n	8005b64 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005b84:	7bfb      	ldrb	r3, [r7, #15]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d14a      	bne.n	8005c20 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d111      	bne.n	8005bb4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005b90:	4b26      	ldr	r3, [pc, #152]	; (8005c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b92:	695b      	ldr	r3, [r3, #20]
 8005b94:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005b98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	6892      	ldr	r2, [r2, #8]
 8005ba0:	0211      	lsls	r1, r2, #8
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	68d2      	ldr	r2, [r2, #12]
 8005ba6:	0912      	lsrs	r2, r2, #4
 8005ba8:	0452      	lsls	r2, r2, #17
 8005baa:	430a      	orrs	r2, r1
 8005bac:	491f      	ldr	r1, [pc, #124]	; (8005c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	614b      	str	r3, [r1, #20]
 8005bb2:	e011      	b.n	8005bd8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005bb4:	4b1d      	ldr	r3, [pc, #116]	; (8005c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bb6:	695b      	ldr	r3, [r3, #20]
 8005bb8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005bbc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	6892      	ldr	r2, [r2, #8]
 8005bc4:	0211      	lsls	r1, r2, #8
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	6912      	ldr	r2, [r2, #16]
 8005bca:	0852      	lsrs	r2, r2, #1
 8005bcc:	3a01      	subs	r2, #1
 8005bce:	0652      	lsls	r2, r2, #25
 8005bd0:	430a      	orrs	r2, r1
 8005bd2:	4916      	ldr	r1, [pc, #88]	; (8005c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005bd8:	4b14      	ldr	r3, [pc, #80]	; (8005c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a13      	ldr	r2, [pc, #76]	; (8005c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005be2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005be4:	f7fc f8c4 	bl	8001d70 <HAL_GetTick>
 8005be8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005bea:	e009      	b.n	8005c00 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005bec:	f7fc f8c0 	bl	8001d70 <HAL_GetTick>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	1ad3      	subs	r3, r2, r3
 8005bf6:	2b02      	cmp	r3, #2
 8005bf8:	d902      	bls.n	8005c00 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	73fb      	strb	r3, [r7, #15]
          break;
 8005bfe:	e005      	b.n	8005c0c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005c00:	4b0a      	ldr	r3, [pc, #40]	; (8005c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d0ef      	beq.n	8005bec <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005c0c:	7bfb      	ldrb	r3, [r7, #15]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d106      	bne.n	8005c20 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005c12:	4b06      	ldr	r3, [pc, #24]	; (8005c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c14:	695a      	ldr	r2, [r3, #20]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	695b      	ldr	r3, [r3, #20]
 8005c1a:	4904      	ldr	r1, [pc, #16]	; (8005c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3710      	adds	r7, #16
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
 8005c2a:	bf00      	nop
 8005c2c:	40021000 	.word	0x40021000

08005c30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b085      	sub	sp, #20
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d001      	beq.n	8005c48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	e04f      	b.n	8005ce8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2202      	movs	r2, #2
 8005c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68da      	ldr	r2, [r3, #12]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f042 0201 	orr.w	r2, r2, #1
 8005c5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a23      	ldr	r2, [pc, #140]	; (8005cf4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d01d      	beq.n	8005ca6 <HAL_TIM_Base_Start_IT+0x76>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c72:	d018      	beq.n	8005ca6 <HAL_TIM_Base_Start_IT+0x76>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a1f      	ldr	r2, [pc, #124]	; (8005cf8 <HAL_TIM_Base_Start_IT+0xc8>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d013      	beq.n	8005ca6 <HAL_TIM_Base_Start_IT+0x76>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a1e      	ldr	r2, [pc, #120]	; (8005cfc <HAL_TIM_Base_Start_IT+0xcc>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d00e      	beq.n	8005ca6 <HAL_TIM_Base_Start_IT+0x76>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a1c      	ldr	r2, [pc, #112]	; (8005d00 <HAL_TIM_Base_Start_IT+0xd0>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d009      	beq.n	8005ca6 <HAL_TIM_Base_Start_IT+0x76>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a1b      	ldr	r2, [pc, #108]	; (8005d04 <HAL_TIM_Base_Start_IT+0xd4>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d004      	beq.n	8005ca6 <HAL_TIM_Base_Start_IT+0x76>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a19      	ldr	r2, [pc, #100]	; (8005d08 <HAL_TIM_Base_Start_IT+0xd8>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d115      	bne.n	8005cd2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	689a      	ldr	r2, [r3, #8]
 8005cac:	4b17      	ldr	r3, [pc, #92]	; (8005d0c <HAL_TIM_Base_Start_IT+0xdc>)
 8005cae:	4013      	ands	r3, r2
 8005cb0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2b06      	cmp	r3, #6
 8005cb6:	d015      	beq.n	8005ce4 <HAL_TIM_Base_Start_IT+0xb4>
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cbe:	d011      	beq.n	8005ce4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f042 0201 	orr.w	r2, r2, #1
 8005cce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cd0:	e008      	b.n	8005ce4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f042 0201 	orr.w	r2, r2, #1
 8005ce0:	601a      	str	r2, [r3, #0]
 8005ce2:	e000      	b.n	8005ce6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ce4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005ce6:	2300      	movs	r3, #0
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3714      	adds	r7, #20
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr
 8005cf4:	40012c00 	.word	0x40012c00
 8005cf8:	40000400 	.word	0x40000400
 8005cfc:	40000800 	.word	0x40000800
 8005d00:	40000c00 	.word	0x40000c00
 8005d04:	40013400 	.word	0x40013400
 8005d08:	40014000 	.word	0x40014000
 8005d0c:	00010007 	.word	0x00010007

08005d10 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b082      	sub	sp, #8
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d101      	bne.n	8005d22 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e049      	b.n	8005db6 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d106      	bne.n	8005d3c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2200      	movs	r2, #0
 8005d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f7fb fd92 	bl	8001860 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2202      	movs	r2, #2
 8005d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	3304      	adds	r3, #4
 8005d4c:	4619      	mov	r1, r3
 8005d4e:	4610      	mov	r0, r2
 8005d50:	f000 fb44 	bl	80063dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005db4:	2300      	movs	r3, #0
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3708      	adds	r7, #8
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}

08005dbe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005dbe:	b580      	push	{r7, lr}
 8005dc0:	b082      	sub	sp, #8
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d101      	bne.n	8005dd0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e049      	b.n	8005e64 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d106      	bne.n	8005dea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f7fb fd17 	bl	8001818 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2202      	movs	r2, #2
 8005dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	3304      	adds	r3, #4
 8005dfa:	4619      	mov	r1, r3
 8005dfc:	4610      	mov	r0, r2
 8005dfe:	f000 faed 	bl	80063dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2201      	movs	r2, #1
 8005e06:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2201      	movs	r2, #1
 8005e16:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2201      	movs	r2, #1
 8005e26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2201      	movs	r2, #1
 8005e36:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2201      	movs	r2, #1
 8005e46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2201      	movs	r2, #1
 8005e56:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e62:	2300      	movs	r3, #0
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3708      	adds	r7, #8
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}

08005e6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b084      	sub	sp, #16
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	f003 0302 	and.w	r3, r3, #2
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d020      	beq.n	8005ed0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	f003 0302 	and.w	r3, r3, #2
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d01b      	beq.n	8005ed0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f06f 0202 	mvn.w	r2, #2
 8005ea0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	699b      	ldr	r3, [r3, #24]
 8005eae:	f003 0303 	and.w	r3, r3, #3
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d003      	beq.n	8005ebe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f000 fa72 	bl	80063a0 <HAL_TIM_IC_CaptureCallback>
 8005ebc:	e005      	b.n	8005eca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 fa64 	bl	800638c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f000 fa75 	bl	80063b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	f003 0304 	and.w	r3, r3, #4
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d020      	beq.n	8005f1c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f003 0304 	and.w	r3, r3, #4
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d01b      	beq.n	8005f1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f06f 0204 	mvn.w	r2, #4
 8005eec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2202      	movs	r2, #2
 8005ef2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	699b      	ldr	r3, [r3, #24]
 8005efa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d003      	beq.n	8005f0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 fa4c 	bl	80063a0 <HAL_TIM_IC_CaptureCallback>
 8005f08:	e005      	b.n	8005f16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f000 fa3e 	bl	800638c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 fa4f 	bl	80063b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	f003 0308 	and.w	r3, r3, #8
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d020      	beq.n	8005f68 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	f003 0308 	and.w	r3, r3, #8
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d01b      	beq.n	8005f68 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f06f 0208 	mvn.w	r2, #8
 8005f38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2204      	movs	r2, #4
 8005f3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	69db      	ldr	r3, [r3, #28]
 8005f46:	f003 0303 	and.w	r3, r3, #3
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d003      	beq.n	8005f56 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 fa26 	bl	80063a0 <HAL_TIM_IC_CaptureCallback>
 8005f54:	e005      	b.n	8005f62 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 fa18 	bl	800638c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f000 fa29 	bl	80063b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2200      	movs	r2, #0
 8005f66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	f003 0310 	and.w	r3, r3, #16
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d020      	beq.n	8005fb4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f003 0310 	and.w	r3, r3, #16
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d01b      	beq.n	8005fb4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f06f 0210 	mvn.w	r2, #16
 8005f84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2208      	movs	r2, #8
 8005f8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	69db      	ldr	r3, [r3, #28]
 8005f92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d003      	beq.n	8005fa2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 fa00 	bl	80063a0 <HAL_TIM_IC_CaptureCallback>
 8005fa0:	e005      	b.n	8005fae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 f9f2 	bl	800638c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f000 fa03 	bl	80063b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	f003 0301 	and.w	r3, r3, #1
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d00c      	beq.n	8005fd8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f003 0301 	and.w	r3, r3, #1
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d007      	beq.n	8005fd8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f06f 0201 	mvn.w	r2, #1
 8005fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f7fb f83a 	bl	800104c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d00c      	beq.n	8005ffc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d007      	beq.n	8005ffc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ff4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 fdf2 	bl	8006be0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006002:	2b00      	cmp	r3, #0
 8006004:	d00c      	beq.n	8006020 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800600c:	2b00      	cmp	r3, #0
 800600e:	d007      	beq.n	8006020 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 fdea 	bl	8006bf4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006026:	2b00      	cmp	r3, #0
 8006028:	d00c      	beq.n	8006044 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006030:	2b00      	cmp	r3, #0
 8006032:	d007      	beq.n	8006044 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800603c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f000 f9c2 	bl	80063c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	f003 0320 	and.w	r3, r3, #32
 800604a:	2b00      	cmp	r3, #0
 800604c:	d00c      	beq.n	8006068 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	f003 0320 	and.w	r3, r3, #32
 8006054:	2b00      	cmp	r3, #0
 8006056:	d007      	beq.n	8006068 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f06f 0220 	mvn.w	r2, #32
 8006060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 fdb2 	bl	8006bcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006068:	bf00      	nop
 800606a:	3710      	adds	r7, #16
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}

08006070 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b086      	sub	sp, #24
 8006074:	af00      	add	r7, sp, #0
 8006076:	60f8      	str	r0, [r7, #12]
 8006078:	60b9      	str	r1, [r7, #8]
 800607a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800607c:	2300      	movs	r3, #0
 800607e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006086:	2b01      	cmp	r3, #1
 8006088:	d101      	bne.n	800608e <HAL_TIM_OC_ConfigChannel+0x1e>
 800608a:	2302      	movs	r3, #2
 800608c:	e066      	b.n	800615c <HAL_TIM_OC_ConfigChannel+0xec>
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2201      	movs	r2, #1
 8006092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2b14      	cmp	r3, #20
 800609a:	d857      	bhi.n	800614c <HAL_TIM_OC_ConfigChannel+0xdc>
 800609c:	a201      	add	r2, pc, #4	; (adr r2, 80060a4 <HAL_TIM_OC_ConfigChannel+0x34>)
 800609e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060a2:	bf00      	nop
 80060a4:	080060f9 	.word	0x080060f9
 80060a8:	0800614d 	.word	0x0800614d
 80060ac:	0800614d 	.word	0x0800614d
 80060b0:	0800614d 	.word	0x0800614d
 80060b4:	08006107 	.word	0x08006107
 80060b8:	0800614d 	.word	0x0800614d
 80060bc:	0800614d 	.word	0x0800614d
 80060c0:	0800614d 	.word	0x0800614d
 80060c4:	08006115 	.word	0x08006115
 80060c8:	0800614d 	.word	0x0800614d
 80060cc:	0800614d 	.word	0x0800614d
 80060d0:	0800614d 	.word	0x0800614d
 80060d4:	08006123 	.word	0x08006123
 80060d8:	0800614d 	.word	0x0800614d
 80060dc:	0800614d 	.word	0x0800614d
 80060e0:	0800614d 	.word	0x0800614d
 80060e4:	08006131 	.word	0x08006131
 80060e8:	0800614d 	.word	0x0800614d
 80060ec:	0800614d 	.word	0x0800614d
 80060f0:	0800614d 	.word	0x0800614d
 80060f4:	0800613f 	.word	0x0800613f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	68b9      	ldr	r1, [r7, #8]
 80060fe:	4618      	mov	r0, r3
 8006100:	f000 fa06 	bl	8006510 <TIM_OC1_SetConfig>
      break;
 8006104:	e025      	b.n	8006152 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	68b9      	ldr	r1, [r7, #8]
 800610c:	4618      	mov	r0, r3
 800610e:	f000 fa8f 	bl	8006630 <TIM_OC2_SetConfig>
      break;
 8006112:	e01e      	b.n	8006152 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	68b9      	ldr	r1, [r7, #8]
 800611a:	4618      	mov	r0, r3
 800611c:	f000 fb12 	bl	8006744 <TIM_OC3_SetConfig>
      break;
 8006120:	e017      	b.n	8006152 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	68b9      	ldr	r1, [r7, #8]
 8006128:	4618      	mov	r0, r3
 800612a:	f000 fb93 	bl	8006854 <TIM_OC4_SetConfig>
      break;
 800612e:	e010      	b.n	8006152 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	68b9      	ldr	r1, [r7, #8]
 8006136:	4618      	mov	r0, r3
 8006138:	f000 fbf6 	bl	8006928 <TIM_OC5_SetConfig>
      break;
 800613c:	e009      	b.n	8006152 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	68b9      	ldr	r1, [r7, #8]
 8006144:	4618      	mov	r0, r3
 8006146:	f000 fc53 	bl	80069f0 <TIM_OC6_SetConfig>
      break;
 800614a:	e002      	b.n	8006152 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	75fb      	strb	r3, [r7, #23]
      break;
 8006150:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2200      	movs	r2, #0
 8006156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800615a:	7dfb      	ldrb	r3, [r7, #23]
}
 800615c:	4618      	mov	r0, r3
 800615e:	3718      	adds	r7, #24
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}

08006164 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b086      	sub	sp, #24
 8006168:	af00      	add	r7, sp, #0
 800616a:	60f8      	str	r0, [r7, #12]
 800616c:	60b9      	str	r1, [r7, #8]
 800616e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006170:	2300      	movs	r3, #0
 8006172:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800617a:	2b01      	cmp	r3, #1
 800617c:	d101      	bne.n	8006182 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800617e:	2302      	movs	r3, #2
 8006180:	e0ff      	b.n	8006382 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2201      	movs	r2, #1
 8006186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2b14      	cmp	r3, #20
 800618e:	f200 80f0 	bhi.w	8006372 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006192:	a201      	add	r2, pc, #4	; (adr r2, 8006198 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006198:	080061ed 	.word	0x080061ed
 800619c:	08006373 	.word	0x08006373
 80061a0:	08006373 	.word	0x08006373
 80061a4:	08006373 	.word	0x08006373
 80061a8:	0800622d 	.word	0x0800622d
 80061ac:	08006373 	.word	0x08006373
 80061b0:	08006373 	.word	0x08006373
 80061b4:	08006373 	.word	0x08006373
 80061b8:	0800626f 	.word	0x0800626f
 80061bc:	08006373 	.word	0x08006373
 80061c0:	08006373 	.word	0x08006373
 80061c4:	08006373 	.word	0x08006373
 80061c8:	080062af 	.word	0x080062af
 80061cc:	08006373 	.word	0x08006373
 80061d0:	08006373 	.word	0x08006373
 80061d4:	08006373 	.word	0x08006373
 80061d8:	080062f1 	.word	0x080062f1
 80061dc:	08006373 	.word	0x08006373
 80061e0:	08006373 	.word	0x08006373
 80061e4:	08006373 	.word	0x08006373
 80061e8:	08006331 	.word	0x08006331
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	68b9      	ldr	r1, [r7, #8]
 80061f2:	4618      	mov	r0, r3
 80061f4:	f000 f98c 	bl	8006510 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	699a      	ldr	r2, [r3, #24]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f042 0208 	orr.w	r2, r2, #8
 8006206:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	699a      	ldr	r2, [r3, #24]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f022 0204 	bic.w	r2, r2, #4
 8006216:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	6999      	ldr	r1, [r3, #24]
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	691a      	ldr	r2, [r3, #16]
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	430a      	orrs	r2, r1
 8006228:	619a      	str	r2, [r3, #24]
      break;
 800622a:	e0a5      	b.n	8006378 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	68b9      	ldr	r1, [r7, #8]
 8006232:	4618      	mov	r0, r3
 8006234:	f000 f9fc 	bl	8006630 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	699a      	ldr	r2, [r3, #24]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006246:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	699a      	ldr	r2, [r3, #24]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006256:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	6999      	ldr	r1, [r3, #24]
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	691b      	ldr	r3, [r3, #16]
 8006262:	021a      	lsls	r2, r3, #8
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	430a      	orrs	r2, r1
 800626a:	619a      	str	r2, [r3, #24]
      break;
 800626c:	e084      	b.n	8006378 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	68b9      	ldr	r1, [r7, #8]
 8006274:	4618      	mov	r0, r3
 8006276:	f000 fa65 	bl	8006744 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	69da      	ldr	r2, [r3, #28]
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f042 0208 	orr.w	r2, r2, #8
 8006288:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	69da      	ldr	r2, [r3, #28]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f022 0204 	bic.w	r2, r2, #4
 8006298:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	69d9      	ldr	r1, [r3, #28]
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	691a      	ldr	r2, [r3, #16]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	430a      	orrs	r2, r1
 80062aa:	61da      	str	r2, [r3, #28]
      break;
 80062ac:	e064      	b.n	8006378 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	68b9      	ldr	r1, [r7, #8]
 80062b4:	4618      	mov	r0, r3
 80062b6:	f000 facd 	bl	8006854 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	69da      	ldr	r2, [r3, #28]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	69da      	ldr	r2, [r3, #28]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	69d9      	ldr	r1, [r3, #28]
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	691b      	ldr	r3, [r3, #16]
 80062e4:	021a      	lsls	r2, r3, #8
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	430a      	orrs	r2, r1
 80062ec:	61da      	str	r2, [r3, #28]
      break;
 80062ee:	e043      	b.n	8006378 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	68b9      	ldr	r1, [r7, #8]
 80062f6:	4618      	mov	r0, r3
 80062f8:	f000 fb16 	bl	8006928 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f042 0208 	orr.w	r2, r2, #8
 800630a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f022 0204 	bic.w	r2, r2, #4
 800631a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	691a      	ldr	r2, [r3, #16]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	430a      	orrs	r2, r1
 800632c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800632e:	e023      	b.n	8006378 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	68b9      	ldr	r1, [r7, #8]
 8006336:	4618      	mov	r0, r3
 8006338:	f000 fb5a 	bl	80069f0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800634a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800635a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	691b      	ldr	r3, [r3, #16]
 8006366:	021a      	lsls	r2, r3, #8
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	430a      	orrs	r2, r1
 800636e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006370:	e002      	b.n	8006378 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	75fb      	strb	r3, [r7, #23]
      break;
 8006376:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2200      	movs	r2, #0
 800637c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006380:	7dfb      	ldrb	r3, [r7, #23]
}
 8006382:	4618      	mov	r0, r3
 8006384:	3718      	adds	r7, #24
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}
 800638a:	bf00      	nop

0800638c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800638c:	b480      	push	{r7}
 800638e:	b083      	sub	sp, #12
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006394:	bf00      	nop
 8006396:	370c      	adds	r7, #12
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr

080063a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b083      	sub	sp, #12
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80063a8:	bf00      	nop
 80063aa:	370c      	adds	r7, #12
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr

080063b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b083      	sub	sp, #12
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80063bc:	bf00      	nop
 80063be:	370c      	adds	r7, #12
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b083      	sub	sp, #12
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80063d0:	bf00      	nop
 80063d2:	370c      	adds	r7, #12
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr

080063dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80063dc:	b480      	push	{r7}
 80063de:	b085      	sub	sp, #20
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	4a40      	ldr	r2, [pc, #256]	; (80064f0 <TIM_Base_SetConfig+0x114>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d013      	beq.n	800641c <TIM_Base_SetConfig+0x40>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063fa:	d00f      	beq.n	800641c <TIM_Base_SetConfig+0x40>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	4a3d      	ldr	r2, [pc, #244]	; (80064f4 <TIM_Base_SetConfig+0x118>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d00b      	beq.n	800641c <TIM_Base_SetConfig+0x40>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	4a3c      	ldr	r2, [pc, #240]	; (80064f8 <TIM_Base_SetConfig+0x11c>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d007      	beq.n	800641c <TIM_Base_SetConfig+0x40>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	4a3b      	ldr	r2, [pc, #236]	; (80064fc <TIM_Base_SetConfig+0x120>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d003      	beq.n	800641c <TIM_Base_SetConfig+0x40>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	4a3a      	ldr	r2, [pc, #232]	; (8006500 <TIM_Base_SetConfig+0x124>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d108      	bne.n	800642e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006422:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	68fa      	ldr	r2, [r7, #12]
 800642a:	4313      	orrs	r3, r2
 800642c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4a2f      	ldr	r2, [pc, #188]	; (80064f0 <TIM_Base_SetConfig+0x114>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d01f      	beq.n	8006476 <TIM_Base_SetConfig+0x9a>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800643c:	d01b      	beq.n	8006476 <TIM_Base_SetConfig+0x9a>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	4a2c      	ldr	r2, [pc, #176]	; (80064f4 <TIM_Base_SetConfig+0x118>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d017      	beq.n	8006476 <TIM_Base_SetConfig+0x9a>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4a2b      	ldr	r2, [pc, #172]	; (80064f8 <TIM_Base_SetConfig+0x11c>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d013      	beq.n	8006476 <TIM_Base_SetConfig+0x9a>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	4a2a      	ldr	r2, [pc, #168]	; (80064fc <TIM_Base_SetConfig+0x120>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d00f      	beq.n	8006476 <TIM_Base_SetConfig+0x9a>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	4a29      	ldr	r2, [pc, #164]	; (8006500 <TIM_Base_SetConfig+0x124>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d00b      	beq.n	8006476 <TIM_Base_SetConfig+0x9a>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4a28      	ldr	r2, [pc, #160]	; (8006504 <TIM_Base_SetConfig+0x128>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d007      	beq.n	8006476 <TIM_Base_SetConfig+0x9a>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	4a27      	ldr	r2, [pc, #156]	; (8006508 <TIM_Base_SetConfig+0x12c>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d003      	beq.n	8006476 <TIM_Base_SetConfig+0x9a>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4a26      	ldr	r2, [pc, #152]	; (800650c <TIM_Base_SetConfig+0x130>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d108      	bne.n	8006488 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800647c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	68db      	ldr	r3, [r3, #12]
 8006482:	68fa      	ldr	r2, [r7, #12]
 8006484:	4313      	orrs	r3, r2
 8006486:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	695b      	ldr	r3, [r3, #20]
 8006492:	4313      	orrs	r3, r2
 8006494:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	68fa      	ldr	r2, [r7, #12]
 800649a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	689a      	ldr	r2, [r3, #8]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	4a10      	ldr	r2, [pc, #64]	; (80064f0 <TIM_Base_SetConfig+0x114>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d00f      	beq.n	80064d4 <TIM_Base_SetConfig+0xf8>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	4a12      	ldr	r2, [pc, #72]	; (8006500 <TIM_Base_SetConfig+0x124>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d00b      	beq.n	80064d4 <TIM_Base_SetConfig+0xf8>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	4a11      	ldr	r2, [pc, #68]	; (8006504 <TIM_Base_SetConfig+0x128>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d007      	beq.n	80064d4 <TIM_Base_SetConfig+0xf8>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	4a10      	ldr	r2, [pc, #64]	; (8006508 <TIM_Base_SetConfig+0x12c>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d003      	beq.n	80064d4 <TIM_Base_SetConfig+0xf8>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	4a0f      	ldr	r2, [pc, #60]	; (800650c <TIM_Base_SetConfig+0x130>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d103      	bne.n	80064dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	691a      	ldr	r2, [r3, #16]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2201      	movs	r2, #1
 80064e0:	615a      	str	r2, [r3, #20]
}
 80064e2:	bf00      	nop
 80064e4:	3714      	adds	r7, #20
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr
 80064ee:	bf00      	nop
 80064f0:	40012c00 	.word	0x40012c00
 80064f4:	40000400 	.word	0x40000400
 80064f8:	40000800 	.word	0x40000800
 80064fc:	40000c00 	.word	0x40000c00
 8006500:	40013400 	.word	0x40013400
 8006504:	40014000 	.word	0x40014000
 8006508:	40014400 	.word	0x40014400
 800650c:	40014800 	.word	0x40014800

08006510 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006510:	b480      	push	{r7}
 8006512:	b087      	sub	sp, #28
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6a1b      	ldr	r3, [r3, #32]
 800651e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6a1b      	ldr	r3, [r3, #32]
 8006524:	f023 0201 	bic.w	r2, r3, #1
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	699b      	ldr	r3, [r3, #24]
 8006536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800653e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006542:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f023 0303 	bic.w	r3, r3, #3
 800654a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	68fa      	ldr	r2, [r7, #12]
 8006552:	4313      	orrs	r3, r2
 8006554:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	f023 0302 	bic.w	r3, r3, #2
 800655c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	697a      	ldr	r2, [r7, #20]
 8006564:	4313      	orrs	r3, r2
 8006566:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	4a2c      	ldr	r2, [pc, #176]	; (800661c <TIM_OC1_SetConfig+0x10c>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d00f      	beq.n	8006590 <TIM_OC1_SetConfig+0x80>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	4a2b      	ldr	r2, [pc, #172]	; (8006620 <TIM_OC1_SetConfig+0x110>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d00b      	beq.n	8006590 <TIM_OC1_SetConfig+0x80>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	4a2a      	ldr	r2, [pc, #168]	; (8006624 <TIM_OC1_SetConfig+0x114>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d007      	beq.n	8006590 <TIM_OC1_SetConfig+0x80>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	4a29      	ldr	r2, [pc, #164]	; (8006628 <TIM_OC1_SetConfig+0x118>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d003      	beq.n	8006590 <TIM_OC1_SetConfig+0x80>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	4a28      	ldr	r2, [pc, #160]	; (800662c <TIM_OC1_SetConfig+0x11c>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d10c      	bne.n	80065aa <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	f023 0308 	bic.w	r3, r3, #8
 8006596:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	68db      	ldr	r3, [r3, #12]
 800659c:	697a      	ldr	r2, [r7, #20]
 800659e:	4313      	orrs	r3, r2
 80065a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	f023 0304 	bic.w	r3, r3, #4
 80065a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	4a1b      	ldr	r2, [pc, #108]	; (800661c <TIM_OC1_SetConfig+0x10c>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d00f      	beq.n	80065d2 <TIM_OC1_SetConfig+0xc2>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4a1a      	ldr	r2, [pc, #104]	; (8006620 <TIM_OC1_SetConfig+0x110>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d00b      	beq.n	80065d2 <TIM_OC1_SetConfig+0xc2>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4a19      	ldr	r2, [pc, #100]	; (8006624 <TIM_OC1_SetConfig+0x114>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d007      	beq.n	80065d2 <TIM_OC1_SetConfig+0xc2>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	4a18      	ldr	r2, [pc, #96]	; (8006628 <TIM_OC1_SetConfig+0x118>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d003      	beq.n	80065d2 <TIM_OC1_SetConfig+0xc2>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	4a17      	ldr	r2, [pc, #92]	; (800662c <TIM_OC1_SetConfig+0x11c>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d111      	bne.n	80065f6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80065e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	695b      	ldr	r3, [r3, #20]
 80065e6:	693a      	ldr	r2, [r7, #16]
 80065e8:	4313      	orrs	r3, r2
 80065ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	699b      	ldr	r3, [r3, #24]
 80065f0:	693a      	ldr	r2, [r7, #16]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	693a      	ldr	r2, [r7, #16]
 80065fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	68fa      	ldr	r2, [r7, #12]
 8006600:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	685a      	ldr	r2, [r3, #4]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	697a      	ldr	r2, [r7, #20]
 800660e:	621a      	str	r2, [r3, #32]
}
 8006610:	bf00      	nop
 8006612:	371c      	adds	r7, #28
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr
 800661c:	40012c00 	.word	0x40012c00
 8006620:	40013400 	.word	0x40013400
 8006624:	40014000 	.word	0x40014000
 8006628:	40014400 	.word	0x40014400
 800662c:	40014800 	.word	0x40014800

08006630 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006630:	b480      	push	{r7}
 8006632:	b087      	sub	sp, #28
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6a1b      	ldr	r3, [r3, #32]
 800663e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6a1b      	ldr	r3, [r3, #32]
 8006644:	f023 0210 	bic.w	r2, r3, #16
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	699b      	ldr	r3, [r3, #24]
 8006656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800665e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006662:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800666a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	021b      	lsls	r3, r3, #8
 8006672:	68fa      	ldr	r2, [r7, #12]
 8006674:	4313      	orrs	r3, r2
 8006676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	f023 0320 	bic.w	r3, r3, #32
 800667e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	011b      	lsls	r3, r3, #4
 8006686:	697a      	ldr	r2, [r7, #20]
 8006688:	4313      	orrs	r3, r2
 800668a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	4a28      	ldr	r2, [pc, #160]	; (8006730 <TIM_OC2_SetConfig+0x100>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d003      	beq.n	800669c <TIM_OC2_SetConfig+0x6c>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	4a27      	ldr	r2, [pc, #156]	; (8006734 <TIM_OC2_SetConfig+0x104>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d10d      	bne.n	80066b8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	68db      	ldr	r3, [r3, #12]
 80066a8:	011b      	lsls	r3, r3, #4
 80066aa:	697a      	ldr	r2, [r7, #20]
 80066ac:	4313      	orrs	r3, r2
 80066ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066b6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	4a1d      	ldr	r2, [pc, #116]	; (8006730 <TIM_OC2_SetConfig+0x100>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d00f      	beq.n	80066e0 <TIM_OC2_SetConfig+0xb0>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	4a1c      	ldr	r2, [pc, #112]	; (8006734 <TIM_OC2_SetConfig+0x104>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d00b      	beq.n	80066e0 <TIM_OC2_SetConfig+0xb0>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4a1b      	ldr	r2, [pc, #108]	; (8006738 <TIM_OC2_SetConfig+0x108>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d007      	beq.n	80066e0 <TIM_OC2_SetConfig+0xb0>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	4a1a      	ldr	r2, [pc, #104]	; (800673c <TIM_OC2_SetConfig+0x10c>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d003      	beq.n	80066e0 <TIM_OC2_SetConfig+0xb0>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	4a19      	ldr	r2, [pc, #100]	; (8006740 <TIM_OC2_SetConfig+0x110>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d113      	bne.n	8006708 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80066e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80066ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	695b      	ldr	r3, [r3, #20]
 80066f4:	009b      	lsls	r3, r3, #2
 80066f6:	693a      	ldr	r2, [r7, #16]
 80066f8:	4313      	orrs	r3, r2
 80066fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	699b      	ldr	r3, [r3, #24]
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	693a      	ldr	r2, [r7, #16]
 8006704:	4313      	orrs	r3, r2
 8006706:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	693a      	ldr	r2, [r7, #16]
 800670c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	68fa      	ldr	r2, [r7, #12]
 8006712:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	685a      	ldr	r2, [r3, #4]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	697a      	ldr	r2, [r7, #20]
 8006720:	621a      	str	r2, [r3, #32]
}
 8006722:	bf00      	nop
 8006724:	371c      	adds	r7, #28
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr
 800672e:	bf00      	nop
 8006730:	40012c00 	.word	0x40012c00
 8006734:	40013400 	.word	0x40013400
 8006738:	40014000 	.word	0x40014000
 800673c:	40014400 	.word	0x40014400
 8006740:	40014800 	.word	0x40014800

08006744 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006744:	b480      	push	{r7}
 8006746:	b087      	sub	sp, #28
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6a1b      	ldr	r3, [r3, #32]
 8006752:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6a1b      	ldr	r3, [r3, #32]
 8006758:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	69db      	ldr	r3, [r3, #28]
 800676a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006772:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006776:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f023 0303 	bic.w	r3, r3, #3
 800677e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	68fa      	ldr	r2, [r7, #12]
 8006786:	4313      	orrs	r3, r2
 8006788:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006790:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	021b      	lsls	r3, r3, #8
 8006798:	697a      	ldr	r2, [r7, #20]
 800679a:	4313      	orrs	r3, r2
 800679c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	4a27      	ldr	r2, [pc, #156]	; (8006840 <TIM_OC3_SetConfig+0xfc>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d003      	beq.n	80067ae <TIM_OC3_SetConfig+0x6a>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	4a26      	ldr	r2, [pc, #152]	; (8006844 <TIM_OC3_SetConfig+0x100>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d10d      	bne.n	80067ca <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80067b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	68db      	ldr	r3, [r3, #12]
 80067ba:	021b      	lsls	r3, r3, #8
 80067bc:	697a      	ldr	r2, [r7, #20]
 80067be:	4313      	orrs	r3, r2
 80067c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80067c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4a1c      	ldr	r2, [pc, #112]	; (8006840 <TIM_OC3_SetConfig+0xfc>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d00f      	beq.n	80067f2 <TIM_OC3_SetConfig+0xae>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4a1b      	ldr	r2, [pc, #108]	; (8006844 <TIM_OC3_SetConfig+0x100>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d00b      	beq.n	80067f2 <TIM_OC3_SetConfig+0xae>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	4a1a      	ldr	r2, [pc, #104]	; (8006848 <TIM_OC3_SetConfig+0x104>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d007      	beq.n	80067f2 <TIM_OC3_SetConfig+0xae>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	4a19      	ldr	r2, [pc, #100]	; (800684c <TIM_OC3_SetConfig+0x108>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d003      	beq.n	80067f2 <TIM_OC3_SetConfig+0xae>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4a18      	ldr	r2, [pc, #96]	; (8006850 <TIM_OC3_SetConfig+0x10c>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d113      	bne.n	800681a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80067f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006800:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	695b      	ldr	r3, [r3, #20]
 8006806:	011b      	lsls	r3, r3, #4
 8006808:	693a      	ldr	r2, [r7, #16]
 800680a:	4313      	orrs	r3, r2
 800680c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	699b      	ldr	r3, [r3, #24]
 8006812:	011b      	lsls	r3, r3, #4
 8006814:	693a      	ldr	r2, [r7, #16]
 8006816:	4313      	orrs	r3, r2
 8006818:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	693a      	ldr	r2, [r7, #16]
 800681e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	68fa      	ldr	r2, [r7, #12]
 8006824:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	685a      	ldr	r2, [r3, #4]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	697a      	ldr	r2, [r7, #20]
 8006832:	621a      	str	r2, [r3, #32]
}
 8006834:	bf00      	nop
 8006836:	371c      	adds	r7, #28
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr
 8006840:	40012c00 	.word	0x40012c00
 8006844:	40013400 	.word	0x40013400
 8006848:	40014000 	.word	0x40014000
 800684c:	40014400 	.word	0x40014400
 8006850:	40014800 	.word	0x40014800

08006854 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006854:	b480      	push	{r7}
 8006856:	b087      	sub	sp, #28
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6a1b      	ldr	r3, [r3, #32]
 8006862:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6a1b      	ldr	r3, [r3, #32]
 8006868:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	69db      	ldr	r3, [r3, #28]
 800687a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006882:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006886:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800688e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	021b      	lsls	r3, r3, #8
 8006896:	68fa      	ldr	r2, [r7, #12]
 8006898:	4313      	orrs	r3, r2
 800689a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80068a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	031b      	lsls	r3, r3, #12
 80068aa:	693a      	ldr	r2, [r7, #16]
 80068ac:	4313      	orrs	r3, r2
 80068ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	4a18      	ldr	r2, [pc, #96]	; (8006914 <TIM_OC4_SetConfig+0xc0>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d00f      	beq.n	80068d8 <TIM_OC4_SetConfig+0x84>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	4a17      	ldr	r2, [pc, #92]	; (8006918 <TIM_OC4_SetConfig+0xc4>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d00b      	beq.n	80068d8 <TIM_OC4_SetConfig+0x84>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4a16      	ldr	r2, [pc, #88]	; (800691c <TIM_OC4_SetConfig+0xc8>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d007      	beq.n	80068d8 <TIM_OC4_SetConfig+0x84>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	4a15      	ldr	r2, [pc, #84]	; (8006920 <TIM_OC4_SetConfig+0xcc>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d003      	beq.n	80068d8 <TIM_OC4_SetConfig+0x84>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	4a14      	ldr	r2, [pc, #80]	; (8006924 <TIM_OC4_SetConfig+0xd0>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d109      	bne.n	80068ec <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	695b      	ldr	r3, [r3, #20]
 80068e4:	019b      	lsls	r3, r3, #6
 80068e6:	697a      	ldr	r2, [r7, #20]
 80068e8:	4313      	orrs	r3, r2
 80068ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	697a      	ldr	r2, [r7, #20]
 80068f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	68fa      	ldr	r2, [r7, #12]
 80068f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	685a      	ldr	r2, [r3, #4]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	693a      	ldr	r2, [r7, #16]
 8006904:	621a      	str	r2, [r3, #32]
}
 8006906:	bf00      	nop
 8006908:	371c      	adds	r7, #28
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr
 8006912:	bf00      	nop
 8006914:	40012c00 	.word	0x40012c00
 8006918:	40013400 	.word	0x40013400
 800691c:	40014000 	.word	0x40014000
 8006920:	40014400 	.word	0x40014400
 8006924:	40014800 	.word	0x40014800

08006928 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006928:	b480      	push	{r7}
 800692a:	b087      	sub	sp, #28
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6a1b      	ldr	r3, [r3, #32]
 8006936:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6a1b      	ldr	r3, [r3, #32]
 800693c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800694e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800695a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	68fa      	ldr	r2, [r7, #12]
 8006962:	4313      	orrs	r3, r2
 8006964:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800696c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	041b      	lsls	r3, r3, #16
 8006974:	693a      	ldr	r2, [r7, #16]
 8006976:	4313      	orrs	r3, r2
 8006978:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	4a17      	ldr	r2, [pc, #92]	; (80069dc <TIM_OC5_SetConfig+0xb4>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d00f      	beq.n	80069a2 <TIM_OC5_SetConfig+0x7a>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	4a16      	ldr	r2, [pc, #88]	; (80069e0 <TIM_OC5_SetConfig+0xb8>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d00b      	beq.n	80069a2 <TIM_OC5_SetConfig+0x7a>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	4a15      	ldr	r2, [pc, #84]	; (80069e4 <TIM_OC5_SetConfig+0xbc>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d007      	beq.n	80069a2 <TIM_OC5_SetConfig+0x7a>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	4a14      	ldr	r2, [pc, #80]	; (80069e8 <TIM_OC5_SetConfig+0xc0>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d003      	beq.n	80069a2 <TIM_OC5_SetConfig+0x7a>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	4a13      	ldr	r2, [pc, #76]	; (80069ec <TIM_OC5_SetConfig+0xc4>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d109      	bne.n	80069b6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	695b      	ldr	r3, [r3, #20]
 80069ae:	021b      	lsls	r3, r3, #8
 80069b0:	697a      	ldr	r2, [r7, #20]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	697a      	ldr	r2, [r7, #20]
 80069ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	68fa      	ldr	r2, [r7, #12]
 80069c0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	685a      	ldr	r2, [r3, #4]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	693a      	ldr	r2, [r7, #16]
 80069ce:	621a      	str	r2, [r3, #32]
}
 80069d0:	bf00      	nop
 80069d2:	371c      	adds	r7, #28
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr
 80069dc:	40012c00 	.word	0x40012c00
 80069e0:	40013400 	.word	0x40013400
 80069e4:	40014000 	.word	0x40014000
 80069e8:	40014400 	.word	0x40014400
 80069ec:	40014800 	.word	0x40014800

080069f0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b087      	sub	sp, #28
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6a1b      	ldr	r3, [r3, #32]
 80069fe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6a1b      	ldr	r3, [r3, #32]
 8006a04:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	021b      	lsls	r3, r3, #8
 8006a2a:	68fa      	ldr	r2, [r7, #12]
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006a36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	051b      	lsls	r3, r3, #20
 8006a3e:	693a      	ldr	r2, [r7, #16]
 8006a40:	4313      	orrs	r3, r2
 8006a42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	4a18      	ldr	r2, [pc, #96]	; (8006aa8 <TIM_OC6_SetConfig+0xb8>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d00f      	beq.n	8006a6c <TIM_OC6_SetConfig+0x7c>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	4a17      	ldr	r2, [pc, #92]	; (8006aac <TIM_OC6_SetConfig+0xbc>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d00b      	beq.n	8006a6c <TIM_OC6_SetConfig+0x7c>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	4a16      	ldr	r2, [pc, #88]	; (8006ab0 <TIM_OC6_SetConfig+0xc0>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d007      	beq.n	8006a6c <TIM_OC6_SetConfig+0x7c>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	4a15      	ldr	r2, [pc, #84]	; (8006ab4 <TIM_OC6_SetConfig+0xc4>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d003      	beq.n	8006a6c <TIM_OC6_SetConfig+0x7c>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	4a14      	ldr	r2, [pc, #80]	; (8006ab8 <TIM_OC6_SetConfig+0xc8>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d109      	bne.n	8006a80 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a72:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	695b      	ldr	r3, [r3, #20]
 8006a78:	029b      	lsls	r3, r3, #10
 8006a7a:	697a      	ldr	r2, [r7, #20]
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	697a      	ldr	r2, [r7, #20]
 8006a84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	68fa      	ldr	r2, [r7, #12]
 8006a8a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	685a      	ldr	r2, [r3, #4]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	693a      	ldr	r2, [r7, #16]
 8006a98:	621a      	str	r2, [r3, #32]
}
 8006a9a:	bf00      	nop
 8006a9c:	371c      	adds	r7, #28
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr
 8006aa6:	bf00      	nop
 8006aa8:	40012c00 	.word	0x40012c00
 8006aac:	40013400 	.word	0x40013400
 8006ab0:	40014000 	.word	0x40014000
 8006ab4:	40014400 	.word	0x40014400
 8006ab8:	40014800 	.word	0x40014800

08006abc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b085      	sub	sp, #20
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d101      	bne.n	8006ad4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ad0:	2302      	movs	r3, #2
 8006ad2:	e068      	b.n	8006ba6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2202      	movs	r2, #2
 8006ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a2e      	ldr	r2, [pc, #184]	; (8006bb4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d004      	beq.n	8006b08 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a2d      	ldr	r2, [pc, #180]	; (8006bb8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d108      	bne.n	8006b1a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006b0e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	68fa      	ldr	r2, [r7, #12]
 8006b16:	4313      	orrs	r3, r2
 8006b18:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b20:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	68fa      	ldr	r2, [r7, #12]
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	68fa      	ldr	r2, [r7, #12]
 8006b32:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a1e      	ldr	r2, [pc, #120]	; (8006bb4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d01d      	beq.n	8006b7a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b46:	d018      	beq.n	8006b7a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a1b      	ldr	r2, [pc, #108]	; (8006bbc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d013      	beq.n	8006b7a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a1a      	ldr	r2, [pc, #104]	; (8006bc0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d00e      	beq.n	8006b7a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a18      	ldr	r2, [pc, #96]	; (8006bc4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d009      	beq.n	8006b7a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a13      	ldr	r2, [pc, #76]	; (8006bb8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d004      	beq.n	8006b7a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a14      	ldr	r2, [pc, #80]	; (8006bc8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d10c      	bne.n	8006b94 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	689b      	ldr	r3, [r3, #8]
 8006b86:	68ba      	ldr	r2, [r7, #8]
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	68ba      	ldr	r2, [r7, #8]
 8006b92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ba4:	2300      	movs	r3, #0
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3714      	adds	r7, #20
 8006baa:	46bd      	mov	sp, r7
 8006bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb0:	4770      	bx	lr
 8006bb2:	bf00      	nop
 8006bb4:	40012c00 	.word	0x40012c00
 8006bb8:	40013400 	.word	0x40013400
 8006bbc:	40000400 	.word	0x40000400
 8006bc0:	40000800 	.word	0x40000800
 8006bc4:	40000c00 	.word	0x40000c00
 8006bc8:	40014000 	.word	0x40014000

08006bcc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b083      	sub	sp, #12
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006bd4:	bf00      	nop
 8006bd6:	370c      	adds	r7, #12
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr

08006be0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006be8:	bf00      	nop
 8006bea:	370c      	adds	r7, #12
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr

08006bf4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b083      	sub	sp, #12
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006bfc:	bf00      	nop
 8006bfe:	370c      	adds	r7, #12
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr

08006c08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b082      	sub	sp, #8
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d101      	bne.n	8006c1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c16:	2301      	movs	r3, #1
 8006c18:	e040      	b.n	8006c9c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d106      	bne.n	8006c30 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2200      	movs	r2, #0
 8006c26:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f7fa fe72 	bl	8001914 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2224      	movs	r2, #36	; 0x24
 8006c34:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	681a      	ldr	r2, [r3, #0]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f022 0201 	bic.w	r2, r2, #1
 8006c44:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d002      	beq.n	8006c54 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f000 fe48 	bl	80078e4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f000 fb8d 	bl	8007374 <UART_SetConfig>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	d101      	bne.n	8006c64 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006c60:	2301      	movs	r3, #1
 8006c62:	e01b      	b.n	8006c9c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	685a      	ldr	r2, [r3, #4]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	689a      	ldr	r2, [r3, #8]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	681a      	ldr	r2, [r3, #0]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f042 0201 	orr.w	r2, r2, #1
 8006c92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f000 fec7 	bl	8007a28 <UART_CheckIdleState>
 8006c9a:	4603      	mov	r3, r0
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3708      	adds	r7, #8
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}

08006ca4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b08b      	sub	sp, #44	; 0x2c
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	60f8      	str	r0, [r7, #12]
 8006cac:	60b9      	str	r1, [r7, #8]
 8006cae:	4613      	mov	r3, r2
 8006cb0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006cb6:	2b20      	cmp	r3, #32
 8006cb8:	d147      	bne.n	8006d4a <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d002      	beq.n	8006cc6 <HAL_UART_Transmit_IT+0x22>
 8006cc0:	88fb      	ldrh	r3, [r7, #6]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d101      	bne.n	8006cca <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	e040      	b.n	8006d4c <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	68ba      	ldr	r2, [r7, #8]
 8006cce:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	88fa      	ldrh	r2, [r7, #6]
 8006cd4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	88fa      	ldrh	r2, [r7, #6]
 8006cdc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2221      	movs	r2, #33	; 0x21
 8006cf2:	67da      	str	r2, [r3, #124]	; 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cfc:	d107      	bne.n	8006d0e <HAL_UART_Transmit_IT+0x6a>
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	691b      	ldr	r3, [r3, #16]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d103      	bne.n	8006d0e <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	4a13      	ldr	r2, [pc, #76]	; (8006d58 <HAL_UART_Transmit_IT+0xb4>)
 8006d0a:	66da      	str	r2, [r3, #108]	; 0x6c
 8006d0c:	e002      	b.n	8006d14 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	4a12      	ldr	r2, [pc, #72]	; (8006d5c <HAL_UART_Transmit_IT+0xb8>)
 8006d12:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	e853 3f00 	ldrex	r3, [r3]
 8006d20:	613b      	str	r3, [r7, #16]
   return(result);
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d28:	627b      	str	r3, [r7, #36]	; 0x24
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	461a      	mov	r2, r3
 8006d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d32:	623b      	str	r3, [r7, #32]
 8006d34:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d36:	69f9      	ldr	r1, [r7, #28]
 8006d38:	6a3a      	ldr	r2, [r7, #32]
 8006d3a:	e841 2300 	strex	r3, r2, [r1]
 8006d3e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d40:	69bb      	ldr	r3, [r7, #24]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d1e6      	bne.n	8006d14 <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8006d46:	2300      	movs	r3, #0
 8006d48:	e000      	b.n	8006d4c <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8006d4a:	2302      	movs	r3, #2
  }
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	372c      	adds	r7, #44	; 0x2c
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr
 8006d58:	08007df3 	.word	0x08007df3
 8006d5c:	08007d3b 	.word	0x08007d3b

08006d60 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b0ba      	sub	sp, #232	; 0xe8
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	69db      	ldr	r3, [r3, #28]
 8006d6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	689b      	ldr	r3, [r3, #8]
 8006d82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006d86:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006d8a:	f640 030f 	movw	r3, #2063	; 0x80f
 8006d8e:	4013      	ands	r3, r2
 8006d90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006d94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d115      	bne.n	8006dc8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006d9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006da0:	f003 0320 	and.w	r3, r3, #32
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d00f      	beq.n	8006dc8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006da8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dac:	f003 0320 	and.w	r3, r3, #32
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d009      	beq.n	8006dc8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	f000 82ae 	beq.w	800731a <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	4798      	blx	r3
      }
      return;
 8006dc6:	e2a8      	b.n	800731a <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006dc8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	f000 8117 	beq.w	8007000 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006dd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006dd6:	f003 0301 	and.w	r3, r3, #1
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d106      	bne.n	8006dec <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006dde:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006de2:	4b85      	ldr	r3, [pc, #532]	; (8006ff8 <HAL_UART_IRQHandler+0x298>)
 8006de4:	4013      	ands	r3, r2
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	f000 810a 	beq.w	8007000 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006dec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006df0:	f003 0301 	and.w	r3, r3, #1
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d011      	beq.n	8006e1c <HAL_UART_IRQHandler+0xbc>
 8006df8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d00b      	beq.n	8006e1c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	2201      	movs	r2, #1
 8006e0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e12:	f043 0201 	orr.w	r2, r3, #1
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006e1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e20:	f003 0302 	and.w	r3, r3, #2
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d011      	beq.n	8006e4c <HAL_UART_IRQHandler+0xec>
 8006e28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e2c:	f003 0301 	and.w	r3, r3, #1
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d00b      	beq.n	8006e4c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	2202      	movs	r2, #2
 8006e3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e42:	f043 0204 	orr.w	r2, r3, #4
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006e4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e50:	f003 0304 	and.w	r3, r3, #4
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d011      	beq.n	8006e7c <HAL_UART_IRQHandler+0x11c>
 8006e58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e5c:	f003 0301 	and.w	r3, r3, #1
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d00b      	beq.n	8006e7c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	2204      	movs	r2, #4
 8006e6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e72:	f043 0202 	orr.w	r2, r3, #2
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006e7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e80:	f003 0308 	and.w	r3, r3, #8
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d017      	beq.n	8006eb8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006e88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e8c:	f003 0320 	and.w	r3, r3, #32
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d105      	bne.n	8006ea0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006e94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e98:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d00b      	beq.n	8006eb8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	2208      	movs	r2, #8
 8006ea6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006eae:	f043 0208 	orr.w	r2, r3, #8
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006eb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ebc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d012      	beq.n	8006eea <HAL_UART_IRQHandler+0x18a>
 8006ec4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ec8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d00c      	beq.n	8006eea <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ed8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ee0:	f043 0220 	orr.w	r2, r3, #32
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	f000 8214 	beq.w	800731e <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006efa:	f003 0320 	and.w	r3, r3, #32
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d00d      	beq.n	8006f1e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006f02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f06:	f003 0320 	and.w	r3, r3, #32
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d007      	beq.n	8006f1e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d003      	beq.n	8006f1e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f24:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f32:	2b40      	cmp	r3, #64	; 0x40
 8006f34:	d005      	beq.n	8006f42 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006f36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006f3a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d04f      	beq.n	8006fe2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 fe7f 	bl	8007c46 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	689b      	ldr	r3, [r3, #8]
 8006f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f52:	2b40      	cmp	r3, #64	; 0x40
 8006f54:	d141      	bne.n	8006fda <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	3308      	adds	r3, #8
 8006f5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006f64:	e853 3f00 	ldrex	r3, [r3]
 8006f68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006f6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006f70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	3308      	adds	r3, #8
 8006f7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006f82:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006f86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006f8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006f92:	e841 2300 	strex	r3, r2, [r1]
 8006f96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006f9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d1d9      	bne.n	8006f56 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d013      	beq.n	8006fd2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fae:	4a13      	ldr	r2, [pc, #76]	; (8006ffc <HAL_UART_IRQHandler+0x29c>)
 8006fb0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f7fb f835 	bl	8002026 <HAL_DMA_Abort_IT>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d017      	beq.n	8006ff2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fc8:	687a      	ldr	r2, [r7, #4]
 8006fca:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006fcc:	4610      	mov	r0, r2
 8006fce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fd0:	e00f      	b.n	8006ff2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 f9b8 	bl	8007348 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fd8:	e00b      	b.n	8006ff2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f000 f9b4 	bl	8007348 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fe0:	e007      	b.n	8006ff2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 f9b0 	bl	8007348 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2200      	movs	r2, #0
 8006fec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006ff0:	e195      	b.n	800731e <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ff2:	bf00      	nop
    return;
 8006ff4:	e193      	b.n	800731e <HAL_UART_IRQHandler+0x5be>
 8006ff6:	bf00      	nop
 8006ff8:	04000120 	.word	0x04000120
 8006ffc:	08007d0f 	.word	0x08007d0f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007004:	2b01      	cmp	r3, #1
 8007006:	f040 814e 	bne.w	80072a6 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800700a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800700e:	f003 0310 	and.w	r3, r3, #16
 8007012:	2b00      	cmp	r3, #0
 8007014:	f000 8147 	beq.w	80072a6 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007018:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800701c:	f003 0310 	and.w	r3, r3, #16
 8007020:	2b00      	cmp	r3, #0
 8007022:	f000 8140 	beq.w	80072a6 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	2210      	movs	r2, #16
 800702c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007038:	2b40      	cmp	r3, #64	; 0x40
 800703a:	f040 80b8 	bne.w	80071ae <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800704a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800704e:	2b00      	cmp	r3, #0
 8007050:	f000 8167 	beq.w	8007322 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800705a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800705e:	429a      	cmp	r2, r3
 8007060:	f080 815f 	bcs.w	8007322 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800706a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f003 0320 	and.w	r3, r3, #32
 800707a:	2b00      	cmp	r3, #0
 800707c:	f040 8086 	bne.w	800718c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007088:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800708c:	e853 3f00 	ldrex	r3, [r3]
 8007090:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007094:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007098:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800709c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	461a      	mov	r2, r3
 80070a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80070aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80070ae:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80070b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80070ba:	e841 2300 	strex	r3, r2, [r1]
 80070be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80070c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d1da      	bne.n	8007080 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	3308      	adds	r3, #8
 80070d0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070d4:	e853 3f00 	ldrex	r3, [r3]
 80070d8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80070da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80070dc:	f023 0301 	bic.w	r3, r3, #1
 80070e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	3308      	adds	r3, #8
 80070ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80070ee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80070f2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80070f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80070fa:	e841 2300 	strex	r3, r2, [r1]
 80070fe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007100:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007102:	2b00      	cmp	r3, #0
 8007104:	d1e1      	bne.n	80070ca <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	3308      	adds	r3, #8
 800710c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800710e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007110:	e853 3f00 	ldrex	r3, [r3]
 8007114:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007116:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007118:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800711c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	3308      	adds	r3, #8
 8007126:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800712a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800712c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800712e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007130:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007132:	e841 2300 	strex	r3, r2, [r1]
 8007136:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007138:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800713a:	2b00      	cmp	r3, #0
 800713c:	d1e3      	bne.n	8007106 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2220      	movs	r2, #32
 8007142:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2200      	movs	r2, #0
 800714a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007152:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007154:	e853 3f00 	ldrex	r3, [r3]
 8007158:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800715a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800715c:	f023 0310 	bic.w	r3, r3, #16
 8007160:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	461a      	mov	r2, r3
 800716a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800716e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007170:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007172:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007174:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007176:	e841 2300 	strex	r3, r2, [r1]
 800717a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800717c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800717e:	2b00      	cmp	r3, #0
 8007180:	d1e4      	bne.n	800714c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007186:	4618      	mov	r0, r3
 8007188:	f7fa ff0f 	bl	8001faa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2202      	movs	r2, #2
 8007190:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800719e:	b29b      	uxth	r3, r3
 80071a0:	1ad3      	subs	r3, r2, r3
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	4619      	mov	r1, r3
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f000 f8d8 	bl	800735c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80071ac:	e0b9      	b.n	8007322 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	1ad3      	subs	r3, r2, r3
 80071be:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	f000 80ab 	beq.w	8007326 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 80071d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	f000 80a6 	beq.w	8007326 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071e2:	e853 3f00 	ldrex	r3, [r3]
 80071e6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80071e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80071ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	461a      	mov	r2, r3
 80071f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80071fc:	647b      	str	r3, [r7, #68]	; 0x44
 80071fe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007200:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007202:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007204:	e841 2300 	strex	r3, r2, [r1]
 8007208:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800720a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800720c:	2b00      	cmp	r3, #0
 800720e:	d1e4      	bne.n	80071da <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	3308      	adds	r3, #8
 8007216:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800721a:	e853 3f00 	ldrex	r3, [r3]
 800721e:	623b      	str	r3, [r7, #32]
   return(result);
 8007220:	6a3b      	ldr	r3, [r7, #32]
 8007222:	f023 0301 	bic.w	r3, r3, #1
 8007226:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	3308      	adds	r3, #8
 8007230:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007234:	633a      	str	r2, [r7, #48]	; 0x30
 8007236:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007238:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800723a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800723c:	e841 2300 	strex	r3, r2, [r1]
 8007240:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007244:	2b00      	cmp	r3, #0
 8007246:	d1e3      	bne.n	8007210 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2220      	movs	r2, #32
 800724c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2200      	movs	r2, #0
 8007254:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2200      	movs	r2, #0
 800725a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	e853 3f00 	ldrex	r3, [r3]
 8007268:	60fb      	str	r3, [r7, #12]
   return(result);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	f023 0310 	bic.w	r3, r3, #16
 8007270:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	461a      	mov	r2, r3
 800727a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800727e:	61fb      	str	r3, [r7, #28]
 8007280:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007282:	69b9      	ldr	r1, [r7, #24]
 8007284:	69fa      	ldr	r2, [r7, #28]
 8007286:	e841 2300 	strex	r3, r2, [r1]
 800728a:	617b      	str	r3, [r7, #20]
   return(result);
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d1e4      	bne.n	800725c <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2202      	movs	r2, #2
 8007296:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007298:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800729c:	4619      	mov	r1, r3
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f000 f85c 	bl	800735c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80072a4:	e03f      	b.n	8007326 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80072a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d00e      	beq.n	80072d0 <HAL_UART_IRQHandler+0x570>
 80072b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d008      	beq.n	80072d0 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80072c6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 fe1c 	bl	8007f06 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80072ce:	e02d      	b.n	800732c <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80072d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d00e      	beq.n	80072fa <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80072dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d008      	beq.n	80072fa <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d01c      	beq.n	800732a <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	4798      	blx	r3
    }
    return;
 80072f8:	e017      	b.n	800732a <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80072fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007302:	2b00      	cmp	r3, #0
 8007304:	d012      	beq.n	800732c <HAL_UART_IRQHandler+0x5cc>
 8007306:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800730a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800730e:	2b00      	cmp	r3, #0
 8007310:	d00c      	beq.n	800732c <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 fdcd 	bl	8007eb2 <UART_EndTransmit_IT>
    return;
 8007318:	e008      	b.n	800732c <HAL_UART_IRQHandler+0x5cc>
      return;
 800731a:	bf00      	nop
 800731c:	e006      	b.n	800732c <HAL_UART_IRQHandler+0x5cc>
    return;
 800731e:	bf00      	nop
 8007320:	e004      	b.n	800732c <HAL_UART_IRQHandler+0x5cc>
      return;
 8007322:	bf00      	nop
 8007324:	e002      	b.n	800732c <HAL_UART_IRQHandler+0x5cc>
      return;
 8007326:	bf00      	nop
 8007328:	e000      	b.n	800732c <HAL_UART_IRQHandler+0x5cc>
    return;
 800732a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800732c:	37e8      	adds	r7, #232	; 0xe8
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}
 8007332:	bf00      	nop

08007334 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007334:	b480      	push	{r7}
 8007336:	b083      	sub	sp, #12
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800733c:	bf00      	nop
 800733e:	370c      	adds	r7, #12
 8007340:	46bd      	mov	sp, r7
 8007342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007346:	4770      	bx	lr

08007348 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007348:	b480      	push	{r7}
 800734a:	b083      	sub	sp, #12
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007350:	bf00      	nop
 8007352:	370c      	adds	r7, #12
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr

0800735c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800735c:	b480      	push	{r7}
 800735e:	b083      	sub	sp, #12
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	460b      	mov	r3, r1
 8007366:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007368:	bf00      	nop
 800736a:	370c      	adds	r7, #12
 800736c:	46bd      	mov	sp, r7
 800736e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007372:	4770      	bx	lr

08007374 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007374:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007378:	b08a      	sub	sp, #40	; 0x28
 800737a:	af00      	add	r7, sp, #0
 800737c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800737e:	2300      	movs	r3, #0
 8007380:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	689a      	ldr	r2, [r3, #8]
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	691b      	ldr	r3, [r3, #16]
 800738c:	431a      	orrs	r2, r3
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	695b      	ldr	r3, [r3, #20]
 8007392:	431a      	orrs	r2, r3
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	69db      	ldr	r3, [r3, #28]
 8007398:	4313      	orrs	r3, r2
 800739a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	681a      	ldr	r2, [r3, #0]
 80073a2:	4ba4      	ldr	r3, [pc, #656]	; (8007634 <UART_SetConfig+0x2c0>)
 80073a4:	4013      	ands	r3, r2
 80073a6:	68fa      	ldr	r2, [r7, #12]
 80073a8:	6812      	ldr	r2, [r2, #0]
 80073aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80073ac:	430b      	orrs	r3, r1
 80073ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	68da      	ldr	r2, [r3, #12]
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	430a      	orrs	r2, r1
 80073c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	699b      	ldr	r3, [r3, #24]
 80073ca:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a99      	ldr	r2, [pc, #612]	; (8007638 <UART_SetConfig+0x2c4>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d004      	beq.n	80073e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	6a1b      	ldr	r3, [r3, #32]
 80073da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073dc:	4313      	orrs	r3, r2
 80073de:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	689b      	ldr	r3, [r3, #8]
 80073e6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073f0:	430a      	orrs	r2, r1
 80073f2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a90      	ldr	r2, [pc, #576]	; (800763c <UART_SetConfig+0x2c8>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d126      	bne.n	800744c <UART_SetConfig+0xd8>
 80073fe:	4b90      	ldr	r3, [pc, #576]	; (8007640 <UART_SetConfig+0x2cc>)
 8007400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007404:	f003 0303 	and.w	r3, r3, #3
 8007408:	2b03      	cmp	r3, #3
 800740a:	d81b      	bhi.n	8007444 <UART_SetConfig+0xd0>
 800740c:	a201      	add	r2, pc, #4	; (adr r2, 8007414 <UART_SetConfig+0xa0>)
 800740e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007412:	bf00      	nop
 8007414:	08007425 	.word	0x08007425
 8007418:	08007435 	.word	0x08007435
 800741c:	0800742d 	.word	0x0800742d
 8007420:	0800743d 	.word	0x0800743d
 8007424:	2301      	movs	r3, #1
 8007426:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800742a:	e116      	b.n	800765a <UART_SetConfig+0x2e6>
 800742c:	2302      	movs	r3, #2
 800742e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007432:	e112      	b.n	800765a <UART_SetConfig+0x2e6>
 8007434:	2304      	movs	r3, #4
 8007436:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800743a:	e10e      	b.n	800765a <UART_SetConfig+0x2e6>
 800743c:	2308      	movs	r3, #8
 800743e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007442:	e10a      	b.n	800765a <UART_SetConfig+0x2e6>
 8007444:	2310      	movs	r3, #16
 8007446:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800744a:	e106      	b.n	800765a <UART_SetConfig+0x2e6>
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a7c      	ldr	r2, [pc, #496]	; (8007644 <UART_SetConfig+0x2d0>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d138      	bne.n	80074c8 <UART_SetConfig+0x154>
 8007456:	4b7a      	ldr	r3, [pc, #488]	; (8007640 <UART_SetConfig+0x2cc>)
 8007458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800745c:	f003 030c 	and.w	r3, r3, #12
 8007460:	2b0c      	cmp	r3, #12
 8007462:	d82d      	bhi.n	80074c0 <UART_SetConfig+0x14c>
 8007464:	a201      	add	r2, pc, #4	; (adr r2, 800746c <UART_SetConfig+0xf8>)
 8007466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800746a:	bf00      	nop
 800746c:	080074a1 	.word	0x080074a1
 8007470:	080074c1 	.word	0x080074c1
 8007474:	080074c1 	.word	0x080074c1
 8007478:	080074c1 	.word	0x080074c1
 800747c:	080074b1 	.word	0x080074b1
 8007480:	080074c1 	.word	0x080074c1
 8007484:	080074c1 	.word	0x080074c1
 8007488:	080074c1 	.word	0x080074c1
 800748c:	080074a9 	.word	0x080074a9
 8007490:	080074c1 	.word	0x080074c1
 8007494:	080074c1 	.word	0x080074c1
 8007498:	080074c1 	.word	0x080074c1
 800749c:	080074b9 	.word	0x080074b9
 80074a0:	2300      	movs	r3, #0
 80074a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074a6:	e0d8      	b.n	800765a <UART_SetConfig+0x2e6>
 80074a8:	2302      	movs	r3, #2
 80074aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074ae:	e0d4      	b.n	800765a <UART_SetConfig+0x2e6>
 80074b0:	2304      	movs	r3, #4
 80074b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074b6:	e0d0      	b.n	800765a <UART_SetConfig+0x2e6>
 80074b8:	2308      	movs	r3, #8
 80074ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074be:	e0cc      	b.n	800765a <UART_SetConfig+0x2e6>
 80074c0:	2310      	movs	r3, #16
 80074c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074c6:	e0c8      	b.n	800765a <UART_SetConfig+0x2e6>
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a5e      	ldr	r2, [pc, #376]	; (8007648 <UART_SetConfig+0x2d4>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d125      	bne.n	800751e <UART_SetConfig+0x1aa>
 80074d2:	4b5b      	ldr	r3, [pc, #364]	; (8007640 <UART_SetConfig+0x2cc>)
 80074d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074d8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80074dc:	2b30      	cmp	r3, #48	; 0x30
 80074de:	d016      	beq.n	800750e <UART_SetConfig+0x19a>
 80074e0:	2b30      	cmp	r3, #48	; 0x30
 80074e2:	d818      	bhi.n	8007516 <UART_SetConfig+0x1a2>
 80074e4:	2b20      	cmp	r3, #32
 80074e6:	d00a      	beq.n	80074fe <UART_SetConfig+0x18a>
 80074e8:	2b20      	cmp	r3, #32
 80074ea:	d814      	bhi.n	8007516 <UART_SetConfig+0x1a2>
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d002      	beq.n	80074f6 <UART_SetConfig+0x182>
 80074f0:	2b10      	cmp	r3, #16
 80074f2:	d008      	beq.n	8007506 <UART_SetConfig+0x192>
 80074f4:	e00f      	b.n	8007516 <UART_SetConfig+0x1a2>
 80074f6:	2300      	movs	r3, #0
 80074f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074fc:	e0ad      	b.n	800765a <UART_SetConfig+0x2e6>
 80074fe:	2302      	movs	r3, #2
 8007500:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007504:	e0a9      	b.n	800765a <UART_SetConfig+0x2e6>
 8007506:	2304      	movs	r3, #4
 8007508:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800750c:	e0a5      	b.n	800765a <UART_SetConfig+0x2e6>
 800750e:	2308      	movs	r3, #8
 8007510:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007514:	e0a1      	b.n	800765a <UART_SetConfig+0x2e6>
 8007516:	2310      	movs	r3, #16
 8007518:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800751c:	e09d      	b.n	800765a <UART_SetConfig+0x2e6>
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a4a      	ldr	r2, [pc, #296]	; (800764c <UART_SetConfig+0x2d8>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d125      	bne.n	8007574 <UART_SetConfig+0x200>
 8007528:	4b45      	ldr	r3, [pc, #276]	; (8007640 <UART_SetConfig+0x2cc>)
 800752a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800752e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007532:	2bc0      	cmp	r3, #192	; 0xc0
 8007534:	d016      	beq.n	8007564 <UART_SetConfig+0x1f0>
 8007536:	2bc0      	cmp	r3, #192	; 0xc0
 8007538:	d818      	bhi.n	800756c <UART_SetConfig+0x1f8>
 800753a:	2b80      	cmp	r3, #128	; 0x80
 800753c:	d00a      	beq.n	8007554 <UART_SetConfig+0x1e0>
 800753e:	2b80      	cmp	r3, #128	; 0x80
 8007540:	d814      	bhi.n	800756c <UART_SetConfig+0x1f8>
 8007542:	2b00      	cmp	r3, #0
 8007544:	d002      	beq.n	800754c <UART_SetConfig+0x1d8>
 8007546:	2b40      	cmp	r3, #64	; 0x40
 8007548:	d008      	beq.n	800755c <UART_SetConfig+0x1e8>
 800754a:	e00f      	b.n	800756c <UART_SetConfig+0x1f8>
 800754c:	2300      	movs	r3, #0
 800754e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007552:	e082      	b.n	800765a <UART_SetConfig+0x2e6>
 8007554:	2302      	movs	r3, #2
 8007556:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800755a:	e07e      	b.n	800765a <UART_SetConfig+0x2e6>
 800755c:	2304      	movs	r3, #4
 800755e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007562:	e07a      	b.n	800765a <UART_SetConfig+0x2e6>
 8007564:	2308      	movs	r3, #8
 8007566:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800756a:	e076      	b.n	800765a <UART_SetConfig+0x2e6>
 800756c:	2310      	movs	r3, #16
 800756e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007572:	e072      	b.n	800765a <UART_SetConfig+0x2e6>
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a35      	ldr	r2, [pc, #212]	; (8007650 <UART_SetConfig+0x2dc>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d12a      	bne.n	80075d4 <UART_SetConfig+0x260>
 800757e:	4b30      	ldr	r3, [pc, #192]	; (8007640 <UART_SetConfig+0x2cc>)
 8007580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007584:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007588:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800758c:	d01a      	beq.n	80075c4 <UART_SetConfig+0x250>
 800758e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007592:	d81b      	bhi.n	80075cc <UART_SetConfig+0x258>
 8007594:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007598:	d00c      	beq.n	80075b4 <UART_SetConfig+0x240>
 800759a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800759e:	d815      	bhi.n	80075cc <UART_SetConfig+0x258>
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d003      	beq.n	80075ac <UART_SetConfig+0x238>
 80075a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075a8:	d008      	beq.n	80075bc <UART_SetConfig+0x248>
 80075aa:	e00f      	b.n	80075cc <UART_SetConfig+0x258>
 80075ac:	2300      	movs	r3, #0
 80075ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075b2:	e052      	b.n	800765a <UART_SetConfig+0x2e6>
 80075b4:	2302      	movs	r3, #2
 80075b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075ba:	e04e      	b.n	800765a <UART_SetConfig+0x2e6>
 80075bc:	2304      	movs	r3, #4
 80075be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075c2:	e04a      	b.n	800765a <UART_SetConfig+0x2e6>
 80075c4:	2308      	movs	r3, #8
 80075c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075ca:	e046      	b.n	800765a <UART_SetConfig+0x2e6>
 80075cc:	2310      	movs	r3, #16
 80075ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075d2:	e042      	b.n	800765a <UART_SetConfig+0x2e6>
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a17      	ldr	r2, [pc, #92]	; (8007638 <UART_SetConfig+0x2c4>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d13a      	bne.n	8007654 <UART_SetConfig+0x2e0>
 80075de:	4b18      	ldr	r3, [pc, #96]	; (8007640 <UART_SetConfig+0x2cc>)
 80075e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075e4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80075e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80075ec:	d01a      	beq.n	8007624 <UART_SetConfig+0x2b0>
 80075ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80075f2:	d81b      	bhi.n	800762c <UART_SetConfig+0x2b8>
 80075f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075f8:	d00c      	beq.n	8007614 <UART_SetConfig+0x2a0>
 80075fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075fe:	d815      	bhi.n	800762c <UART_SetConfig+0x2b8>
 8007600:	2b00      	cmp	r3, #0
 8007602:	d003      	beq.n	800760c <UART_SetConfig+0x298>
 8007604:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007608:	d008      	beq.n	800761c <UART_SetConfig+0x2a8>
 800760a:	e00f      	b.n	800762c <UART_SetConfig+0x2b8>
 800760c:	2300      	movs	r3, #0
 800760e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007612:	e022      	b.n	800765a <UART_SetConfig+0x2e6>
 8007614:	2302      	movs	r3, #2
 8007616:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800761a:	e01e      	b.n	800765a <UART_SetConfig+0x2e6>
 800761c:	2304      	movs	r3, #4
 800761e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007622:	e01a      	b.n	800765a <UART_SetConfig+0x2e6>
 8007624:	2308      	movs	r3, #8
 8007626:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800762a:	e016      	b.n	800765a <UART_SetConfig+0x2e6>
 800762c:	2310      	movs	r3, #16
 800762e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007632:	e012      	b.n	800765a <UART_SetConfig+0x2e6>
 8007634:	efff69f3 	.word	0xefff69f3
 8007638:	40008000 	.word	0x40008000
 800763c:	40013800 	.word	0x40013800
 8007640:	40021000 	.word	0x40021000
 8007644:	40004400 	.word	0x40004400
 8007648:	40004800 	.word	0x40004800
 800764c:	40004c00 	.word	0x40004c00
 8007650:	40005000 	.word	0x40005000
 8007654:	2310      	movs	r3, #16
 8007656:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a9f      	ldr	r2, [pc, #636]	; (80078dc <UART_SetConfig+0x568>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d17a      	bne.n	800775a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007664:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007668:	2b08      	cmp	r3, #8
 800766a:	d824      	bhi.n	80076b6 <UART_SetConfig+0x342>
 800766c:	a201      	add	r2, pc, #4	; (adr r2, 8007674 <UART_SetConfig+0x300>)
 800766e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007672:	bf00      	nop
 8007674:	08007699 	.word	0x08007699
 8007678:	080076b7 	.word	0x080076b7
 800767c:	080076a1 	.word	0x080076a1
 8007680:	080076b7 	.word	0x080076b7
 8007684:	080076a7 	.word	0x080076a7
 8007688:	080076b7 	.word	0x080076b7
 800768c:	080076b7 	.word	0x080076b7
 8007690:	080076b7 	.word	0x080076b7
 8007694:	080076af 	.word	0x080076af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007698:	f7fd fd82 	bl	80051a0 <HAL_RCC_GetPCLK1Freq>
 800769c:	61f8      	str	r0, [r7, #28]
        break;
 800769e:	e010      	b.n	80076c2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80076a0:	4b8f      	ldr	r3, [pc, #572]	; (80078e0 <UART_SetConfig+0x56c>)
 80076a2:	61fb      	str	r3, [r7, #28]
        break;
 80076a4:	e00d      	b.n	80076c2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076a6:	f7fd fce3 	bl	8005070 <HAL_RCC_GetSysClockFreq>
 80076aa:	61f8      	str	r0, [r7, #28]
        break;
 80076ac:	e009      	b.n	80076c2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076b2:	61fb      	str	r3, [r7, #28]
        break;
 80076b4:	e005      	b.n	80076c2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80076b6:	2300      	movs	r3, #0
 80076b8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80076ba:	2301      	movs	r3, #1
 80076bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80076c0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80076c2:	69fb      	ldr	r3, [r7, #28]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	f000 80fb 	beq.w	80078c0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	685a      	ldr	r2, [r3, #4]
 80076ce:	4613      	mov	r3, r2
 80076d0:	005b      	lsls	r3, r3, #1
 80076d2:	4413      	add	r3, r2
 80076d4:	69fa      	ldr	r2, [r7, #28]
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d305      	bcc.n	80076e6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80076e0:	69fa      	ldr	r2, [r7, #28]
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d903      	bls.n	80076ee <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80076e6:	2301      	movs	r3, #1
 80076e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80076ec:	e0e8      	b.n	80078c0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80076ee:	69fb      	ldr	r3, [r7, #28]
 80076f0:	2200      	movs	r2, #0
 80076f2:	461c      	mov	r4, r3
 80076f4:	4615      	mov	r5, r2
 80076f6:	f04f 0200 	mov.w	r2, #0
 80076fa:	f04f 0300 	mov.w	r3, #0
 80076fe:	022b      	lsls	r3, r5, #8
 8007700:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007704:	0222      	lsls	r2, r4, #8
 8007706:	68f9      	ldr	r1, [r7, #12]
 8007708:	6849      	ldr	r1, [r1, #4]
 800770a:	0849      	lsrs	r1, r1, #1
 800770c:	2000      	movs	r0, #0
 800770e:	4688      	mov	r8, r1
 8007710:	4681      	mov	r9, r0
 8007712:	eb12 0a08 	adds.w	sl, r2, r8
 8007716:	eb43 0b09 	adc.w	fp, r3, r9
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	2200      	movs	r2, #0
 8007720:	603b      	str	r3, [r7, #0]
 8007722:	607a      	str	r2, [r7, #4]
 8007724:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007728:	4650      	mov	r0, sl
 800772a:	4659      	mov	r1, fp
 800772c:	f7f9 fa8c 	bl	8000c48 <__aeabi_uldivmod>
 8007730:	4602      	mov	r2, r0
 8007732:	460b      	mov	r3, r1
 8007734:	4613      	mov	r3, r2
 8007736:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007738:	69bb      	ldr	r3, [r7, #24]
 800773a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800773e:	d308      	bcc.n	8007752 <UART_SetConfig+0x3de>
 8007740:	69bb      	ldr	r3, [r7, #24]
 8007742:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007746:	d204      	bcs.n	8007752 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	69ba      	ldr	r2, [r7, #24]
 800774e:	60da      	str	r2, [r3, #12]
 8007750:	e0b6      	b.n	80078c0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007752:	2301      	movs	r3, #1
 8007754:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007758:	e0b2      	b.n	80078c0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	69db      	ldr	r3, [r3, #28]
 800775e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007762:	d15e      	bne.n	8007822 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007764:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007768:	2b08      	cmp	r3, #8
 800776a:	d828      	bhi.n	80077be <UART_SetConfig+0x44a>
 800776c:	a201      	add	r2, pc, #4	; (adr r2, 8007774 <UART_SetConfig+0x400>)
 800776e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007772:	bf00      	nop
 8007774:	08007799 	.word	0x08007799
 8007778:	080077a1 	.word	0x080077a1
 800777c:	080077a9 	.word	0x080077a9
 8007780:	080077bf 	.word	0x080077bf
 8007784:	080077af 	.word	0x080077af
 8007788:	080077bf 	.word	0x080077bf
 800778c:	080077bf 	.word	0x080077bf
 8007790:	080077bf 	.word	0x080077bf
 8007794:	080077b7 	.word	0x080077b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007798:	f7fd fd02 	bl	80051a0 <HAL_RCC_GetPCLK1Freq>
 800779c:	61f8      	str	r0, [r7, #28]
        break;
 800779e:	e014      	b.n	80077ca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80077a0:	f7fd fd14 	bl	80051cc <HAL_RCC_GetPCLK2Freq>
 80077a4:	61f8      	str	r0, [r7, #28]
        break;
 80077a6:	e010      	b.n	80077ca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077a8:	4b4d      	ldr	r3, [pc, #308]	; (80078e0 <UART_SetConfig+0x56c>)
 80077aa:	61fb      	str	r3, [r7, #28]
        break;
 80077ac:	e00d      	b.n	80077ca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077ae:	f7fd fc5f 	bl	8005070 <HAL_RCC_GetSysClockFreq>
 80077b2:	61f8      	str	r0, [r7, #28]
        break;
 80077b4:	e009      	b.n	80077ca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077ba:	61fb      	str	r3, [r7, #28]
        break;
 80077bc:	e005      	b.n	80077ca <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80077be:	2300      	movs	r3, #0
 80077c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80077c2:	2301      	movs	r3, #1
 80077c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80077c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80077ca:	69fb      	ldr	r3, [r7, #28]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d077      	beq.n	80078c0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80077d0:	69fb      	ldr	r3, [r7, #28]
 80077d2:	005a      	lsls	r2, r3, #1
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	085b      	lsrs	r3, r3, #1
 80077da:	441a      	add	r2, r3
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80077e4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077e6:	69bb      	ldr	r3, [r7, #24]
 80077e8:	2b0f      	cmp	r3, #15
 80077ea:	d916      	bls.n	800781a <UART_SetConfig+0x4a6>
 80077ec:	69bb      	ldr	r3, [r7, #24]
 80077ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077f2:	d212      	bcs.n	800781a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80077f4:	69bb      	ldr	r3, [r7, #24]
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	f023 030f 	bic.w	r3, r3, #15
 80077fc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80077fe:	69bb      	ldr	r3, [r7, #24]
 8007800:	085b      	lsrs	r3, r3, #1
 8007802:	b29b      	uxth	r3, r3
 8007804:	f003 0307 	and.w	r3, r3, #7
 8007808:	b29a      	uxth	r2, r3
 800780a:	8afb      	ldrh	r3, [r7, #22]
 800780c:	4313      	orrs	r3, r2
 800780e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	8afa      	ldrh	r2, [r7, #22]
 8007816:	60da      	str	r2, [r3, #12]
 8007818:	e052      	b.n	80078c0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800781a:	2301      	movs	r3, #1
 800781c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007820:	e04e      	b.n	80078c0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007822:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007826:	2b08      	cmp	r3, #8
 8007828:	d827      	bhi.n	800787a <UART_SetConfig+0x506>
 800782a:	a201      	add	r2, pc, #4	; (adr r2, 8007830 <UART_SetConfig+0x4bc>)
 800782c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007830:	08007855 	.word	0x08007855
 8007834:	0800785d 	.word	0x0800785d
 8007838:	08007865 	.word	0x08007865
 800783c:	0800787b 	.word	0x0800787b
 8007840:	0800786b 	.word	0x0800786b
 8007844:	0800787b 	.word	0x0800787b
 8007848:	0800787b 	.word	0x0800787b
 800784c:	0800787b 	.word	0x0800787b
 8007850:	08007873 	.word	0x08007873
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007854:	f7fd fca4 	bl	80051a0 <HAL_RCC_GetPCLK1Freq>
 8007858:	61f8      	str	r0, [r7, #28]
        break;
 800785a:	e014      	b.n	8007886 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800785c:	f7fd fcb6 	bl	80051cc <HAL_RCC_GetPCLK2Freq>
 8007860:	61f8      	str	r0, [r7, #28]
        break;
 8007862:	e010      	b.n	8007886 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007864:	4b1e      	ldr	r3, [pc, #120]	; (80078e0 <UART_SetConfig+0x56c>)
 8007866:	61fb      	str	r3, [r7, #28]
        break;
 8007868:	e00d      	b.n	8007886 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800786a:	f7fd fc01 	bl	8005070 <HAL_RCC_GetSysClockFreq>
 800786e:	61f8      	str	r0, [r7, #28]
        break;
 8007870:	e009      	b.n	8007886 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007872:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007876:	61fb      	str	r3, [r7, #28]
        break;
 8007878:	e005      	b.n	8007886 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800787a:	2300      	movs	r3, #0
 800787c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800787e:	2301      	movs	r3, #1
 8007880:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007884:	bf00      	nop
    }

    if (pclk != 0U)
 8007886:	69fb      	ldr	r3, [r7, #28]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d019      	beq.n	80078c0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	085a      	lsrs	r2, r3, #1
 8007892:	69fb      	ldr	r3, [r7, #28]
 8007894:	441a      	add	r2, r3
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	fbb2 f3f3 	udiv	r3, r2, r3
 800789e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078a0:	69bb      	ldr	r3, [r7, #24]
 80078a2:	2b0f      	cmp	r3, #15
 80078a4:	d909      	bls.n	80078ba <UART_SetConfig+0x546>
 80078a6:	69bb      	ldr	r3, [r7, #24]
 80078a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078ac:	d205      	bcs.n	80078ba <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80078ae:	69bb      	ldr	r3, [r7, #24]
 80078b0:	b29a      	uxth	r2, r3
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	60da      	str	r2, [r3, #12]
 80078b8:	e002      	b.n	80078c0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80078ba:	2301      	movs	r3, #1
 80078bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2200      	movs	r2, #0
 80078c4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	2200      	movs	r2, #0
 80078ca:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80078cc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	3728      	adds	r7, #40	; 0x28
 80078d4:	46bd      	mov	sp, r7
 80078d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80078da:	bf00      	nop
 80078dc:	40008000 	.word	0x40008000
 80078e0:	00f42400 	.word	0x00f42400

080078e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80078e4:	b480      	push	{r7}
 80078e6:	b083      	sub	sp, #12
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078f0:	f003 0308 	and.w	r3, r3, #8
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d00a      	beq.n	800790e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	430a      	orrs	r2, r1
 800790c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007912:	f003 0301 	and.w	r3, r3, #1
 8007916:	2b00      	cmp	r3, #0
 8007918:	d00a      	beq.n	8007930 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	430a      	orrs	r2, r1
 800792e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007934:	f003 0302 	and.w	r3, r3, #2
 8007938:	2b00      	cmp	r3, #0
 800793a:	d00a      	beq.n	8007952 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	685b      	ldr	r3, [r3, #4]
 8007942:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	430a      	orrs	r2, r1
 8007950:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007956:	f003 0304 	and.w	r3, r3, #4
 800795a:	2b00      	cmp	r3, #0
 800795c:	d00a      	beq.n	8007974 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	430a      	orrs	r2, r1
 8007972:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007978:	f003 0310 	and.w	r3, r3, #16
 800797c:	2b00      	cmp	r3, #0
 800797e:	d00a      	beq.n	8007996 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	689b      	ldr	r3, [r3, #8]
 8007986:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	430a      	orrs	r2, r1
 8007994:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800799a:	f003 0320 	and.w	r3, r3, #32
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d00a      	beq.n	80079b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	689b      	ldr	r3, [r3, #8]
 80079a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	430a      	orrs	r2, r1
 80079b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d01a      	beq.n	80079fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	430a      	orrs	r2, r1
 80079d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079e2:	d10a      	bne.n	80079fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	430a      	orrs	r2, r1
 80079f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d00a      	beq.n	8007a1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	430a      	orrs	r2, r1
 8007a1a:	605a      	str	r2, [r3, #4]
  }
}
 8007a1c:	bf00      	nop
 8007a1e:	370c      	adds	r7, #12
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr

08007a28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b098      	sub	sp, #96	; 0x60
 8007a2c:	af02      	add	r7, sp, #8
 8007a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2200      	movs	r2, #0
 8007a34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007a38:	f7fa f99a 	bl	8001d70 <HAL_GetTick>
 8007a3c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f003 0308 	and.w	r3, r3, #8
 8007a48:	2b08      	cmp	r3, #8
 8007a4a:	d12e      	bne.n	8007aaa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a50:	9300      	str	r3, [sp, #0]
 8007a52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a54:	2200      	movs	r2, #0
 8007a56:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f000 f88c 	bl	8007b78 <UART_WaitOnFlagUntilTimeout>
 8007a60:	4603      	mov	r3, r0
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d021      	beq.n	8007aaa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a6e:	e853 3f00 	ldrex	r3, [r3]
 8007a72:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a7a:	653b      	str	r3, [r7, #80]	; 0x50
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	461a      	mov	r2, r3
 8007a82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a84:	647b      	str	r3, [r7, #68]	; 0x44
 8007a86:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a88:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007a8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a8c:	e841 2300 	strex	r3, r2, [r1]
 8007a90:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d1e6      	bne.n	8007a66 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2220      	movs	r2, #32
 8007a9c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007aa6:	2303      	movs	r3, #3
 8007aa8:	e062      	b.n	8007b70 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f003 0304 	and.w	r3, r3, #4
 8007ab4:	2b04      	cmp	r3, #4
 8007ab6:	d149      	bne.n	8007b4c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ab8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007abc:	9300      	str	r3, [sp, #0]
 8007abe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f000 f856 	bl	8007b78 <UART_WaitOnFlagUntilTimeout>
 8007acc:	4603      	mov	r3, r0
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d03c      	beq.n	8007b4c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ada:	e853 3f00 	ldrex	r3, [r3]
 8007ade:	623b      	str	r3, [r7, #32]
   return(result);
 8007ae0:	6a3b      	ldr	r3, [r7, #32]
 8007ae2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	461a      	mov	r2, r3
 8007aee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007af0:	633b      	str	r3, [r7, #48]	; 0x30
 8007af2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007af6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007af8:	e841 2300 	strex	r3, r2, [r1]
 8007afc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d1e6      	bne.n	8007ad2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	3308      	adds	r3, #8
 8007b0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	e853 3f00 	ldrex	r3, [r3]
 8007b12:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f023 0301 	bic.w	r3, r3, #1
 8007b1a:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	3308      	adds	r3, #8
 8007b22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b24:	61fa      	str	r2, [r7, #28]
 8007b26:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b28:	69b9      	ldr	r1, [r7, #24]
 8007b2a:	69fa      	ldr	r2, [r7, #28]
 8007b2c:	e841 2300 	strex	r3, r2, [r1]
 8007b30:	617b      	str	r3, [r7, #20]
   return(result);
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d1e5      	bne.n	8007b04 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2220      	movs	r2, #32
 8007b3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2200      	movs	r2, #0
 8007b44:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b48:	2303      	movs	r3, #3
 8007b4a:	e011      	b.n	8007b70 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2220      	movs	r2, #32
 8007b50:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2220      	movs	r2, #32
 8007b56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2200      	movs	r2, #0
 8007b64:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007b6e:	2300      	movs	r3, #0
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	3758      	adds	r7, #88	; 0x58
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}

08007b78 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b084      	sub	sp, #16
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	60f8      	str	r0, [r7, #12]
 8007b80:	60b9      	str	r1, [r7, #8]
 8007b82:	603b      	str	r3, [r7, #0]
 8007b84:	4613      	mov	r3, r2
 8007b86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b88:	e049      	b.n	8007c1e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b8a:	69bb      	ldr	r3, [r7, #24]
 8007b8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b90:	d045      	beq.n	8007c1e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b92:	f7fa f8ed 	bl	8001d70 <HAL_GetTick>
 8007b96:	4602      	mov	r2, r0
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	1ad3      	subs	r3, r2, r3
 8007b9c:	69ba      	ldr	r2, [r7, #24]
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	d302      	bcc.n	8007ba8 <UART_WaitOnFlagUntilTimeout+0x30>
 8007ba2:	69bb      	ldr	r3, [r7, #24]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d101      	bne.n	8007bac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007ba8:	2303      	movs	r3, #3
 8007baa:	e048      	b.n	8007c3e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f003 0304 	and.w	r3, r3, #4
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d031      	beq.n	8007c1e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	69db      	ldr	r3, [r3, #28]
 8007bc0:	f003 0308 	and.w	r3, r3, #8
 8007bc4:	2b08      	cmp	r3, #8
 8007bc6:	d110      	bne.n	8007bea <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	2208      	movs	r2, #8
 8007bce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007bd0:	68f8      	ldr	r0, [r7, #12]
 8007bd2:	f000 f838 	bl	8007c46 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	2208      	movs	r2, #8
 8007bda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2200      	movs	r2, #0
 8007be2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8007be6:	2301      	movs	r3, #1
 8007be8:	e029      	b.n	8007c3e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	69db      	ldr	r3, [r3, #28]
 8007bf0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007bf4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007bf8:	d111      	bne.n	8007c1e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007c04:	68f8      	ldr	r0, [r7, #12]
 8007c06:	f000 f81e 	bl	8007c46 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2220      	movs	r2, #32
 8007c0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	2200      	movs	r2, #0
 8007c16:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007c1a:	2303      	movs	r3, #3
 8007c1c:	e00f      	b.n	8007c3e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	69da      	ldr	r2, [r3, #28]
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	4013      	ands	r3, r2
 8007c28:	68ba      	ldr	r2, [r7, #8]
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	bf0c      	ite	eq
 8007c2e:	2301      	moveq	r3, #1
 8007c30:	2300      	movne	r3, #0
 8007c32:	b2db      	uxtb	r3, r3
 8007c34:	461a      	mov	r2, r3
 8007c36:	79fb      	ldrb	r3, [r7, #7]
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	d0a6      	beq.n	8007b8a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c3c:	2300      	movs	r3, #0
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3710      	adds	r7, #16
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}

08007c46 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007c46:	b480      	push	{r7}
 8007c48:	b095      	sub	sp, #84	; 0x54
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c56:	e853 3f00 	ldrex	r3, [r3]
 8007c5a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c5e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	461a      	mov	r2, r3
 8007c6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c6c:	643b      	str	r3, [r7, #64]	; 0x40
 8007c6e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c70:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007c72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007c74:	e841 2300 	strex	r3, r2, [r1]
 8007c78:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d1e6      	bne.n	8007c4e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	3308      	adds	r3, #8
 8007c86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c88:	6a3b      	ldr	r3, [r7, #32]
 8007c8a:	e853 3f00 	ldrex	r3, [r3]
 8007c8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c90:	69fb      	ldr	r3, [r7, #28]
 8007c92:	f023 0301 	bic.w	r3, r3, #1
 8007c96:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	3308      	adds	r3, #8
 8007c9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ca0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ca2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ca4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ca6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ca8:	e841 2300 	strex	r3, r2, [r1]
 8007cac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d1e5      	bne.n	8007c80 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cb8:	2b01      	cmp	r3, #1
 8007cba:	d118      	bne.n	8007cee <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	e853 3f00 	ldrex	r3, [r3]
 8007cc8:	60bb      	str	r3, [r7, #8]
   return(result);
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	f023 0310 	bic.w	r3, r3, #16
 8007cd0:	647b      	str	r3, [r7, #68]	; 0x44
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cda:	61bb      	str	r3, [r7, #24]
 8007cdc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cde:	6979      	ldr	r1, [r7, #20]
 8007ce0:	69ba      	ldr	r2, [r7, #24]
 8007ce2:	e841 2300 	strex	r3, r2, [r1]
 8007ce6:	613b      	str	r3, [r7, #16]
   return(result);
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d1e6      	bne.n	8007cbc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2220      	movs	r2, #32
 8007cf2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007d02:	bf00      	nop
 8007d04:	3754      	adds	r7, #84	; 0x54
 8007d06:	46bd      	mov	sp, r7
 8007d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0c:	4770      	bx	lr

08007d0e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007d0e:	b580      	push	{r7, lr}
 8007d10:	b084      	sub	sp, #16
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d1a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2200      	movs	r2, #0
 8007d28:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d2c:	68f8      	ldr	r0, [r7, #12]
 8007d2e:	f7ff fb0b 	bl	8007348 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d32:	bf00      	nop
 8007d34:	3710      	adds	r7, #16
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}

08007d3a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007d3a:	b480      	push	{r7}
 8007d3c:	b08f      	sub	sp, #60	; 0x3c
 8007d3e:	af00      	add	r7, sp, #0
 8007d40:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d46:	2b21      	cmp	r3, #33	; 0x21
 8007d48:	d14d      	bne.n	8007de6 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007d50:	b29b      	uxth	r3, r3
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d132      	bne.n	8007dbc <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d5c:	6a3b      	ldr	r3, [r7, #32]
 8007d5e:	e853 3f00 	ldrex	r3, [r3]
 8007d62:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d64:	69fb      	ldr	r3, [r7, #28]
 8007d66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d6a:	637b      	str	r3, [r7, #52]	; 0x34
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	461a      	mov	r2, r3
 8007d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d76:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d7c:	e841 2300 	strex	r3, r2, [r1]
 8007d80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d1e6      	bne.n	8007d56 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	e853 3f00 	ldrex	r3, [r3]
 8007d94:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d9c:	633b      	str	r3, [r7, #48]	; 0x30
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	461a      	mov	r2, r3
 8007da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da6:	61bb      	str	r3, [r7, #24]
 8007da8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007daa:	6979      	ldr	r1, [r7, #20]
 8007dac:	69ba      	ldr	r2, [r7, #24]
 8007dae:	e841 2300 	strex	r3, r2, [r1]
 8007db2:	613b      	str	r3, [r7, #16]
   return(result);
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d1e6      	bne.n	8007d88 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007dba:	e014      	b.n	8007de6 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dc0:	781a      	ldrb	r2, [r3, #0]
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	b292      	uxth	r2, r2
 8007dc8:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dce:	1c5a      	adds	r2, r3, #1
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007dda:	b29b      	uxth	r3, r3
 8007ddc:	3b01      	subs	r3, #1
 8007dde:	b29a      	uxth	r2, r3
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007de6:	bf00      	nop
 8007de8:	373c      	adds	r7, #60	; 0x3c
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr

08007df2 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007df2:	b480      	push	{r7}
 8007df4:	b091      	sub	sp, #68	; 0x44
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007dfe:	2b21      	cmp	r3, #33	; 0x21
 8007e00:	d151      	bne.n	8007ea6 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007e08:	b29b      	uxth	r3, r3
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d132      	bne.n	8007e74 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e16:	e853 3f00 	ldrex	r3, [r3]
 8007e1a:	623b      	str	r3, [r7, #32]
   return(result);
 8007e1c:	6a3b      	ldr	r3, [r7, #32]
 8007e1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e22:	63bb      	str	r3, [r7, #56]	; 0x38
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	461a      	mov	r2, r3
 8007e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e2c:	633b      	str	r3, [r7, #48]	; 0x30
 8007e2e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e30:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e34:	e841 2300 	strex	r3, r2, [r1]
 8007e38:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d1e6      	bne.n	8007e0e <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	e853 3f00 	ldrex	r3, [r3]
 8007e4c:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e54:	637b      	str	r3, [r7, #52]	; 0x34
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	461a      	mov	r2, r3
 8007e5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e5e:	61fb      	str	r3, [r7, #28]
 8007e60:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e62:	69b9      	ldr	r1, [r7, #24]
 8007e64:	69fa      	ldr	r2, [r7, #28]
 8007e66:	e841 2300 	strex	r3, r2, [r1]
 8007e6a:	617b      	str	r3, [r7, #20]
   return(result);
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d1e6      	bne.n	8007e40 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007e72:	e018      	b.n	8007ea6 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e78:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007e7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e7c:	881a      	ldrh	r2, [r3, #0]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e86:	b292      	uxth	r2, r2
 8007e88:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e8e:	1c9a      	adds	r2, r3, #2
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007e9a:	b29b      	uxth	r3, r3
 8007e9c:	3b01      	subs	r3, #1
 8007e9e:	b29a      	uxth	r2, r3
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007ea6:	bf00      	nop
 8007ea8:	3744      	adds	r7, #68	; 0x44
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb0:	4770      	bx	lr

08007eb2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007eb2:	b580      	push	{r7, lr}
 8007eb4:	b088      	sub	sp, #32
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	e853 3f00 	ldrex	r3, [r3]
 8007ec6:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ece:	61fb      	str	r3, [r7, #28]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	461a      	mov	r2, r3
 8007ed6:	69fb      	ldr	r3, [r7, #28]
 8007ed8:	61bb      	str	r3, [r7, #24]
 8007eda:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007edc:	6979      	ldr	r1, [r7, #20]
 8007ede:	69ba      	ldr	r2, [r7, #24]
 8007ee0:	e841 2300 	strex	r3, r2, [r1]
 8007ee4:	613b      	str	r3, [r7, #16]
   return(result);
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d1e6      	bne.n	8007eba <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2220      	movs	r2, #32
 8007ef0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f7ff fa1b 	bl	8007334 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007efe:	bf00      	nop
 8007f00:	3720      	adds	r7, #32
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}

08007f06 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007f06:	b480      	push	{r7}
 8007f08:	b083      	sub	sp, #12
 8007f0a:	af00      	add	r7, sp, #0
 8007f0c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007f0e:	bf00      	nop
 8007f10:	370c      	adds	r7, #12
 8007f12:	46bd      	mov	sp, r7
 8007f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f18:	4770      	bx	lr

08007f1a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007f1a:	b480      	push	{r7}
 8007f1c:	b085      	sub	sp, #20
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	4603      	mov	r3, r0
 8007f22:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007f24:	2300      	movs	r3, #0
 8007f26:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007f28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007f2c:	2b84      	cmp	r3, #132	; 0x84
 8007f2e:	d005      	beq.n	8007f3c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007f30:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	4413      	add	r3, r2
 8007f38:	3303      	adds	r3, #3
 8007f3a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3714      	adds	r7, #20
 8007f42:	46bd      	mov	sp, r7
 8007f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f48:	4770      	bx	lr

08007f4a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007f4a:	b580      	push	{r7, lr}
 8007f4c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007f4e:	f000 fadf 	bl	8008510 <vTaskStartScheduler>
  
  return osOK;
 8007f52:	2300      	movs	r3, #0
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	bd80      	pop	{r7, pc}

08007f58 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f5a:	b089      	sub	sp, #36	; 0x24
 8007f5c:	af04      	add	r7, sp, #16
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	695b      	ldr	r3, [r3, #20]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d020      	beq.n	8007fac <osThreadCreate+0x54>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	699b      	ldr	r3, [r3, #24]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d01c      	beq.n	8007fac <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	685c      	ldr	r4, [r3, #4]
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	691e      	ldr	r6, [r3, #16]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007f84:	4618      	mov	r0, r3
 8007f86:	f7ff ffc8 	bl	8007f1a <makeFreeRtosPriority>
 8007f8a:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	695b      	ldr	r3, [r3, #20]
 8007f90:	687a      	ldr	r2, [r7, #4]
 8007f92:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007f94:	9202      	str	r2, [sp, #8]
 8007f96:	9301      	str	r3, [sp, #4]
 8007f98:	9100      	str	r1, [sp, #0]
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	4632      	mov	r2, r6
 8007f9e:	4629      	mov	r1, r5
 8007fa0:	4620      	mov	r0, r4
 8007fa2:	f000 f8ed 	bl	8008180 <xTaskCreateStatic>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	60fb      	str	r3, [r7, #12]
 8007faa:	e01c      	b.n	8007fe6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	685c      	ldr	r4, [r3, #4]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007fb8:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f7ff ffaa 	bl	8007f1a <makeFreeRtosPriority>
 8007fc6:	4602      	mov	r2, r0
 8007fc8:	f107 030c 	add.w	r3, r7, #12
 8007fcc:	9301      	str	r3, [sp, #4]
 8007fce:	9200      	str	r2, [sp, #0]
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	4632      	mov	r2, r6
 8007fd4:	4629      	mov	r1, r5
 8007fd6:	4620      	mov	r0, r4
 8007fd8:	f000 f92f 	bl	800823a <xTaskCreate>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	2b01      	cmp	r3, #1
 8007fe0:	d001      	beq.n	8007fe6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	e000      	b.n	8007fe8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3714      	adds	r7, #20
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007ff0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b084      	sub	sp, #16
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d001      	beq.n	8008006 <osDelay+0x16>
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	e000      	b.n	8008008 <osDelay+0x18>
 8008006:	2301      	movs	r3, #1
 8008008:	4618      	mov	r0, r3
 800800a:	f000 fa4d 	bl	80084a8 <vTaskDelay>
  
  return osOK;
 800800e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008010:	4618      	mov	r0, r3
 8008012:	3710      	adds	r7, #16
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}

08008018 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008018:	b480      	push	{r7}
 800801a:	b083      	sub	sp, #12
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f103 0208 	add.w	r2, r3, #8
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008030:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f103 0208 	add.w	r2, r3, #8
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f103 0208 	add.w	r2, r3, #8
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2200      	movs	r2, #0
 800804a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800804c:	bf00      	nop
 800804e:	370c      	adds	r7, #12
 8008050:	46bd      	mov	sp, r7
 8008052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008056:	4770      	bx	lr

08008058 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008058:	b480      	push	{r7}
 800805a:	b083      	sub	sp, #12
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2200      	movs	r2, #0
 8008064:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008066:	bf00      	nop
 8008068:	370c      	adds	r7, #12
 800806a:	46bd      	mov	sp, r7
 800806c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008070:	4770      	bx	lr

08008072 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008072:	b480      	push	{r7}
 8008074:	b085      	sub	sp, #20
 8008076:	af00      	add	r7, sp, #0
 8008078:	6078      	str	r0, [r7, #4]
 800807a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	685b      	ldr	r3, [r3, #4]
 8008080:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	68fa      	ldr	r2, [r7, #12]
 8008086:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	689a      	ldr	r2, [r3, #8]
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	689b      	ldr	r3, [r3, #8]
 8008094:	683a      	ldr	r2, [r7, #0]
 8008096:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	683a      	ldr	r2, [r7, #0]
 800809c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	687a      	ldr	r2, [r7, #4]
 80080a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	1c5a      	adds	r2, r3, #1
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	601a      	str	r2, [r3, #0]
}
 80080ae:	bf00      	nop
 80080b0:	3714      	adds	r7, #20
 80080b2:	46bd      	mov	sp, r7
 80080b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b8:	4770      	bx	lr

080080ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80080ba:	b480      	push	{r7}
 80080bc:	b085      	sub	sp, #20
 80080be:	af00      	add	r7, sp, #0
 80080c0:	6078      	str	r0, [r7, #4]
 80080c2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080d0:	d103      	bne.n	80080da <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	691b      	ldr	r3, [r3, #16]
 80080d6:	60fb      	str	r3, [r7, #12]
 80080d8:	e00c      	b.n	80080f4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	3308      	adds	r3, #8
 80080de:	60fb      	str	r3, [r7, #12]
 80080e0:	e002      	b.n	80080e8 <vListInsert+0x2e>
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	60fb      	str	r3, [r7, #12]
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	68ba      	ldr	r2, [r7, #8]
 80080f0:	429a      	cmp	r2, r3
 80080f2:	d2f6      	bcs.n	80080e2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	685a      	ldr	r2, [r3, #4]
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	683a      	ldr	r2, [r7, #0]
 8008102:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	68fa      	ldr	r2, [r7, #12]
 8008108:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	683a      	ldr	r2, [r7, #0]
 800810e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	687a      	ldr	r2, [r7, #4]
 8008114:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	1c5a      	adds	r2, r3, #1
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	601a      	str	r2, [r3, #0]
}
 8008120:	bf00      	nop
 8008122:	3714      	adds	r7, #20
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr

0800812c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800812c:	b480      	push	{r7}
 800812e:	b085      	sub	sp, #20
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	691b      	ldr	r3, [r3, #16]
 8008138:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	685b      	ldr	r3, [r3, #4]
 800813e:	687a      	ldr	r2, [r7, #4]
 8008140:	6892      	ldr	r2, [r2, #8]
 8008142:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	689b      	ldr	r3, [r3, #8]
 8008148:	687a      	ldr	r2, [r7, #4]
 800814a:	6852      	ldr	r2, [r2, #4]
 800814c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	685b      	ldr	r3, [r3, #4]
 8008152:	687a      	ldr	r2, [r7, #4]
 8008154:	429a      	cmp	r2, r3
 8008156:	d103      	bne.n	8008160 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	689a      	ldr	r2, [r3, #8]
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2200      	movs	r2, #0
 8008164:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	1e5a      	subs	r2, r3, #1
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
}
 8008174:	4618      	mov	r0, r3
 8008176:	3714      	adds	r7, #20
 8008178:	46bd      	mov	sp, r7
 800817a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817e:	4770      	bx	lr

08008180 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008180:	b580      	push	{r7, lr}
 8008182:	b08e      	sub	sp, #56	; 0x38
 8008184:	af04      	add	r7, sp, #16
 8008186:	60f8      	str	r0, [r7, #12]
 8008188:	60b9      	str	r1, [r7, #8]
 800818a:	607a      	str	r2, [r7, #4]
 800818c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800818e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008190:	2b00      	cmp	r3, #0
 8008192:	d10a      	bne.n	80081aa <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008198:	f383 8811 	msr	BASEPRI, r3
 800819c:	f3bf 8f6f 	isb	sy
 80081a0:	f3bf 8f4f 	dsb	sy
 80081a4:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80081a6:	bf00      	nop
 80081a8:	e7fe      	b.n	80081a8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80081aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d10a      	bne.n	80081c6 <xTaskCreateStatic+0x46>
	__asm volatile
 80081b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b4:	f383 8811 	msr	BASEPRI, r3
 80081b8:	f3bf 8f6f 	isb	sy
 80081bc:	f3bf 8f4f 	dsb	sy
 80081c0:	61fb      	str	r3, [r7, #28]
}
 80081c2:	bf00      	nop
 80081c4:	e7fe      	b.n	80081c4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80081c6:	2354      	movs	r3, #84	; 0x54
 80081c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	2b54      	cmp	r3, #84	; 0x54
 80081ce:	d00a      	beq.n	80081e6 <xTaskCreateStatic+0x66>
	__asm volatile
 80081d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d4:	f383 8811 	msr	BASEPRI, r3
 80081d8:	f3bf 8f6f 	isb	sy
 80081dc:	f3bf 8f4f 	dsb	sy
 80081e0:	61bb      	str	r3, [r7, #24]
}
 80081e2:	bf00      	nop
 80081e4:	e7fe      	b.n	80081e4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80081e6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80081e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d01e      	beq.n	800822c <xTaskCreateStatic+0xac>
 80081ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d01b      	beq.n	800822c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80081f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081f6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80081f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80081fc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80081fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008200:	2202      	movs	r2, #2
 8008202:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008206:	2300      	movs	r3, #0
 8008208:	9303      	str	r3, [sp, #12]
 800820a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800820c:	9302      	str	r3, [sp, #8]
 800820e:	f107 0314 	add.w	r3, r7, #20
 8008212:	9301      	str	r3, [sp, #4]
 8008214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008216:	9300      	str	r3, [sp, #0]
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	687a      	ldr	r2, [r7, #4]
 800821c:	68b9      	ldr	r1, [r7, #8]
 800821e:	68f8      	ldr	r0, [r7, #12]
 8008220:	f000 f850 	bl	80082c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008224:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008226:	f000 f8d5 	bl	80083d4 <prvAddNewTaskToReadyList>
 800822a:	e001      	b.n	8008230 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800822c:	2300      	movs	r3, #0
 800822e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008230:	697b      	ldr	r3, [r7, #20]
	}
 8008232:	4618      	mov	r0, r3
 8008234:	3728      	adds	r7, #40	; 0x28
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}

0800823a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800823a:	b580      	push	{r7, lr}
 800823c:	b08c      	sub	sp, #48	; 0x30
 800823e:	af04      	add	r7, sp, #16
 8008240:	60f8      	str	r0, [r7, #12]
 8008242:	60b9      	str	r1, [r7, #8]
 8008244:	603b      	str	r3, [r7, #0]
 8008246:	4613      	mov	r3, r2
 8008248:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800824a:	88fb      	ldrh	r3, [r7, #6]
 800824c:	009b      	lsls	r3, r3, #2
 800824e:	4618      	mov	r0, r3
 8008250:	f000 fee2 	bl	8009018 <pvPortMalloc>
 8008254:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d00e      	beq.n	800827a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800825c:	2054      	movs	r0, #84	; 0x54
 800825e:	f000 fedb 	bl	8009018 <pvPortMalloc>
 8008262:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008264:	69fb      	ldr	r3, [r7, #28]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d003      	beq.n	8008272 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800826a:	69fb      	ldr	r3, [r7, #28]
 800826c:	697a      	ldr	r2, [r7, #20]
 800826e:	631a      	str	r2, [r3, #48]	; 0x30
 8008270:	e005      	b.n	800827e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008272:	6978      	ldr	r0, [r7, #20]
 8008274:	f000 ff9c 	bl	80091b0 <vPortFree>
 8008278:	e001      	b.n	800827e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800827a:	2300      	movs	r3, #0
 800827c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800827e:	69fb      	ldr	r3, [r7, #28]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d017      	beq.n	80082b4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008284:	69fb      	ldr	r3, [r7, #28]
 8008286:	2200      	movs	r2, #0
 8008288:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800828c:	88fa      	ldrh	r2, [r7, #6]
 800828e:	2300      	movs	r3, #0
 8008290:	9303      	str	r3, [sp, #12]
 8008292:	69fb      	ldr	r3, [r7, #28]
 8008294:	9302      	str	r3, [sp, #8]
 8008296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008298:	9301      	str	r3, [sp, #4]
 800829a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800829c:	9300      	str	r3, [sp, #0]
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	68b9      	ldr	r1, [r7, #8]
 80082a2:	68f8      	ldr	r0, [r7, #12]
 80082a4:	f000 f80e 	bl	80082c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80082a8:	69f8      	ldr	r0, [r7, #28]
 80082aa:	f000 f893 	bl	80083d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80082ae:	2301      	movs	r3, #1
 80082b0:	61bb      	str	r3, [r7, #24]
 80082b2:	e002      	b.n	80082ba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80082b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80082b8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80082ba:	69bb      	ldr	r3, [r7, #24]
	}
 80082bc:	4618      	mov	r0, r3
 80082be:	3720      	adds	r7, #32
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}

080082c4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b088      	sub	sp, #32
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	60f8      	str	r0, [r7, #12]
 80082cc:	60b9      	str	r1, [r7, #8]
 80082ce:	607a      	str	r2, [r7, #4]
 80082d0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80082d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80082dc:	3b01      	subs	r3, #1
 80082de:	009b      	lsls	r3, r3, #2
 80082e0:	4413      	add	r3, r2
 80082e2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80082e4:	69bb      	ldr	r3, [r7, #24]
 80082e6:	f023 0307 	bic.w	r3, r3, #7
 80082ea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80082ec:	69bb      	ldr	r3, [r7, #24]
 80082ee:	f003 0307 	and.w	r3, r3, #7
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d00a      	beq.n	800830c <prvInitialiseNewTask+0x48>
	__asm volatile
 80082f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082fa:	f383 8811 	msr	BASEPRI, r3
 80082fe:	f3bf 8f6f 	isb	sy
 8008302:	f3bf 8f4f 	dsb	sy
 8008306:	617b      	str	r3, [r7, #20]
}
 8008308:	bf00      	nop
 800830a:	e7fe      	b.n	800830a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d01f      	beq.n	8008352 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008312:	2300      	movs	r3, #0
 8008314:	61fb      	str	r3, [r7, #28]
 8008316:	e012      	b.n	800833e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008318:	68ba      	ldr	r2, [r7, #8]
 800831a:	69fb      	ldr	r3, [r7, #28]
 800831c:	4413      	add	r3, r2
 800831e:	7819      	ldrb	r1, [r3, #0]
 8008320:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008322:	69fb      	ldr	r3, [r7, #28]
 8008324:	4413      	add	r3, r2
 8008326:	3334      	adds	r3, #52	; 0x34
 8008328:	460a      	mov	r2, r1
 800832a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800832c:	68ba      	ldr	r2, [r7, #8]
 800832e:	69fb      	ldr	r3, [r7, #28]
 8008330:	4413      	add	r3, r2
 8008332:	781b      	ldrb	r3, [r3, #0]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d006      	beq.n	8008346 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008338:	69fb      	ldr	r3, [r7, #28]
 800833a:	3301      	adds	r3, #1
 800833c:	61fb      	str	r3, [r7, #28]
 800833e:	69fb      	ldr	r3, [r7, #28]
 8008340:	2b0f      	cmp	r3, #15
 8008342:	d9e9      	bls.n	8008318 <prvInitialiseNewTask+0x54>
 8008344:	e000      	b.n	8008348 <prvInitialiseNewTask+0x84>
			{
				break;
 8008346:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800834a:	2200      	movs	r2, #0
 800834c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008350:	e003      	b.n	800835a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008354:	2200      	movs	r2, #0
 8008356:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800835a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800835c:	2b06      	cmp	r3, #6
 800835e:	d901      	bls.n	8008364 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008360:	2306      	movs	r3, #6
 8008362:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008366:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008368:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800836a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800836c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800836e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008372:	2200      	movs	r2, #0
 8008374:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008378:	3304      	adds	r3, #4
 800837a:	4618      	mov	r0, r3
 800837c:	f7ff fe6c 	bl	8008058 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008382:	3318      	adds	r3, #24
 8008384:	4618      	mov	r0, r3
 8008386:	f7ff fe67 	bl	8008058 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800838a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800838c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800838e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008392:	f1c3 0207 	rsb	r2, r3, #7
 8008396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008398:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800839a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800839c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800839e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80083a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083a2:	2200      	movs	r2, #0
 80083a4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80083a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083a8:	2200      	movs	r2, #0
 80083aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80083ae:	683a      	ldr	r2, [r7, #0]
 80083b0:	68f9      	ldr	r1, [r7, #12]
 80083b2:	69b8      	ldr	r0, [r7, #24]
 80083b4:	f000 fc24 	bl	8008c00 <pxPortInitialiseStack>
 80083b8:	4602      	mov	r2, r0
 80083ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083bc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80083be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d002      	beq.n	80083ca <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80083c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80083ca:	bf00      	nop
 80083cc:	3720      	adds	r7, #32
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}
	...

080083d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b082      	sub	sp, #8
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80083dc:	f000 fd3a 	bl	8008e54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80083e0:	4b2a      	ldr	r3, [pc, #168]	; (800848c <prvAddNewTaskToReadyList+0xb8>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	3301      	adds	r3, #1
 80083e6:	4a29      	ldr	r2, [pc, #164]	; (800848c <prvAddNewTaskToReadyList+0xb8>)
 80083e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80083ea:	4b29      	ldr	r3, [pc, #164]	; (8008490 <prvAddNewTaskToReadyList+0xbc>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d109      	bne.n	8008406 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80083f2:	4a27      	ldr	r2, [pc, #156]	; (8008490 <prvAddNewTaskToReadyList+0xbc>)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80083f8:	4b24      	ldr	r3, [pc, #144]	; (800848c <prvAddNewTaskToReadyList+0xb8>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	2b01      	cmp	r3, #1
 80083fe:	d110      	bne.n	8008422 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008400:	f000 fabc 	bl	800897c <prvInitialiseTaskLists>
 8008404:	e00d      	b.n	8008422 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008406:	4b23      	ldr	r3, [pc, #140]	; (8008494 <prvAddNewTaskToReadyList+0xc0>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d109      	bne.n	8008422 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800840e:	4b20      	ldr	r3, [pc, #128]	; (8008490 <prvAddNewTaskToReadyList+0xbc>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008418:	429a      	cmp	r2, r3
 800841a:	d802      	bhi.n	8008422 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800841c:	4a1c      	ldr	r2, [pc, #112]	; (8008490 <prvAddNewTaskToReadyList+0xbc>)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008422:	4b1d      	ldr	r3, [pc, #116]	; (8008498 <prvAddNewTaskToReadyList+0xc4>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	3301      	adds	r3, #1
 8008428:	4a1b      	ldr	r2, [pc, #108]	; (8008498 <prvAddNewTaskToReadyList+0xc4>)
 800842a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008430:	2201      	movs	r2, #1
 8008432:	409a      	lsls	r2, r3
 8008434:	4b19      	ldr	r3, [pc, #100]	; (800849c <prvAddNewTaskToReadyList+0xc8>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4313      	orrs	r3, r2
 800843a:	4a18      	ldr	r2, [pc, #96]	; (800849c <prvAddNewTaskToReadyList+0xc8>)
 800843c:	6013      	str	r3, [r2, #0]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008442:	4613      	mov	r3, r2
 8008444:	009b      	lsls	r3, r3, #2
 8008446:	4413      	add	r3, r2
 8008448:	009b      	lsls	r3, r3, #2
 800844a:	4a15      	ldr	r2, [pc, #84]	; (80084a0 <prvAddNewTaskToReadyList+0xcc>)
 800844c:	441a      	add	r2, r3
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	3304      	adds	r3, #4
 8008452:	4619      	mov	r1, r3
 8008454:	4610      	mov	r0, r2
 8008456:	f7ff fe0c 	bl	8008072 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800845a:	f000 fd2b 	bl	8008eb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800845e:	4b0d      	ldr	r3, [pc, #52]	; (8008494 <prvAddNewTaskToReadyList+0xc0>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d00e      	beq.n	8008484 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008466:	4b0a      	ldr	r3, [pc, #40]	; (8008490 <prvAddNewTaskToReadyList+0xbc>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008470:	429a      	cmp	r2, r3
 8008472:	d207      	bcs.n	8008484 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008474:	4b0b      	ldr	r3, [pc, #44]	; (80084a4 <prvAddNewTaskToReadyList+0xd0>)
 8008476:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800847a:	601a      	str	r2, [r3, #0]
 800847c:	f3bf 8f4f 	dsb	sy
 8008480:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008484:	bf00      	nop
 8008486:	3708      	adds	r7, #8
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}
 800848c:	2000070c 	.word	0x2000070c
 8008490:	2000060c 	.word	0x2000060c
 8008494:	20000718 	.word	0x20000718
 8008498:	20000728 	.word	0x20000728
 800849c:	20000714 	.word	0x20000714
 80084a0:	20000610 	.word	0x20000610
 80084a4:	e000ed04 	.word	0xe000ed04

080084a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b084      	sub	sp, #16
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80084b0:	2300      	movs	r3, #0
 80084b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d017      	beq.n	80084ea <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80084ba:	4b13      	ldr	r3, [pc, #76]	; (8008508 <vTaskDelay+0x60>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d00a      	beq.n	80084d8 <vTaskDelay+0x30>
	__asm volatile
 80084c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084c6:	f383 8811 	msr	BASEPRI, r3
 80084ca:	f3bf 8f6f 	isb	sy
 80084ce:	f3bf 8f4f 	dsb	sy
 80084d2:	60bb      	str	r3, [r7, #8]
}
 80084d4:	bf00      	nop
 80084d6:	e7fe      	b.n	80084d6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80084d8:	f000 f87a 	bl	80085d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80084dc:	2100      	movs	r1, #0
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f000 fb28 	bl	8008b34 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80084e4:	f000 f882 	bl	80085ec <xTaskResumeAll>
 80084e8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d107      	bne.n	8008500 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80084f0:	4b06      	ldr	r3, [pc, #24]	; (800850c <vTaskDelay+0x64>)
 80084f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084f6:	601a      	str	r2, [r3, #0]
 80084f8:	f3bf 8f4f 	dsb	sy
 80084fc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008500:	bf00      	nop
 8008502:	3710      	adds	r7, #16
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}
 8008508:	20000734 	.word	0x20000734
 800850c:	e000ed04 	.word	0xe000ed04

08008510 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b08a      	sub	sp, #40	; 0x28
 8008514:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008516:	2300      	movs	r3, #0
 8008518:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800851a:	2300      	movs	r3, #0
 800851c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800851e:	463a      	mov	r2, r7
 8008520:	1d39      	adds	r1, r7, #4
 8008522:	f107 0308 	add.w	r3, r7, #8
 8008526:	4618      	mov	r0, r3
 8008528:	f7f8 fd0c 	bl	8000f44 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800852c:	6839      	ldr	r1, [r7, #0]
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	68ba      	ldr	r2, [r7, #8]
 8008532:	9202      	str	r2, [sp, #8]
 8008534:	9301      	str	r3, [sp, #4]
 8008536:	2300      	movs	r3, #0
 8008538:	9300      	str	r3, [sp, #0]
 800853a:	2300      	movs	r3, #0
 800853c:	460a      	mov	r2, r1
 800853e:	491e      	ldr	r1, [pc, #120]	; (80085b8 <vTaskStartScheduler+0xa8>)
 8008540:	481e      	ldr	r0, [pc, #120]	; (80085bc <vTaskStartScheduler+0xac>)
 8008542:	f7ff fe1d 	bl	8008180 <xTaskCreateStatic>
 8008546:	4603      	mov	r3, r0
 8008548:	4a1d      	ldr	r2, [pc, #116]	; (80085c0 <vTaskStartScheduler+0xb0>)
 800854a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800854c:	4b1c      	ldr	r3, [pc, #112]	; (80085c0 <vTaskStartScheduler+0xb0>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d002      	beq.n	800855a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008554:	2301      	movs	r3, #1
 8008556:	617b      	str	r3, [r7, #20]
 8008558:	e001      	b.n	800855e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800855a:	2300      	movs	r3, #0
 800855c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	2b01      	cmp	r3, #1
 8008562:	d116      	bne.n	8008592 <vTaskStartScheduler+0x82>
	__asm volatile
 8008564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008568:	f383 8811 	msr	BASEPRI, r3
 800856c:	f3bf 8f6f 	isb	sy
 8008570:	f3bf 8f4f 	dsb	sy
 8008574:	613b      	str	r3, [r7, #16]
}
 8008576:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008578:	4b12      	ldr	r3, [pc, #72]	; (80085c4 <vTaskStartScheduler+0xb4>)
 800857a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800857e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008580:	4b11      	ldr	r3, [pc, #68]	; (80085c8 <vTaskStartScheduler+0xb8>)
 8008582:	2201      	movs	r2, #1
 8008584:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008586:	4b11      	ldr	r3, [pc, #68]	; (80085cc <vTaskStartScheduler+0xbc>)
 8008588:	2200      	movs	r2, #0
 800858a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800858c:	f000 fbc0 	bl	8008d10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008590:	e00e      	b.n	80085b0 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008598:	d10a      	bne.n	80085b0 <vTaskStartScheduler+0xa0>
	__asm volatile
 800859a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800859e:	f383 8811 	msr	BASEPRI, r3
 80085a2:	f3bf 8f6f 	isb	sy
 80085a6:	f3bf 8f4f 	dsb	sy
 80085aa:	60fb      	str	r3, [r7, #12]
}
 80085ac:	bf00      	nop
 80085ae:	e7fe      	b.n	80085ae <vTaskStartScheduler+0x9e>
}
 80085b0:	bf00      	nop
 80085b2:	3718      	adds	r7, #24
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}
 80085b8:	0800c1d8 	.word	0x0800c1d8
 80085bc:	0800894d 	.word	0x0800894d
 80085c0:	20000730 	.word	0x20000730
 80085c4:	2000072c 	.word	0x2000072c
 80085c8:	20000718 	.word	0x20000718
 80085cc:	20000710 	.word	0x20000710

080085d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80085d0:	b480      	push	{r7}
 80085d2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80085d4:	4b04      	ldr	r3, [pc, #16]	; (80085e8 <vTaskSuspendAll+0x18>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	3301      	adds	r3, #1
 80085da:	4a03      	ldr	r2, [pc, #12]	; (80085e8 <vTaskSuspendAll+0x18>)
 80085dc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80085de:	bf00      	nop
 80085e0:	46bd      	mov	sp, r7
 80085e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e6:	4770      	bx	lr
 80085e8:	20000734 	.word	0x20000734

080085ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b084      	sub	sp, #16
 80085f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80085f2:	2300      	movs	r3, #0
 80085f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80085f6:	2300      	movs	r3, #0
 80085f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80085fa:	4b41      	ldr	r3, [pc, #260]	; (8008700 <xTaskResumeAll+0x114>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d10a      	bne.n	8008618 <xTaskResumeAll+0x2c>
	__asm volatile
 8008602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008606:	f383 8811 	msr	BASEPRI, r3
 800860a:	f3bf 8f6f 	isb	sy
 800860e:	f3bf 8f4f 	dsb	sy
 8008612:	603b      	str	r3, [r7, #0]
}
 8008614:	bf00      	nop
 8008616:	e7fe      	b.n	8008616 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008618:	f000 fc1c 	bl	8008e54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800861c:	4b38      	ldr	r3, [pc, #224]	; (8008700 <xTaskResumeAll+0x114>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	3b01      	subs	r3, #1
 8008622:	4a37      	ldr	r2, [pc, #220]	; (8008700 <xTaskResumeAll+0x114>)
 8008624:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008626:	4b36      	ldr	r3, [pc, #216]	; (8008700 <xTaskResumeAll+0x114>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d161      	bne.n	80086f2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800862e:	4b35      	ldr	r3, [pc, #212]	; (8008704 <xTaskResumeAll+0x118>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d05d      	beq.n	80086f2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008636:	e02e      	b.n	8008696 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008638:	4b33      	ldr	r3, [pc, #204]	; (8008708 <xTaskResumeAll+0x11c>)
 800863a:	68db      	ldr	r3, [r3, #12]
 800863c:	68db      	ldr	r3, [r3, #12]
 800863e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	3318      	adds	r3, #24
 8008644:	4618      	mov	r0, r3
 8008646:	f7ff fd71 	bl	800812c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	3304      	adds	r3, #4
 800864e:	4618      	mov	r0, r3
 8008650:	f7ff fd6c 	bl	800812c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008658:	2201      	movs	r2, #1
 800865a:	409a      	lsls	r2, r3
 800865c:	4b2b      	ldr	r3, [pc, #172]	; (800870c <xTaskResumeAll+0x120>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	4313      	orrs	r3, r2
 8008662:	4a2a      	ldr	r2, [pc, #168]	; (800870c <xTaskResumeAll+0x120>)
 8008664:	6013      	str	r3, [r2, #0]
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800866a:	4613      	mov	r3, r2
 800866c:	009b      	lsls	r3, r3, #2
 800866e:	4413      	add	r3, r2
 8008670:	009b      	lsls	r3, r3, #2
 8008672:	4a27      	ldr	r2, [pc, #156]	; (8008710 <xTaskResumeAll+0x124>)
 8008674:	441a      	add	r2, r3
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	3304      	adds	r3, #4
 800867a:	4619      	mov	r1, r3
 800867c:	4610      	mov	r0, r2
 800867e:	f7ff fcf8 	bl	8008072 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008686:	4b23      	ldr	r3, [pc, #140]	; (8008714 <xTaskResumeAll+0x128>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800868c:	429a      	cmp	r2, r3
 800868e:	d302      	bcc.n	8008696 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008690:	4b21      	ldr	r3, [pc, #132]	; (8008718 <xTaskResumeAll+0x12c>)
 8008692:	2201      	movs	r2, #1
 8008694:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008696:	4b1c      	ldr	r3, [pc, #112]	; (8008708 <xTaskResumeAll+0x11c>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d1cc      	bne.n	8008638 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d001      	beq.n	80086a8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80086a4:	f000 fa08 	bl	8008ab8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80086a8:	4b1c      	ldr	r3, [pc, #112]	; (800871c <xTaskResumeAll+0x130>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d010      	beq.n	80086d6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80086b4:	f000 f836 	bl	8008724 <xTaskIncrementTick>
 80086b8:	4603      	mov	r3, r0
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d002      	beq.n	80086c4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80086be:	4b16      	ldr	r3, [pc, #88]	; (8008718 <xTaskResumeAll+0x12c>)
 80086c0:	2201      	movs	r2, #1
 80086c2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	3b01      	subs	r3, #1
 80086c8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d1f1      	bne.n	80086b4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80086d0:	4b12      	ldr	r3, [pc, #72]	; (800871c <xTaskResumeAll+0x130>)
 80086d2:	2200      	movs	r2, #0
 80086d4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80086d6:	4b10      	ldr	r3, [pc, #64]	; (8008718 <xTaskResumeAll+0x12c>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d009      	beq.n	80086f2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80086de:	2301      	movs	r3, #1
 80086e0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80086e2:	4b0f      	ldr	r3, [pc, #60]	; (8008720 <xTaskResumeAll+0x134>)
 80086e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086e8:	601a      	str	r2, [r3, #0]
 80086ea:	f3bf 8f4f 	dsb	sy
 80086ee:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80086f2:	f000 fbdf 	bl	8008eb4 <vPortExitCritical>

	return xAlreadyYielded;
 80086f6:	68bb      	ldr	r3, [r7, #8]
}
 80086f8:	4618      	mov	r0, r3
 80086fa:	3710      	adds	r7, #16
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}
 8008700:	20000734 	.word	0x20000734
 8008704:	2000070c 	.word	0x2000070c
 8008708:	200006cc 	.word	0x200006cc
 800870c:	20000714 	.word	0x20000714
 8008710:	20000610 	.word	0x20000610
 8008714:	2000060c 	.word	0x2000060c
 8008718:	20000720 	.word	0x20000720
 800871c:	2000071c 	.word	0x2000071c
 8008720:	e000ed04 	.word	0xe000ed04

08008724 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b086      	sub	sp, #24
 8008728:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800872a:	2300      	movs	r3, #0
 800872c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800872e:	4b4e      	ldr	r3, [pc, #312]	; (8008868 <xTaskIncrementTick+0x144>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	2b00      	cmp	r3, #0
 8008734:	f040 808e 	bne.w	8008854 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008738:	4b4c      	ldr	r3, [pc, #304]	; (800886c <xTaskIncrementTick+0x148>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	3301      	adds	r3, #1
 800873e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008740:	4a4a      	ldr	r2, [pc, #296]	; (800886c <xTaskIncrementTick+0x148>)
 8008742:	693b      	ldr	r3, [r7, #16]
 8008744:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d120      	bne.n	800878e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800874c:	4b48      	ldr	r3, [pc, #288]	; (8008870 <xTaskIncrementTick+0x14c>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d00a      	beq.n	800876c <xTaskIncrementTick+0x48>
	__asm volatile
 8008756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800875a:	f383 8811 	msr	BASEPRI, r3
 800875e:	f3bf 8f6f 	isb	sy
 8008762:	f3bf 8f4f 	dsb	sy
 8008766:	603b      	str	r3, [r7, #0]
}
 8008768:	bf00      	nop
 800876a:	e7fe      	b.n	800876a <xTaskIncrementTick+0x46>
 800876c:	4b40      	ldr	r3, [pc, #256]	; (8008870 <xTaskIncrementTick+0x14c>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	60fb      	str	r3, [r7, #12]
 8008772:	4b40      	ldr	r3, [pc, #256]	; (8008874 <xTaskIncrementTick+0x150>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4a3e      	ldr	r2, [pc, #248]	; (8008870 <xTaskIncrementTick+0x14c>)
 8008778:	6013      	str	r3, [r2, #0]
 800877a:	4a3e      	ldr	r2, [pc, #248]	; (8008874 <xTaskIncrementTick+0x150>)
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	6013      	str	r3, [r2, #0]
 8008780:	4b3d      	ldr	r3, [pc, #244]	; (8008878 <xTaskIncrementTick+0x154>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	3301      	adds	r3, #1
 8008786:	4a3c      	ldr	r2, [pc, #240]	; (8008878 <xTaskIncrementTick+0x154>)
 8008788:	6013      	str	r3, [r2, #0]
 800878a:	f000 f995 	bl	8008ab8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800878e:	4b3b      	ldr	r3, [pc, #236]	; (800887c <xTaskIncrementTick+0x158>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	693a      	ldr	r2, [r7, #16]
 8008794:	429a      	cmp	r2, r3
 8008796:	d348      	bcc.n	800882a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008798:	4b35      	ldr	r3, [pc, #212]	; (8008870 <xTaskIncrementTick+0x14c>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d104      	bne.n	80087ac <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087a2:	4b36      	ldr	r3, [pc, #216]	; (800887c <xTaskIncrementTick+0x158>)
 80087a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80087a8:	601a      	str	r2, [r3, #0]
					break;
 80087aa:	e03e      	b.n	800882a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087ac:	4b30      	ldr	r3, [pc, #192]	; (8008870 <xTaskIncrementTick+0x14c>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	68db      	ldr	r3, [r3, #12]
 80087b2:	68db      	ldr	r3, [r3, #12]
 80087b4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	685b      	ldr	r3, [r3, #4]
 80087ba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80087bc:	693a      	ldr	r2, [r7, #16]
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	429a      	cmp	r2, r3
 80087c2:	d203      	bcs.n	80087cc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80087c4:	4a2d      	ldr	r2, [pc, #180]	; (800887c <xTaskIncrementTick+0x158>)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80087ca:	e02e      	b.n	800882a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	3304      	adds	r3, #4
 80087d0:	4618      	mov	r0, r3
 80087d2:	f7ff fcab 	bl	800812c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d004      	beq.n	80087e8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	3318      	adds	r3, #24
 80087e2:	4618      	mov	r0, r3
 80087e4:	f7ff fca2 	bl	800812c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ec:	2201      	movs	r2, #1
 80087ee:	409a      	lsls	r2, r3
 80087f0:	4b23      	ldr	r3, [pc, #140]	; (8008880 <xTaskIncrementTick+0x15c>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4313      	orrs	r3, r2
 80087f6:	4a22      	ldr	r2, [pc, #136]	; (8008880 <xTaskIncrementTick+0x15c>)
 80087f8:	6013      	str	r3, [r2, #0]
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087fe:	4613      	mov	r3, r2
 8008800:	009b      	lsls	r3, r3, #2
 8008802:	4413      	add	r3, r2
 8008804:	009b      	lsls	r3, r3, #2
 8008806:	4a1f      	ldr	r2, [pc, #124]	; (8008884 <xTaskIncrementTick+0x160>)
 8008808:	441a      	add	r2, r3
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	3304      	adds	r3, #4
 800880e:	4619      	mov	r1, r3
 8008810:	4610      	mov	r0, r2
 8008812:	f7ff fc2e 	bl	8008072 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800881a:	4b1b      	ldr	r3, [pc, #108]	; (8008888 <xTaskIncrementTick+0x164>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008820:	429a      	cmp	r2, r3
 8008822:	d3b9      	bcc.n	8008798 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008824:	2301      	movs	r3, #1
 8008826:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008828:	e7b6      	b.n	8008798 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800882a:	4b17      	ldr	r3, [pc, #92]	; (8008888 <xTaskIncrementTick+0x164>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008830:	4914      	ldr	r1, [pc, #80]	; (8008884 <xTaskIncrementTick+0x160>)
 8008832:	4613      	mov	r3, r2
 8008834:	009b      	lsls	r3, r3, #2
 8008836:	4413      	add	r3, r2
 8008838:	009b      	lsls	r3, r3, #2
 800883a:	440b      	add	r3, r1
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	2b01      	cmp	r3, #1
 8008840:	d901      	bls.n	8008846 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8008842:	2301      	movs	r3, #1
 8008844:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008846:	4b11      	ldr	r3, [pc, #68]	; (800888c <xTaskIncrementTick+0x168>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d007      	beq.n	800885e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800884e:	2301      	movs	r3, #1
 8008850:	617b      	str	r3, [r7, #20]
 8008852:	e004      	b.n	800885e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008854:	4b0e      	ldr	r3, [pc, #56]	; (8008890 <xTaskIncrementTick+0x16c>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	3301      	adds	r3, #1
 800885a:	4a0d      	ldr	r2, [pc, #52]	; (8008890 <xTaskIncrementTick+0x16c>)
 800885c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800885e:	697b      	ldr	r3, [r7, #20]
}
 8008860:	4618      	mov	r0, r3
 8008862:	3718      	adds	r7, #24
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}
 8008868:	20000734 	.word	0x20000734
 800886c:	20000710 	.word	0x20000710
 8008870:	200006c4 	.word	0x200006c4
 8008874:	200006c8 	.word	0x200006c8
 8008878:	20000724 	.word	0x20000724
 800887c:	2000072c 	.word	0x2000072c
 8008880:	20000714 	.word	0x20000714
 8008884:	20000610 	.word	0x20000610
 8008888:	2000060c 	.word	0x2000060c
 800888c:	20000720 	.word	0x20000720
 8008890:	2000071c 	.word	0x2000071c

08008894 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008894:	b480      	push	{r7}
 8008896:	b087      	sub	sp, #28
 8008898:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800889a:	4b27      	ldr	r3, [pc, #156]	; (8008938 <vTaskSwitchContext+0xa4>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d003      	beq.n	80088aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80088a2:	4b26      	ldr	r3, [pc, #152]	; (800893c <vTaskSwitchContext+0xa8>)
 80088a4:	2201      	movs	r2, #1
 80088a6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80088a8:	e03f      	b.n	800892a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80088aa:	4b24      	ldr	r3, [pc, #144]	; (800893c <vTaskSwitchContext+0xa8>)
 80088ac:	2200      	movs	r2, #0
 80088ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088b0:	4b23      	ldr	r3, [pc, #140]	; (8008940 <vTaskSwitchContext+0xac>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	fab3 f383 	clz	r3, r3
 80088bc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80088be:	7afb      	ldrb	r3, [r7, #11]
 80088c0:	f1c3 031f 	rsb	r3, r3, #31
 80088c4:	617b      	str	r3, [r7, #20]
 80088c6:	491f      	ldr	r1, [pc, #124]	; (8008944 <vTaskSwitchContext+0xb0>)
 80088c8:	697a      	ldr	r2, [r7, #20]
 80088ca:	4613      	mov	r3, r2
 80088cc:	009b      	lsls	r3, r3, #2
 80088ce:	4413      	add	r3, r2
 80088d0:	009b      	lsls	r3, r3, #2
 80088d2:	440b      	add	r3, r1
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d10a      	bne.n	80088f0 <vTaskSwitchContext+0x5c>
	__asm volatile
 80088da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088de:	f383 8811 	msr	BASEPRI, r3
 80088e2:	f3bf 8f6f 	isb	sy
 80088e6:	f3bf 8f4f 	dsb	sy
 80088ea:	607b      	str	r3, [r7, #4]
}
 80088ec:	bf00      	nop
 80088ee:	e7fe      	b.n	80088ee <vTaskSwitchContext+0x5a>
 80088f0:	697a      	ldr	r2, [r7, #20]
 80088f2:	4613      	mov	r3, r2
 80088f4:	009b      	lsls	r3, r3, #2
 80088f6:	4413      	add	r3, r2
 80088f8:	009b      	lsls	r3, r3, #2
 80088fa:	4a12      	ldr	r2, [pc, #72]	; (8008944 <vTaskSwitchContext+0xb0>)
 80088fc:	4413      	add	r3, r2
 80088fe:	613b      	str	r3, [r7, #16]
 8008900:	693b      	ldr	r3, [r7, #16]
 8008902:	685b      	ldr	r3, [r3, #4]
 8008904:	685a      	ldr	r2, [r3, #4]
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	605a      	str	r2, [r3, #4]
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	685a      	ldr	r2, [r3, #4]
 800890e:	693b      	ldr	r3, [r7, #16]
 8008910:	3308      	adds	r3, #8
 8008912:	429a      	cmp	r2, r3
 8008914:	d104      	bne.n	8008920 <vTaskSwitchContext+0x8c>
 8008916:	693b      	ldr	r3, [r7, #16]
 8008918:	685b      	ldr	r3, [r3, #4]
 800891a:	685a      	ldr	r2, [r3, #4]
 800891c:	693b      	ldr	r3, [r7, #16]
 800891e:	605a      	str	r2, [r3, #4]
 8008920:	693b      	ldr	r3, [r7, #16]
 8008922:	685b      	ldr	r3, [r3, #4]
 8008924:	68db      	ldr	r3, [r3, #12]
 8008926:	4a08      	ldr	r2, [pc, #32]	; (8008948 <vTaskSwitchContext+0xb4>)
 8008928:	6013      	str	r3, [r2, #0]
}
 800892a:	bf00      	nop
 800892c:	371c      	adds	r7, #28
 800892e:	46bd      	mov	sp, r7
 8008930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008934:	4770      	bx	lr
 8008936:	bf00      	nop
 8008938:	20000734 	.word	0x20000734
 800893c:	20000720 	.word	0x20000720
 8008940:	20000714 	.word	0x20000714
 8008944:	20000610 	.word	0x20000610
 8008948:	2000060c 	.word	0x2000060c

0800894c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b082      	sub	sp, #8
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008954:	f000 f852 	bl	80089fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008958:	4b06      	ldr	r3, [pc, #24]	; (8008974 <prvIdleTask+0x28>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	2b01      	cmp	r3, #1
 800895e:	d9f9      	bls.n	8008954 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008960:	4b05      	ldr	r3, [pc, #20]	; (8008978 <prvIdleTask+0x2c>)
 8008962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008966:	601a      	str	r2, [r3, #0]
 8008968:	f3bf 8f4f 	dsb	sy
 800896c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008970:	e7f0      	b.n	8008954 <prvIdleTask+0x8>
 8008972:	bf00      	nop
 8008974:	20000610 	.word	0x20000610
 8008978:	e000ed04 	.word	0xe000ed04

0800897c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b082      	sub	sp, #8
 8008980:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008982:	2300      	movs	r3, #0
 8008984:	607b      	str	r3, [r7, #4]
 8008986:	e00c      	b.n	80089a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008988:	687a      	ldr	r2, [r7, #4]
 800898a:	4613      	mov	r3, r2
 800898c:	009b      	lsls	r3, r3, #2
 800898e:	4413      	add	r3, r2
 8008990:	009b      	lsls	r3, r3, #2
 8008992:	4a12      	ldr	r2, [pc, #72]	; (80089dc <prvInitialiseTaskLists+0x60>)
 8008994:	4413      	add	r3, r2
 8008996:	4618      	mov	r0, r3
 8008998:	f7ff fb3e 	bl	8008018 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	3301      	adds	r3, #1
 80089a0:	607b      	str	r3, [r7, #4]
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2b06      	cmp	r3, #6
 80089a6:	d9ef      	bls.n	8008988 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80089a8:	480d      	ldr	r0, [pc, #52]	; (80089e0 <prvInitialiseTaskLists+0x64>)
 80089aa:	f7ff fb35 	bl	8008018 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80089ae:	480d      	ldr	r0, [pc, #52]	; (80089e4 <prvInitialiseTaskLists+0x68>)
 80089b0:	f7ff fb32 	bl	8008018 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80089b4:	480c      	ldr	r0, [pc, #48]	; (80089e8 <prvInitialiseTaskLists+0x6c>)
 80089b6:	f7ff fb2f 	bl	8008018 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80089ba:	480c      	ldr	r0, [pc, #48]	; (80089ec <prvInitialiseTaskLists+0x70>)
 80089bc:	f7ff fb2c 	bl	8008018 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80089c0:	480b      	ldr	r0, [pc, #44]	; (80089f0 <prvInitialiseTaskLists+0x74>)
 80089c2:	f7ff fb29 	bl	8008018 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80089c6:	4b0b      	ldr	r3, [pc, #44]	; (80089f4 <prvInitialiseTaskLists+0x78>)
 80089c8:	4a05      	ldr	r2, [pc, #20]	; (80089e0 <prvInitialiseTaskLists+0x64>)
 80089ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80089cc:	4b0a      	ldr	r3, [pc, #40]	; (80089f8 <prvInitialiseTaskLists+0x7c>)
 80089ce:	4a05      	ldr	r2, [pc, #20]	; (80089e4 <prvInitialiseTaskLists+0x68>)
 80089d0:	601a      	str	r2, [r3, #0]
}
 80089d2:	bf00      	nop
 80089d4:	3708      	adds	r7, #8
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}
 80089da:	bf00      	nop
 80089dc:	20000610 	.word	0x20000610
 80089e0:	2000069c 	.word	0x2000069c
 80089e4:	200006b0 	.word	0x200006b0
 80089e8:	200006cc 	.word	0x200006cc
 80089ec:	200006e0 	.word	0x200006e0
 80089f0:	200006f8 	.word	0x200006f8
 80089f4:	200006c4 	.word	0x200006c4
 80089f8:	200006c8 	.word	0x200006c8

080089fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b082      	sub	sp, #8
 8008a00:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008a02:	e019      	b.n	8008a38 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008a04:	f000 fa26 	bl	8008e54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a08:	4b10      	ldr	r3, [pc, #64]	; (8008a4c <prvCheckTasksWaitingTermination+0x50>)
 8008a0a:	68db      	ldr	r3, [r3, #12]
 8008a0c:	68db      	ldr	r3, [r3, #12]
 8008a0e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	3304      	adds	r3, #4
 8008a14:	4618      	mov	r0, r3
 8008a16:	f7ff fb89 	bl	800812c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008a1a:	4b0d      	ldr	r3, [pc, #52]	; (8008a50 <prvCheckTasksWaitingTermination+0x54>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	3b01      	subs	r3, #1
 8008a20:	4a0b      	ldr	r2, [pc, #44]	; (8008a50 <prvCheckTasksWaitingTermination+0x54>)
 8008a22:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008a24:	4b0b      	ldr	r3, [pc, #44]	; (8008a54 <prvCheckTasksWaitingTermination+0x58>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	3b01      	subs	r3, #1
 8008a2a:	4a0a      	ldr	r2, [pc, #40]	; (8008a54 <prvCheckTasksWaitingTermination+0x58>)
 8008a2c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008a2e:	f000 fa41 	bl	8008eb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f000 f810 	bl	8008a58 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008a38:	4b06      	ldr	r3, [pc, #24]	; (8008a54 <prvCheckTasksWaitingTermination+0x58>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d1e1      	bne.n	8008a04 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008a40:	bf00      	nop
 8008a42:	bf00      	nop
 8008a44:	3708      	adds	r7, #8
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}
 8008a4a:	bf00      	nop
 8008a4c:	200006e0 	.word	0x200006e0
 8008a50:	2000070c 	.word	0x2000070c
 8008a54:	200006f4 	.word	0x200006f4

08008a58 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b084      	sub	sp, #16
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d108      	bne.n	8008a7c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f000 fb9e 	bl	80091b0 <vPortFree>
				vPortFree( pxTCB );
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f000 fb9b 	bl	80091b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008a7a:	e018      	b.n	8008aae <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008a82:	2b01      	cmp	r3, #1
 8008a84:	d103      	bne.n	8008a8e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f000 fb92 	bl	80091b0 <vPortFree>
	}
 8008a8c:	e00f      	b.n	8008aae <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008a94:	2b02      	cmp	r3, #2
 8008a96:	d00a      	beq.n	8008aae <prvDeleteTCB+0x56>
	__asm volatile
 8008a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a9c:	f383 8811 	msr	BASEPRI, r3
 8008aa0:	f3bf 8f6f 	isb	sy
 8008aa4:	f3bf 8f4f 	dsb	sy
 8008aa8:	60fb      	str	r3, [r7, #12]
}
 8008aaa:	bf00      	nop
 8008aac:	e7fe      	b.n	8008aac <prvDeleteTCB+0x54>
	}
 8008aae:	bf00      	nop
 8008ab0:	3710      	adds	r7, #16
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}
	...

08008ab8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b083      	sub	sp, #12
 8008abc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008abe:	4b0c      	ldr	r3, [pc, #48]	; (8008af0 <prvResetNextTaskUnblockTime+0x38>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d104      	bne.n	8008ad2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008ac8:	4b0a      	ldr	r3, [pc, #40]	; (8008af4 <prvResetNextTaskUnblockTime+0x3c>)
 8008aca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008ace:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008ad0:	e008      	b.n	8008ae4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ad2:	4b07      	ldr	r3, [pc, #28]	; (8008af0 <prvResetNextTaskUnblockTime+0x38>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	68db      	ldr	r3, [r3, #12]
 8008ad8:	68db      	ldr	r3, [r3, #12]
 8008ada:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	685b      	ldr	r3, [r3, #4]
 8008ae0:	4a04      	ldr	r2, [pc, #16]	; (8008af4 <prvResetNextTaskUnblockTime+0x3c>)
 8008ae2:	6013      	str	r3, [r2, #0]
}
 8008ae4:	bf00      	nop
 8008ae6:	370c      	adds	r7, #12
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aee:	4770      	bx	lr
 8008af0:	200006c4 	.word	0x200006c4
 8008af4:	2000072c 	.word	0x2000072c

08008af8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008af8:	b480      	push	{r7}
 8008afa:	b083      	sub	sp, #12
 8008afc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008afe:	4b0b      	ldr	r3, [pc, #44]	; (8008b2c <xTaskGetSchedulerState+0x34>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d102      	bne.n	8008b0c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008b06:	2301      	movs	r3, #1
 8008b08:	607b      	str	r3, [r7, #4]
 8008b0a:	e008      	b.n	8008b1e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b0c:	4b08      	ldr	r3, [pc, #32]	; (8008b30 <xTaskGetSchedulerState+0x38>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d102      	bne.n	8008b1a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008b14:	2302      	movs	r3, #2
 8008b16:	607b      	str	r3, [r7, #4]
 8008b18:	e001      	b.n	8008b1e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008b1e:	687b      	ldr	r3, [r7, #4]
	}
 8008b20:	4618      	mov	r0, r3
 8008b22:	370c      	adds	r7, #12
 8008b24:	46bd      	mov	sp, r7
 8008b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2a:	4770      	bx	lr
 8008b2c:	20000718 	.word	0x20000718
 8008b30:	20000734 	.word	0x20000734

08008b34 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b084      	sub	sp, #16
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008b3e:	4b29      	ldr	r3, [pc, #164]	; (8008be4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b44:	4b28      	ldr	r3, [pc, #160]	; (8008be8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	3304      	adds	r3, #4
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f7ff faee 	bl	800812c <uxListRemove>
 8008b50:	4603      	mov	r3, r0
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d10b      	bne.n	8008b6e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008b56:	4b24      	ldr	r3, [pc, #144]	; (8008be8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b5c:	2201      	movs	r2, #1
 8008b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8008b62:	43da      	mvns	r2, r3
 8008b64:	4b21      	ldr	r3, [pc, #132]	; (8008bec <prvAddCurrentTaskToDelayedList+0xb8>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	4013      	ands	r3, r2
 8008b6a:	4a20      	ldr	r2, [pc, #128]	; (8008bec <prvAddCurrentTaskToDelayedList+0xb8>)
 8008b6c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b74:	d10a      	bne.n	8008b8c <prvAddCurrentTaskToDelayedList+0x58>
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d007      	beq.n	8008b8c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b7c:	4b1a      	ldr	r3, [pc, #104]	; (8008be8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	3304      	adds	r3, #4
 8008b82:	4619      	mov	r1, r3
 8008b84:	481a      	ldr	r0, [pc, #104]	; (8008bf0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008b86:	f7ff fa74 	bl	8008072 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008b8a:	e026      	b.n	8008bda <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008b8c:	68fa      	ldr	r2, [r7, #12]
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	4413      	add	r3, r2
 8008b92:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008b94:	4b14      	ldr	r3, [pc, #80]	; (8008be8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	68ba      	ldr	r2, [r7, #8]
 8008b9a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008b9c:	68ba      	ldr	r2, [r7, #8]
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	429a      	cmp	r2, r3
 8008ba2:	d209      	bcs.n	8008bb8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ba4:	4b13      	ldr	r3, [pc, #76]	; (8008bf4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008ba6:	681a      	ldr	r2, [r3, #0]
 8008ba8:	4b0f      	ldr	r3, [pc, #60]	; (8008be8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	3304      	adds	r3, #4
 8008bae:	4619      	mov	r1, r3
 8008bb0:	4610      	mov	r0, r2
 8008bb2:	f7ff fa82 	bl	80080ba <vListInsert>
}
 8008bb6:	e010      	b.n	8008bda <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008bb8:	4b0f      	ldr	r3, [pc, #60]	; (8008bf8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008bba:	681a      	ldr	r2, [r3, #0]
 8008bbc:	4b0a      	ldr	r3, [pc, #40]	; (8008be8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	3304      	adds	r3, #4
 8008bc2:	4619      	mov	r1, r3
 8008bc4:	4610      	mov	r0, r2
 8008bc6:	f7ff fa78 	bl	80080ba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008bca:	4b0c      	ldr	r3, [pc, #48]	; (8008bfc <prvAddCurrentTaskToDelayedList+0xc8>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	68ba      	ldr	r2, [r7, #8]
 8008bd0:	429a      	cmp	r2, r3
 8008bd2:	d202      	bcs.n	8008bda <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008bd4:	4a09      	ldr	r2, [pc, #36]	; (8008bfc <prvAddCurrentTaskToDelayedList+0xc8>)
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	6013      	str	r3, [r2, #0]
}
 8008bda:	bf00      	nop
 8008bdc:	3710      	adds	r7, #16
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
 8008be2:	bf00      	nop
 8008be4:	20000710 	.word	0x20000710
 8008be8:	2000060c 	.word	0x2000060c
 8008bec:	20000714 	.word	0x20000714
 8008bf0:	200006f8 	.word	0x200006f8
 8008bf4:	200006c8 	.word	0x200006c8
 8008bf8:	200006c4 	.word	0x200006c4
 8008bfc:	2000072c 	.word	0x2000072c

08008c00 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008c00:	b480      	push	{r7}
 8008c02:	b085      	sub	sp, #20
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	60f8      	str	r0, [r7, #12]
 8008c08:	60b9      	str	r1, [r7, #8]
 8008c0a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	3b04      	subs	r3, #4
 8008c10:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008c18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	3b04      	subs	r3, #4
 8008c1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	f023 0201 	bic.w	r2, r3, #1
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	3b04      	subs	r3, #4
 8008c2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008c30:	4a0c      	ldr	r2, [pc, #48]	; (8008c64 <pxPortInitialiseStack+0x64>)
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	3b14      	subs	r3, #20
 8008c3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008c3c:	687a      	ldr	r2, [r7, #4]
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	3b04      	subs	r3, #4
 8008c46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	f06f 0202 	mvn.w	r2, #2
 8008c4e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	3b20      	subs	r3, #32
 8008c54:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008c56:	68fb      	ldr	r3, [r7, #12]
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	3714      	adds	r7, #20
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c62:	4770      	bx	lr
 8008c64:	08008c69 	.word	0x08008c69

08008c68 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b085      	sub	sp, #20
 8008c6c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008c72:	4b12      	ldr	r3, [pc, #72]	; (8008cbc <prvTaskExitError+0x54>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c7a:	d00a      	beq.n	8008c92 <prvTaskExitError+0x2a>
	__asm volatile
 8008c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c80:	f383 8811 	msr	BASEPRI, r3
 8008c84:	f3bf 8f6f 	isb	sy
 8008c88:	f3bf 8f4f 	dsb	sy
 8008c8c:	60fb      	str	r3, [r7, #12]
}
 8008c8e:	bf00      	nop
 8008c90:	e7fe      	b.n	8008c90 <prvTaskExitError+0x28>
	__asm volatile
 8008c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c96:	f383 8811 	msr	BASEPRI, r3
 8008c9a:	f3bf 8f6f 	isb	sy
 8008c9e:	f3bf 8f4f 	dsb	sy
 8008ca2:	60bb      	str	r3, [r7, #8]
}
 8008ca4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008ca6:	bf00      	nop
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d0fc      	beq.n	8008ca8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008cae:	bf00      	nop
 8008cb0:	bf00      	nop
 8008cb2:	3714      	adds	r7, #20
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cba:	4770      	bx	lr
 8008cbc:	2000000c 	.word	0x2000000c

08008cc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008cc0:	4b07      	ldr	r3, [pc, #28]	; (8008ce0 <pxCurrentTCBConst2>)
 8008cc2:	6819      	ldr	r1, [r3, #0]
 8008cc4:	6808      	ldr	r0, [r1, #0]
 8008cc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cca:	f380 8809 	msr	PSP, r0
 8008cce:	f3bf 8f6f 	isb	sy
 8008cd2:	f04f 0000 	mov.w	r0, #0
 8008cd6:	f380 8811 	msr	BASEPRI, r0
 8008cda:	4770      	bx	lr
 8008cdc:	f3af 8000 	nop.w

08008ce0 <pxCurrentTCBConst2>:
 8008ce0:	2000060c 	.word	0x2000060c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008ce4:	bf00      	nop
 8008ce6:	bf00      	nop

08008ce8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008ce8:	4808      	ldr	r0, [pc, #32]	; (8008d0c <prvPortStartFirstTask+0x24>)
 8008cea:	6800      	ldr	r0, [r0, #0]
 8008cec:	6800      	ldr	r0, [r0, #0]
 8008cee:	f380 8808 	msr	MSP, r0
 8008cf2:	f04f 0000 	mov.w	r0, #0
 8008cf6:	f380 8814 	msr	CONTROL, r0
 8008cfa:	b662      	cpsie	i
 8008cfc:	b661      	cpsie	f
 8008cfe:	f3bf 8f4f 	dsb	sy
 8008d02:	f3bf 8f6f 	isb	sy
 8008d06:	df00      	svc	0
 8008d08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008d0a:	bf00      	nop
 8008d0c:	e000ed08 	.word	0xe000ed08

08008d10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b086      	sub	sp, #24
 8008d14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008d16:	4b46      	ldr	r3, [pc, #280]	; (8008e30 <xPortStartScheduler+0x120>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	4a46      	ldr	r2, [pc, #280]	; (8008e34 <xPortStartScheduler+0x124>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d10a      	bne.n	8008d36 <xPortStartScheduler+0x26>
	__asm volatile
 8008d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d24:	f383 8811 	msr	BASEPRI, r3
 8008d28:	f3bf 8f6f 	isb	sy
 8008d2c:	f3bf 8f4f 	dsb	sy
 8008d30:	613b      	str	r3, [r7, #16]
}
 8008d32:	bf00      	nop
 8008d34:	e7fe      	b.n	8008d34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008d36:	4b3e      	ldr	r3, [pc, #248]	; (8008e30 <xPortStartScheduler+0x120>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	4a3f      	ldr	r2, [pc, #252]	; (8008e38 <xPortStartScheduler+0x128>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d10a      	bne.n	8008d56 <xPortStartScheduler+0x46>
	__asm volatile
 8008d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d44:	f383 8811 	msr	BASEPRI, r3
 8008d48:	f3bf 8f6f 	isb	sy
 8008d4c:	f3bf 8f4f 	dsb	sy
 8008d50:	60fb      	str	r3, [r7, #12]
}
 8008d52:	bf00      	nop
 8008d54:	e7fe      	b.n	8008d54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008d56:	4b39      	ldr	r3, [pc, #228]	; (8008e3c <xPortStartScheduler+0x12c>)
 8008d58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	781b      	ldrb	r3, [r3, #0]
 8008d5e:	b2db      	uxtb	r3, r3
 8008d60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	22ff      	movs	r2, #255	; 0xff
 8008d66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008d68:	697b      	ldr	r3, [r7, #20]
 8008d6a:	781b      	ldrb	r3, [r3, #0]
 8008d6c:	b2db      	uxtb	r3, r3
 8008d6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008d70:	78fb      	ldrb	r3, [r7, #3]
 8008d72:	b2db      	uxtb	r3, r3
 8008d74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008d78:	b2da      	uxtb	r2, r3
 8008d7a:	4b31      	ldr	r3, [pc, #196]	; (8008e40 <xPortStartScheduler+0x130>)
 8008d7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008d7e:	4b31      	ldr	r3, [pc, #196]	; (8008e44 <xPortStartScheduler+0x134>)
 8008d80:	2207      	movs	r2, #7
 8008d82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008d84:	e009      	b.n	8008d9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008d86:	4b2f      	ldr	r3, [pc, #188]	; (8008e44 <xPortStartScheduler+0x134>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	3b01      	subs	r3, #1
 8008d8c:	4a2d      	ldr	r2, [pc, #180]	; (8008e44 <xPortStartScheduler+0x134>)
 8008d8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008d90:	78fb      	ldrb	r3, [r7, #3]
 8008d92:	b2db      	uxtb	r3, r3
 8008d94:	005b      	lsls	r3, r3, #1
 8008d96:	b2db      	uxtb	r3, r3
 8008d98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008d9a:	78fb      	ldrb	r3, [r7, #3]
 8008d9c:	b2db      	uxtb	r3, r3
 8008d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008da2:	2b80      	cmp	r3, #128	; 0x80
 8008da4:	d0ef      	beq.n	8008d86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008da6:	4b27      	ldr	r3, [pc, #156]	; (8008e44 <xPortStartScheduler+0x134>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f1c3 0307 	rsb	r3, r3, #7
 8008dae:	2b04      	cmp	r3, #4
 8008db0:	d00a      	beq.n	8008dc8 <xPortStartScheduler+0xb8>
	__asm volatile
 8008db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db6:	f383 8811 	msr	BASEPRI, r3
 8008dba:	f3bf 8f6f 	isb	sy
 8008dbe:	f3bf 8f4f 	dsb	sy
 8008dc2:	60bb      	str	r3, [r7, #8]
}
 8008dc4:	bf00      	nop
 8008dc6:	e7fe      	b.n	8008dc6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008dc8:	4b1e      	ldr	r3, [pc, #120]	; (8008e44 <xPortStartScheduler+0x134>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	021b      	lsls	r3, r3, #8
 8008dce:	4a1d      	ldr	r2, [pc, #116]	; (8008e44 <xPortStartScheduler+0x134>)
 8008dd0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008dd2:	4b1c      	ldr	r3, [pc, #112]	; (8008e44 <xPortStartScheduler+0x134>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008dda:	4a1a      	ldr	r2, [pc, #104]	; (8008e44 <xPortStartScheduler+0x134>)
 8008ddc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	b2da      	uxtb	r2, r3
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008de6:	4b18      	ldr	r3, [pc, #96]	; (8008e48 <xPortStartScheduler+0x138>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	4a17      	ldr	r2, [pc, #92]	; (8008e48 <xPortStartScheduler+0x138>)
 8008dec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008df0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008df2:	4b15      	ldr	r3, [pc, #84]	; (8008e48 <xPortStartScheduler+0x138>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	4a14      	ldr	r2, [pc, #80]	; (8008e48 <xPortStartScheduler+0x138>)
 8008df8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008dfc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008dfe:	f000 f8dd 	bl	8008fbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008e02:	4b12      	ldr	r3, [pc, #72]	; (8008e4c <xPortStartScheduler+0x13c>)
 8008e04:	2200      	movs	r2, #0
 8008e06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008e08:	f000 f8fc 	bl	8009004 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008e0c:	4b10      	ldr	r3, [pc, #64]	; (8008e50 <xPortStartScheduler+0x140>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	4a0f      	ldr	r2, [pc, #60]	; (8008e50 <xPortStartScheduler+0x140>)
 8008e12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008e16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008e18:	f7ff ff66 	bl	8008ce8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008e1c:	f7ff fd3a 	bl	8008894 <vTaskSwitchContext>
	prvTaskExitError();
 8008e20:	f7ff ff22 	bl	8008c68 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008e24:	2300      	movs	r3, #0
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	3718      	adds	r7, #24
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}
 8008e2e:	bf00      	nop
 8008e30:	e000ed00 	.word	0xe000ed00
 8008e34:	410fc271 	.word	0x410fc271
 8008e38:	410fc270 	.word	0x410fc270
 8008e3c:	e000e400 	.word	0xe000e400
 8008e40:	20000738 	.word	0x20000738
 8008e44:	2000073c 	.word	0x2000073c
 8008e48:	e000ed20 	.word	0xe000ed20
 8008e4c:	2000000c 	.word	0x2000000c
 8008e50:	e000ef34 	.word	0xe000ef34

08008e54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008e54:	b480      	push	{r7}
 8008e56:	b083      	sub	sp, #12
 8008e58:	af00      	add	r7, sp, #0
	__asm volatile
 8008e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e5e:	f383 8811 	msr	BASEPRI, r3
 8008e62:	f3bf 8f6f 	isb	sy
 8008e66:	f3bf 8f4f 	dsb	sy
 8008e6a:	607b      	str	r3, [r7, #4]
}
 8008e6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008e6e:	4b0f      	ldr	r3, [pc, #60]	; (8008eac <vPortEnterCritical+0x58>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	3301      	adds	r3, #1
 8008e74:	4a0d      	ldr	r2, [pc, #52]	; (8008eac <vPortEnterCritical+0x58>)
 8008e76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008e78:	4b0c      	ldr	r3, [pc, #48]	; (8008eac <vPortEnterCritical+0x58>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	2b01      	cmp	r3, #1
 8008e7e:	d10f      	bne.n	8008ea0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008e80:	4b0b      	ldr	r3, [pc, #44]	; (8008eb0 <vPortEnterCritical+0x5c>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	b2db      	uxtb	r3, r3
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d00a      	beq.n	8008ea0 <vPortEnterCritical+0x4c>
	__asm volatile
 8008e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e8e:	f383 8811 	msr	BASEPRI, r3
 8008e92:	f3bf 8f6f 	isb	sy
 8008e96:	f3bf 8f4f 	dsb	sy
 8008e9a:	603b      	str	r3, [r7, #0]
}
 8008e9c:	bf00      	nop
 8008e9e:	e7fe      	b.n	8008e9e <vPortEnterCritical+0x4a>
	}
}
 8008ea0:	bf00      	nop
 8008ea2:	370c      	adds	r7, #12
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr
 8008eac:	2000000c 	.word	0x2000000c
 8008eb0:	e000ed04 	.word	0xe000ed04

08008eb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b083      	sub	sp, #12
 8008eb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008eba:	4b12      	ldr	r3, [pc, #72]	; (8008f04 <vPortExitCritical+0x50>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d10a      	bne.n	8008ed8 <vPortExitCritical+0x24>
	__asm volatile
 8008ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec6:	f383 8811 	msr	BASEPRI, r3
 8008eca:	f3bf 8f6f 	isb	sy
 8008ece:	f3bf 8f4f 	dsb	sy
 8008ed2:	607b      	str	r3, [r7, #4]
}
 8008ed4:	bf00      	nop
 8008ed6:	e7fe      	b.n	8008ed6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008ed8:	4b0a      	ldr	r3, [pc, #40]	; (8008f04 <vPortExitCritical+0x50>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	3b01      	subs	r3, #1
 8008ede:	4a09      	ldr	r2, [pc, #36]	; (8008f04 <vPortExitCritical+0x50>)
 8008ee0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008ee2:	4b08      	ldr	r3, [pc, #32]	; (8008f04 <vPortExitCritical+0x50>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d105      	bne.n	8008ef6 <vPortExitCritical+0x42>
 8008eea:	2300      	movs	r3, #0
 8008eec:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008ef4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008ef6:	bf00      	nop
 8008ef8:	370c      	adds	r7, #12
 8008efa:	46bd      	mov	sp, r7
 8008efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f00:	4770      	bx	lr
 8008f02:	bf00      	nop
 8008f04:	2000000c 	.word	0x2000000c
	...

08008f10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008f10:	f3ef 8009 	mrs	r0, PSP
 8008f14:	f3bf 8f6f 	isb	sy
 8008f18:	4b15      	ldr	r3, [pc, #84]	; (8008f70 <pxCurrentTCBConst>)
 8008f1a:	681a      	ldr	r2, [r3, #0]
 8008f1c:	f01e 0f10 	tst.w	lr, #16
 8008f20:	bf08      	it	eq
 8008f22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008f26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f2a:	6010      	str	r0, [r2, #0]
 8008f2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008f30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008f34:	f380 8811 	msr	BASEPRI, r0
 8008f38:	f3bf 8f4f 	dsb	sy
 8008f3c:	f3bf 8f6f 	isb	sy
 8008f40:	f7ff fca8 	bl	8008894 <vTaskSwitchContext>
 8008f44:	f04f 0000 	mov.w	r0, #0
 8008f48:	f380 8811 	msr	BASEPRI, r0
 8008f4c:	bc09      	pop	{r0, r3}
 8008f4e:	6819      	ldr	r1, [r3, #0]
 8008f50:	6808      	ldr	r0, [r1, #0]
 8008f52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f56:	f01e 0f10 	tst.w	lr, #16
 8008f5a:	bf08      	it	eq
 8008f5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008f60:	f380 8809 	msr	PSP, r0
 8008f64:	f3bf 8f6f 	isb	sy
 8008f68:	4770      	bx	lr
 8008f6a:	bf00      	nop
 8008f6c:	f3af 8000 	nop.w

08008f70 <pxCurrentTCBConst>:
 8008f70:	2000060c 	.word	0x2000060c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008f74:	bf00      	nop
 8008f76:	bf00      	nop

08008f78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b082      	sub	sp, #8
 8008f7c:	af00      	add	r7, sp, #0
	__asm volatile
 8008f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f82:	f383 8811 	msr	BASEPRI, r3
 8008f86:	f3bf 8f6f 	isb	sy
 8008f8a:	f3bf 8f4f 	dsb	sy
 8008f8e:	607b      	str	r3, [r7, #4]
}
 8008f90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008f92:	f7ff fbc7 	bl	8008724 <xTaskIncrementTick>
 8008f96:	4603      	mov	r3, r0
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d003      	beq.n	8008fa4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008f9c:	4b06      	ldr	r3, [pc, #24]	; (8008fb8 <xPortSysTickHandler+0x40>)
 8008f9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fa2:	601a      	str	r2, [r3, #0]
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	f383 8811 	msr	BASEPRI, r3
}
 8008fae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008fb0:	bf00      	nop
 8008fb2:	3708      	adds	r7, #8
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}
 8008fb8:	e000ed04 	.word	0xe000ed04

08008fbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008fc0:	4b0b      	ldr	r3, [pc, #44]	; (8008ff0 <vPortSetupTimerInterrupt+0x34>)
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008fc6:	4b0b      	ldr	r3, [pc, #44]	; (8008ff4 <vPortSetupTimerInterrupt+0x38>)
 8008fc8:	2200      	movs	r2, #0
 8008fca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008fcc:	4b0a      	ldr	r3, [pc, #40]	; (8008ff8 <vPortSetupTimerInterrupt+0x3c>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	4a0a      	ldr	r2, [pc, #40]	; (8008ffc <vPortSetupTimerInterrupt+0x40>)
 8008fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8008fd6:	099b      	lsrs	r3, r3, #6
 8008fd8:	4a09      	ldr	r2, [pc, #36]	; (8009000 <vPortSetupTimerInterrupt+0x44>)
 8008fda:	3b01      	subs	r3, #1
 8008fdc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008fde:	4b04      	ldr	r3, [pc, #16]	; (8008ff0 <vPortSetupTimerInterrupt+0x34>)
 8008fe0:	2207      	movs	r2, #7
 8008fe2:	601a      	str	r2, [r3, #0]
}
 8008fe4:	bf00      	nop
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fec:	4770      	bx	lr
 8008fee:	bf00      	nop
 8008ff0:	e000e010 	.word	0xe000e010
 8008ff4:	e000e018 	.word	0xe000e018
 8008ff8:	20000000 	.word	0x20000000
 8008ffc:	10624dd3 	.word	0x10624dd3
 8009000:	e000e014 	.word	0xe000e014

08009004 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009004:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009014 <vPortEnableVFP+0x10>
 8009008:	6801      	ldr	r1, [r0, #0]
 800900a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800900e:	6001      	str	r1, [r0, #0]
 8009010:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009012:	bf00      	nop
 8009014:	e000ed88 	.word	0xe000ed88

08009018 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b08a      	sub	sp, #40	; 0x28
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009020:	2300      	movs	r3, #0
 8009022:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009024:	f7ff fad4 	bl	80085d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009028:	4b5b      	ldr	r3, [pc, #364]	; (8009198 <pvPortMalloc+0x180>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d101      	bne.n	8009034 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009030:	f000 f920 	bl	8009274 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009034:	4b59      	ldr	r3, [pc, #356]	; (800919c <pvPortMalloc+0x184>)
 8009036:	681a      	ldr	r2, [r3, #0]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	4013      	ands	r3, r2
 800903c:	2b00      	cmp	r3, #0
 800903e:	f040 8093 	bne.w	8009168 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d01d      	beq.n	8009084 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009048:	2208      	movs	r2, #8
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	4413      	add	r3, r2
 800904e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f003 0307 	and.w	r3, r3, #7
 8009056:	2b00      	cmp	r3, #0
 8009058:	d014      	beq.n	8009084 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f023 0307 	bic.w	r3, r3, #7
 8009060:	3308      	adds	r3, #8
 8009062:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f003 0307 	and.w	r3, r3, #7
 800906a:	2b00      	cmp	r3, #0
 800906c:	d00a      	beq.n	8009084 <pvPortMalloc+0x6c>
	__asm volatile
 800906e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009072:	f383 8811 	msr	BASEPRI, r3
 8009076:	f3bf 8f6f 	isb	sy
 800907a:	f3bf 8f4f 	dsb	sy
 800907e:	617b      	str	r3, [r7, #20]
}
 8009080:	bf00      	nop
 8009082:	e7fe      	b.n	8009082 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d06e      	beq.n	8009168 <pvPortMalloc+0x150>
 800908a:	4b45      	ldr	r3, [pc, #276]	; (80091a0 <pvPortMalloc+0x188>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	687a      	ldr	r2, [r7, #4]
 8009090:	429a      	cmp	r2, r3
 8009092:	d869      	bhi.n	8009168 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009094:	4b43      	ldr	r3, [pc, #268]	; (80091a4 <pvPortMalloc+0x18c>)
 8009096:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009098:	4b42      	ldr	r3, [pc, #264]	; (80091a4 <pvPortMalloc+0x18c>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800909e:	e004      	b.n	80090aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80090a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80090a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80090aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ac:	685b      	ldr	r3, [r3, #4]
 80090ae:	687a      	ldr	r2, [r7, #4]
 80090b0:	429a      	cmp	r2, r3
 80090b2:	d903      	bls.n	80090bc <pvPortMalloc+0xa4>
 80090b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d1f1      	bne.n	80090a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80090bc:	4b36      	ldr	r3, [pc, #216]	; (8009198 <pvPortMalloc+0x180>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090c2:	429a      	cmp	r2, r3
 80090c4:	d050      	beq.n	8009168 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80090c6:	6a3b      	ldr	r3, [r7, #32]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	2208      	movs	r2, #8
 80090cc:	4413      	add	r3, r2
 80090ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80090d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d2:	681a      	ldr	r2, [r3, #0]
 80090d4:	6a3b      	ldr	r3, [r7, #32]
 80090d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80090d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090da:	685a      	ldr	r2, [r3, #4]
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	1ad2      	subs	r2, r2, r3
 80090e0:	2308      	movs	r3, #8
 80090e2:	005b      	lsls	r3, r3, #1
 80090e4:	429a      	cmp	r2, r3
 80090e6:	d91f      	bls.n	8009128 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80090e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	4413      	add	r3, r2
 80090ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80090f0:	69bb      	ldr	r3, [r7, #24]
 80090f2:	f003 0307 	and.w	r3, r3, #7
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d00a      	beq.n	8009110 <pvPortMalloc+0xf8>
	__asm volatile
 80090fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090fe:	f383 8811 	msr	BASEPRI, r3
 8009102:	f3bf 8f6f 	isb	sy
 8009106:	f3bf 8f4f 	dsb	sy
 800910a:	613b      	str	r3, [r7, #16]
}
 800910c:	bf00      	nop
 800910e:	e7fe      	b.n	800910e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009112:	685a      	ldr	r2, [r3, #4]
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	1ad2      	subs	r2, r2, r3
 8009118:	69bb      	ldr	r3, [r7, #24]
 800911a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800911c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800911e:	687a      	ldr	r2, [r7, #4]
 8009120:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009122:	69b8      	ldr	r0, [r7, #24]
 8009124:	f000 f908 	bl	8009338 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009128:	4b1d      	ldr	r3, [pc, #116]	; (80091a0 <pvPortMalloc+0x188>)
 800912a:	681a      	ldr	r2, [r3, #0]
 800912c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800912e:	685b      	ldr	r3, [r3, #4]
 8009130:	1ad3      	subs	r3, r2, r3
 8009132:	4a1b      	ldr	r2, [pc, #108]	; (80091a0 <pvPortMalloc+0x188>)
 8009134:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009136:	4b1a      	ldr	r3, [pc, #104]	; (80091a0 <pvPortMalloc+0x188>)
 8009138:	681a      	ldr	r2, [r3, #0]
 800913a:	4b1b      	ldr	r3, [pc, #108]	; (80091a8 <pvPortMalloc+0x190>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	429a      	cmp	r2, r3
 8009140:	d203      	bcs.n	800914a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009142:	4b17      	ldr	r3, [pc, #92]	; (80091a0 <pvPortMalloc+0x188>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	4a18      	ldr	r2, [pc, #96]	; (80091a8 <pvPortMalloc+0x190>)
 8009148:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800914a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800914c:	685a      	ldr	r2, [r3, #4]
 800914e:	4b13      	ldr	r3, [pc, #76]	; (800919c <pvPortMalloc+0x184>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	431a      	orrs	r2, r3
 8009154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009156:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800915a:	2200      	movs	r2, #0
 800915c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800915e:	4b13      	ldr	r3, [pc, #76]	; (80091ac <pvPortMalloc+0x194>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	3301      	adds	r3, #1
 8009164:	4a11      	ldr	r2, [pc, #68]	; (80091ac <pvPortMalloc+0x194>)
 8009166:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009168:	f7ff fa40 	bl	80085ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800916c:	69fb      	ldr	r3, [r7, #28]
 800916e:	f003 0307 	and.w	r3, r3, #7
 8009172:	2b00      	cmp	r3, #0
 8009174:	d00a      	beq.n	800918c <pvPortMalloc+0x174>
	__asm volatile
 8009176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800917a:	f383 8811 	msr	BASEPRI, r3
 800917e:	f3bf 8f6f 	isb	sy
 8009182:	f3bf 8f4f 	dsb	sy
 8009186:	60fb      	str	r3, [r7, #12]
}
 8009188:	bf00      	nop
 800918a:	e7fe      	b.n	800918a <pvPortMalloc+0x172>
	return pvReturn;
 800918c:	69fb      	ldr	r3, [r7, #28]
}
 800918e:	4618      	mov	r0, r3
 8009190:	3728      	adds	r7, #40	; 0x28
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}
 8009196:	bf00      	nop
 8009198:	20002e58 	.word	0x20002e58
 800919c:	20002e6c 	.word	0x20002e6c
 80091a0:	20002e5c 	.word	0x20002e5c
 80091a4:	20002e50 	.word	0x20002e50
 80091a8:	20002e60 	.word	0x20002e60
 80091ac:	20002e64 	.word	0x20002e64

080091b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b086      	sub	sp, #24
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d04d      	beq.n	800925e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80091c2:	2308      	movs	r3, #8
 80091c4:	425b      	negs	r3, r3
 80091c6:	697a      	ldr	r2, [r7, #20]
 80091c8:	4413      	add	r3, r2
 80091ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80091cc:	697b      	ldr	r3, [r7, #20]
 80091ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80091d0:	693b      	ldr	r3, [r7, #16]
 80091d2:	685a      	ldr	r2, [r3, #4]
 80091d4:	4b24      	ldr	r3, [pc, #144]	; (8009268 <vPortFree+0xb8>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	4013      	ands	r3, r2
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d10a      	bne.n	80091f4 <vPortFree+0x44>
	__asm volatile
 80091de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091e2:	f383 8811 	msr	BASEPRI, r3
 80091e6:	f3bf 8f6f 	isb	sy
 80091ea:	f3bf 8f4f 	dsb	sy
 80091ee:	60fb      	str	r3, [r7, #12]
}
 80091f0:	bf00      	nop
 80091f2:	e7fe      	b.n	80091f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80091f4:	693b      	ldr	r3, [r7, #16]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d00a      	beq.n	8009212 <vPortFree+0x62>
	__asm volatile
 80091fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009200:	f383 8811 	msr	BASEPRI, r3
 8009204:	f3bf 8f6f 	isb	sy
 8009208:	f3bf 8f4f 	dsb	sy
 800920c:	60bb      	str	r3, [r7, #8]
}
 800920e:	bf00      	nop
 8009210:	e7fe      	b.n	8009210 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009212:	693b      	ldr	r3, [r7, #16]
 8009214:	685a      	ldr	r2, [r3, #4]
 8009216:	4b14      	ldr	r3, [pc, #80]	; (8009268 <vPortFree+0xb8>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	4013      	ands	r3, r2
 800921c:	2b00      	cmp	r3, #0
 800921e:	d01e      	beq.n	800925e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009220:	693b      	ldr	r3, [r7, #16]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d11a      	bne.n	800925e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	685a      	ldr	r2, [r3, #4]
 800922c:	4b0e      	ldr	r3, [pc, #56]	; (8009268 <vPortFree+0xb8>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	43db      	mvns	r3, r3
 8009232:	401a      	ands	r2, r3
 8009234:	693b      	ldr	r3, [r7, #16]
 8009236:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009238:	f7ff f9ca 	bl	80085d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800923c:	693b      	ldr	r3, [r7, #16]
 800923e:	685a      	ldr	r2, [r3, #4]
 8009240:	4b0a      	ldr	r3, [pc, #40]	; (800926c <vPortFree+0xbc>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4413      	add	r3, r2
 8009246:	4a09      	ldr	r2, [pc, #36]	; (800926c <vPortFree+0xbc>)
 8009248:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800924a:	6938      	ldr	r0, [r7, #16]
 800924c:	f000 f874 	bl	8009338 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009250:	4b07      	ldr	r3, [pc, #28]	; (8009270 <vPortFree+0xc0>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	3301      	adds	r3, #1
 8009256:	4a06      	ldr	r2, [pc, #24]	; (8009270 <vPortFree+0xc0>)
 8009258:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800925a:	f7ff f9c7 	bl	80085ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800925e:	bf00      	nop
 8009260:	3718      	adds	r7, #24
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}
 8009266:	bf00      	nop
 8009268:	20002e6c 	.word	0x20002e6c
 800926c:	20002e5c 	.word	0x20002e5c
 8009270:	20002e68 	.word	0x20002e68

08009274 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009274:	b480      	push	{r7}
 8009276:	b085      	sub	sp, #20
 8009278:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800927a:	f242 7310 	movw	r3, #10000	; 0x2710
 800927e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009280:	4b27      	ldr	r3, [pc, #156]	; (8009320 <prvHeapInit+0xac>)
 8009282:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	f003 0307 	and.w	r3, r3, #7
 800928a:	2b00      	cmp	r3, #0
 800928c:	d00c      	beq.n	80092a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	3307      	adds	r3, #7
 8009292:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	f023 0307 	bic.w	r3, r3, #7
 800929a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800929c:	68ba      	ldr	r2, [r7, #8]
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	1ad3      	subs	r3, r2, r3
 80092a2:	4a1f      	ldr	r2, [pc, #124]	; (8009320 <prvHeapInit+0xac>)
 80092a4:	4413      	add	r3, r2
 80092a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80092ac:	4a1d      	ldr	r2, [pc, #116]	; (8009324 <prvHeapInit+0xb0>)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80092b2:	4b1c      	ldr	r3, [pc, #112]	; (8009324 <prvHeapInit+0xb0>)
 80092b4:	2200      	movs	r2, #0
 80092b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	68ba      	ldr	r2, [r7, #8]
 80092bc:	4413      	add	r3, r2
 80092be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80092c0:	2208      	movs	r2, #8
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	1a9b      	subs	r3, r3, r2
 80092c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	f023 0307 	bic.w	r3, r3, #7
 80092ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	4a15      	ldr	r2, [pc, #84]	; (8009328 <prvHeapInit+0xb4>)
 80092d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80092d6:	4b14      	ldr	r3, [pc, #80]	; (8009328 <prvHeapInit+0xb4>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	2200      	movs	r2, #0
 80092dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80092de:	4b12      	ldr	r3, [pc, #72]	; (8009328 <prvHeapInit+0xb4>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	2200      	movs	r2, #0
 80092e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	68fa      	ldr	r2, [r7, #12]
 80092ee:	1ad2      	subs	r2, r2, r3
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80092f4:	4b0c      	ldr	r3, [pc, #48]	; (8009328 <prvHeapInit+0xb4>)
 80092f6:	681a      	ldr	r2, [r3, #0]
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	685b      	ldr	r3, [r3, #4]
 8009300:	4a0a      	ldr	r2, [pc, #40]	; (800932c <prvHeapInit+0xb8>)
 8009302:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	685b      	ldr	r3, [r3, #4]
 8009308:	4a09      	ldr	r2, [pc, #36]	; (8009330 <prvHeapInit+0xbc>)
 800930a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800930c:	4b09      	ldr	r3, [pc, #36]	; (8009334 <prvHeapInit+0xc0>)
 800930e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009312:	601a      	str	r2, [r3, #0]
}
 8009314:	bf00      	nop
 8009316:	3714      	adds	r7, #20
 8009318:	46bd      	mov	sp, r7
 800931a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931e:	4770      	bx	lr
 8009320:	20000740 	.word	0x20000740
 8009324:	20002e50 	.word	0x20002e50
 8009328:	20002e58 	.word	0x20002e58
 800932c:	20002e60 	.word	0x20002e60
 8009330:	20002e5c 	.word	0x20002e5c
 8009334:	20002e6c 	.word	0x20002e6c

08009338 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009338:	b480      	push	{r7}
 800933a:	b085      	sub	sp, #20
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009340:	4b28      	ldr	r3, [pc, #160]	; (80093e4 <prvInsertBlockIntoFreeList+0xac>)
 8009342:	60fb      	str	r3, [r7, #12]
 8009344:	e002      	b.n	800934c <prvInsertBlockIntoFreeList+0x14>
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	60fb      	str	r3, [r7, #12]
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	687a      	ldr	r2, [r7, #4]
 8009352:	429a      	cmp	r2, r3
 8009354:	d8f7      	bhi.n	8009346 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	685b      	ldr	r3, [r3, #4]
 800935e:	68ba      	ldr	r2, [r7, #8]
 8009360:	4413      	add	r3, r2
 8009362:	687a      	ldr	r2, [r7, #4]
 8009364:	429a      	cmp	r2, r3
 8009366:	d108      	bne.n	800937a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	685a      	ldr	r2, [r3, #4]
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	685b      	ldr	r3, [r3, #4]
 8009370:	441a      	add	r2, r3
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	685b      	ldr	r3, [r3, #4]
 8009382:	68ba      	ldr	r2, [r7, #8]
 8009384:	441a      	add	r2, r3
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	429a      	cmp	r2, r3
 800938c:	d118      	bne.n	80093c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681a      	ldr	r2, [r3, #0]
 8009392:	4b15      	ldr	r3, [pc, #84]	; (80093e8 <prvInsertBlockIntoFreeList+0xb0>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	429a      	cmp	r2, r3
 8009398:	d00d      	beq.n	80093b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	685a      	ldr	r2, [r3, #4]
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	685b      	ldr	r3, [r3, #4]
 80093a4:	441a      	add	r2, r3
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	681a      	ldr	r2, [r3, #0]
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	601a      	str	r2, [r3, #0]
 80093b4:	e008      	b.n	80093c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80093b6:	4b0c      	ldr	r3, [pc, #48]	; (80093e8 <prvInsertBlockIntoFreeList+0xb0>)
 80093b8:	681a      	ldr	r2, [r3, #0]
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	601a      	str	r2, [r3, #0]
 80093be:	e003      	b.n	80093c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681a      	ldr	r2, [r3, #0]
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80093c8:	68fa      	ldr	r2, [r7, #12]
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	429a      	cmp	r2, r3
 80093ce:	d002      	beq.n	80093d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	687a      	ldr	r2, [r7, #4]
 80093d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80093d6:	bf00      	nop
 80093d8:	3714      	adds	r7, #20
 80093da:	46bd      	mov	sp, r7
 80093dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e0:	4770      	bx	lr
 80093e2:	bf00      	nop
 80093e4:	20002e50 	.word	0x20002e50
 80093e8:	20002e58 	.word	0x20002e58

080093ec <__cvt>:
 80093ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80093f0:	ec55 4b10 	vmov	r4, r5, d0
 80093f4:	2d00      	cmp	r5, #0
 80093f6:	460e      	mov	r6, r1
 80093f8:	4619      	mov	r1, r3
 80093fa:	462b      	mov	r3, r5
 80093fc:	bfbb      	ittet	lt
 80093fe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009402:	461d      	movlt	r5, r3
 8009404:	2300      	movge	r3, #0
 8009406:	232d      	movlt	r3, #45	; 0x2d
 8009408:	700b      	strb	r3, [r1, #0]
 800940a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800940c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009410:	4691      	mov	r9, r2
 8009412:	f023 0820 	bic.w	r8, r3, #32
 8009416:	bfbc      	itt	lt
 8009418:	4622      	movlt	r2, r4
 800941a:	4614      	movlt	r4, r2
 800941c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009420:	d005      	beq.n	800942e <__cvt+0x42>
 8009422:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009426:	d100      	bne.n	800942a <__cvt+0x3e>
 8009428:	3601      	adds	r6, #1
 800942a:	2102      	movs	r1, #2
 800942c:	e000      	b.n	8009430 <__cvt+0x44>
 800942e:	2103      	movs	r1, #3
 8009430:	ab03      	add	r3, sp, #12
 8009432:	9301      	str	r3, [sp, #4]
 8009434:	ab02      	add	r3, sp, #8
 8009436:	9300      	str	r3, [sp, #0]
 8009438:	ec45 4b10 	vmov	d0, r4, r5
 800943c:	4653      	mov	r3, sl
 800943e:	4632      	mov	r2, r6
 8009440:	f000 feaa 	bl	800a198 <_dtoa_r>
 8009444:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009448:	4607      	mov	r7, r0
 800944a:	d102      	bne.n	8009452 <__cvt+0x66>
 800944c:	f019 0f01 	tst.w	r9, #1
 8009450:	d022      	beq.n	8009498 <__cvt+0xac>
 8009452:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009456:	eb07 0906 	add.w	r9, r7, r6
 800945a:	d110      	bne.n	800947e <__cvt+0x92>
 800945c:	783b      	ldrb	r3, [r7, #0]
 800945e:	2b30      	cmp	r3, #48	; 0x30
 8009460:	d10a      	bne.n	8009478 <__cvt+0x8c>
 8009462:	2200      	movs	r2, #0
 8009464:	2300      	movs	r3, #0
 8009466:	4620      	mov	r0, r4
 8009468:	4629      	mov	r1, r5
 800946a:	f7f7 fb2d 	bl	8000ac8 <__aeabi_dcmpeq>
 800946e:	b918      	cbnz	r0, 8009478 <__cvt+0x8c>
 8009470:	f1c6 0601 	rsb	r6, r6, #1
 8009474:	f8ca 6000 	str.w	r6, [sl]
 8009478:	f8da 3000 	ldr.w	r3, [sl]
 800947c:	4499      	add	r9, r3
 800947e:	2200      	movs	r2, #0
 8009480:	2300      	movs	r3, #0
 8009482:	4620      	mov	r0, r4
 8009484:	4629      	mov	r1, r5
 8009486:	f7f7 fb1f 	bl	8000ac8 <__aeabi_dcmpeq>
 800948a:	b108      	cbz	r0, 8009490 <__cvt+0xa4>
 800948c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009490:	2230      	movs	r2, #48	; 0x30
 8009492:	9b03      	ldr	r3, [sp, #12]
 8009494:	454b      	cmp	r3, r9
 8009496:	d307      	bcc.n	80094a8 <__cvt+0xbc>
 8009498:	9b03      	ldr	r3, [sp, #12]
 800949a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800949c:	1bdb      	subs	r3, r3, r7
 800949e:	4638      	mov	r0, r7
 80094a0:	6013      	str	r3, [r2, #0]
 80094a2:	b004      	add	sp, #16
 80094a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094a8:	1c59      	adds	r1, r3, #1
 80094aa:	9103      	str	r1, [sp, #12]
 80094ac:	701a      	strb	r2, [r3, #0]
 80094ae:	e7f0      	b.n	8009492 <__cvt+0xa6>

080094b0 <__exponent>:
 80094b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80094b2:	4603      	mov	r3, r0
 80094b4:	2900      	cmp	r1, #0
 80094b6:	bfb8      	it	lt
 80094b8:	4249      	neglt	r1, r1
 80094ba:	f803 2b02 	strb.w	r2, [r3], #2
 80094be:	bfb4      	ite	lt
 80094c0:	222d      	movlt	r2, #45	; 0x2d
 80094c2:	222b      	movge	r2, #43	; 0x2b
 80094c4:	2909      	cmp	r1, #9
 80094c6:	7042      	strb	r2, [r0, #1]
 80094c8:	dd2a      	ble.n	8009520 <__exponent+0x70>
 80094ca:	f10d 0207 	add.w	r2, sp, #7
 80094ce:	4617      	mov	r7, r2
 80094d0:	260a      	movs	r6, #10
 80094d2:	4694      	mov	ip, r2
 80094d4:	fb91 f5f6 	sdiv	r5, r1, r6
 80094d8:	fb06 1415 	mls	r4, r6, r5, r1
 80094dc:	3430      	adds	r4, #48	; 0x30
 80094de:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80094e2:	460c      	mov	r4, r1
 80094e4:	2c63      	cmp	r4, #99	; 0x63
 80094e6:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 80094ea:	4629      	mov	r1, r5
 80094ec:	dcf1      	bgt.n	80094d2 <__exponent+0x22>
 80094ee:	3130      	adds	r1, #48	; 0x30
 80094f0:	f1ac 0402 	sub.w	r4, ip, #2
 80094f4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80094f8:	1c41      	adds	r1, r0, #1
 80094fa:	4622      	mov	r2, r4
 80094fc:	42ba      	cmp	r2, r7
 80094fe:	d30a      	bcc.n	8009516 <__exponent+0x66>
 8009500:	f10d 0209 	add.w	r2, sp, #9
 8009504:	eba2 020c 	sub.w	r2, r2, ip
 8009508:	42bc      	cmp	r4, r7
 800950a:	bf88      	it	hi
 800950c:	2200      	movhi	r2, #0
 800950e:	4413      	add	r3, r2
 8009510:	1a18      	subs	r0, r3, r0
 8009512:	b003      	add	sp, #12
 8009514:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009516:	f812 5b01 	ldrb.w	r5, [r2], #1
 800951a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800951e:	e7ed      	b.n	80094fc <__exponent+0x4c>
 8009520:	2330      	movs	r3, #48	; 0x30
 8009522:	3130      	adds	r1, #48	; 0x30
 8009524:	7083      	strb	r3, [r0, #2]
 8009526:	70c1      	strb	r1, [r0, #3]
 8009528:	1d03      	adds	r3, r0, #4
 800952a:	e7f1      	b.n	8009510 <__exponent+0x60>

0800952c <_printf_float>:
 800952c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009530:	ed2d 8b02 	vpush	{d8}
 8009534:	b08d      	sub	sp, #52	; 0x34
 8009536:	460c      	mov	r4, r1
 8009538:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800953c:	4616      	mov	r6, r2
 800953e:	461f      	mov	r7, r3
 8009540:	4605      	mov	r5, r0
 8009542:	f000 fd1b 	bl	8009f7c <_localeconv_r>
 8009546:	f8d0 a000 	ldr.w	sl, [r0]
 800954a:	4650      	mov	r0, sl
 800954c:	f7f6 fe90 	bl	8000270 <strlen>
 8009550:	2300      	movs	r3, #0
 8009552:	930a      	str	r3, [sp, #40]	; 0x28
 8009554:	6823      	ldr	r3, [r4, #0]
 8009556:	9305      	str	r3, [sp, #20]
 8009558:	f8d8 3000 	ldr.w	r3, [r8]
 800955c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009560:	3307      	adds	r3, #7
 8009562:	f023 0307 	bic.w	r3, r3, #7
 8009566:	f103 0208 	add.w	r2, r3, #8
 800956a:	f8c8 2000 	str.w	r2, [r8]
 800956e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009572:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009576:	9307      	str	r3, [sp, #28]
 8009578:	f8cd 8018 	str.w	r8, [sp, #24]
 800957c:	ee08 0a10 	vmov	s16, r0
 8009580:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8009584:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009588:	4b9e      	ldr	r3, [pc, #632]	; (8009804 <_printf_float+0x2d8>)
 800958a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800958e:	f7f7 facd 	bl	8000b2c <__aeabi_dcmpun>
 8009592:	bb88      	cbnz	r0, 80095f8 <_printf_float+0xcc>
 8009594:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009598:	4b9a      	ldr	r3, [pc, #616]	; (8009804 <_printf_float+0x2d8>)
 800959a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800959e:	f7f7 faa7 	bl	8000af0 <__aeabi_dcmple>
 80095a2:	bb48      	cbnz	r0, 80095f8 <_printf_float+0xcc>
 80095a4:	2200      	movs	r2, #0
 80095a6:	2300      	movs	r3, #0
 80095a8:	4640      	mov	r0, r8
 80095aa:	4649      	mov	r1, r9
 80095ac:	f7f7 fa96 	bl	8000adc <__aeabi_dcmplt>
 80095b0:	b110      	cbz	r0, 80095b8 <_printf_float+0x8c>
 80095b2:	232d      	movs	r3, #45	; 0x2d
 80095b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095b8:	4a93      	ldr	r2, [pc, #588]	; (8009808 <_printf_float+0x2dc>)
 80095ba:	4b94      	ldr	r3, [pc, #592]	; (800980c <_printf_float+0x2e0>)
 80095bc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80095c0:	bf94      	ite	ls
 80095c2:	4690      	movls	r8, r2
 80095c4:	4698      	movhi	r8, r3
 80095c6:	2303      	movs	r3, #3
 80095c8:	6123      	str	r3, [r4, #16]
 80095ca:	9b05      	ldr	r3, [sp, #20]
 80095cc:	f023 0304 	bic.w	r3, r3, #4
 80095d0:	6023      	str	r3, [r4, #0]
 80095d2:	f04f 0900 	mov.w	r9, #0
 80095d6:	9700      	str	r7, [sp, #0]
 80095d8:	4633      	mov	r3, r6
 80095da:	aa0b      	add	r2, sp, #44	; 0x2c
 80095dc:	4621      	mov	r1, r4
 80095de:	4628      	mov	r0, r5
 80095e0:	f000 f9da 	bl	8009998 <_printf_common>
 80095e4:	3001      	adds	r0, #1
 80095e6:	f040 8090 	bne.w	800970a <_printf_float+0x1de>
 80095ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80095ee:	b00d      	add	sp, #52	; 0x34
 80095f0:	ecbd 8b02 	vpop	{d8}
 80095f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095f8:	4642      	mov	r2, r8
 80095fa:	464b      	mov	r3, r9
 80095fc:	4640      	mov	r0, r8
 80095fe:	4649      	mov	r1, r9
 8009600:	f7f7 fa94 	bl	8000b2c <__aeabi_dcmpun>
 8009604:	b140      	cbz	r0, 8009618 <_printf_float+0xec>
 8009606:	464b      	mov	r3, r9
 8009608:	2b00      	cmp	r3, #0
 800960a:	bfbc      	itt	lt
 800960c:	232d      	movlt	r3, #45	; 0x2d
 800960e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009612:	4a7f      	ldr	r2, [pc, #508]	; (8009810 <_printf_float+0x2e4>)
 8009614:	4b7f      	ldr	r3, [pc, #508]	; (8009814 <_printf_float+0x2e8>)
 8009616:	e7d1      	b.n	80095bc <_printf_float+0x90>
 8009618:	6863      	ldr	r3, [r4, #4]
 800961a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800961e:	9206      	str	r2, [sp, #24]
 8009620:	1c5a      	adds	r2, r3, #1
 8009622:	d13f      	bne.n	80096a4 <_printf_float+0x178>
 8009624:	2306      	movs	r3, #6
 8009626:	6063      	str	r3, [r4, #4]
 8009628:	9b05      	ldr	r3, [sp, #20]
 800962a:	6861      	ldr	r1, [r4, #4]
 800962c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009630:	2300      	movs	r3, #0
 8009632:	9303      	str	r3, [sp, #12]
 8009634:	ab0a      	add	r3, sp, #40	; 0x28
 8009636:	e9cd b301 	strd	fp, r3, [sp, #4]
 800963a:	ab09      	add	r3, sp, #36	; 0x24
 800963c:	ec49 8b10 	vmov	d0, r8, r9
 8009640:	9300      	str	r3, [sp, #0]
 8009642:	6022      	str	r2, [r4, #0]
 8009644:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009648:	4628      	mov	r0, r5
 800964a:	f7ff fecf 	bl	80093ec <__cvt>
 800964e:	9b06      	ldr	r3, [sp, #24]
 8009650:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009652:	2b47      	cmp	r3, #71	; 0x47
 8009654:	4680      	mov	r8, r0
 8009656:	d108      	bne.n	800966a <_printf_float+0x13e>
 8009658:	1cc8      	adds	r0, r1, #3
 800965a:	db02      	blt.n	8009662 <_printf_float+0x136>
 800965c:	6863      	ldr	r3, [r4, #4]
 800965e:	4299      	cmp	r1, r3
 8009660:	dd41      	ble.n	80096e6 <_printf_float+0x1ba>
 8009662:	f1ab 0302 	sub.w	r3, fp, #2
 8009666:	fa5f fb83 	uxtb.w	fp, r3
 800966a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800966e:	d820      	bhi.n	80096b2 <_printf_float+0x186>
 8009670:	3901      	subs	r1, #1
 8009672:	465a      	mov	r2, fp
 8009674:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009678:	9109      	str	r1, [sp, #36]	; 0x24
 800967a:	f7ff ff19 	bl	80094b0 <__exponent>
 800967e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009680:	1813      	adds	r3, r2, r0
 8009682:	2a01      	cmp	r2, #1
 8009684:	4681      	mov	r9, r0
 8009686:	6123      	str	r3, [r4, #16]
 8009688:	dc02      	bgt.n	8009690 <_printf_float+0x164>
 800968a:	6822      	ldr	r2, [r4, #0]
 800968c:	07d2      	lsls	r2, r2, #31
 800968e:	d501      	bpl.n	8009694 <_printf_float+0x168>
 8009690:	3301      	adds	r3, #1
 8009692:	6123      	str	r3, [r4, #16]
 8009694:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009698:	2b00      	cmp	r3, #0
 800969a:	d09c      	beq.n	80095d6 <_printf_float+0xaa>
 800969c:	232d      	movs	r3, #45	; 0x2d
 800969e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096a2:	e798      	b.n	80095d6 <_printf_float+0xaa>
 80096a4:	9a06      	ldr	r2, [sp, #24]
 80096a6:	2a47      	cmp	r2, #71	; 0x47
 80096a8:	d1be      	bne.n	8009628 <_printf_float+0xfc>
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d1bc      	bne.n	8009628 <_printf_float+0xfc>
 80096ae:	2301      	movs	r3, #1
 80096b0:	e7b9      	b.n	8009626 <_printf_float+0xfa>
 80096b2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80096b6:	d118      	bne.n	80096ea <_printf_float+0x1be>
 80096b8:	2900      	cmp	r1, #0
 80096ba:	6863      	ldr	r3, [r4, #4]
 80096bc:	dd0b      	ble.n	80096d6 <_printf_float+0x1aa>
 80096be:	6121      	str	r1, [r4, #16]
 80096c0:	b913      	cbnz	r3, 80096c8 <_printf_float+0x19c>
 80096c2:	6822      	ldr	r2, [r4, #0]
 80096c4:	07d0      	lsls	r0, r2, #31
 80096c6:	d502      	bpl.n	80096ce <_printf_float+0x1a2>
 80096c8:	3301      	adds	r3, #1
 80096ca:	440b      	add	r3, r1
 80096cc:	6123      	str	r3, [r4, #16]
 80096ce:	65a1      	str	r1, [r4, #88]	; 0x58
 80096d0:	f04f 0900 	mov.w	r9, #0
 80096d4:	e7de      	b.n	8009694 <_printf_float+0x168>
 80096d6:	b913      	cbnz	r3, 80096de <_printf_float+0x1b2>
 80096d8:	6822      	ldr	r2, [r4, #0]
 80096da:	07d2      	lsls	r2, r2, #31
 80096dc:	d501      	bpl.n	80096e2 <_printf_float+0x1b6>
 80096de:	3302      	adds	r3, #2
 80096e0:	e7f4      	b.n	80096cc <_printf_float+0x1a0>
 80096e2:	2301      	movs	r3, #1
 80096e4:	e7f2      	b.n	80096cc <_printf_float+0x1a0>
 80096e6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80096ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096ec:	4299      	cmp	r1, r3
 80096ee:	db05      	blt.n	80096fc <_printf_float+0x1d0>
 80096f0:	6823      	ldr	r3, [r4, #0]
 80096f2:	6121      	str	r1, [r4, #16]
 80096f4:	07d8      	lsls	r0, r3, #31
 80096f6:	d5ea      	bpl.n	80096ce <_printf_float+0x1a2>
 80096f8:	1c4b      	adds	r3, r1, #1
 80096fa:	e7e7      	b.n	80096cc <_printf_float+0x1a0>
 80096fc:	2900      	cmp	r1, #0
 80096fe:	bfd4      	ite	le
 8009700:	f1c1 0202 	rsble	r2, r1, #2
 8009704:	2201      	movgt	r2, #1
 8009706:	4413      	add	r3, r2
 8009708:	e7e0      	b.n	80096cc <_printf_float+0x1a0>
 800970a:	6823      	ldr	r3, [r4, #0]
 800970c:	055a      	lsls	r2, r3, #21
 800970e:	d407      	bmi.n	8009720 <_printf_float+0x1f4>
 8009710:	6923      	ldr	r3, [r4, #16]
 8009712:	4642      	mov	r2, r8
 8009714:	4631      	mov	r1, r6
 8009716:	4628      	mov	r0, r5
 8009718:	47b8      	blx	r7
 800971a:	3001      	adds	r0, #1
 800971c:	d12c      	bne.n	8009778 <_printf_float+0x24c>
 800971e:	e764      	b.n	80095ea <_printf_float+0xbe>
 8009720:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009724:	f240 80e0 	bls.w	80098e8 <_printf_float+0x3bc>
 8009728:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800972c:	2200      	movs	r2, #0
 800972e:	2300      	movs	r3, #0
 8009730:	f7f7 f9ca 	bl	8000ac8 <__aeabi_dcmpeq>
 8009734:	2800      	cmp	r0, #0
 8009736:	d034      	beq.n	80097a2 <_printf_float+0x276>
 8009738:	4a37      	ldr	r2, [pc, #220]	; (8009818 <_printf_float+0x2ec>)
 800973a:	2301      	movs	r3, #1
 800973c:	4631      	mov	r1, r6
 800973e:	4628      	mov	r0, r5
 8009740:	47b8      	blx	r7
 8009742:	3001      	adds	r0, #1
 8009744:	f43f af51 	beq.w	80095ea <_printf_float+0xbe>
 8009748:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800974c:	429a      	cmp	r2, r3
 800974e:	db02      	blt.n	8009756 <_printf_float+0x22a>
 8009750:	6823      	ldr	r3, [r4, #0]
 8009752:	07d8      	lsls	r0, r3, #31
 8009754:	d510      	bpl.n	8009778 <_printf_float+0x24c>
 8009756:	ee18 3a10 	vmov	r3, s16
 800975a:	4652      	mov	r2, sl
 800975c:	4631      	mov	r1, r6
 800975e:	4628      	mov	r0, r5
 8009760:	47b8      	blx	r7
 8009762:	3001      	adds	r0, #1
 8009764:	f43f af41 	beq.w	80095ea <_printf_float+0xbe>
 8009768:	f04f 0800 	mov.w	r8, #0
 800976c:	f104 091a 	add.w	r9, r4, #26
 8009770:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009772:	3b01      	subs	r3, #1
 8009774:	4543      	cmp	r3, r8
 8009776:	dc09      	bgt.n	800978c <_printf_float+0x260>
 8009778:	6823      	ldr	r3, [r4, #0]
 800977a:	079b      	lsls	r3, r3, #30
 800977c:	f100 8107 	bmi.w	800998e <_printf_float+0x462>
 8009780:	68e0      	ldr	r0, [r4, #12]
 8009782:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009784:	4298      	cmp	r0, r3
 8009786:	bfb8      	it	lt
 8009788:	4618      	movlt	r0, r3
 800978a:	e730      	b.n	80095ee <_printf_float+0xc2>
 800978c:	2301      	movs	r3, #1
 800978e:	464a      	mov	r2, r9
 8009790:	4631      	mov	r1, r6
 8009792:	4628      	mov	r0, r5
 8009794:	47b8      	blx	r7
 8009796:	3001      	adds	r0, #1
 8009798:	f43f af27 	beq.w	80095ea <_printf_float+0xbe>
 800979c:	f108 0801 	add.w	r8, r8, #1
 80097a0:	e7e6      	b.n	8009770 <_printf_float+0x244>
 80097a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	dc39      	bgt.n	800981c <_printf_float+0x2f0>
 80097a8:	4a1b      	ldr	r2, [pc, #108]	; (8009818 <_printf_float+0x2ec>)
 80097aa:	2301      	movs	r3, #1
 80097ac:	4631      	mov	r1, r6
 80097ae:	4628      	mov	r0, r5
 80097b0:	47b8      	blx	r7
 80097b2:	3001      	adds	r0, #1
 80097b4:	f43f af19 	beq.w	80095ea <_printf_float+0xbe>
 80097b8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80097bc:	4313      	orrs	r3, r2
 80097be:	d102      	bne.n	80097c6 <_printf_float+0x29a>
 80097c0:	6823      	ldr	r3, [r4, #0]
 80097c2:	07d9      	lsls	r1, r3, #31
 80097c4:	d5d8      	bpl.n	8009778 <_printf_float+0x24c>
 80097c6:	ee18 3a10 	vmov	r3, s16
 80097ca:	4652      	mov	r2, sl
 80097cc:	4631      	mov	r1, r6
 80097ce:	4628      	mov	r0, r5
 80097d0:	47b8      	blx	r7
 80097d2:	3001      	adds	r0, #1
 80097d4:	f43f af09 	beq.w	80095ea <_printf_float+0xbe>
 80097d8:	f04f 0900 	mov.w	r9, #0
 80097dc:	f104 0a1a 	add.w	sl, r4, #26
 80097e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097e2:	425b      	negs	r3, r3
 80097e4:	454b      	cmp	r3, r9
 80097e6:	dc01      	bgt.n	80097ec <_printf_float+0x2c0>
 80097e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097ea:	e792      	b.n	8009712 <_printf_float+0x1e6>
 80097ec:	2301      	movs	r3, #1
 80097ee:	4652      	mov	r2, sl
 80097f0:	4631      	mov	r1, r6
 80097f2:	4628      	mov	r0, r5
 80097f4:	47b8      	blx	r7
 80097f6:	3001      	adds	r0, #1
 80097f8:	f43f aef7 	beq.w	80095ea <_printf_float+0xbe>
 80097fc:	f109 0901 	add.w	r9, r9, #1
 8009800:	e7ee      	b.n	80097e0 <_printf_float+0x2b4>
 8009802:	bf00      	nop
 8009804:	7fefffff 	.word	0x7fefffff
 8009808:	0800c228 	.word	0x0800c228
 800980c:	0800c22c 	.word	0x0800c22c
 8009810:	0800c230 	.word	0x0800c230
 8009814:	0800c234 	.word	0x0800c234
 8009818:	0800c238 	.word	0x0800c238
 800981c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800981e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009820:	429a      	cmp	r2, r3
 8009822:	bfa8      	it	ge
 8009824:	461a      	movge	r2, r3
 8009826:	2a00      	cmp	r2, #0
 8009828:	4691      	mov	r9, r2
 800982a:	dc37      	bgt.n	800989c <_printf_float+0x370>
 800982c:	f04f 0b00 	mov.w	fp, #0
 8009830:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009834:	f104 021a 	add.w	r2, r4, #26
 8009838:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800983a:	9305      	str	r3, [sp, #20]
 800983c:	eba3 0309 	sub.w	r3, r3, r9
 8009840:	455b      	cmp	r3, fp
 8009842:	dc33      	bgt.n	80098ac <_printf_float+0x380>
 8009844:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009848:	429a      	cmp	r2, r3
 800984a:	db3b      	blt.n	80098c4 <_printf_float+0x398>
 800984c:	6823      	ldr	r3, [r4, #0]
 800984e:	07da      	lsls	r2, r3, #31
 8009850:	d438      	bmi.n	80098c4 <_printf_float+0x398>
 8009852:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009856:	eba2 0903 	sub.w	r9, r2, r3
 800985a:	9b05      	ldr	r3, [sp, #20]
 800985c:	1ad2      	subs	r2, r2, r3
 800985e:	4591      	cmp	r9, r2
 8009860:	bfa8      	it	ge
 8009862:	4691      	movge	r9, r2
 8009864:	f1b9 0f00 	cmp.w	r9, #0
 8009868:	dc35      	bgt.n	80098d6 <_printf_float+0x3aa>
 800986a:	f04f 0800 	mov.w	r8, #0
 800986e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009872:	f104 0a1a 	add.w	sl, r4, #26
 8009876:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800987a:	1a9b      	subs	r3, r3, r2
 800987c:	eba3 0309 	sub.w	r3, r3, r9
 8009880:	4543      	cmp	r3, r8
 8009882:	f77f af79 	ble.w	8009778 <_printf_float+0x24c>
 8009886:	2301      	movs	r3, #1
 8009888:	4652      	mov	r2, sl
 800988a:	4631      	mov	r1, r6
 800988c:	4628      	mov	r0, r5
 800988e:	47b8      	blx	r7
 8009890:	3001      	adds	r0, #1
 8009892:	f43f aeaa 	beq.w	80095ea <_printf_float+0xbe>
 8009896:	f108 0801 	add.w	r8, r8, #1
 800989a:	e7ec      	b.n	8009876 <_printf_float+0x34a>
 800989c:	4613      	mov	r3, r2
 800989e:	4631      	mov	r1, r6
 80098a0:	4642      	mov	r2, r8
 80098a2:	4628      	mov	r0, r5
 80098a4:	47b8      	blx	r7
 80098a6:	3001      	adds	r0, #1
 80098a8:	d1c0      	bne.n	800982c <_printf_float+0x300>
 80098aa:	e69e      	b.n	80095ea <_printf_float+0xbe>
 80098ac:	2301      	movs	r3, #1
 80098ae:	4631      	mov	r1, r6
 80098b0:	4628      	mov	r0, r5
 80098b2:	9205      	str	r2, [sp, #20]
 80098b4:	47b8      	blx	r7
 80098b6:	3001      	adds	r0, #1
 80098b8:	f43f ae97 	beq.w	80095ea <_printf_float+0xbe>
 80098bc:	9a05      	ldr	r2, [sp, #20]
 80098be:	f10b 0b01 	add.w	fp, fp, #1
 80098c2:	e7b9      	b.n	8009838 <_printf_float+0x30c>
 80098c4:	ee18 3a10 	vmov	r3, s16
 80098c8:	4652      	mov	r2, sl
 80098ca:	4631      	mov	r1, r6
 80098cc:	4628      	mov	r0, r5
 80098ce:	47b8      	blx	r7
 80098d0:	3001      	adds	r0, #1
 80098d2:	d1be      	bne.n	8009852 <_printf_float+0x326>
 80098d4:	e689      	b.n	80095ea <_printf_float+0xbe>
 80098d6:	9a05      	ldr	r2, [sp, #20]
 80098d8:	464b      	mov	r3, r9
 80098da:	4442      	add	r2, r8
 80098dc:	4631      	mov	r1, r6
 80098de:	4628      	mov	r0, r5
 80098e0:	47b8      	blx	r7
 80098e2:	3001      	adds	r0, #1
 80098e4:	d1c1      	bne.n	800986a <_printf_float+0x33e>
 80098e6:	e680      	b.n	80095ea <_printf_float+0xbe>
 80098e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80098ea:	2a01      	cmp	r2, #1
 80098ec:	dc01      	bgt.n	80098f2 <_printf_float+0x3c6>
 80098ee:	07db      	lsls	r3, r3, #31
 80098f0:	d53a      	bpl.n	8009968 <_printf_float+0x43c>
 80098f2:	2301      	movs	r3, #1
 80098f4:	4642      	mov	r2, r8
 80098f6:	4631      	mov	r1, r6
 80098f8:	4628      	mov	r0, r5
 80098fa:	47b8      	blx	r7
 80098fc:	3001      	adds	r0, #1
 80098fe:	f43f ae74 	beq.w	80095ea <_printf_float+0xbe>
 8009902:	ee18 3a10 	vmov	r3, s16
 8009906:	4652      	mov	r2, sl
 8009908:	4631      	mov	r1, r6
 800990a:	4628      	mov	r0, r5
 800990c:	47b8      	blx	r7
 800990e:	3001      	adds	r0, #1
 8009910:	f43f ae6b 	beq.w	80095ea <_printf_float+0xbe>
 8009914:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009918:	2200      	movs	r2, #0
 800991a:	2300      	movs	r3, #0
 800991c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8009920:	f7f7 f8d2 	bl	8000ac8 <__aeabi_dcmpeq>
 8009924:	b9d8      	cbnz	r0, 800995e <_printf_float+0x432>
 8009926:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800992a:	f108 0201 	add.w	r2, r8, #1
 800992e:	4631      	mov	r1, r6
 8009930:	4628      	mov	r0, r5
 8009932:	47b8      	blx	r7
 8009934:	3001      	adds	r0, #1
 8009936:	d10e      	bne.n	8009956 <_printf_float+0x42a>
 8009938:	e657      	b.n	80095ea <_printf_float+0xbe>
 800993a:	2301      	movs	r3, #1
 800993c:	4652      	mov	r2, sl
 800993e:	4631      	mov	r1, r6
 8009940:	4628      	mov	r0, r5
 8009942:	47b8      	blx	r7
 8009944:	3001      	adds	r0, #1
 8009946:	f43f ae50 	beq.w	80095ea <_printf_float+0xbe>
 800994a:	f108 0801 	add.w	r8, r8, #1
 800994e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009950:	3b01      	subs	r3, #1
 8009952:	4543      	cmp	r3, r8
 8009954:	dcf1      	bgt.n	800993a <_printf_float+0x40e>
 8009956:	464b      	mov	r3, r9
 8009958:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800995c:	e6da      	b.n	8009714 <_printf_float+0x1e8>
 800995e:	f04f 0800 	mov.w	r8, #0
 8009962:	f104 0a1a 	add.w	sl, r4, #26
 8009966:	e7f2      	b.n	800994e <_printf_float+0x422>
 8009968:	2301      	movs	r3, #1
 800996a:	4642      	mov	r2, r8
 800996c:	e7df      	b.n	800992e <_printf_float+0x402>
 800996e:	2301      	movs	r3, #1
 8009970:	464a      	mov	r2, r9
 8009972:	4631      	mov	r1, r6
 8009974:	4628      	mov	r0, r5
 8009976:	47b8      	blx	r7
 8009978:	3001      	adds	r0, #1
 800997a:	f43f ae36 	beq.w	80095ea <_printf_float+0xbe>
 800997e:	f108 0801 	add.w	r8, r8, #1
 8009982:	68e3      	ldr	r3, [r4, #12]
 8009984:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009986:	1a5b      	subs	r3, r3, r1
 8009988:	4543      	cmp	r3, r8
 800998a:	dcf0      	bgt.n	800996e <_printf_float+0x442>
 800998c:	e6f8      	b.n	8009780 <_printf_float+0x254>
 800998e:	f04f 0800 	mov.w	r8, #0
 8009992:	f104 0919 	add.w	r9, r4, #25
 8009996:	e7f4      	b.n	8009982 <_printf_float+0x456>

08009998 <_printf_common>:
 8009998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800999c:	4616      	mov	r6, r2
 800999e:	4699      	mov	r9, r3
 80099a0:	688a      	ldr	r2, [r1, #8]
 80099a2:	690b      	ldr	r3, [r1, #16]
 80099a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80099a8:	4293      	cmp	r3, r2
 80099aa:	bfb8      	it	lt
 80099ac:	4613      	movlt	r3, r2
 80099ae:	6033      	str	r3, [r6, #0]
 80099b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80099b4:	4607      	mov	r7, r0
 80099b6:	460c      	mov	r4, r1
 80099b8:	b10a      	cbz	r2, 80099be <_printf_common+0x26>
 80099ba:	3301      	adds	r3, #1
 80099bc:	6033      	str	r3, [r6, #0]
 80099be:	6823      	ldr	r3, [r4, #0]
 80099c0:	0699      	lsls	r1, r3, #26
 80099c2:	bf42      	ittt	mi
 80099c4:	6833      	ldrmi	r3, [r6, #0]
 80099c6:	3302      	addmi	r3, #2
 80099c8:	6033      	strmi	r3, [r6, #0]
 80099ca:	6825      	ldr	r5, [r4, #0]
 80099cc:	f015 0506 	ands.w	r5, r5, #6
 80099d0:	d106      	bne.n	80099e0 <_printf_common+0x48>
 80099d2:	f104 0a19 	add.w	sl, r4, #25
 80099d6:	68e3      	ldr	r3, [r4, #12]
 80099d8:	6832      	ldr	r2, [r6, #0]
 80099da:	1a9b      	subs	r3, r3, r2
 80099dc:	42ab      	cmp	r3, r5
 80099de:	dc26      	bgt.n	8009a2e <_printf_common+0x96>
 80099e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80099e4:	1e13      	subs	r3, r2, #0
 80099e6:	6822      	ldr	r2, [r4, #0]
 80099e8:	bf18      	it	ne
 80099ea:	2301      	movne	r3, #1
 80099ec:	0692      	lsls	r2, r2, #26
 80099ee:	d42b      	bmi.n	8009a48 <_printf_common+0xb0>
 80099f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80099f4:	4649      	mov	r1, r9
 80099f6:	4638      	mov	r0, r7
 80099f8:	47c0      	blx	r8
 80099fa:	3001      	adds	r0, #1
 80099fc:	d01e      	beq.n	8009a3c <_printf_common+0xa4>
 80099fe:	6823      	ldr	r3, [r4, #0]
 8009a00:	6922      	ldr	r2, [r4, #16]
 8009a02:	f003 0306 	and.w	r3, r3, #6
 8009a06:	2b04      	cmp	r3, #4
 8009a08:	bf02      	ittt	eq
 8009a0a:	68e5      	ldreq	r5, [r4, #12]
 8009a0c:	6833      	ldreq	r3, [r6, #0]
 8009a0e:	1aed      	subeq	r5, r5, r3
 8009a10:	68a3      	ldr	r3, [r4, #8]
 8009a12:	bf0c      	ite	eq
 8009a14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009a18:	2500      	movne	r5, #0
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	bfc4      	itt	gt
 8009a1e:	1a9b      	subgt	r3, r3, r2
 8009a20:	18ed      	addgt	r5, r5, r3
 8009a22:	2600      	movs	r6, #0
 8009a24:	341a      	adds	r4, #26
 8009a26:	42b5      	cmp	r5, r6
 8009a28:	d11a      	bne.n	8009a60 <_printf_common+0xc8>
 8009a2a:	2000      	movs	r0, #0
 8009a2c:	e008      	b.n	8009a40 <_printf_common+0xa8>
 8009a2e:	2301      	movs	r3, #1
 8009a30:	4652      	mov	r2, sl
 8009a32:	4649      	mov	r1, r9
 8009a34:	4638      	mov	r0, r7
 8009a36:	47c0      	blx	r8
 8009a38:	3001      	adds	r0, #1
 8009a3a:	d103      	bne.n	8009a44 <_printf_common+0xac>
 8009a3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a44:	3501      	adds	r5, #1
 8009a46:	e7c6      	b.n	80099d6 <_printf_common+0x3e>
 8009a48:	18e1      	adds	r1, r4, r3
 8009a4a:	1c5a      	adds	r2, r3, #1
 8009a4c:	2030      	movs	r0, #48	; 0x30
 8009a4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009a52:	4422      	add	r2, r4
 8009a54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009a58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009a5c:	3302      	adds	r3, #2
 8009a5e:	e7c7      	b.n	80099f0 <_printf_common+0x58>
 8009a60:	2301      	movs	r3, #1
 8009a62:	4622      	mov	r2, r4
 8009a64:	4649      	mov	r1, r9
 8009a66:	4638      	mov	r0, r7
 8009a68:	47c0      	blx	r8
 8009a6a:	3001      	adds	r0, #1
 8009a6c:	d0e6      	beq.n	8009a3c <_printf_common+0xa4>
 8009a6e:	3601      	adds	r6, #1
 8009a70:	e7d9      	b.n	8009a26 <_printf_common+0x8e>
	...

08009a74 <_printf_i>:
 8009a74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a78:	7e0f      	ldrb	r7, [r1, #24]
 8009a7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009a7c:	2f78      	cmp	r7, #120	; 0x78
 8009a7e:	4691      	mov	r9, r2
 8009a80:	4680      	mov	r8, r0
 8009a82:	460c      	mov	r4, r1
 8009a84:	469a      	mov	sl, r3
 8009a86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009a8a:	d807      	bhi.n	8009a9c <_printf_i+0x28>
 8009a8c:	2f62      	cmp	r7, #98	; 0x62
 8009a8e:	d80a      	bhi.n	8009aa6 <_printf_i+0x32>
 8009a90:	2f00      	cmp	r7, #0
 8009a92:	f000 80d4 	beq.w	8009c3e <_printf_i+0x1ca>
 8009a96:	2f58      	cmp	r7, #88	; 0x58
 8009a98:	f000 80c0 	beq.w	8009c1c <_printf_i+0x1a8>
 8009a9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009aa0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009aa4:	e03a      	b.n	8009b1c <_printf_i+0xa8>
 8009aa6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009aaa:	2b15      	cmp	r3, #21
 8009aac:	d8f6      	bhi.n	8009a9c <_printf_i+0x28>
 8009aae:	a101      	add	r1, pc, #4	; (adr r1, 8009ab4 <_printf_i+0x40>)
 8009ab0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009ab4:	08009b0d 	.word	0x08009b0d
 8009ab8:	08009b21 	.word	0x08009b21
 8009abc:	08009a9d 	.word	0x08009a9d
 8009ac0:	08009a9d 	.word	0x08009a9d
 8009ac4:	08009a9d 	.word	0x08009a9d
 8009ac8:	08009a9d 	.word	0x08009a9d
 8009acc:	08009b21 	.word	0x08009b21
 8009ad0:	08009a9d 	.word	0x08009a9d
 8009ad4:	08009a9d 	.word	0x08009a9d
 8009ad8:	08009a9d 	.word	0x08009a9d
 8009adc:	08009a9d 	.word	0x08009a9d
 8009ae0:	08009c25 	.word	0x08009c25
 8009ae4:	08009b4d 	.word	0x08009b4d
 8009ae8:	08009bdf 	.word	0x08009bdf
 8009aec:	08009a9d 	.word	0x08009a9d
 8009af0:	08009a9d 	.word	0x08009a9d
 8009af4:	08009c47 	.word	0x08009c47
 8009af8:	08009a9d 	.word	0x08009a9d
 8009afc:	08009b4d 	.word	0x08009b4d
 8009b00:	08009a9d 	.word	0x08009a9d
 8009b04:	08009a9d 	.word	0x08009a9d
 8009b08:	08009be7 	.word	0x08009be7
 8009b0c:	682b      	ldr	r3, [r5, #0]
 8009b0e:	1d1a      	adds	r2, r3, #4
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	602a      	str	r2, [r5, #0]
 8009b14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	e09f      	b.n	8009c60 <_printf_i+0x1ec>
 8009b20:	6820      	ldr	r0, [r4, #0]
 8009b22:	682b      	ldr	r3, [r5, #0]
 8009b24:	0607      	lsls	r7, r0, #24
 8009b26:	f103 0104 	add.w	r1, r3, #4
 8009b2a:	6029      	str	r1, [r5, #0]
 8009b2c:	d501      	bpl.n	8009b32 <_printf_i+0xbe>
 8009b2e:	681e      	ldr	r6, [r3, #0]
 8009b30:	e003      	b.n	8009b3a <_printf_i+0xc6>
 8009b32:	0646      	lsls	r6, r0, #25
 8009b34:	d5fb      	bpl.n	8009b2e <_printf_i+0xba>
 8009b36:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009b3a:	2e00      	cmp	r6, #0
 8009b3c:	da03      	bge.n	8009b46 <_printf_i+0xd2>
 8009b3e:	232d      	movs	r3, #45	; 0x2d
 8009b40:	4276      	negs	r6, r6
 8009b42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b46:	485a      	ldr	r0, [pc, #360]	; (8009cb0 <_printf_i+0x23c>)
 8009b48:	230a      	movs	r3, #10
 8009b4a:	e012      	b.n	8009b72 <_printf_i+0xfe>
 8009b4c:	682b      	ldr	r3, [r5, #0]
 8009b4e:	6820      	ldr	r0, [r4, #0]
 8009b50:	1d19      	adds	r1, r3, #4
 8009b52:	6029      	str	r1, [r5, #0]
 8009b54:	0605      	lsls	r5, r0, #24
 8009b56:	d501      	bpl.n	8009b5c <_printf_i+0xe8>
 8009b58:	681e      	ldr	r6, [r3, #0]
 8009b5a:	e002      	b.n	8009b62 <_printf_i+0xee>
 8009b5c:	0641      	lsls	r1, r0, #25
 8009b5e:	d5fb      	bpl.n	8009b58 <_printf_i+0xe4>
 8009b60:	881e      	ldrh	r6, [r3, #0]
 8009b62:	4853      	ldr	r0, [pc, #332]	; (8009cb0 <_printf_i+0x23c>)
 8009b64:	2f6f      	cmp	r7, #111	; 0x6f
 8009b66:	bf0c      	ite	eq
 8009b68:	2308      	moveq	r3, #8
 8009b6a:	230a      	movne	r3, #10
 8009b6c:	2100      	movs	r1, #0
 8009b6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009b72:	6865      	ldr	r5, [r4, #4]
 8009b74:	60a5      	str	r5, [r4, #8]
 8009b76:	2d00      	cmp	r5, #0
 8009b78:	bfa2      	ittt	ge
 8009b7a:	6821      	ldrge	r1, [r4, #0]
 8009b7c:	f021 0104 	bicge.w	r1, r1, #4
 8009b80:	6021      	strge	r1, [r4, #0]
 8009b82:	b90e      	cbnz	r6, 8009b88 <_printf_i+0x114>
 8009b84:	2d00      	cmp	r5, #0
 8009b86:	d04b      	beq.n	8009c20 <_printf_i+0x1ac>
 8009b88:	4615      	mov	r5, r2
 8009b8a:	fbb6 f1f3 	udiv	r1, r6, r3
 8009b8e:	fb03 6711 	mls	r7, r3, r1, r6
 8009b92:	5dc7      	ldrb	r7, [r0, r7]
 8009b94:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009b98:	4637      	mov	r7, r6
 8009b9a:	42bb      	cmp	r3, r7
 8009b9c:	460e      	mov	r6, r1
 8009b9e:	d9f4      	bls.n	8009b8a <_printf_i+0x116>
 8009ba0:	2b08      	cmp	r3, #8
 8009ba2:	d10b      	bne.n	8009bbc <_printf_i+0x148>
 8009ba4:	6823      	ldr	r3, [r4, #0]
 8009ba6:	07de      	lsls	r6, r3, #31
 8009ba8:	d508      	bpl.n	8009bbc <_printf_i+0x148>
 8009baa:	6923      	ldr	r3, [r4, #16]
 8009bac:	6861      	ldr	r1, [r4, #4]
 8009bae:	4299      	cmp	r1, r3
 8009bb0:	bfde      	ittt	le
 8009bb2:	2330      	movle	r3, #48	; 0x30
 8009bb4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009bb8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009bbc:	1b52      	subs	r2, r2, r5
 8009bbe:	6122      	str	r2, [r4, #16]
 8009bc0:	f8cd a000 	str.w	sl, [sp]
 8009bc4:	464b      	mov	r3, r9
 8009bc6:	aa03      	add	r2, sp, #12
 8009bc8:	4621      	mov	r1, r4
 8009bca:	4640      	mov	r0, r8
 8009bcc:	f7ff fee4 	bl	8009998 <_printf_common>
 8009bd0:	3001      	adds	r0, #1
 8009bd2:	d14a      	bne.n	8009c6a <_printf_i+0x1f6>
 8009bd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009bd8:	b004      	add	sp, #16
 8009bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bde:	6823      	ldr	r3, [r4, #0]
 8009be0:	f043 0320 	orr.w	r3, r3, #32
 8009be4:	6023      	str	r3, [r4, #0]
 8009be6:	4833      	ldr	r0, [pc, #204]	; (8009cb4 <_printf_i+0x240>)
 8009be8:	2778      	movs	r7, #120	; 0x78
 8009bea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009bee:	6823      	ldr	r3, [r4, #0]
 8009bf0:	6829      	ldr	r1, [r5, #0]
 8009bf2:	061f      	lsls	r7, r3, #24
 8009bf4:	f851 6b04 	ldr.w	r6, [r1], #4
 8009bf8:	d402      	bmi.n	8009c00 <_printf_i+0x18c>
 8009bfa:	065f      	lsls	r7, r3, #25
 8009bfc:	bf48      	it	mi
 8009bfe:	b2b6      	uxthmi	r6, r6
 8009c00:	07df      	lsls	r7, r3, #31
 8009c02:	bf48      	it	mi
 8009c04:	f043 0320 	orrmi.w	r3, r3, #32
 8009c08:	6029      	str	r1, [r5, #0]
 8009c0a:	bf48      	it	mi
 8009c0c:	6023      	strmi	r3, [r4, #0]
 8009c0e:	b91e      	cbnz	r6, 8009c18 <_printf_i+0x1a4>
 8009c10:	6823      	ldr	r3, [r4, #0]
 8009c12:	f023 0320 	bic.w	r3, r3, #32
 8009c16:	6023      	str	r3, [r4, #0]
 8009c18:	2310      	movs	r3, #16
 8009c1a:	e7a7      	b.n	8009b6c <_printf_i+0xf8>
 8009c1c:	4824      	ldr	r0, [pc, #144]	; (8009cb0 <_printf_i+0x23c>)
 8009c1e:	e7e4      	b.n	8009bea <_printf_i+0x176>
 8009c20:	4615      	mov	r5, r2
 8009c22:	e7bd      	b.n	8009ba0 <_printf_i+0x12c>
 8009c24:	682b      	ldr	r3, [r5, #0]
 8009c26:	6826      	ldr	r6, [r4, #0]
 8009c28:	6961      	ldr	r1, [r4, #20]
 8009c2a:	1d18      	adds	r0, r3, #4
 8009c2c:	6028      	str	r0, [r5, #0]
 8009c2e:	0635      	lsls	r5, r6, #24
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	d501      	bpl.n	8009c38 <_printf_i+0x1c4>
 8009c34:	6019      	str	r1, [r3, #0]
 8009c36:	e002      	b.n	8009c3e <_printf_i+0x1ca>
 8009c38:	0670      	lsls	r0, r6, #25
 8009c3a:	d5fb      	bpl.n	8009c34 <_printf_i+0x1c0>
 8009c3c:	8019      	strh	r1, [r3, #0]
 8009c3e:	2300      	movs	r3, #0
 8009c40:	6123      	str	r3, [r4, #16]
 8009c42:	4615      	mov	r5, r2
 8009c44:	e7bc      	b.n	8009bc0 <_printf_i+0x14c>
 8009c46:	682b      	ldr	r3, [r5, #0]
 8009c48:	1d1a      	adds	r2, r3, #4
 8009c4a:	602a      	str	r2, [r5, #0]
 8009c4c:	681d      	ldr	r5, [r3, #0]
 8009c4e:	6862      	ldr	r2, [r4, #4]
 8009c50:	2100      	movs	r1, #0
 8009c52:	4628      	mov	r0, r5
 8009c54:	f7f6 fabc 	bl	80001d0 <memchr>
 8009c58:	b108      	cbz	r0, 8009c5e <_printf_i+0x1ea>
 8009c5a:	1b40      	subs	r0, r0, r5
 8009c5c:	6060      	str	r0, [r4, #4]
 8009c5e:	6863      	ldr	r3, [r4, #4]
 8009c60:	6123      	str	r3, [r4, #16]
 8009c62:	2300      	movs	r3, #0
 8009c64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c68:	e7aa      	b.n	8009bc0 <_printf_i+0x14c>
 8009c6a:	6923      	ldr	r3, [r4, #16]
 8009c6c:	462a      	mov	r2, r5
 8009c6e:	4649      	mov	r1, r9
 8009c70:	4640      	mov	r0, r8
 8009c72:	47d0      	blx	sl
 8009c74:	3001      	adds	r0, #1
 8009c76:	d0ad      	beq.n	8009bd4 <_printf_i+0x160>
 8009c78:	6823      	ldr	r3, [r4, #0]
 8009c7a:	079b      	lsls	r3, r3, #30
 8009c7c:	d413      	bmi.n	8009ca6 <_printf_i+0x232>
 8009c7e:	68e0      	ldr	r0, [r4, #12]
 8009c80:	9b03      	ldr	r3, [sp, #12]
 8009c82:	4298      	cmp	r0, r3
 8009c84:	bfb8      	it	lt
 8009c86:	4618      	movlt	r0, r3
 8009c88:	e7a6      	b.n	8009bd8 <_printf_i+0x164>
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	4632      	mov	r2, r6
 8009c8e:	4649      	mov	r1, r9
 8009c90:	4640      	mov	r0, r8
 8009c92:	47d0      	blx	sl
 8009c94:	3001      	adds	r0, #1
 8009c96:	d09d      	beq.n	8009bd4 <_printf_i+0x160>
 8009c98:	3501      	adds	r5, #1
 8009c9a:	68e3      	ldr	r3, [r4, #12]
 8009c9c:	9903      	ldr	r1, [sp, #12]
 8009c9e:	1a5b      	subs	r3, r3, r1
 8009ca0:	42ab      	cmp	r3, r5
 8009ca2:	dcf2      	bgt.n	8009c8a <_printf_i+0x216>
 8009ca4:	e7eb      	b.n	8009c7e <_printf_i+0x20a>
 8009ca6:	2500      	movs	r5, #0
 8009ca8:	f104 0619 	add.w	r6, r4, #25
 8009cac:	e7f5      	b.n	8009c9a <_printf_i+0x226>
 8009cae:	bf00      	nop
 8009cb0:	0800c23a 	.word	0x0800c23a
 8009cb4:	0800c24b 	.word	0x0800c24b

08009cb8 <std>:
 8009cb8:	2300      	movs	r3, #0
 8009cba:	b510      	push	{r4, lr}
 8009cbc:	4604      	mov	r4, r0
 8009cbe:	e9c0 3300 	strd	r3, r3, [r0]
 8009cc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009cc6:	6083      	str	r3, [r0, #8]
 8009cc8:	8181      	strh	r1, [r0, #12]
 8009cca:	6643      	str	r3, [r0, #100]	; 0x64
 8009ccc:	81c2      	strh	r2, [r0, #14]
 8009cce:	6183      	str	r3, [r0, #24]
 8009cd0:	4619      	mov	r1, r3
 8009cd2:	2208      	movs	r2, #8
 8009cd4:	305c      	adds	r0, #92	; 0x5c
 8009cd6:	f000 f948 	bl	8009f6a <memset>
 8009cda:	4b0d      	ldr	r3, [pc, #52]	; (8009d10 <std+0x58>)
 8009cdc:	6263      	str	r3, [r4, #36]	; 0x24
 8009cde:	4b0d      	ldr	r3, [pc, #52]	; (8009d14 <std+0x5c>)
 8009ce0:	62a3      	str	r3, [r4, #40]	; 0x28
 8009ce2:	4b0d      	ldr	r3, [pc, #52]	; (8009d18 <std+0x60>)
 8009ce4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009ce6:	4b0d      	ldr	r3, [pc, #52]	; (8009d1c <std+0x64>)
 8009ce8:	6323      	str	r3, [r4, #48]	; 0x30
 8009cea:	4b0d      	ldr	r3, [pc, #52]	; (8009d20 <std+0x68>)
 8009cec:	6224      	str	r4, [r4, #32]
 8009cee:	429c      	cmp	r4, r3
 8009cf0:	d006      	beq.n	8009d00 <std+0x48>
 8009cf2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009cf6:	4294      	cmp	r4, r2
 8009cf8:	d002      	beq.n	8009d00 <std+0x48>
 8009cfa:	33d0      	adds	r3, #208	; 0xd0
 8009cfc:	429c      	cmp	r4, r3
 8009cfe:	d105      	bne.n	8009d0c <std+0x54>
 8009d00:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009d04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d08:	f000 b9ac 	b.w	800a064 <__retarget_lock_init_recursive>
 8009d0c:	bd10      	pop	{r4, pc}
 8009d0e:	bf00      	nop
 8009d10:	08009ee5 	.word	0x08009ee5
 8009d14:	08009f07 	.word	0x08009f07
 8009d18:	08009f3f 	.word	0x08009f3f
 8009d1c:	08009f63 	.word	0x08009f63
 8009d20:	20002e70 	.word	0x20002e70

08009d24 <stdio_exit_handler>:
 8009d24:	4a02      	ldr	r2, [pc, #8]	; (8009d30 <stdio_exit_handler+0xc>)
 8009d26:	4903      	ldr	r1, [pc, #12]	; (8009d34 <stdio_exit_handler+0x10>)
 8009d28:	4803      	ldr	r0, [pc, #12]	; (8009d38 <stdio_exit_handler+0x14>)
 8009d2a:	f000 b869 	b.w	8009e00 <_fwalk_sglue>
 8009d2e:	bf00      	nop
 8009d30:	20000010 	.word	0x20000010
 8009d34:	0800ba31 	.word	0x0800ba31
 8009d38:	2000001c 	.word	0x2000001c

08009d3c <cleanup_stdio>:
 8009d3c:	6841      	ldr	r1, [r0, #4]
 8009d3e:	4b0c      	ldr	r3, [pc, #48]	; (8009d70 <cleanup_stdio+0x34>)
 8009d40:	4299      	cmp	r1, r3
 8009d42:	b510      	push	{r4, lr}
 8009d44:	4604      	mov	r4, r0
 8009d46:	d001      	beq.n	8009d4c <cleanup_stdio+0x10>
 8009d48:	f001 fe72 	bl	800ba30 <_fflush_r>
 8009d4c:	68a1      	ldr	r1, [r4, #8]
 8009d4e:	4b09      	ldr	r3, [pc, #36]	; (8009d74 <cleanup_stdio+0x38>)
 8009d50:	4299      	cmp	r1, r3
 8009d52:	d002      	beq.n	8009d5a <cleanup_stdio+0x1e>
 8009d54:	4620      	mov	r0, r4
 8009d56:	f001 fe6b 	bl	800ba30 <_fflush_r>
 8009d5a:	68e1      	ldr	r1, [r4, #12]
 8009d5c:	4b06      	ldr	r3, [pc, #24]	; (8009d78 <cleanup_stdio+0x3c>)
 8009d5e:	4299      	cmp	r1, r3
 8009d60:	d004      	beq.n	8009d6c <cleanup_stdio+0x30>
 8009d62:	4620      	mov	r0, r4
 8009d64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d68:	f001 be62 	b.w	800ba30 <_fflush_r>
 8009d6c:	bd10      	pop	{r4, pc}
 8009d6e:	bf00      	nop
 8009d70:	20002e70 	.word	0x20002e70
 8009d74:	20002ed8 	.word	0x20002ed8
 8009d78:	20002f40 	.word	0x20002f40

08009d7c <global_stdio_init.part.0>:
 8009d7c:	b510      	push	{r4, lr}
 8009d7e:	4b0b      	ldr	r3, [pc, #44]	; (8009dac <global_stdio_init.part.0+0x30>)
 8009d80:	4c0b      	ldr	r4, [pc, #44]	; (8009db0 <global_stdio_init.part.0+0x34>)
 8009d82:	4a0c      	ldr	r2, [pc, #48]	; (8009db4 <global_stdio_init.part.0+0x38>)
 8009d84:	601a      	str	r2, [r3, #0]
 8009d86:	4620      	mov	r0, r4
 8009d88:	2200      	movs	r2, #0
 8009d8a:	2104      	movs	r1, #4
 8009d8c:	f7ff ff94 	bl	8009cb8 <std>
 8009d90:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009d94:	2201      	movs	r2, #1
 8009d96:	2109      	movs	r1, #9
 8009d98:	f7ff ff8e 	bl	8009cb8 <std>
 8009d9c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009da0:	2202      	movs	r2, #2
 8009da2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009da6:	2112      	movs	r1, #18
 8009da8:	f7ff bf86 	b.w	8009cb8 <std>
 8009dac:	20002fa8 	.word	0x20002fa8
 8009db0:	20002e70 	.word	0x20002e70
 8009db4:	08009d25 	.word	0x08009d25

08009db8 <__sfp_lock_acquire>:
 8009db8:	4801      	ldr	r0, [pc, #4]	; (8009dc0 <__sfp_lock_acquire+0x8>)
 8009dba:	f000 b954 	b.w	800a066 <__retarget_lock_acquire_recursive>
 8009dbe:	bf00      	nop
 8009dc0:	20002fb1 	.word	0x20002fb1

08009dc4 <__sfp_lock_release>:
 8009dc4:	4801      	ldr	r0, [pc, #4]	; (8009dcc <__sfp_lock_release+0x8>)
 8009dc6:	f000 b94f 	b.w	800a068 <__retarget_lock_release_recursive>
 8009dca:	bf00      	nop
 8009dcc:	20002fb1 	.word	0x20002fb1

08009dd0 <__sinit>:
 8009dd0:	b510      	push	{r4, lr}
 8009dd2:	4604      	mov	r4, r0
 8009dd4:	f7ff fff0 	bl	8009db8 <__sfp_lock_acquire>
 8009dd8:	6a23      	ldr	r3, [r4, #32]
 8009dda:	b11b      	cbz	r3, 8009de4 <__sinit+0x14>
 8009ddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009de0:	f7ff bff0 	b.w	8009dc4 <__sfp_lock_release>
 8009de4:	4b04      	ldr	r3, [pc, #16]	; (8009df8 <__sinit+0x28>)
 8009de6:	6223      	str	r3, [r4, #32]
 8009de8:	4b04      	ldr	r3, [pc, #16]	; (8009dfc <__sinit+0x2c>)
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d1f5      	bne.n	8009ddc <__sinit+0xc>
 8009df0:	f7ff ffc4 	bl	8009d7c <global_stdio_init.part.0>
 8009df4:	e7f2      	b.n	8009ddc <__sinit+0xc>
 8009df6:	bf00      	nop
 8009df8:	08009d3d 	.word	0x08009d3d
 8009dfc:	20002fa8 	.word	0x20002fa8

08009e00 <_fwalk_sglue>:
 8009e00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e04:	4607      	mov	r7, r0
 8009e06:	4688      	mov	r8, r1
 8009e08:	4614      	mov	r4, r2
 8009e0a:	2600      	movs	r6, #0
 8009e0c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009e10:	f1b9 0901 	subs.w	r9, r9, #1
 8009e14:	d505      	bpl.n	8009e22 <_fwalk_sglue+0x22>
 8009e16:	6824      	ldr	r4, [r4, #0]
 8009e18:	2c00      	cmp	r4, #0
 8009e1a:	d1f7      	bne.n	8009e0c <_fwalk_sglue+0xc>
 8009e1c:	4630      	mov	r0, r6
 8009e1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e22:	89ab      	ldrh	r3, [r5, #12]
 8009e24:	2b01      	cmp	r3, #1
 8009e26:	d907      	bls.n	8009e38 <_fwalk_sglue+0x38>
 8009e28:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009e2c:	3301      	adds	r3, #1
 8009e2e:	d003      	beq.n	8009e38 <_fwalk_sglue+0x38>
 8009e30:	4629      	mov	r1, r5
 8009e32:	4638      	mov	r0, r7
 8009e34:	47c0      	blx	r8
 8009e36:	4306      	orrs	r6, r0
 8009e38:	3568      	adds	r5, #104	; 0x68
 8009e3a:	e7e9      	b.n	8009e10 <_fwalk_sglue+0x10>

08009e3c <sniprintf>:
 8009e3c:	b40c      	push	{r2, r3}
 8009e3e:	b530      	push	{r4, r5, lr}
 8009e40:	4b17      	ldr	r3, [pc, #92]	; (8009ea0 <sniprintf+0x64>)
 8009e42:	1e0c      	subs	r4, r1, #0
 8009e44:	681d      	ldr	r5, [r3, #0]
 8009e46:	b09d      	sub	sp, #116	; 0x74
 8009e48:	da08      	bge.n	8009e5c <sniprintf+0x20>
 8009e4a:	238b      	movs	r3, #139	; 0x8b
 8009e4c:	602b      	str	r3, [r5, #0]
 8009e4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009e52:	b01d      	add	sp, #116	; 0x74
 8009e54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009e58:	b002      	add	sp, #8
 8009e5a:	4770      	bx	lr
 8009e5c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009e60:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009e64:	bf14      	ite	ne
 8009e66:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8009e6a:	4623      	moveq	r3, r4
 8009e6c:	9304      	str	r3, [sp, #16]
 8009e6e:	9307      	str	r3, [sp, #28]
 8009e70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009e74:	9002      	str	r0, [sp, #8]
 8009e76:	9006      	str	r0, [sp, #24]
 8009e78:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009e7c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009e7e:	ab21      	add	r3, sp, #132	; 0x84
 8009e80:	a902      	add	r1, sp, #8
 8009e82:	4628      	mov	r0, r5
 8009e84:	9301      	str	r3, [sp, #4]
 8009e86:	f001 fc4f 	bl	800b728 <_svfiprintf_r>
 8009e8a:	1c43      	adds	r3, r0, #1
 8009e8c:	bfbc      	itt	lt
 8009e8e:	238b      	movlt	r3, #139	; 0x8b
 8009e90:	602b      	strlt	r3, [r5, #0]
 8009e92:	2c00      	cmp	r4, #0
 8009e94:	d0dd      	beq.n	8009e52 <sniprintf+0x16>
 8009e96:	9b02      	ldr	r3, [sp, #8]
 8009e98:	2200      	movs	r2, #0
 8009e9a:	701a      	strb	r2, [r3, #0]
 8009e9c:	e7d9      	b.n	8009e52 <sniprintf+0x16>
 8009e9e:	bf00      	nop
 8009ea0:	20000068 	.word	0x20000068

08009ea4 <siprintf>:
 8009ea4:	b40e      	push	{r1, r2, r3}
 8009ea6:	b500      	push	{lr}
 8009ea8:	b09c      	sub	sp, #112	; 0x70
 8009eaa:	ab1d      	add	r3, sp, #116	; 0x74
 8009eac:	9002      	str	r0, [sp, #8]
 8009eae:	9006      	str	r0, [sp, #24]
 8009eb0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009eb4:	4809      	ldr	r0, [pc, #36]	; (8009edc <siprintf+0x38>)
 8009eb6:	9107      	str	r1, [sp, #28]
 8009eb8:	9104      	str	r1, [sp, #16]
 8009eba:	4909      	ldr	r1, [pc, #36]	; (8009ee0 <siprintf+0x3c>)
 8009ebc:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ec0:	9105      	str	r1, [sp, #20]
 8009ec2:	6800      	ldr	r0, [r0, #0]
 8009ec4:	9301      	str	r3, [sp, #4]
 8009ec6:	a902      	add	r1, sp, #8
 8009ec8:	f001 fc2e 	bl	800b728 <_svfiprintf_r>
 8009ecc:	9b02      	ldr	r3, [sp, #8]
 8009ece:	2200      	movs	r2, #0
 8009ed0:	701a      	strb	r2, [r3, #0]
 8009ed2:	b01c      	add	sp, #112	; 0x70
 8009ed4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ed8:	b003      	add	sp, #12
 8009eda:	4770      	bx	lr
 8009edc:	20000068 	.word	0x20000068
 8009ee0:	ffff0208 	.word	0xffff0208

08009ee4 <__sread>:
 8009ee4:	b510      	push	{r4, lr}
 8009ee6:	460c      	mov	r4, r1
 8009ee8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009eec:	f000 f86c 	bl	8009fc8 <_read_r>
 8009ef0:	2800      	cmp	r0, #0
 8009ef2:	bfab      	itete	ge
 8009ef4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009ef6:	89a3      	ldrhlt	r3, [r4, #12]
 8009ef8:	181b      	addge	r3, r3, r0
 8009efa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009efe:	bfac      	ite	ge
 8009f00:	6563      	strge	r3, [r4, #84]	; 0x54
 8009f02:	81a3      	strhlt	r3, [r4, #12]
 8009f04:	bd10      	pop	{r4, pc}

08009f06 <__swrite>:
 8009f06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f0a:	461f      	mov	r7, r3
 8009f0c:	898b      	ldrh	r3, [r1, #12]
 8009f0e:	05db      	lsls	r3, r3, #23
 8009f10:	4605      	mov	r5, r0
 8009f12:	460c      	mov	r4, r1
 8009f14:	4616      	mov	r6, r2
 8009f16:	d505      	bpl.n	8009f24 <__swrite+0x1e>
 8009f18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f1c:	2302      	movs	r3, #2
 8009f1e:	2200      	movs	r2, #0
 8009f20:	f000 f840 	bl	8009fa4 <_lseek_r>
 8009f24:	89a3      	ldrh	r3, [r4, #12]
 8009f26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009f2e:	81a3      	strh	r3, [r4, #12]
 8009f30:	4632      	mov	r2, r6
 8009f32:	463b      	mov	r3, r7
 8009f34:	4628      	mov	r0, r5
 8009f36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f3a:	f000 b857 	b.w	8009fec <_write_r>

08009f3e <__sseek>:
 8009f3e:	b510      	push	{r4, lr}
 8009f40:	460c      	mov	r4, r1
 8009f42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f46:	f000 f82d 	bl	8009fa4 <_lseek_r>
 8009f4a:	1c43      	adds	r3, r0, #1
 8009f4c:	89a3      	ldrh	r3, [r4, #12]
 8009f4e:	bf15      	itete	ne
 8009f50:	6560      	strne	r0, [r4, #84]	; 0x54
 8009f52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009f56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009f5a:	81a3      	strheq	r3, [r4, #12]
 8009f5c:	bf18      	it	ne
 8009f5e:	81a3      	strhne	r3, [r4, #12]
 8009f60:	bd10      	pop	{r4, pc}

08009f62 <__sclose>:
 8009f62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f66:	f000 b80d 	b.w	8009f84 <_close_r>

08009f6a <memset>:
 8009f6a:	4402      	add	r2, r0
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	4293      	cmp	r3, r2
 8009f70:	d100      	bne.n	8009f74 <memset+0xa>
 8009f72:	4770      	bx	lr
 8009f74:	f803 1b01 	strb.w	r1, [r3], #1
 8009f78:	e7f9      	b.n	8009f6e <memset+0x4>
	...

08009f7c <_localeconv_r>:
 8009f7c:	4800      	ldr	r0, [pc, #0]	; (8009f80 <_localeconv_r+0x4>)
 8009f7e:	4770      	bx	lr
 8009f80:	2000015c 	.word	0x2000015c

08009f84 <_close_r>:
 8009f84:	b538      	push	{r3, r4, r5, lr}
 8009f86:	4d06      	ldr	r5, [pc, #24]	; (8009fa0 <_close_r+0x1c>)
 8009f88:	2300      	movs	r3, #0
 8009f8a:	4604      	mov	r4, r0
 8009f8c:	4608      	mov	r0, r1
 8009f8e:	602b      	str	r3, [r5, #0]
 8009f90:	f7f7 fdd7 	bl	8001b42 <_close>
 8009f94:	1c43      	adds	r3, r0, #1
 8009f96:	d102      	bne.n	8009f9e <_close_r+0x1a>
 8009f98:	682b      	ldr	r3, [r5, #0]
 8009f9a:	b103      	cbz	r3, 8009f9e <_close_r+0x1a>
 8009f9c:	6023      	str	r3, [r4, #0]
 8009f9e:	bd38      	pop	{r3, r4, r5, pc}
 8009fa0:	20002fac 	.word	0x20002fac

08009fa4 <_lseek_r>:
 8009fa4:	b538      	push	{r3, r4, r5, lr}
 8009fa6:	4d07      	ldr	r5, [pc, #28]	; (8009fc4 <_lseek_r+0x20>)
 8009fa8:	4604      	mov	r4, r0
 8009faa:	4608      	mov	r0, r1
 8009fac:	4611      	mov	r1, r2
 8009fae:	2200      	movs	r2, #0
 8009fb0:	602a      	str	r2, [r5, #0]
 8009fb2:	461a      	mov	r2, r3
 8009fb4:	f7f7 fdec 	bl	8001b90 <_lseek>
 8009fb8:	1c43      	adds	r3, r0, #1
 8009fba:	d102      	bne.n	8009fc2 <_lseek_r+0x1e>
 8009fbc:	682b      	ldr	r3, [r5, #0]
 8009fbe:	b103      	cbz	r3, 8009fc2 <_lseek_r+0x1e>
 8009fc0:	6023      	str	r3, [r4, #0]
 8009fc2:	bd38      	pop	{r3, r4, r5, pc}
 8009fc4:	20002fac 	.word	0x20002fac

08009fc8 <_read_r>:
 8009fc8:	b538      	push	{r3, r4, r5, lr}
 8009fca:	4d07      	ldr	r5, [pc, #28]	; (8009fe8 <_read_r+0x20>)
 8009fcc:	4604      	mov	r4, r0
 8009fce:	4608      	mov	r0, r1
 8009fd0:	4611      	mov	r1, r2
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	602a      	str	r2, [r5, #0]
 8009fd6:	461a      	mov	r2, r3
 8009fd8:	f7f7 fd7a 	bl	8001ad0 <_read>
 8009fdc:	1c43      	adds	r3, r0, #1
 8009fde:	d102      	bne.n	8009fe6 <_read_r+0x1e>
 8009fe0:	682b      	ldr	r3, [r5, #0]
 8009fe2:	b103      	cbz	r3, 8009fe6 <_read_r+0x1e>
 8009fe4:	6023      	str	r3, [r4, #0]
 8009fe6:	bd38      	pop	{r3, r4, r5, pc}
 8009fe8:	20002fac 	.word	0x20002fac

08009fec <_write_r>:
 8009fec:	b538      	push	{r3, r4, r5, lr}
 8009fee:	4d07      	ldr	r5, [pc, #28]	; (800a00c <_write_r+0x20>)
 8009ff0:	4604      	mov	r4, r0
 8009ff2:	4608      	mov	r0, r1
 8009ff4:	4611      	mov	r1, r2
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	602a      	str	r2, [r5, #0]
 8009ffa:	461a      	mov	r2, r3
 8009ffc:	f7f7 fd85 	bl	8001b0a <_write>
 800a000:	1c43      	adds	r3, r0, #1
 800a002:	d102      	bne.n	800a00a <_write_r+0x1e>
 800a004:	682b      	ldr	r3, [r5, #0]
 800a006:	b103      	cbz	r3, 800a00a <_write_r+0x1e>
 800a008:	6023      	str	r3, [r4, #0]
 800a00a:	bd38      	pop	{r3, r4, r5, pc}
 800a00c:	20002fac 	.word	0x20002fac

0800a010 <__errno>:
 800a010:	4b01      	ldr	r3, [pc, #4]	; (800a018 <__errno+0x8>)
 800a012:	6818      	ldr	r0, [r3, #0]
 800a014:	4770      	bx	lr
 800a016:	bf00      	nop
 800a018:	20000068 	.word	0x20000068

0800a01c <__libc_init_array>:
 800a01c:	b570      	push	{r4, r5, r6, lr}
 800a01e:	4d0d      	ldr	r5, [pc, #52]	; (800a054 <__libc_init_array+0x38>)
 800a020:	4c0d      	ldr	r4, [pc, #52]	; (800a058 <__libc_init_array+0x3c>)
 800a022:	1b64      	subs	r4, r4, r5
 800a024:	10a4      	asrs	r4, r4, #2
 800a026:	2600      	movs	r6, #0
 800a028:	42a6      	cmp	r6, r4
 800a02a:	d109      	bne.n	800a040 <__libc_init_array+0x24>
 800a02c:	4d0b      	ldr	r5, [pc, #44]	; (800a05c <__libc_init_array+0x40>)
 800a02e:	4c0c      	ldr	r4, [pc, #48]	; (800a060 <__libc_init_array+0x44>)
 800a030:	f002 f894 	bl	800c15c <_init>
 800a034:	1b64      	subs	r4, r4, r5
 800a036:	10a4      	asrs	r4, r4, #2
 800a038:	2600      	movs	r6, #0
 800a03a:	42a6      	cmp	r6, r4
 800a03c:	d105      	bne.n	800a04a <__libc_init_array+0x2e>
 800a03e:	bd70      	pop	{r4, r5, r6, pc}
 800a040:	f855 3b04 	ldr.w	r3, [r5], #4
 800a044:	4798      	blx	r3
 800a046:	3601      	adds	r6, #1
 800a048:	e7ee      	b.n	800a028 <__libc_init_array+0xc>
 800a04a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a04e:	4798      	blx	r3
 800a050:	3601      	adds	r6, #1
 800a052:	e7f2      	b.n	800a03a <__libc_init_array+0x1e>
 800a054:	0800c5a4 	.word	0x0800c5a4
 800a058:	0800c5a4 	.word	0x0800c5a4
 800a05c:	0800c5a4 	.word	0x0800c5a4
 800a060:	0800c5a8 	.word	0x0800c5a8

0800a064 <__retarget_lock_init_recursive>:
 800a064:	4770      	bx	lr

0800a066 <__retarget_lock_acquire_recursive>:
 800a066:	4770      	bx	lr

0800a068 <__retarget_lock_release_recursive>:
 800a068:	4770      	bx	lr

0800a06a <memcpy>:
 800a06a:	440a      	add	r2, r1
 800a06c:	4291      	cmp	r1, r2
 800a06e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a072:	d100      	bne.n	800a076 <memcpy+0xc>
 800a074:	4770      	bx	lr
 800a076:	b510      	push	{r4, lr}
 800a078:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a07c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a080:	4291      	cmp	r1, r2
 800a082:	d1f9      	bne.n	800a078 <memcpy+0xe>
 800a084:	bd10      	pop	{r4, pc}

0800a086 <quorem>:
 800a086:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a08a:	6903      	ldr	r3, [r0, #16]
 800a08c:	690c      	ldr	r4, [r1, #16]
 800a08e:	42a3      	cmp	r3, r4
 800a090:	4607      	mov	r7, r0
 800a092:	db7e      	blt.n	800a192 <quorem+0x10c>
 800a094:	3c01      	subs	r4, #1
 800a096:	f101 0814 	add.w	r8, r1, #20
 800a09a:	f100 0514 	add.w	r5, r0, #20
 800a09e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a0a2:	9301      	str	r3, [sp, #4]
 800a0a4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a0a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a0ac:	3301      	adds	r3, #1
 800a0ae:	429a      	cmp	r2, r3
 800a0b0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a0b4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a0b8:	fbb2 f6f3 	udiv	r6, r2, r3
 800a0bc:	d331      	bcc.n	800a122 <quorem+0x9c>
 800a0be:	f04f 0e00 	mov.w	lr, #0
 800a0c2:	4640      	mov	r0, r8
 800a0c4:	46ac      	mov	ip, r5
 800a0c6:	46f2      	mov	sl, lr
 800a0c8:	f850 2b04 	ldr.w	r2, [r0], #4
 800a0cc:	b293      	uxth	r3, r2
 800a0ce:	fb06 e303 	mla	r3, r6, r3, lr
 800a0d2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a0d6:	0c1a      	lsrs	r2, r3, #16
 800a0d8:	b29b      	uxth	r3, r3
 800a0da:	ebaa 0303 	sub.w	r3, sl, r3
 800a0de:	f8dc a000 	ldr.w	sl, [ip]
 800a0e2:	fa13 f38a 	uxtah	r3, r3, sl
 800a0e6:	fb06 220e 	mla	r2, r6, lr, r2
 800a0ea:	9300      	str	r3, [sp, #0]
 800a0ec:	9b00      	ldr	r3, [sp, #0]
 800a0ee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a0f2:	b292      	uxth	r2, r2
 800a0f4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a0f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a0fc:	f8bd 3000 	ldrh.w	r3, [sp]
 800a100:	4581      	cmp	r9, r0
 800a102:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a106:	f84c 3b04 	str.w	r3, [ip], #4
 800a10a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a10e:	d2db      	bcs.n	800a0c8 <quorem+0x42>
 800a110:	f855 300b 	ldr.w	r3, [r5, fp]
 800a114:	b92b      	cbnz	r3, 800a122 <quorem+0x9c>
 800a116:	9b01      	ldr	r3, [sp, #4]
 800a118:	3b04      	subs	r3, #4
 800a11a:	429d      	cmp	r5, r3
 800a11c:	461a      	mov	r2, r3
 800a11e:	d32c      	bcc.n	800a17a <quorem+0xf4>
 800a120:	613c      	str	r4, [r7, #16]
 800a122:	4638      	mov	r0, r7
 800a124:	f001 f9a6 	bl	800b474 <__mcmp>
 800a128:	2800      	cmp	r0, #0
 800a12a:	db22      	blt.n	800a172 <quorem+0xec>
 800a12c:	3601      	adds	r6, #1
 800a12e:	4629      	mov	r1, r5
 800a130:	2000      	movs	r0, #0
 800a132:	f858 2b04 	ldr.w	r2, [r8], #4
 800a136:	f8d1 c000 	ldr.w	ip, [r1]
 800a13a:	b293      	uxth	r3, r2
 800a13c:	1ac3      	subs	r3, r0, r3
 800a13e:	0c12      	lsrs	r2, r2, #16
 800a140:	fa13 f38c 	uxtah	r3, r3, ip
 800a144:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a148:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a14c:	b29b      	uxth	r3, r3
 800a14e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a152:	45c1      	cmp	r9, r8
 800a154:	f841 3b04 	str.w	r3, [r1], #4
 800a158:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a15c:	d2e9      	bcs.n	800a132 <quorem+0xac>
 800a15e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a162:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a166:	b922      	cbnz	r2, 800a172 <quorem+0xec>
 800a168:	3b04      	subs	r3, #4
 800a16a:	429d      	cmp	r5, r3
 800a16c:	461a      	mov	r2, r3
 800a16e:	d30a      	bcc.n	800a186 <quorem+0x100>
 800a170:	613c      	str	r4, [r7, #16]
 800a172:	4630      	mov	r0, r6
 800a174:	b003      	add	sp, #12
 800a176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a17a:	6812      	ldr	r2, [r2, #0]
 800a17c:	3b04      	subs	r3, #4
 800a17e:	2a00      	cmp	r2, #0
 800a180:	d1ce      	bne.n	800a120 <quorem+0x9a>
 800a182:	3c01      	subs	r4, #1
 800a184:	e7c9      	b.n	800a11a <quorem+0x94>
 800a186:	6812      	ldr	r2, [r2, #0]
 800a188:	3b04      	subs	r3, #4
 800a18a:	2a00      	cmp	r2, #0
 800a18c:	d1f0      	bne.n	800a170 <quorem+0xea>
 800a18e:	3c01      	subs	r4, #1
 800a190:	e7eb      	b.n	800a16a <quorem+0xe4>
 800a192:	2000      	movs	r0, #0
 800a194:	e7ee      	b.n	800a174 <quorem+0xee>
	...

0800a198 <_dtoa_r>:
 800a198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a19c:	ed2d 8b04 	vpush	{d8-d9}
 800a1a0:	69c5      	ldr	r5, [r0, #28]
 800a1a2:	b093      	sub	sp, #76	; 0x4c
 800a1a4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a1a8:	ec57 6b10 	vmov	r6, r7, d0
 800a1ac:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a1b0:	9107      	str	r1, [sp, #28]
 800a1b2:	4604      	mov	r4, r0
 800a1b4:	920a      	str	r2, [sp, #40]	; 0x28
 800a1b6:	930d      	str	r3, [sp, #52]	; 0x34
 800a1b8:	b975      	cbnz	r5, 800a1d8 <_dtoa_r+0x40>
 800a1ba:	2010      	movs	r0, #16
 800a1bc:	f000 fe2a 	bl	800ae14 <malloc>
 800a1c0:	4602      	mov	r2, r0
 800a1c2:	61e0      	str	r0, [r4, #28]
 800a1c4:	b920      	cbnz	r0, 800a1d0 <_dtoa_r+0x38>
 800a1c6:	4bae      	ldr	r3, [pc, #696]	; (800a480 <_dtoa_r+0x2e8>)
 800a1c8:	21ef      	movs	r1, #239	; 0xef
 800a1ca:	48ae      	ldr	r0, [pc, #696]	; (800a484 <_dtoa_r+0x2ec>)
 800a1cc:	f001 fc82 	bl	800bad4 <__assert_func>
 800a1d0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a1d4:	6005      	str	r5, [r0, #0]
 800a1d6:	60c5      	str	r5, [r0, #12]
 800a1d8:	69e3      	ldr	r3, [r4, #28]
 800a1da:	6819      	ldr	r1, [r3, #0]
 800a1dc:	b151      	cbz	r1, 800a1f4 <_dtoa_r+0x5c>
 800a1de:	685a      	ldr	r2, [r3, #4]
 800a1e0:	604a      	str	r2, [r1, #4]
 800a1e2:	2301      	movs	r3, #1
 800a1e4:	4093      	lsls	r3, r2
 800a1e6:	608b      	str	r3, [r1, #8]
 800a1e8:	4620      	mov	r0, r4
 800a1ea:	f000 ff07 	bl	800affc <_Bfree>
 800a1ee:	69e3      	ldr	r3, [r4, #28]
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	601a      	str	r2, [r3, #0]
 800a1f4:	1e3b      	subs	r3, r7, #0
 800a1f6:	bfbb      	ittet	lt
 800a1f8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a1fc:	9303      	strlt	r3, [sp, #12]
 800a1fe:	2300      	movge	r3, #0
 800a200:	2201      	movlt	r2, #1
 800a202:	bfac      	ite	ge
 800a204:	f8c8 3000 	strge.w	r3, [r8]
 800a208:	f8c8 2000 	strlt.w	r2, [r8]
 800a20c:	4b9e      	ldr	r3, [pc, #632]	; (800a488 <_dtoa_r+0x2f0>)
 800a20e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a212:	ea33 0308 	bics.w	r3, r3, r8
 800a216:	d11b      	bne.n	800a250 <_dtoa_r+0xb8>
 800a218:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a21a:	f242 730f 	movw	r3, #9999	; 0x270f
 800a21e:	6013      	str	r3, [r2, #0]
 800a220:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a224:	4333      	orrs	r3, r6
 800a226:	f000 8593 	beq.w	800ad50 <_dtoa_r+0xbb8>
 800a22a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a22c:	b963      	cbnz	r3, 800a248 <_dtoa_r+0xb0>
 800a22e:	4b97      	ldr	r3, [pc, #604]	; (800a48c <_dtoa_r+0x2f4>)
 800a230:	e027      	b.n	800a282 <_dtoa_r+0xea>
 800a232:	4b97      	ldr	r3, [pc, #604]	; (800a490 <_dtoa_r+0x2f8>)
 800a234:	9300      	str	r3, [sp, #0]
 800a236:	3308      	adds	r3, #8
 800a238:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a23a:	6013      	str	r3, [r2, #0]
 800a23c:	9800      	ldr	r0, [sp, #0]
 800a23e:	b013      	add	sp, #76	; 0x4c
 800a240:	ecbd 8b04 	vpop	{d8-d9}
 800a244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a248:	4b90      	ldr	r3, [pc, #576]	; (800a48c <_dtoa_r+0x2f4>)
 800a24a:	9300      	str	r3, [sp, #0]
 800a24c:	3303      	adds	r3, #3
 800a24e:	e7f3      	b.n	800a238 <_dtoa_r+0xa0>
 800a250:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a254:	2200      	movs	r2, #0
 800a256:	ec51 0b17 	vmov	r0, r1, d7
 800a25a:	eeb0 8a47 	vmov.f32	s16, s14
 800a25e:	eef0 8a67 	vmov.f32	s17, s15
 800a262:	2300      	movs	r3, #0
 800a264:	f7f6 fc30 	bl	8000ac8 <__aeabi_dcmpeq>
 800a268:	4681      	mov	r9, r0
 800a26a:	b160      	cbz	r0, 800a286 <_dtoa_r+0xee>
 800a26c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a26e:	2301      	movs	r3, #1
 800a270:	6013      	str	r3, [r2, #0]
 800a272:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a274:	2b00      	cmp	r3, #0
 800a276:	f000 8568 	beq.w	800ad4a <_dtoa_r+0xbb2>
 800a27a:	4b86      	ldr	r3, [pc, #536]	; (800a494 <_dtoa_r+0x2fc>)
 800a27c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a27e:	6013      	str	r3, [r2, #0]
 800a280:	3b01      	subs	r3, #1
 800a282:	9300      	str	r3, [sp, #0]
 800a284:	e7da      	b.n	800a23c <_dtoa_r+0xa4>
 800a286:	aa10      	add	r2, sp, #64	; 0x40
 800a288:	a911      	add	r1, sp, #68	; 0x44
 800a28a:	4620      	mov	r0, r4
 800a28c:	eeb0 0a48 	vmov.f32	s0, s16
 800a290:	eef0 0a68 	vmov.f32	s1, s17
 800a294:	f001 f994 	bl	800b5c0 <__d2b>
 800a298:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a29c:	4682      	mov	sl, r0
 800a29e:	2d00      	cmp	r5, #0
 800a2a0:	d07f      	beq.n	800a3a2 <_dtoa_r+0x20a>
 800a2a2:	ee18 3a90 	vmov	r3, s17
 800a2a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a2aa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a2ae:	ec51 0b18 	vmov	r0, r1, d8
 800a2b2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a2b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a2ba:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a2be:	4619      	mov	r1, r3
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	4b75      	ldr	r3, [pc, #468]	; (800a498 <_dtoa_r+0x300>)
 800a2c4:	f7f5 ffe0 	bl	8000288 <__aeabi_dsub>
 800a2c8:	a367      	add	r3, pc, #412	; (adr r3, 800a468 <_dtoa_r+0x2d0>)
 800a2ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ce:	f7f6 f993 	bl	80005f8 <__aeabi_dmul>
 800a2d2:	a367      	add	r3, pc, #412	; (adr r3, 800a470 <_dtoa_r+0x2d8>)
 800a2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2d8:	f7f5 ffd8 	bl	800028c <__adddf3>
 800a2dc:	4606      	mov	r6, r0
 800a2de:	4628      	mov	r0, r5
 800a2e0:	460f      	mov	r7, r1
 800a2e2:	f7f6 f91f 	bl	8000524 <__aeabi_i2d>
 800a2e6:	a364      	add	r3, pc, #400	; (adr r3, 800a478 <_dtoa_r+0x2e0>)
 800a2e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ec:	f7f6 f984 	bl	80005f8 <__aeabi_dmul>
 800a2f0:	4602      	mov	r2, r0
 800a2f2:	460b      	mov	r3, r1
 800a2f4:	4630      	mov	r0, r6
 800a2f6:	4639      	mov	r1, r7
 800a2f8:	f7f5 ffc8 	bl	800028c <__adddf3>
 800a2fc:	4606      	mov	r6, r0
 800a2fe:	460f      	mov	r7, r1
 800a300:	f7f6 fc2a 	bl	8000b58 <__aeabi_d2iz>
 800a304:	2200      	movs	r2, #0
 800a306:	4683      	mov	fp, r0
 800a308:	2300      	movs	r3, #0
 800a30a:	4630      	mov	r0, r6
 800a30c:	4639      	mov	r1, r7
 800a30e:	f7f6 fbe5 	bl	8000adc <__aeabi_dcmplt>
 800a312:	b148      	cbz	r0, 800a328 <_dtoa_r+0x190>
 800a314:	4658      	mov	r0, fp
 800a316:	f7f6 f905 	bl	8000524 <__aeabi_i2d>
 800a31a:	4632      	mov	r2, r6
 800a31c:	463b      	mov	r3, r7
 800a31e:	f7f6 fbd3 	bl	8000ac8 <__aeabi_dcmpeq>
 800a322:	b908      	cbnz	r0, 800a328 <_dtoa_r+0x190>
 800a324:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a328:	f1bb 0f16 	cmp.w	fp, #22
 800a32c:	d857      	bhi.n	800a3de <_dtoa_r+0x246>
 800a32e:	4b5b      	ldr	r3, [pc, #364]	; (800a49c <_dtoa_r+0x304>)
 800a330:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a334:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a338:	ec51 0b18 	vmov	r0, r1, d8
 800a33c:	f7f6 fbce 	bl	8000adc <__aeabi_dcmplt>
 800a340:	2800      	cmp	r0, #0
 800a342:	d04e      	beq.n	800a3e2 <_dtoa_r+0x24a>
 800a344:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a348:	2300      	movs	r3, #0
 800a34a:	930c      	str	r3, [sp, #48]	; 0x30
 800a34c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a34e:	1b5b      	subs	r3, r3, r5
 800a350:	1e5a      	subs	r2, r3, #1
 800a352:	bf45      	ittet	mi
 800a354:	f1c3 0301 	rsbmi	r3, r3, #1
 800a358:	9305      	strmi	r3, [sp, #20]
 800a35a:	2300      	movpl	r3, #0
 800a35c:	2300      	movmi	r3, #0
 800a35e:	9206      	str	r2, [sp, #24]
 800a360:	bf54      	ite	pl
 800a362:	9305      	strpl	r3, [sp, #20]
 800a364:	9306      	strmi	r3, [sp, #24]
 800a366:	f1bb 0f00 	cmp.w	fp, #0
 800a36a:	db3c      	blt.n	800a3e6 <_dtoa_r+0x24e>
 800a36c:	9b06      	ldr	r3, [sp, #24]
 800a36e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a372:	445b      	add	r3, fp
 800a374:	9306      	str	r3, [sp, #24]
 800a376:	2300      	movs	r3, #0
 800a378:	9308      	str	r3, [sp, #32]
 800a37a:	9b07      	ldr	r3, [sp, #28]
 800a37c:	2b09      	cmp	r3, #9
 800a37e:	d868      	bhi.n	800a452 <_dtoa_r+0x2ba>
 800a380:	2b05      	cmp	r3, #5
 800a382:	bfc4      	itt	gt
 800a384:	3b04      	subgt	r3, #4
 800a386:	9307      	strgt	r3, [sp, #28]
 800a388:	9b07      	ldr	r3, [sp, #28]
 800a38a:	f1a3 0302 	sub.w	r3, r3, #2
 800a38e:	bfcc      	ite	gt
 800a390:	2500      	movgt	r5, #0
 800a392:	2501      	movle	r5, #1
 800a394:	2b03      	cmp	r3, #3
 800a396:	f200 8085 	bhi.w	800a4a4 <_dtoa_r+0x30c>
 800a39a:	e8df f003 	tbb	[pc, r3]
 800a39e:	3b2e      	.short	0x3b2e
 800a3a0:	5839      	.short	0x5839
 800a3a2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a3a6:	441d      	add	r5, r3
 800a3a8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a3ac:	2b20      	cmp	r3, #32
 800a3ae:	bfc1      	itttt	gt
 800a3b0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a3b4:	fa08 f803 	lslgt.w	r8, r8, r3
 800a3b8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800a3bc:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a3c0:	bfd6      	itet	le
 800a3c2:	f1c3 0320 	rsble	r3, r3, #32
 800a3c6:	ea48 0003 	orrgt.w	r0, r8, r3
 800a3ca:	fa06 f003 	lslle.w	r0, r6, r3
 800a3ce:	f7f6 f899 	bl	8000504 <__aeabi_ui2d>
 800a3d2:	2201      	movs	r2, #1
 800a3d4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a3d8:	3d01      	subs	r5, #1
 800a3da:	920e      	str	r2, [sp, #56]	; 0x38
 800a3dc:	e76f      	b.n	800a2be <_dtoa_r+0x126>
 800a3de:	2301      	movs	r3, #1
 800a3e0:	e7b3      	b.n	800a34a <_dtoa_r+0x1b2>
 800a3e2:	900c      	str	r0, [sp, #48]	; 0x30
 800a3e4:	e7b2      	b.n	800a34c <_dtoa_r+0x1b4>
 800a3e6:	9b05      	ldr	r3, [sp, #20]
 800a3e8:	eba3 030b 	sub.w	r3, r3, fp
 800a3ec:	9305      	str	r3, [sp, #20]
 800a3ee:	f1cb 0300 	rsb	r3, fp, #0
 800a3f2:	9308      	str	r3, [sp, #32]
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	930b      	str	r3, [sp, #44]	; 0x2c
 800a3f8:	e7bf      	b.n	800a37a <_dtoa_r+0x1e2>
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	9309      	str	r3, [sp, #36]	; 0x24
 800a3fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a400:	2b00      	cmp	r3, #0
 800a402:	dc52      	bgt.n	800a4aa <_dtoa_r+0x312>
 800a404:	2301      	movs	r3, #1
 800a406:	9301      	str	r3, [sp, #4]
 800a408:	9304      	str	r3, [sp, #16]
 800a40a:	461a      	mov	r2, r3
 800a40c:	920a      	str	r2, [sp, #40]	; 0x28
 800a40e:	e00b      	b.n	800a428 <_dtoa_r+0x290>
 800a410:	2301      	movs	r3, #1
 800a412:	e7f3      	b.n	800a3fc <_dtoa_r+0x264>
 800a414:	2300      	movs	r3, #0
 800a416:	9309      	str	r3, [sp, #36]	; 0x24
 800a418:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a41a:	445b      	add	r3, fp
 800a41c:	9301      	str	r3, [sp, #4]
 800a41e:	3301      	adds	r3, #1
 800a420:	2b01      	cmp	r3, #1
 800a422:	9304      	str	r3, [sp, #16]
 800a424:	bfb8      	it	lt
 800a426:	2301      	movlt	r3, #1
 800a428:	69e0      	ldr	r0, [r4, #28]
 800a42a:	2100      	movs	r1, #0
 800a42c:	2204      	movs	r2, #4
 800a42e:	f102 0614 	add.w	r6, r2, #20
 800a432:	429e      	cmp	r6, r3
 800a434:	d93d      	bls.n	800a4b2 <_dtoa_r+0x31a>
 800a436:	6041      	str	r1, [r0, #4]
 800a438:	4620      	mov	r0, r4
 800a43a:	f000 fd9f 	bl	800af7c <_Balloc>
 800a43e:	9000      	str	r0, [sp, #0]
 800a440:	2800      	cmp	r0, #0
 800a442:	d139      	bne.n	800a4b8 <_dtoa_r+0x320>
 800a444:	4b16      	ldr	r3, [pc, #88]	; (800a4a0 <_dtoa_r+0x308>)
 800a446:	4602      	mov	r2, r0
 800a448:	f240 11af 	movw	r1, #431	; 0x1af
 800a44c:	e6bd      	b.n	800a1ca <_dtoa_r+0x32>
 800a44e:	2301      	movs	r3, #1
 800a450:	e7e1      	b.n	800a416 <_dtoa_r+0x27e>
 800a452:	2501      	movs	r5, #1
 800a454:	2300      	movs	r3, #0
 800a456:	9307      	str	r3, [sp, #28]
 800a458:	9509      	str	r5, [sp, #36]	; 0x24
 800a45a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a45e:	9301      	str	r3, [sp, #4]
 800a460:	9304      	str	r3, [sp, #16]
 800a462:	2200      	movs	r2, #0
 800a464:	2312      	movs	r3, #18
 800a466:	e7d1      	b.n	800a40c <_dtoa_r+0x274>
 800a468:	636f4361 	.word	0x636f4361
 800a46c:	3fd287a7 	.word	0x3fd287a7
 800a470:	8b60c8b3 	.word	0x8b60c8b3
 800a474:	3fc68a28 	.word	0x3fc68a28
 800a478:	509f79fb 	.word	0x509f79fb
 800a47c:	3fd34413 	.word	0x3fd34413
 800a480:	0800c269 	.word	0x0800c269
 800a484:	0800c280 	.word	0x0800c280
 800a488:	7ff00000 	.word	0x7ff00000
 800a48c:	0800c265 	.word	0x0800c265
 800a490:	0800c25c 	.word	0x0800c25c
 800a494:	0800c239 	.word	0x0800c239
 800a498:	3ff80000 	.word	0x3ff80000
 800a49c:	0800c370 	.word	0x0800c370
 800a4a0:	0800c2d8 	.word	0x0800c2d8
 800a4a4:	2301      	movs	r3, #1
 800a4a6:	9309      	str	r3, [sp, #36]	; 0x24
 800a4a8:	e7d7      	b.n	800a45a <_dtoa_r+0x2c2>
 800a4aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4ac:	9301      	str	r3, [sp, #4]
 800a4ae:	9304      	str	r3, [sp, #16]
 800a4b0:	e7ba      	b.n	800a428 <_dtoa_r+0x290>
 800a4b2:	3101      	adds	r1, #1
 800a4b4:	0052      	lsls	r2, r2, #1
 800a4b6:	e7ba      	b.n	800a42e <_dtoa_r+0x296>
 800a4b8:	69e3      	ldr	r3, [r4, #28]
 800a4ba:	9a00      	ldr	r2, [sp, #0]
 800a4bc:	601a      	str	r2, [r3, #0]
 800a4be:	9b04      	ldr	r3, [sp, #16]
 800a4c0:	2b0e      	cmp	r3, #14
 800a4c2:	f200 80a8 	bhi.w	800a616 <_dtoa_r+0x47e>
 800a4c6:	2d00      	cmp	r5, #0
 800a4c8:	f000 80a5 	beq.w	800a616 <_dtoa_r+0x47e>
 800a4cc:	f1bb 0f00 	cmp.w	fp, #0
 800a4d0:	dd38      	ble.n	800a544 <_dtoa_r+0x3ac>
 800a4d2:	4bc0      	ldr	r3, [pc, #768]	; (800a7d4 <_dtoa_r+0x63c>)
 800a4d4:	f00b 020f 	and.w	r2, fp, #15
 800a4d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a4dc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a4e0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a4e4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800a4e8:	d019      	beq.n	800a51e <_dtoa_r+0x386>
 800a4ea:	4bbb      	ldr	r3, [pc, #748]	; (800a7d8 <_dtoa_r+0x640>)
 800a4ec:	ec51 0b18 	vmov	r0, r1, d8
 800a4f0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a4f4:	f7f6 f9aa 	bl	800084c <__aeabi_ddiv>
 800a4f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a4fc:	f008 080f 	and.w	r8, r8, #15
 800a500:	2503      	movs	r5, #3
 800a502:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800a7d8 <_dtoa_r+0x640>
 800a506:	f1b8 0f00 	cmp.w	r8, #0
 800a50a:	d10a      	bne.n	800a522 <_dtoa_r+0x38a>
 800a50c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a510:	4632      	mov	r2, r6
 800a512:	463b      	mov	r3, r7
 800a514:	f7f6 f99a 	bl	800084c <__aeabi_ddiv>
 800a518:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a51c:	e02b      	b.n	800a576 <_dtoa_r+0x3de>
 800a51e:	2502      	movs	r5, #2
 800a520:	e7ef      	b.n	800a502 <_dtoa_r+0x36a>
 800a522:	f018 0f01 	tst.w	r8, #1
 800a526:	d008      	beq.n	800a53a <_dtoa_r+0x3a2>
 800a528:	4630      	mov	r0, r6
 800a52a:	4639      	mov	r1, r7
 800a52c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a530:	f7f6 f862 	bl	80005f8 <__aeabi_dmul>
 800a534:	3501      	adds	r5, #1
 800a536:	4606      	mov	r6, r0
 800a538:	460f      	mov	r7, r1
 800a53a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a53e:	f109 0908 	add.w	r9, r9, #8
 800a542:	e7e0      	b.n	800a506 <_dtoa_r+0x36e>
 800a544:	f000 809f 	beq.w	800a686 <_dtoa_r+0x4ee>
 800a548:	f1cb 0600 	rsb	r6, fp, #0
 800a54c:	4ba1      	ldr	r3, [pc, #644]	; (800a7d4 <_dtoa_r+0x63c>)
 800a54e:	4fa2      	ldr	r7, [pc, #648]	; (800a7d8 <_dtoa_r+0x640>)
 800a550:	f006 020f 	and.w	r2, r6, #15
 800a554:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a55c:	ec51 0b18 	vmov	r0, r1, d8
 800a560:	f7f6 f84a 	bl	80005f8 <__aeabi_dmul>
 800a564:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a568:	1136      	asrs	r6, r6, #4
 800a56a:	2300      	movs	r3, #0
 800a56c:	2502      	movs	r5, #2
 800a56e:	2e00      	cmp	r6, #0
 800a570:	d17e      	bne.n	800a670 <_dtoa_r+0x4d8>
 800a572:	2b00      	cmp	r3, #0
 800a574:	d1d0      	bne.n	800a518 <_dtoa_r+0x380>
 800a576:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a578:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	f000 8084 	beq.w	800a68a <_dtoa_r+0x4f2>
 800a582:	4b96      	ldr	r3, [pc, #600]	; (800a7dc <_dtoa_r+0x644>)
 800a584:	2200      	movs	r2, #0
 800a586:	4640      	mov	r0, r8
 800a588:	4649      	mov	r1, r9
 800a58a:	f7f6 faa7 	bl	8000adc <__aeabi_dcmplt>
 800a58e:	2800      	cmp	r0, #0
 800a590:	d07b      	beq.n	800a68a <_dtoa_r+0x4f2>
 800a592:	9b04      	ldr	r3, [sp, #16]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d078      	beq.n	800a68a <_dtoa_r+0x4f2>
 800a598:	9b01      	ldr	r3, [sp, #4]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	dd39      	ble.n	800a612 <_dtoa_r+0x47a>
 800a59e:	4b90      	ldr	r3, [pc, #576]	; (800a7e0 <_dtoa_r+0x648>)
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	4640      	mov	r0, r8
 800a5a4:	4649      	mov	r1, r9
 800a5a6:	f7f6 f827 	bl	80005f8 <__aeabi_dmul>
 800a5aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a5ae:	9e01      	ldr	r6, [sp, #4]
 800a5b0:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800a5b4:	3501      	adds	r5, #1
 800a5b6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a5ba:	4628      	mov	r0, r5
 800a5bc:	f7f5 ffb2 	bl	8000524 <__aeabi_i2d>
 800a5c0:	4642      	mov	r2, r8
 800a5c2:	464b      	mov	r3, r9
 800a5c4:	f7f6 f818 	bl	80005f8 <__aeabi_dmul>
 800a5c8:	4b86      	ldr	r3, [pc, #536]	; (800a7e4 <_dtoa_r+0x64c>)
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	f7f5 fe5e 	bl	800028c <__adddf3>
 800a5d0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a5d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a5d8:	9303      	str	r3, [sp, #12]
 800a5da:	2e00      	cmp	r6, #0
 800a5dc:	d158      	bne.n	800a690 <_dtoa_r+0x4f8>
 800a5de:	4b82      	ldr	r3, [pc, #520]	; (800a7e8 <_dtoa_r+0x650>)
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	4640      	mov	r0, r8
 800a5e4:	4649      	mov	r1, r9
 800a5e6:	f7f5 fe4f 	bl	8000288 <__aeabi_dsub>
 800a5ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a5ee:	4680      	mov	r8, r0
 800a5f0:	4689      	mov	r9, r1
 800a5f2:	f7f6 fa91 	bl	8000b18 <__aeabi_dcmpgt>
 800a5f6:	2800      	cmp	r0, #0
 800a5f8:	f040 8296 	bne.w	800ab28 <_dtoa_r+0x990>
 800a5fc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a600:	4640      	mov	r0, r8
 800a602:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a606:	4649      	mov	r1, r9
 800a608:	f7f6 fa68 	bl	8000adc <__aeabi_dcmplt>
 800a60c:	2800      	cmp	r0, #0
 800a60e:	f040 8289 	bne.w	800ab24 <_dtoa_r+0x98c>
 800a612:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a616:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a618:	2b00      	cmp	r3, #0
 800a61a:	f2c0 814e 	blt.w	800a8ba <_dtoa_r+0x722>
 800a61e:	f1bb 0f0e 	cmp.w	fp, #14
 800a622:	f300 814a 	bgt.w	800a8ba <_dtoa_r+0x722>
 800a626:	4b6b      	ldr	r3, [pc, #428]	; (800a7d4 <_dtoa_r+0x63c>)
 800a628:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a62c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a630:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a632:	2b00      	cmp	r3, #0
 800a634:	f280 80dc 	bge.w	800a7f0 <_dtoa_r+0x658>
 800a638:	9b04      	ldr	r3, [sp, #16]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	f300 80d8 	bgt.w	800a7f0 <_dtoa_r+0x658>
 800a640:	f040 826f 	bne.w	800ab22 <_dtoa_r+0x98a>
 800a644:	4b68      	ldr	r3, [pc, #416]	; (800a7e8 <_dtoa_r+0x650>)
 800a646:	2200      	movs	r2, #0
 800a648:	4640      	mov	r0, r8
 800a64a:	4649      	mov	r1, r9
 800a64c:	f7f5 ffd4 	bl	80005f8 <__aeabi_dmul>
 800a650:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a654:	f7f6 fa56 	bl	8000b04 <__aeabi_dcmpge>
 800a658:	9e04      	ldr	r6, [sp, #16]
 800a65a:	4637      	mov	r7, r6
 800a65c:	2800      	cmp	r0, #0
 800a65e:	f040 8245 	bne.w	800aaec <_dtoa_r+0x954>
 800a662:	9d00      	ldr	r5, [sp, #0]
 800a664:	2331      	movs	r3, #49	; 0x31
 800a666:	f805 3b01 	strb.w	r3, [r5], #1
 800a66a:	f10b 0b01 	add.w	fp, fp, #1
 800a66e:	e241      	b.n	800aaf4 <_dtoa_r+0x95c>
 800a670:	07f2      	lsls	r2, r6, #31
 800a672:	d505      	bpl.n	800a680 <_dtoa_r+0x4e8>
 800a674:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a678:	f7f5 ffbe 	bl	80005f8 <__aeabi_dmul>
 800a67c:	3501      	adds	r5, #1
 800a67e:	2301      	movs	r3, #1
 800a680:	1076      	asrs	r6, r6, #1
 800a682:	3708      	adds	r7, #8
 800a684:	e773      	b.n	800a56e <_dtoa_r+0x3d6>
 800a686:	2502      	movs	r5, #2
 800a688:	e775      	b.n	800a576 <_dtoa_r+0x3de>
 800a68a:	9e04      	ldr	r6, [sp, #16]
 800a68c:	465f      	mov	r7, fp
 800a68e:	e792      	b.n	800a5b6 <_dtoa_r+0x41e>
 800a690:	9900      	ldr	r1, [sp, #0]
 800a692:	4b50      	ldr	r3, [pc, #320]	; (800a7d4 <_dtoa_r+0x63c>)
 800a694:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a698:	4431      	add	r1, r6
 800a69a:	9102      	str	r1, [sp, #8]
 800a69c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a69e:	eeb0 9a47 	vmov.f32	s18, s14
 800a6a2:	eef0 9a67 	vmov.f32	s19, s15
 800a6a6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a6aa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a6ae:	2900      	cmp	r1, #0
 800a6b0:	d044      	beq.n	800a73c <_dtoa_r+0x5a4>
 800a6b2:	494e      	ldr	r1, [pc, #312]	; (800a7ec <_dtoa_r+0x654>)
 800a6b4:	2000      	movs	r0, #0
 800a6b6:	f7f6 f8c9 	bl	800084c <__aeabi_ddiv>
 800a6ba:	ec53 2b19 	vmov	r2, r3, d9
 800a6be:	f7f5 fde3 	bl	8000288 <__aeabi_dsub>
 800a6c2:	9d00      	ldr	r5, [sp, #0]
 800a6c4:	ec41 0b19 	vmov	d9, r0, r1
 800a6c8:	4649      	mov	r1, r9
 800a6ca:	4640      	mov	r0, r8
 800a6cc:	f7f6 fa44 	bl	8000b58 <__aeabi_d2iz>
 800a6d0:	4606      	mov	r6, r0
 800a6d2:	f7f5 ff27 	bl	8000524 <__aeabi_i2d>
 800a6d6:	4602      	mov	r2, r0
 800a6d8:	460b      	mov	r3, r1
 800a6da:	4640      	mov	r0, r8
 800a6dc:	4649      	mov	r1, r9
 800a6de:	f7f5 fdd3 	bl	8000288 <__aeabi_dsub>
 800a6e2:	3630      	adds	r6, #48	; 0x30
 800a6e4:	f805 6b01 	strb.w	r6, [r5], #1
 800a6e8:	ec53 2b19 	vmov	r2, r3, d9
 800a6ec:	4680      	mov	r8, r0
 800a6ee:	4689      	mov	r9, r1
 800a6f0:	f7f6 f9f4 	bl	8000adc <__aeabi_dcmplt>
 800a6f4:	2800      	cmp	r0, #0
 800a6f6:	d164      	bne.n	800a7c2 <_dtoa_r+0x62a>
 800a6f8:	4642      	mov	r2, r8
 800a6fa:	464b      	mov	r3, r9
 800a6fc:	4937      	ldr	r1, [pc, #220]	; (800a7dc <_dtoa_r+0x644>)
 800a6fe:	2000      	movs	r0, #0
 800a700:	f7f5 fdc2 	bl	8000288 <__aeabi_dsub>
 800a704:	ec53 2b19 	vmov	r2, r3, d9
 800a708:	f7f6 f9e8 	bl	8000adc <__aeabi_dcmplt>
 800a70c:	2800      	cmp	r0, #0
 800a70e:	f040 80b6 	bne.w	800a87e <_dtoa_r+0x6e6>
 800a712:	9b02      	ldr	r3, [sp, #8]
 800a714:	429d      	cmp	r5, r3
 800a716:	f43f af7c 	beq.w	800a612 <_dtoa_r+0x47a>
 800a71a:	4b31      	ldr	r3, [pc, #196]	; (800a7e0 <_dtoa_r+0x648>)
 800a71c:	ec51 0b19 	vmov	r0, r1, d9
 800a720:	2200      	movs	r2, #0
 800a722:	f7f5 ff69 	bl	80005f8 <__aeabi_dmul>
 800a726:	4b2e      	ldr	r3, [pc, #184]	; (800a7e0 <_dtoa_r+0x648>)
 800a728:	ec41 0b19 	vmov	d9, r0, r1
 800a72c:	2200      	movs	r2, #0
 800a72e:	4640      	mov	r0, r8
 800a730:	4649      	mov	r1, r9
 800a732:	f7f5 ff61 	bl	80005f8 <__aeabi_dmul>
 800a736:	4680      	mov	r8, r0
 800a738:	4689      	mov	r9, r1
 800a73a:	e7c5      	b.n	800a6c8 <_dtoa_r+0x530>
 800a73c:	ec51 0b17 	vmov	r0, r1, d7
 800a740:	f7f5 ff5a 	bl	80005f8 <__aeabi_dmul>
 800a744:	9b02      	ldr	r3, [sp, #8]
 800a746:	9d00      	ldr	r5, [sp, #0]
 800a748:	930f      	str	r3, [sp, #60]	; 0x3c
 800a74a:	ec41 0b19 	vmov	d9, r0, r1
 800a74e:	4649      	mov	r1, r9
 800a750:	4640      	mov	r0, r8
 800a752:	f7f6 fa01 	bl	8000b58 <__aeabi_d2iz>
 800a756:	4606      	mov	r6, r0
 800a758:	f7f5 fee4 	bl	8000524 <__aeabi_i2d>
 800a75c:	3630      	adds	r6, #48	; 0x30
 800a75e:	4602      	mov	r2, r0
 800a760:	460b      	mov	r3, r1
 800a762:	4640      	mov	r0, r8
 800a764:	4649      	mov	r1, r9
 800a766:	f7f5 fd8f 	bl	8000288 <__aeabi_dsub>
 800a76a:	f805 6b01 	strb.w	r6, [r5], #1
 800a76e:	9b02      	ldr	r3, [sp, #8]
 800a770:	429d      	cmp	r5, r3
 800a772:	4680      	mov	r8, r0
 800a774:	4689      	mov	r9, r1
 800a776:	f04f 0200 	mov.w	r2, #0
 800a77a:	d124      	bne.n	800a7c6 <_dtoa_r+0x62e>
 800a77c:	4b1b      	ldr	r3, [pc, #108]	; (800a7ec <_dtoa_r+0x654>)
 800a77e:	ec51 0b19 	vmov	r0, r1, d9
 800a782:	f7f5 fd83 	bl	800028c <__adddf3>
 800a786:	4602      	mov	r2, r0
 800a788:	460b      	mov	r3, r1
 800a78a:	4640      	mov	r0, r8
 800a78c:	4649      	mov	r1, r9
 800a78e:	f7f6 f9c3 	bl	8000b18 <__aeabi_dcmpgt>
 800a792:	2800      	cmp	r0, #0
 800a794:	d173      	bne.n	800a87e <_dtoa_r+0x6e6>
 800a796:	ec53 2b19 	vmov	r2, r3, d9
 800a79a:	4914      	ldr	r1, [pc, #80]	; (800a7ec <_dtoa_r+0x654>)
 800a79c:	2000      	movs	r0, #0
 800a79e:	f7f5 fd73 	bl	8000288 <__aeabi_dsub>
 800a7a2:	4602      	mov	r2, r0
 800a7a4:	460b      	mov	r3, r1
 800a7a6:	4640      	mov	r0, r8
 800a7a8:	4649      	mov	r1, r9
 800a7aa:	f7f6 f997 	bl	8000adc <__aeabi_dcmplt>
 800a7ae:	2800      	cmp	r0, #0
 800a7b0:	f43f af2f 	beq.w	800a612 <_dtoa_r+0x47a>
 800a7b4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a7b6:	1e6b      	subs	r3, r5, #1
 800a7b8:	930f      	str	r3, [sp, #60]	; 0x3c
 800a7ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a7be:	2b30      	cmp	r3, #48	; 0x30
 800a7c0:	d0f8      	beq.n	800a7b4 <_dtoa_r+0x61c>
 800a7c2:	46bb      	mov	fp, r7
 800a7c4:	e04a      	b.n	800a85c <_dtoa_r+0x6c4>
 800a7c6:	4b06      	ldr	r3, [pc, #24]	; (800a7e0 <_dtoa_r+0x648>)
 800a7c8:	f7f5 ff16 	bl	80005f8 <__aeabi_dmul>
 800a7cc:	4680      	mov	r8, r0
 800a7ce:	4689      	mov	r9, r1
 800a7d0:	e7bd      	b.n	800a74e <_dtoa_r+0x5b6>
 800a7d2:	bf00      	nop
 800a7d4:	0800c370 	.word	0x0800c370
 800a7d8:	0800c348 	.word	0x0800c348
 800a7dc:	3ff00000 	.word	0x3ff00000
 800a7e0:	40240000 	.word	0x40240000
 800a7e4:	401c0000 	.word	0x401c0000
 800a7e8:	40140000 	.word	0x40140000
 800a7ec:	3fe00000 	.word	0x3fe00000
 800a7f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a7f4:	9d00      	ldr	r5, [sp, #0]
 800a7f6:	4642      	mov	r2, r8
 800a7f8:	464b      	mov	r3, r9
 800a7fa:	4630      	mov	r0, r6
 800a7fc:	4639      	mov	r1, r7
 800a7fe:	f7f6 f825 	bl	800084c <__aeabi_ddiv>
 800a802:	f7f6 f9a9 	bl	8000b58 <__aeabi_d2iz>
 800a806:	9001      	str	r0, [sp, #4]
 800a808:	f7f5 fe8c 	bl	8000524 <__aeabi_i2d>
 800a80c:	4642      	mov	r2, r8
 800a80e:	464b      	mov	r3, r9
 800a810:	f7f5 fef2 	bl	80005f8 <__aeabi_dmul>
 800a814:	4602      	mov	r2, r0
 800a816:	460b      	mov	r3, r1
 800a818:	4630      	mov	r0, r6
 800a81a:	4639      	mov	r1, r7
 800a81c:	f7f5 fd34 	bl	8000288 <__aeabi_dsub>
 800a820:	9e01      	ldr	r6, [sp, #4]
 800a822:	9f04      	ldr	r7, [sp, #16]
 800a824:	3630      	adds	r6, #48	; 0x30
 800a826:	f805 6b01 	strb.w	r6, [r5], #1
 800a82a:	9e00      	ldr	r6, [sp, #0]
 800a82c:	1bae      	subs	r6, r5, r6
 800a82e:	42b7      	cmp	r7, r6
 800a830:	4602      	mov	r2, r0
 800a832:	460b      	mov	r3, r1
 800a834:	d134      	bne.n	800a8a0 <_dtoa_r+0x708>
 800a836:	f7f5 fd29 	bl	800028c <__adddf3>
 800a83a:	4642      	mov	r2, r8
 800a83c:	464b      	mov	r3, r9
 800a83e:	4606      	mov	r6, r0
 800a840:	460f      	mov	r7, r1
 800a842:	f7f6 f969 	bl	8000b18 <__aeabi_dcmpgt>
 800a846:	b9c8      	cbnz	r0, 800a87c <_dtoa_r+0x6e4>
 800a848:	4642      	mov	r2, r8
 800a84a:	464b      	mov	r3, r9
 800a84c:	4630      	mov	r0, r6
 800a84e:	4639      	mov	r1, r7
 800a850:	f7f6 f93a 	bl	8000ac8 <__aeabi_dcmpeq>
 800a854:	b110      	cbz	r0, 800a85c <_dtoa_r+0x6c4>
 800a856:	9b01      	ldr	r3, [sp, #4]
 800a858:	07db      	lsls	r3, r3, #31
 800a85a:	d40f      	bmi.n	800a87c <_dtoa_r+0x6e4>
 800a85c:	4651      	mov	r1, sl
 800a85e:	4620      	mov	r0, r4
 800a860:	f000 fbcc 	bl	800affc <_Bfree>
 800a864:	2300      	movs	r3, #0
 800a866:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a868:	702b      	strb	r3, [r5, #0]
 800a86a:	f10b 0301 	add.w	r3, fp, #1
 800a86e:	6013      	str	r3, [r2, #0]
 800a870:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a872:	2b00      	cmp	r3, #0
 800a874:	f43f ace2 	beq.w	800a23c <_dtoa_r+0xa4>
 800a878:	601d      	str	r5, [r3, #0]
 800a87a:	e4df      	b.n	800a23c <_dtoa_r+0xa4>
 800a87c:	465f      	mov	r7, fp
 800a87e:	462b      	mov	r3, r5
 800a880:	461d      	mov	r5, r3
 800a882:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a886:	2a39      	cmp	r2, #57	; 0x39
 800a888:	d106      	bne.n	800a898 <_dtoa_r+0x700>
 800a88a:	9a00      	ldr	r2, [sp, #0]
 800a88c:	429a      	cmp	r2, r3
 800a88e:	d1f7      	bne.n	800a880 <_dtoa_r+0x6e8>
 800a890:	9900      	ldr	r1, [sp, #0]
 800a892:	2230      	movs	r2, #48	; 0x30
 800a894:	3701      	adds	r7, #1
 800a896:	700a      	strb	r2, [r1, #0]
 800a898:	781a      	ldrb	r2, [r3, #0]
 800a89a:	3201      	adds	r2, #1
 800a89c:	701a      	strb	r2, [r3, #0]
 800a89e:	e790      	b.n	800a7c2 <_dtoa_r+0x62a>
 800a8a0:	4ba3      	ldr	r3, [pc, #652]	; (800ab30 <_dtoa_r+0x998>)
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	f7f5 fea8 	bl	80005f8 <__aeabi_dmul>
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	4606      	mov	r6, r0
 800a8ae:	460f      	mov	r7, r1
 800a8b0:	f7f6 f90a 	bl	8000ac8 <__aeabi_dcmpeq>
 800a8b4:	2800      	cmp	r0, #0
 800a8b6:	d09e      	beq.n	800a7f6 <_dtoa_r+0x65e>
 800a8b8:	e7d0      	b.n	800a85c <_dtoa_r+0x6c4>
 800a8ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a8bc:	2a00      	cmp	r2, #0
 800a8be:	f000 80ca 	beq.w	800aa56 <_dtoa_r+0x8be>
 800a8c2:	9a07      	ldr	r2, [sp, #28]
 800a8c4:	2a01      	cmp	r2, #1
 800a8c6:	f300 80ad 	bgt.w	800aa24 <_dtoa_r+0x88c>
 800a8ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a8cc:	2a00      	cmp	r2, #0
 800a8ce:	f000 80a5 	beq.w	800aa1c <_dtoa_r+0x884>
 800a8d2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a8d6:	9e08      	ldr	r6, [sp, #32]
 800a8d8:	9d05      	ldr	r5, [sp, #20]
 800a8da:	9a05      	ldr	r2, [sp, #20]
 800a8dc:	441a      	add	r2, r3
 800a8de:	9205      	str	r2, [sp, #20]
 800a8e0:	9a06      	ldr	r2, [sp, #24]
 800a8e2:	2101      	movs	r1, #1
 800a8e4:	441a      	add	r2, r3
 800a8e6:	4620      	mov	r0, r4
 800a8e8:	9206      	str	r2, [sp, #24]
 800a8ea:	f000 fc3d 	bl	800b168 <__i2b>
 800a8ee:	4607      	mov	r7, r0
 800a8f0:	b165      	cbz	r5, 800a90c <_dtoa_r+0x774>
 800a8f2:	9b06      	ldr	r3, [sp, #24]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	dd09      	ble.n	800a90c <_dtoa_r+0x774>
 800a8f8:	42ab      	cmp	r3, r5
 800a8fa:	9a05      	ldr	r2, [sp, #20]
 800a8fc:	bfa8      	it	ge
 800a8fe:	462b      	movge	r3, r5
 800a900:	1ad2      	subs	r2, r2, r3
 800a902:	9205      	str	r2, [sp, #20]
 800a904:	9a06      	ldr	r2, [sp, #24]
 800a906:	1aed      	subs	r5, r5, r3
 800a908:	1ad3      	subs	r3, r2, r3
 800a90a:	9306      	str	r3, [sp, #24]
 800a90c:	9b08      	ldr	r3, [sp, #32]
 800a90e:	b1f3      	cbz	r3, 800a94e <_dtoa_r+0x7b6>
 800a910:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a912:	2b00      	cmp	r3, #0
 800a914:	f000 80a3 	beq.w	800aa5e <_dtoa_r+0x8c6>
 800a918:	2e00      	cmp	r6, #0
 800a91a:	dd10      	ble.n	800a93e <_dtoa_r+0x7a6>
 800a91c:	4639      	mov	r1, r7
 800a91e:	4632      	mov	r2, r6
 800a920:	4620      	mov	r0, r4
 800a922:	f000 fce1 	bl	800b2e8 <__pow5mult>
 800a926:	4652      	mov	r2, sl
 800a928:	4601      	mov	r1, r0
 800a92a:	4607      	mov	r7, r0
 800a92c:	4620      	mov	r0, r4
 800a92e:	f000 fc31 	bl	800b194 <__multiply>
 800a932:	4651      	mov	r1, sl
 800a934:	4680      	mov	r8, r0
 800a936:	4620      	mov	r0, r4
 800a938:	f000 fb60 	bl	800affc <_Bfree>
 800a93c:	46c2      	mov	sl, r8
 800a93e:	9b08      	ldr	r3, [sp, #32]
 800a940:	1b9a      	subs	r2, r3, r6
 800a942:	d004      	beq.n	800a94e <_dtoa_r+0x7b6>
 800a944:	4651      	mov	r1, sl
 800a946:	4620      	mov	r0, r4
 800a948:	f000 fcce 	bl	800b2e8 <__pow5mult>
 800a94c:	4682      	mov	sl, r0
 800a94e:	2101      	movs	r1, #1
 800a950:	4620      	mov	r0, r4
 800a952:	f000 fc09 	bl	800b168 <__i2b>
 800a956:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a958:	2b00      	cmp	r3, #0
 800a95a:	4606      	mov	r6, r0
 800a95c:	f340 8081 	ble.w	800aa62 <_dtoa_r+0x8ca>
 800a960:	461a      	mov	r2, r3
 800a962:	4601      	mov	r1, r0
 800a964:	4620      	mov	r0, r4
 800a966:	f000 fcbf 	bl	800b2e8 <__pow5mult>
 800a96a:	9b07      	ldr	r3, [sp, #28]
 800a96c:	2b01      	cmp	r3, #1
 800a96e:	4606      	mov	r6, r0
 800a970:	dd7a      	ble.n	800aa68 <_dtoa_r+0x8d0>
 800a972:	f04f 0800 	mov.w	r8, #0
 800a976:	6933      	ldr	r3, [r6, #16]
 800a978:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a97c:	6918      	ldr	r0, [r3, #16]
 800a97e:	f000 fba5 	bl	800b0cc <__hi0bits>
 800a982:	f1c0 0020 	rsb	r0, r0, #32
 800a986:	9b06      	ldr	r3, [sp, #24]
 800a988:	4418      	add	r0, r3
 800a98a:	f010 001f 	ands.w	r0, r0, #31
 800a98e:	f000 8094 	beq.w	800aaba <_dtoa_r+0x922>
 800a992:	f1c0 0320 	rsb	r3, r0, #32
 800a996:	2b04      	cmp	r3, #4
 800a998:	f340 8085 	ble.w	800aaa6 <_dtoa_r+0x90e>
 800a99c:	9b05      	ldr	r3, [sp, #20]
 800a99e:	f1c0 001c 	rsb	r0, r0, #28
 800a9a2:	4403      	add	r3, r0
 800a9a4:	9305      	str	r3, [sp, #20]
 800a9a6:	9b06      	ldr	r3, [sp, #24]
 800a9a8:	4403      	add	r3, r0
 800a9aa:	4405      	add	r5, r0
 800a9ac:	9306      	str	r3, [sp, #24]
 800a9ae:	9b05      	ldr	r3, [sp, #20]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	dd05      	ble.n	800a9c0 <_dtoa_r+0x828>
 800a9b4:	4651      	mov	r1, sl
 800a9b6:	461a      	mov	r2, r3
 800a9b8:	4620      	mov	r0, r4
 800a9ba:	f000 fcef 	bl	800b39c <__lshift>
 800a9be:	4682      	mov	sl, r0
 800a9c0:	9b06      	ldr	r3, [sp, #24]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	dd05      	ble.n	800a9d2 <_dtoa_r+0x83a>
 800a9c6:	4631      	mov	r1, r6
 800a9c8:	461a      	mov	r2, r3
 800a9ca:	4620      	mov	r0, r4
 800a9cc:	f000 fce6 	bl	800b39c <__lshift>
 800a9d0:	4606      	mov	r6, r0
 800a9d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d072      	beq.n	800aabe <_dtoa_r+0x926>
 800a9d8:	4631      	mov	r1, r6
 800a9da:	4650      	mov	r0, sl
 800a9dc:	f000 fd4a 	bl	800b474 <__mcmp>
 800a9e0:	2800      	cmp	r0, #0
 800a9e2:	da6c      	bge.n	800aabe <_dtoa_r+0x926>
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	4651      	mov	r1, sl
 800a9e8:	220a      	movs	r2, #10
 800a9ea:	4620      	mov	r0, r4
 800a9ec:	f000 fb28 	bl	800b040 <__multadd>
 800a9f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9f2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a9f6:	4682      	mov	sl, r0
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	f000 81b0 	beq.w	800ad5e <_dtoa_r+0xbc6>
 800a9fe:	2300      	movs	r3, #0
 800aa00:	4639      	mov	r1, r7
 800aa02:	220a      	movs	r2, #10
 800aa04:	4620      	mov	r0, r4
 800aa06:	f000 fb1b 	bl	800b040 <__multadd>
 800aa0a:	9b01      	ldr	r3, [sp, #4]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	4607      	mov	r7, r0
 800aa10:	f300 8096 	bgt.w	800ab40 <_dtoa_r+0x9a8>
 800aa14:	9b07      	ldr	r3, [sp, #28]
 800aa16:	2b02      	cmp	r3, #2
 800aa18:	dc59      	bgt.n	800aace <_dtoa_r+0x936>
 800aa1a:	e091      	b.n	800ab40 <_dtoa_r+0x9a8>
 800aa1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aa1e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800aa22:	e758      	b.n	800a8d6 <_dtoa_r+0x73e>
 800aa24:	9b04      	ldr	r3, [sp, #16]
 800aa26:	1e5e      	subs	r6, r3, #1
 800aa28:	9b08      	ldr	r3, [sp, #32]
 800aa2a:	42b3      	cmp	r3, r6
 800aa2c:	bfbf      	itttt	lt
 800aa2e:	9b08      	ldrlt	r3, [sp, #32]
 800aa30:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800aa32:	9608      	strlt	r6, [sp, #32]
 800aa34:	1af3      	sublt	r3, r6, r3
 800aa36:	bfb4      	ite	lt
 800aa38:	18d2      	addlt	r2, r2, r3
 800aa3a:	1b9e      	subge	r6, r3, r6
 800aa3c:	9b04      	ldr	r3, [sp, #16]
 800aa3e:	bfbc      	itt	lt
 800aa40:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800aa42:	2600      	movlt	r6, #0
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	bfb7      	itett	lt
 800aa48:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800aa4c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800aa50:	1a9d      	sublt	r5, r3, r2
 800aa52:	2300      	movlt	r3, #0
 800aa54:	e741      	b.n	800a8da <_dtoa_r+0x742>
 800aa56:	9e08      	ldr	r6, [sp, #32]
 800aa58:	9d05      	ldr	r5, [sp, #20]
 800aa5a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800aa5c:	e748      	b.n	800a8f0 <_dtoa_r+0x758>
 800aa5e:	9a08      	ldr	r2, [sp, #32]
 800aa60:	e770      	b.n	800a944 <_dtoa_r+0x7ac>
 800aa62:	9b07      	ldr	r3, [sp, #28]
 800aa64:	2b01      	cmp	r3, #1
 800aa66:	dc19      	bgt.n	800aa9c <_dtoa_r+0x904>
 800aa68:	9b02      	ldr	r3, [sp, #8]
 800aa6a:	b9bb      	cbnz	r3, 800aa9c <_dtoa_r+0x904>
 800aa6c:	9b03      	ldr	r3, [sp, #12]
 800aa6e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa72:	b99b      	cbnz	r3, 800aa9c <_dtoa_r+0x904>
 800aa74:	9b03      	ldr	r3, [sp, #12]
 800aa76:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aa7a:	0d1b      	lsrs	r3, r3, #20
 800aa7c:	051b      	lsls	r3, r3, #20
 800aa7e:	b183      	cbz	r3, 800aaa2 <_dtoa_r+0x90a>
 800aa80:	9b05      	ldr	r3, [sp, #20]
 800aa82:	3301      	adds	r3, #1
 800aa84:	9305      	str	r3, [sp, #20]
 800aa86:	9b06      	ldr	r3, [sp, #24]
 800aa88:	3301      	adds	r3, #1
 800aa8a:	9306      	str	r3, [sp, #24]
 800aa8c:	f04f 0801 	mov.w	r8, #1
 800aa90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	f47f af6f 	bne.w	800a976 <_dtoa_r+0x7de>
 800aa98:	2001      	movs	r0, #1
 800aa9a:	e774      	b.n	800a986 <_dtoa_r+0x7ee>
 800aa9c:	f04f 0800 	mov.w	r8, #0
 800aaa0:	e7f6      	b.n	800aa90 <_dtoa_r+0x8f8>
 800aaa2:	4698      	mov	r8, r3
 800aaa4:	e7f4      	b.n	800aa90 <_dtoa_r+0x8f8>
 800aaa6:	d082      	beq.n	800a9ae <_dtoa_r+0x816>
 800aaa8:	9a05      	ldr	r2, [sp, #20]
 800aaaa:	331c      	adds	r3, #28
 800aaac:	441a      	add	r2, r3
 800aaae:	9205      	str	r2, [sp, #20]
 800aab0:	9a06      	ldr	r2, [sp, #24]
 800aab2:	441a      	add	r2, r3
 800aab4:	441d      	add	r5, r3
 800aab6:	9206      	str	r2, [sp, #24]
 800aab8:	e779      	b.n	800a9ae <_dtoa_r+0x816>
 800aaba:	4603      	mov	r3, r0
 800aabc:	e7f4      	b.n	800aaa8 <_dtoa_r+0x910>
 800aabe:	9b04      	ldr	r3, [sp, #16]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	dc37      	bgt.n	800ab34 <_dtoa_r+0x99c>
 800aac4:	9b07      	ldr	r3, [sp, #28]
 800aac6:	2b02      	cmp	r3, #2
 800aac8:	dd34      	ble.n	800ab34 <_dtoa_r+0x99c>
 800aaca:	9b04      	ldr	r3, [sp, #16]
 800aacc:	9301      	str	r3, [sp, #4]
 800aace:	9b01      	ldr	r3, [sp, #4]
 800aad0:	b963      	cbnz	r3, 800aaec <_dtoa_r+0x954>
 800aad2:	4631      	mov	r1, r6
 800aad4:	2205      	movs	r2, #5
 800aad6:	4620      	mov	r0, r4
 800aad8:	f000 fab2 	bl	800b040 <__multadd>
 800aadc:	4601      	mov	r1, r0
 800aade:	4606      	mov	r6, r0
 800aae0:	4650      	mov	r0, sl
 800aae2:	f000 fcc7 	bl	800b474 <__mcmp>
 800aae6:	2800      	cmp	r0, #0
 800aae8:	f73f adbb 	bgt.w	800a662 <_dtoa_r+0x4ca>
 800aaec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aaee:	9d00      	ldr	r5, [sp, #0]
 800aaf0:	ea6f 0b03 	mvn.w	fp, r3
 800aaf4:	f04f 0800 	mov.w	r8, #0
 800aaf8:	4631      	mov	r1, r6
 800aafa:	4620      	mov	r0, r4
 800aafc:	f000 fa7e 	bl	800affc <_Bfree>
 800ab00:	2f00      	cmp	r7, #0
 800ab02:	f43f aeab 	beq.w	800a85c <_dtoa_r+0x6c4>
 800ab06:	f1b8 0f00 	cmp.w	r8, #0
 800ab0a:	d005      	beq.n	800ab18 <_dtoa_r+0x980>
 800ab0c:	45b8      	cmp	r8, r7
 800ab0e:	d003      	beq.n	800ab18 <_dtoa_r+0x980>
 800ab10:	4641      	mov	r1, r8
 800ab12:	4620      	mov	r0, r4
 800ab14:	f000 fa72 	bl	800affc <_Bfree>
 800ab18:	4639      	mov	r1, r7
 800ab1a:	4620      	mov	r0, r4
 800ab1c:	f000 fa6e 	bl	800affc <_Bfree>
 800ab20:	e69c      	b.n	800a85c <_dtoa_r+0x6c4>
 800ab22:	2600      	movs	r6, #0
 800ab24:	4637      	mov	r7, r6
 800ab26:	e7e1      	b.n	800aaec <_dtoa_r+0x954>
 800ab28:	46bb      	mov	fp, r7
 800ab2a:	4637      	mov	r7, r6
 800ab2c:	e599      	b.n	800a662 <_dtoa_r+0x4ca>
 800ab2e:	bf00      	nop
 800ab30:	40240000 	.word	0x40240000
 800ab34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	f000 80c8 	beq.w	800accc <_dtoa_r+0xb34>
 800ab3c:	9b04      	ldr	r3, [sp, #16]
 800ab3e:	9301      	str	r3, [sp, #4]
 800ab40:	2d00      	cmp	r5, #0
 800ab42:	dd05      	ble.n	800ab50 <_dtoa_r+0x9b8>
 800ab44:	4639      	mov	r1, r7
 800ab46:	462a      	mov	r2, r5
 800ab48:	4620      	mov	r0, r4
 800ab4a:	f000 fc27 	bl	800b39c <__lshift>
 800ab4e:	4607      	mov	r7, r0
 800ab50:	f1b8 0f00 	cmp.w	r8, #0
 800ab54:	d05b      	beq.n	800ac0e <_dtoa_r+0xa76>
 800ab56:	6879      	ldr	r1, [r7, #4]
 800ab58:	4620      	mov	r0, r4
 800ab5a:	f000 fa0f 	bl	800af7c <_Balloc>
 800ab5e:	4605      	mov	r5, r0
 800ab60:	b928      	cbnz	r0, 800ab6e <_dtoa_r+0x9d6>
 800ab62:	4b83      	ldr	r3, [pc, #524]	; (800ad70 <_dtoa_r+0xbd8>)
 800ab64:	4602      	mov	r2, r0
 800ab66:	f240 21ef 	movw	r1, #751	; 0x2ef
 800ab6a:	f7ff bb2e 	b.w	800a1ca <_dtoa_r+0x32>
 800ab6e:	693a      	ldr	r2, [r7, #16]
 800ab70:	3202      	adds	r2, #2
 800ab72:	0092      	lsls	r2, r2, #2
 800ab74:	f107 010c 	add.w	r1, r7, #12
 800ab78:	300c      	adds	r0, #12
 800ab7a:	f7ff fa76 	bl	800a06a <memcpy>
 800ab7e:	2201      	movs	r2, #1
 800ab80:	4629      	mov	r1, r5
 800ab82:	4620      	mov	r0, r4
 800ab84:	f000 fc0a 	bl	800b39c <__lshift>
 800ab88:	9b00      	ldr	r3, [sp, #0]
 800ab8a:	3301      	adds	r3, #1
 800ab8c:	9304      	str	r3, [sp, #16]
 800ab8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab92:	4413      	add	r3, r2
 800ab94:	9308      	str	r3, [sp, #32]
 800ab96:	9b02      	ldr	r3, [sp, #8]
 800ab98:	f003 0301 	and.w	r3, r3, #1
 800ab9c:	46b8      	mov	r8, r7
 800ab9e:	9306      	str	r3, [sp, #24]
 800aba0:	4607      	mov	r7, r0
 800aba2:	9b04      	ldr	r3, [sp, #16]
 800aba4:	4631      	mov	r1, r6
 800aba6:	3b01      	subs	r3, #1
 800aba8:	4650      	mov	r0, sl
 800abaa:	9301      	str	r3, [sp, #4]
 800abac:	f7ff fa6b 	bl	800a086 <quorem>
 800abb0:	4641      	mov	r1, r8
 800abb2:	9002      	str	r0, [sp, #8]
 800abb4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800abb8:	4650      	mov	r0, sl
 800abba:	f000 fc5b 	bl	800b474 <__mcmp>
 800abbe:	463a      	mov	r2, r7
 800abc0:	9005      	str	r0, [sp, #20]
 800abc2:	4631      	mov	r1, r6
 800abc4:	4620      	mov	r0, r4
 800abc6:	f000 fc71 	bl	800b4ac <__mdiff>
 800abca:	68c2      	ldr	r2, [r0, #12]
 800abcc:	4605      	mov	r5, r0
 800abce:	bb02      	cbnz	r2, 800ac12 <_dtoa_r+0xa7a>
 800abd0:	4601      	mov	r1, r0
 800abd2:	4650      	mov	r0, sl
 800abd4:	f000 fc4e 	bl	800b474 <__mcmp>
 800abd8:	4602      	mov	r2, r0
 800abda:	4629      	mov	r1, r5
 800abdc:	4620      	mov	r0, r4
 800abde:	9209      	str	r2, [sp, #36]	; 0x24
 800abe0:	f000 fa0c 	bl	800affc <_Bfree>
 800abe4:	9b07      	ldr	r3, [sp, #28]
 800abe6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800abe8:	9d04      	ldr	r5, [sp, #16]
 800abea:	ea43 0102 	orr.w	r1, r3, r2
 800abee:	9b06      	ldr	r3, [sp, #24]
 800abf0:	4319      	orrs	r1, r3
 800abf2:	d110      	bne.n	800ac16 <_dtoa_r+0xa7e>
 800abf4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800abf8:	d029      	beq.n	800ac4e <_dtoa_r+0xab6>
 800abfa:	9b05      	ldr	r3, [sp, #20]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	dd02      	ble.n	800ac06 <_dtoa_r+0xa6e>
 800ac00:	9b02      	ldr	r3, [sp, #8]
 800ac02:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800ac06:	9b01      	ldr	r3, [sp, #4]
 800ac08:	f883 9000 	strb.w	r9, [r3]
 800ac0c:	e774      	b.n	800aaf8 <_dtoa_r+0x960>
 800ac0e:	4638      	mov	r0, r7
 800ac10:	e7ba      	b.n	800ab88 <_dtoa_r+0x9f0>
 800ac12:	2201      	movs	r2, #1
 800ac14:	e7e1      	b.n	800abda <_dtoa_r+0xa42>
 800ac16:	9b05      	ldr	r3, [sp, #20]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	db04      	blt.n	800ac26 <_dtoa_r+0xa8e>
 800ac1c:	9907      	ldr	r1, [sp, #28]
 800ac1e:	430b      	orrs	r3, r1
 800ac20:	9906      	ldr	r1, [sp, #24]
 800ac22:	430b      	orrs	r3, r1
 800ac24:	d120      	bne.n	800ac68 <_dtoa_r+0xad0>
 800ac26:	2a00      	cmp	r2, #0
 800ac28:	dded      	ble.n	800ac06 <_dtoa_r+0xa6e>
 800ac2a:	4651      	mov	r1, sl
 800ac2c:	2201      	movs	r2, #1
 800ac2e:	4620      	mov	r0, r4
 800ac30:	f000 fbb4 	bl	800b39c <__lshift>
 800ac34:	4631      	mov	r1, r6
 800ac36:	4682      	mov	sl, r0
 800ac38:	f000 fc1c 	bl	800b474 <__mcmp>
 800ac3c:	2800      	cmp	r0, #0
 800ac3e:	dc03      	bgt.n	800ac48 <_dtoa_r+0xab0>
 800ac40:	d1e1      	bne.n	800ac06 <_dtoa_r+0xa6e>
 800ac42:	f019 0f01 	tst.w	r9, #1
 800ac46:	d0de      	beq.n	800ac06 <_dtoa_r+0xa6e>
 800ac48:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ac4c:	d1d8      	bne.n	800ac00 <_dtoa_r+0xa68>
 800ac4e:	9a01      	ldr	r2, [sp, #4]
 800ac50:	2339      	movs	r3, #57	; 0x39
 800ac52:	7013      	strb	r3, [r2, #0]
 800ac54:	462b      	mov	r3, r5
 800ac56:	461d      	mov	r5, r3
 800ac58:	3b01      	subs	r3, #1
 800ac5a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ac5e:	2a39      	cmp	r2, #57	; 0x39
 800ac60:	d06c      	beq.n	800ad3c <_dtoa_r+0xba4>
 800ac62:	3201      	adds	r2, #1
 800ac64:	701a      	strb	r2, [r3, #0]
 800ac66:	e747      	b.n	800aaf8 <_dtoa_r+0x960>
 800ac68:	2a00      	cmp	r2, #0
 800ac6a:	dd07      	ble.n	800ac7c <_dtoa_r+0xae4>
 800ac6c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ac70:	d0ed      	beq.n	800ac4e <_dtoa_r+0xab6>
 800ac72:	9a01      	ldr	r2, [sp, #4]
 800ac74:	f109 0301 	add.w	r3, r9, #1
 800ac78:	7013      	strb	r3, [r2, #0]
 800ac7a:	e73d      	b.n	800aaf8 <_dtoa_r+0x960>
 800ac7c:	9b04      	ldr	r3, [sp, #16]
 800ac7e:	9a08      	ldr	r2, [sp, #32]
 800ac80:	f803 9c01 	strb.w	r9, [r3, #-1]
 800ac84:	4293      	cmp	r3, r2
 800ac86:	d043      	beq.n	800ad10 <_dtoa_r+0xb78>
 800ac88:	4651      	mov	r1, sl
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	220a      	movs	r2, #10
 800ac8e:	4620      	mov	r0, r4
 800ac90:	f000 f9d6 	bl	800b040 <__multadd>
 800ac94:	45b8      	cmp	r8, r7
 800ac96:	4682      	mov	sl, r0
 800ac98:	f04f 0300 	mov.w	r3, #0
 800ac9c:	f04f 020a 	mov.w	r2, #10
 800aca0:	4641      	mov	r1, r8
 800aca2:	4620      	mov	r0, r4
 800aca4:	d107      	bne.n	800acb6 <_dtoa_r+0xb1e>
 800aca6:	f000 f9cb 	bl	800b040 <__multadd>
 800acaa:	4680      	mov	r8, r0
 800acac:	4607      	mov	r7, r0
 800acae:	9b04      	ldr	r3, [sp, #16]
 800acb0:	3301      	adds	r3, #1
 800acb2:	9304      	str	r3, [sp, #16]
 800acb4:	e775      	b.n	800aba2 <_dtoa_r+0xa0a>
 800acb6:	f000 f9c3 	bl	800b040 <__multadd>
 800acba:	4639      	mov	r1, r7
 800acbc:	4680      	mov	r8, r0
 800acbe:	2300      	movs	r3, #0
 800acc0:	220a      	movs	r2, #10
 800acc2:	4620      	mov	r0, r4
 800acc4:	f000 f9bc 	bl	800b040 <__multadd>
 800acc8:	4607      	mov	r7, r0
 800acca:	e7f0      	b.n	800acae <_dtoa_r+0xb16>
 800accc:	9b04      	ldr	r3, [sp, #16]
 800acce:	9301      	str	r3, [sp, #4]
 800acd0:	9d00      	ldr	r5, [sp, #0]
 800acd2:	4631      	mov	r1, r6
 800acd4:	4650      	mov	r0, sl
 800acd6:	f7ff f9d6 	bl	800a086 <quorem>
 800acda:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800acde:	9b00      	ldr	r3, [sp, #0]
 800ace0:	f805 9b01 	strb.w	r9, [r5], #1
 800ace4:	1aea      	subs	r2, r5, r3
 800ace6:	9b01      	ldr	r3, [sp, #4]
 800ace8:	4293      	cmp	r3, r2
 800acea:	dd07      	ble.n	800acfc <_dtoa_r+0xb64>
 800acec:	4651      	mov	r1, sl
 800acee:	2300      	movs	r3, #0
 800acf0:	220a      	movs	r2, #10
 800acf2:	4620      	mov	r0, r4
 800acf4:	f000 f9a4 	bl	800b040 <__multadd>
 800acf8:	4682      	mov	sl, r0
 800acfa:	e7ea      	b.n	800acd2 <_dtoa_r+0xb3a>
 800acfc:	9b01      	ldr	r3, [sp, #4]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	bfc8      	it	gt
 800ad02:	461d      	movgt	r5, r3
 800ad04:	9b00      	ldr	r3, [sp, #0]
 800ad06:	bfd8      	it	le
 800ad08:	2501      	movle	r5, #1
 800ad0a:	441d      	add	r5, r3
 800ad0c:	f04f 0800 	mov.w	r8, #0
 800ad10:	4651      	mov	r1, sl
 800ad12:	2201      	movs	r2, #1
 800ad14:	4620      	mov	r0, r4
 800ad16:	f000 fb41 	bl	800b39c <__lshift>
 800ad1a:	4631      	mov	r1, r6
 800ad1c:	4682      	mov	sl, r0
 800ad1e:	f000 fba9 	bl	800b474 <__mcmp>
 800ad22:	2800      	cmp	r0, #0
 800ad24:	dc96      	bgt.n	800ac54 <_dtoa_r+0xabc>
 800ad26:	d102      	bne.n	800ad2e <_dtoa_r+0xb96>
 800ad28:	f019 0f01 	tst.w	r9, #1
 800ad2c:	d192      	bne.n	800ac54 <_dtoa_r+0xabc>
 800ad2e:	462b      	mov	r3, r5
 800ad30:	461d      	mov	r5, r3
 800ad32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ad36:	2a30      	cmp	r2, #48	; 0x30
 800ad38:	d0fa      	beq.n	800ad30 <_dtoa_r+0xb98>
 800ad3a:	e6dd      	b.n	800aaf8 <_dtoa_r+0x960>
 800ad3c:	9a00      	ldr	r2, [sp, #0]
 800ad3e:	429a      	cmp	r2, r3
 800ad40:	d189      	bne.n	800ac56 <_dtoa_r+0xabe>
 800ad42:	f10b 0b01 	add.w	fp, fp, #1
 800ad46:	2331      	movs	r3, #49	; 0x31
 800ad48:	e796      	b.n	800ac78 <_dtoa_r+0xae0>
 800ad4a:	4b0a      	ldr	r3, [pc, #40]	; (800ad74 <_dtoa_r+0xbdc>)
 800ad4c:	f7ff ba99 	b.w	800a282 <_dtoa_r+0xea>
 800ad50:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	f47f aa6d 	bne.w	800a232 <_dtoa_r+0x9a>
 800ad58:	4b07      	ldr	r3, [pc, #28]	; (800ad78 <_dtoa_r+0xbe0>)
 800ad5a:	f7ff ba92 	b.w	800a282 <_dtoa_r+0xea>
 800ad5e:	9b01      	ldr	r3, [sp, #4]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	dcb5      	bgt.n	800acd0 <_dtoa_r+0xb38>
 800ad64:	9b07      	ldr	r3, [sp, #28]
 800ad66:	2b02      	cmp	r3, #2
 800ad68:	f73f aeb1 	bgt.w	800aace <_dtoa_r+0x936>
 800ad6c:	e7b0      	b.n	800acd0 <_dtoa_r+0xb38>
 800ad6e:	bf00      	nop
 800ad70:	0800c2d8 	.word	0x0800c2d8
 800ad74:	0800c238 	.word	0x0800c238
 800ad78:	0800c25c 	.word	0x0800c25c

0800ad7c <_free_r>:
 800ad7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ad7e:	2900      	cmp	r1, #0
 800ad80:	d044      	beq.n	800ae0c <_free_r+0x90>
 800ad82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad86:	9001      	str	r0, [sp, #4]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	f1a1 0404 	sub.w	r4, r1, #4
 800ad8e:	bfb8      	it	lt
 800ad90:	18e4      	addlt	r4, r4, r3
 800ad92:	f000 f8e7 	bl	800af64 <__malloc_lock>
 800ad96:	4a1e      	ldr	r2, [pc, #120]	; (800ae10 <_free_r+0x94>)
 800ad98:	9801      	ldr	r0, [sp, #4]
 800ad9a:	6813      	ldr	r3, [r2, #0]
 800ad9c:	b933      	cbnz	r3, 800adac <_free_r+0x30>
 800ad9e:	6063      	str	r3, [r4, #4]
 800ada0:	6014      	str	r4, [r2, #0]
 800ada2:	b003      	add	sp, #12
 800ada4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ada8:	f000 b8e2 	b.w	800af70 <__malloc_unlock>
 800adac:	42a3      	cmp	r3, r4
 800adae:	d908      	bls.n	800adc2 <_free_r+0x46>
 800adb0:	6825      	ldr	r5, [r4, #0]
 800adb2:	1961      	adds	r1, r4, r5
 800adb4:	428b      	cmp	r3, r1
 800adb6:	bf01      	itttt	eq
 800adb8:	6819      	ldreq	r1, [r3, #0]
 800adba:	685b      	ldreq	r3, [r3, #4]
 800adbc:	1949      	addeq	r1, r1, r5
 800adbe:	6021      	streq	r1, [r4, #0]
 800adc0:	e7ed      	b.n	800ad9e <_free_r+0x22>
 800adc2:	461a      	mov	r2, r3
 800adc4:	685b      	ldr	r3, [r3, #4]
 800adc6:	b10b      	cbz	r3, 800adcc <_free_r+0x50>
 800adc8:	42a3      	cmp	r3, r4
 800adca:	d9fa      	bls.n	800adc2 <_free_r+0x46>
 800adcc:	6811      	ldr	r1, [r2, #0]
 800adce:	1855      	adds	r5, r2, r1
 800add0:	42a5      	cmp	r5, r4
 800add2:	d10b      	bne.n	800adec <_free_r+0x70>
 800add4:	6824      	ldr	r4, [r4, #0]
 800add6:	4421      	add	r1, r4
 800add8:	1854      	adds	r4, r2, r1
 800adda:	42a3      	cmp	r3, r4
 800addc:	6011      	str	r1, [r2, #0]
 800adde:	d1e0      	bne.n	800ada2 <_free_r+0x26>
 800ade0:	681c      	ldr	r4, [r3, #0]
 800ade2:	685b      	ldr	r3, [r3, #4]
 800ade4:	6053      	str	r3, [r2, #4]
 800ade6:	440c      	add	r4, r1
 800ade8:	6014      	str	r4, [r2, #0]
 800adea:	e7da      	b.n	800ada2 <_free_r+0x26>
 800adec:	d902      	bls.n	800adf4 <_free_r+0x78>
 800adee:	230c      	movs	r3, #12
 800adf0:	6003      	str	r3, [r0, #0]
 800adf2:	e7d6      	b.n	800ada2 <_free_r+0x26>
 800adf4:	6825      	ldr	r5, [r4, #0]
 800adf6:	1961      	adds	r1, r4, r5
 800adf8:	428b      	cmp	r3, r1
 800adfa:	bf04      	itt	eq
 800adfc:	6819      	ldreq	r1, [r3, #0]
 800adfe:	685b      	ldreq	r3, [r3, #4]
 800ae00:	6063      	str	r3, [r4, #4]
 800ae02:	bf04      	itt	eq
 800ae04:	1949      	addeq	r1, r1, r5
 800ae06:	6021      	streq	r1, [r4, #0]
 800ae08:	6054      	str	r4, [r2, #4]
 800ae0a:	e7ca      	b.n	800ada2 <_free_r+0x26>
 800ae0c:	b003      	add	sp, #12
 800ae0e:	bd30      	pop	{r4, r5, pc}
 800ae10:	20002fb4 	.word	0x20002fb4

0800ae14 <malloc>:
 800ae14:	4b02      	ldr	r3, [pc, #8]	; (800ae20 <malloc+0xc>)
 800ae16:	4601      	mov	r1, r0
 800ae18:	6818      	ldr	r0, [r3, #0]
 800ae1a:	f000 b823 	b.w	800ae64 <_malloc_r>
 800ae1e:	bf00      	nop
 800ae20:	20000068 	.word	0x20000068

0800ae24 <sbrk_aligned>:
 800ae24:	b570      	push	{r4, r5, r6, lr}
 800ae26:	4e0e      	ldr	r6, [pc, #56]	; (800ae60 <sbrk_aligned+0x3c>)
 800ae28:	460c      	mov	r4, r1
 800ae2a:	6831      	ldr	r1, [r6, #0]
 800ae2c:	4605      	mov	r5, r0
 800ae2e:	b911      	cbnz	r1, 800ae36 <sbrk_aligned+0x12>
 800ae30:	f000 fe40 	bl	800bab4 <_sbrk_r>
 800ae34:	6030      	str	r0, [r6, #0]
 800ae36:	4621      	mov	r1, r4
 800ae38:	4628      	mov	r0, r5
 800ae3a:	f000 fe3b 	bl	800bab4 <_sbrk_r>
 800ae3e:	1c43      	adds	r3, r0, #1
 800ae40:	d00a      	beq.n	800ae58 <sbrk_aligned+0x34>
 800ae42:	1cc4      	adds	r4, r0, #3
 800ae44:	f024 0403 	bic.w	r4, r4, #3
 800ae48:	42a0      	cmp	r0, r4
 800ae4a:	d007      	beq.n	800ae5c <sbrk_aligned+0x38>
 800ae4c:	1a21      	subs	r1, r4, r0
 800ae4e:	4628      	mov	r0, r5
 800ae50:	f000 fe30 	bl	800bab4 <_sbrk_r>
 800ae54:	3001      	adds	r0, #1
 800ae56:	d101      	bne.n	800ae5c <sbrk_aligned+0x38>
 800ae58:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800ae5c:	4620      	mov	r0, r4
 800ae5e:	bd70      	pop	{r4, r5, r6, pc}
 800ae60:	20002fb8 	.word	0x20002fb8

0800ae64 <_malloc_r>:
 800ae64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae68:	1ccd      	adds	r5, r1, #3
 800ae6a:	f025 0503 	bic.w	r5, r5, #3
 800ae6e:	3508      	adds	r5, #8
 800ae70:	2d0c      	cmp	r5, #12
 800ae72:	bf38      	it	cc
 800ae74:	250c      	movcc	r5, #12
 800ae76:	2d00      	cmp	r5, #0
 800ae78:	4607      	mov	r7, r0
 800ae7a:	db01      	blt.n	800ae80 <_malloc_r+0x1c>
 800ae7c:	42a9      	cmp	r1, r5
 800ae7e:	d905      	bls.n	800ae8c <_malloc_r+0x28>
 800ae80:	230c      	movs	r3, #12
 800ae82:	603b      	str	r3, [r7, #0]
 800ae84:	2600      	movs	r6, #0
 800ae86:	4630      	mov	r0, r6
 800ae88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae8c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800af60 <_malloc_r+0xfc>
 800ae90:	f000 f868 	bl	800af64 <__malloc_lock>
 800ae94:	f8d8 3000 	ldr.w	r3, [r8]
 800ae98:	461c      	mov	r4, r3
 800ae9a:	bb5c      	cbnz	r4, 800aef4 <_malloc_r+0x90>
 800ae9c:	4629      	mov	r1, r5
 800ae9e:	4638      	mov	r0, r7
 800aea0:	f7ff ffc0 	bl	800ae24 <sbrk_aligned>
 800aea4:	1c43      	adds	r3, r0, #1
 800aea6:	4604      	mov	r4, r0
 800aea8:	d155      	bne.n	800af56 <_malloc_r+0xf2>
 800aeaa:	f8d8 4000 	ldr.w	r4, [r8]
 800aeae:	4626      	mov	r6, r4
 800aeb0:	2e00      	cmp	r6, #0
 800aeb2:	d145      	bne.n	800af40 <_malloc_r+0xdc>
 800aeb4:	2c00      	cmp	r4, #0
 800aeb6:	d048      	beq.n	800af4a <_malloc_r+0xe6>
 800aeb8:	6823      	ldr	r3, [r4, #0]
 800aeba:	4631      	mov	r1, r6
 800aebc:	4638      	mov	r0, r7
 800aebe:	eb04 0903 	add.w	r9, r4, r3
 800aec2:	f000 fdf7 	bl	800bab4 <_sbrk_r>
 800aec6:	4581      	cmp	r9, r0
 800aec8:	d13f      	bne.n	800af4a <_malloc_r+0xe6>
 800aeca:	6821      	ldr	r1, [r4, #0]
 800aecc:	1a6d      	subs	r5, r5, r1
 800aece:	4629      	mov	r1, r5
 800aed0:	4638      	mov	r0, r7
 800aed2:	f7ff ffa7 	bl	800ae24 <sbrk_aligned>
 800aed6:	3001      	adds	r0, #1
 800aed8:	d037      	beq.n	800af4a <_malloc_r+0xe6>
 800aeda:	6823      	ldr	r3, [r4, #0]
 800aedc:	442b      	add	r3, r5
 800aede:	6023      	str	r3, [r4, #0]
 800aee0:	f8d8 3000 	ldr.w	r3, [r8]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d038      	beq.n	800af5a <_malloc_r+0xf6>
 800aee8:	685a      	ldr	r2, [r3, #4]
 800aeea:	42a2      	cmp	r2, r4
 800aeec:	d12b      	bne.n	800af46 <_malloc_r+0xe2>
 800aeee:	2200      	movs	r2, #0
 800aef0:	605a      	str	r2, [r3, #4]
 800aef2:	e00f      	b.n	800af14 <_malloc_r+0xb0>
 800aef4:	6822      	ldr	r2, [r4, #0]
 800aef6:	1b52      	subs	r2, r2, r5
 800aef8:	d41f      	bmi.n	800af3a <_malloc_r+0xd6>
 800aefa:	2a0b      	cmp	r2, #11
 800aefc:	d917      	bls.n	800af2e <_malloc_r+0xca>
 800aefe:	1961      	adds	r1, r4, r5
 800af00:	42a3      	cmp	r3, r4
 800af02:	6025      	str	r5, [r4, #0]
 800af04:	bf18      	it	ne
 800af06:	6059      	strne	r1, [r3, #4]
 800af08:	6863      	ldr	r3, [r4, #4]
 800af0a:	bf08      	it	eq
 800af0c:	f8c8 1000 	streq.w	r1, [r8]
 800af10:	5162      	str	r2, [r4, r5]
 800af12:	604b      	str	r3, [r1, #4]
 800af14:	4638      	mov	r0, r7
 800af16:	f104 060b 	add.w	r6, r4, #11
 800af1a:	f000 f829 	bl	800af70 <__malloc_unlock>
 800af1e:	f026 0607 	bic.w	r6, r6, #7
 800af22:	1d23      	adds	r3, r4, #4
 800af24:	1af2      	subs	r2, r6, r3
 800af26:	d0ae      	beq.n	800ae86 <_malloc_r+0x22>
 800af28:	1b9b      	subs	r3, r3, r6
 800af2a:	50a3      	str	r3, [r4, r2]
 800af2c:	e7ab      	b.n	800ae86 <_malloc_r+0x22>
 800af2e:	42a3      	cmp	r3, r4
 800af30:	6862      	ldr	r2, [r4, #4]
 800af32:	d1dd      	bne.n	800aef0 <_malloc_r+0x8c>
 800af34:	f8c8 2000 	str.w	r2, [r8]
 800af38:	e7ec      	b.n	800af14 <_malloc_r+0xb0>
 800af3a:	4623      	mov	r3, r4
 800af3c:	6864      	ldr	r4, [r4, #4]
 800af3e:	e7ac      	b.n	800ae9a <_malloc_r+0x36>
 800af40:	4634      	mov	r4, r6
 800af42:	6876      	ldr	r6, [r6, #4]
 800af44:	e7b4      	b.n	800aeb0 <_malloc_r+0x4c>
 800af46:	4613      	mov	r3, r2
 800af48:	e7cc      	b.n	800aee4 <_malloc_r+0x80>
 800af4a:	230c      	movs	r3, #12
 800af4c:	603b      	str	r3, [r7, #0]
 800af4e:	4638      	mov	r0, r7
 800af50:	f000 f80e 	bl	800af70 <__malloc_unlock>
 800af54:	e797      	b.n	800ae86 <_malloc_r+0x22>
 800af56:	6025      	str	r5, [r4, #0]
 800af58:	e7dc      	b.n	800af14 <_malloc_r+0xb0>
 800af5a:	605b      	str	r3, [r3, #4]
 800af5c:	deff      	udf	#255	; 0xff
 800af5e:	bf00      	nop
 800af60:	20002fb4 	.word	0x20002fb4

0800af64 <__malloc_lock>:
 800af64:	4801      	ldr	r0, [pc, #4]	; (800af6c <__malloc_lock+0x8>)
 800af66:	f7ff b87e 	b.w	800a066 <__retarget_lock_acquire_recursive>
 800af6a:	bf00      	nop
 800af6c:	20002fb0 	.word	0x20002fb0

0800af70 <__malloc_unlock>:
 800af70:	4801      	ldr	r0, [pc, #4]	; (800af78 <__malloc_unlock+0x8>)
 800af72:	f7ff b879 	b.w	800a068 <__retarget_lock_release_recursive>
 800af76:	bf00      	nop
 800af78:	20002fb0 	.word	0x20002fb0

0800af7c <_Balloc>:
 800af7c:	b570      	push	{r4, r5, r6, lr}
 800af7e:	69c6      	ldr	r6, [r0, #28]
 800af80:	4604      	mov	r4, r0
 800af82:	460d      	mov	r5, r1
 800af84:	b976      	cbnz	r6, 800afa4 <_Balloc+0x28>
 800af86:	2010      	movs	r0, #16
 800af88:	f7ff ff44 	bl	800ae14 <malloc>
 800af8c:	4602      	mov	r2, r0
 800af8e:	61e0      	str	r0, [r4, #28]
 800af90:	b920      	cbnz	r0, 800af9c <_Balloc+0x20>
 800af92:	4b18      	ldr	r3, [pc, #96]	; (800aff4 <_Balloc+0x78>)
 800af94:	4818      	ldr	r0, [pc, #96]	; (800aff8 <_Balloc+0x7c>)
 800af96:	216b      	movs	r1, #107	; 0x6b
 800af98:	f000 fd9c 	bl	800bad4 <__assert_func>
 800af9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800afa0:	6006      	str	r6, [r0, #0]
 800afa2:	60c6      	str	r6, [r0, #12]
 800afa4:	69e6      	ldr	r6, [r4, #28]
 800afa6:	68f3      	ldr	r3, [r6, #12]
 800afa8:	b183      	cbz	r3, 800afcc <_Balloc+0x50>
 800afaa:	69e3      	ldr	r3, [r4, #28]
 800afac:	68db      	ldr	r3, [r3, #12]
 800afae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800afb2:	b9b8      	cbnz	r0, 800afe4 <_Balloc+0x68>
 800afb4:	2101      	movs	r1, #1
 800afb6:	fa01 f605 	lsl.w	r6, r1, r5
 800afba:	1d72      	adds	r2, r6, #5
 800afbc:	0092      	lsls	r2, r2, #2
 800afbe:	4620      	mov	r0, r4
 800afc0:	f000 fda6 	bl	800bb10 <_calloc_r>
 800afc4:	b160      	cbz	r0, 800afe0 <_Balloc+0x64>
 800afc6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800afca:	e00e      	b.n	800afea <_Balloc+0x6e>
 800afcc:	2221      	movs	r2, #33	; 0x21
 800afce:	2104      	movs	r1, #4
 800afd0:	4620      	mov	r0, r4
 800afd2:	f000 fd9d 	bl	800bb10 <_calloc_r>
 800afd6:	69e3      	ldr	r3, [r4, #28]
 800afd8:	60f0      	str	r0, [r6, #12]
 800afda:	68db      	ldr	r3, [r3, #12]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d1e4      	bne.n	800afaa <_Balloc+0x2e>
 800afe0:	2000      	movs	r0, #0
 800afe2:	bd70      	pop	{r4, r5, r6, pc}
 800afe4:	6802      	ldr	r2, [r0, #0]
 800afe6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800afea:	2300      	movs	r3, #0
 800afec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aff0:	e7f7      	b.n	800afe2 <_Balloc+0x66>
 800aff2:	bf00      	nop
 800aff4:	0800c269 	.word	0x0800c269
 800aff8:	0800c2e9 	.word	0x0800c2e9

0800affc <_Bfree>:
 800affc:	b570      	push	{r4, r5, r6, lr}
 800affe:	69c6      	ldr	r6, [r0, #28]
 800b000:	4605      	mov	r5, r0
 800b002:	460c      	mov	r4, r1
 800b004:	b976      	cbnz	r6, 800b024 <_Bfree+0x28>
 800b006:	2010      	movs	r0, #16
 800b008:	f7ff ff04 	bl	800ae14 <malloc>
 800b00c:	4602      	mov	r2, r0
 800b00e:	61e8      	str	r0, [r5, #28]
 800b010:	b920      	cbnz	r0, 800b01c <_Bfree+0x20>
 800b012:	4b09      	ldr	r3, [pc, #36]	; (800b038 <_Bfree+0x3c>)
 800b014:	4809      	ldr	r0, [pc, #36]	; (800b03c <_Bfree+0x40>)
 800b016:	218f      	movs	r1, #143	; 0x8f
 800b018:	f000 fd5c 	bl	800bad4 <__assert_func>
 800b01c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b020:	6006      	str	r6, [r0, #0]
 800b022:	60c6      	str	r6, [r0, #12]
 800b024:	b13c      	cbz	r4, 800b036 <_Bfree+0x3a>
 800b026:	69eb      	ldr	r3, [r5, #28]
 800b028:	6862      	ldr	r2, [r4, #4]
 800b02a:	68db      	ldr	r3, [r3, #12]
 800b02c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b030:	6021      	str	r1, [r4, #0]
 800b032:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b036:	bd70      	pop	{r4, r5, r6, pc}
 800b038:	0800c269 	.word	0x0800c269
 800b03c:	0800c2e9 	.word	0x0800c2e9

0800b040 <__multadd>:
 800b040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b044:	690d      	ldr	r5, [r1, #16]
 800b046:	4607      	mov	r7, r0
 800b048:	460c      	mov	r4, r1
 800b04a:	461e      	mov	r6, r3
 800b04c:	f101 0c14 	add.w	ip, r1, #20
 800b050:	2000      	movs	r0, #0
 800b052:	f8dc 3000 	ldr.w	r3, [ip]
 800b056:	b299      	uxth	r1, r3
 800b058:	fb02 6101 	mla	r1, r2, r1, r6
 800b05c:	0c1e      	lsrs	r6, r3, #16
 800b05e:	0c0b      	lsrs	r3, r1, #16
 800b060:	fb02 3306 	mla	r3, r2, r6, r3
 800b064:	b289      	uxth	r1, r1
 800b066:	3001      	adds	r0, #1
 800b068:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b06c:	4285      	cmp	r5, r0
 800b06e:	f84c 1b04 	str.w	r1, [ip], #4
 800b072:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b076:	dcec      	bgt.n	800b052 <__multadd+0x12>
 800b078:	b30e      	cbz	r6, 800b0be <__multadd+0x7e>
 800b07a:	68a3      	ldr	r3, [r4, #8]
 800b07c:	42ab      	cmp	r3, r5
 800b07e:	dc19      	bgt.n	800b0b4 <__multadd+0x74>
 800b080:	6861      	ldr	r1, [r4, #4]
 800b082:	4638      	mov	r0, r7
 800b084:	3101      	adds	r1, #1
 800b086:	f7ff ff79 	bl	800af7c <_Balloc>
 800b08a:	4680      	mov	r8, r0
 800b08c:	b928      	cbnz	r0, 800b09a <__multadd+0x5a>
 800b08e:	4602      	mov	r2, r0
 800b090:	4b0c      	ldr	r3, [pc, #48]	; (800b0c4 <__multadd+0x84>)
 800b092:	480d      	ldr	r0, [pc, #52]	; (800b0c8 <__multadd+0x88>)
 800b094:	21ba      	movs	r1, #186	; 0xba
 800b096:	f000 fd1d 	bl	800bad4 <__assert_func>
 800b09a:	6922      	ldr	r2, [r4, #16]
 800b09c:	3202      	adds	r2, #2
 800b09e:	f104 010c 	add.w	r1, r4, #12
 800b0a2:	0092      	lsls	r2, r2, #2
 800b0a4:	300c      	adds	r0, #12
 800b0a6:	f7fe ffe0 	bl	800a06a <memcpy>
 800b0aa:	4621      	mov	r1, r4
 800b0ac:	4638      	mov	r0, r7
 800b0ae:	f7ff ffa5 	bl	800affc <_Bfree>
 800b0b2:	4644      	mov	r4, r8
 800b0b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b0b8:	3501      	adds	r5, #1
 800b0ba:	615e      	str	r6, [r3, #20]
 800b0bc:	6125      	str	r5, [r4, #16]
 800b0be:	4620      	mov	r0, r4
 800b0c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0c4:	0800c2d8 	.word	0x0800c2d8
 800b0c8:	0800c2e9 	.word	0x0800c2e9

0800b0cc <__hi0bits>:
 800b0cc:	0c03      	lsrs	r3, r0, #16
 800b0ce:	041b      	lsls	r3, r3, #16
 800b0d0:	b9d3      	cbnz	r3, 800b108 <__hi0bits+0x3c>
 800b0d2:	0400      	lsls	r0, r0, #16
 800b0d4:	2310      	movs	r3, #16
 800b0d6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b0da:	bf04      	itt	eq
 800b0dc:	0200      	lsleq	r0, r0, #8
 800b0de:	3308      	addeq	r3, #8
 800b0e0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b0e4:	bf04      	itt	eq
 800b0e6:	0100      	lsleq	r0, r0, #4
 800b0e8:	3304      	addeq	r3, #4
 800b0ea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b0ee:	bf04      	itt	eq
 800b0f0:	0080      	lsleq	r0, r0, #2
 800b0f2:	3302      	addeq	r3, #2
 800b0f4:	2800      	cmp	r0, #0
 800b0f6:	db05      	blt.n	800b104 <__hi0bits+0x38>
 800b0f8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b0fc:	f103 0301 	add.w	r3, r3, #1
 800b100:	bf08      	it	eq
 800b102:	2320      	moveq	r3, #32
 800b104:	4618      	mov	r0, r3
 800b106:	4770      	bx	lr
 800b108:	2300      	movs	r3, #0
 800b10a:	e7e4      	b.n	800b0d6 <__hi0bits+0xa>

0800b10c <__lo0bits>:
 800b10c:	6803      	ldr	r3, [r0, #0]
 800b10e:	f013 0207 	ands.w	r2, r3, #7
 800b112:	d00c      	beq.n	800b12e <__lo0bits+0x22>
 800b114:	07d9      	lsls	r1, r3, #31
 800b116:	d422      	bmi.n	800b15e <__lo0bits+0x52>
 800b118:	079a      	lsls	r2, r3, #30
 800b11a:	bf49      	itett	mi
 800b11c:	085b      	lsrmi	r3, r3, #1
 800b11e:	089b      	lsrpl	r3, r3, #2
 800b120:	6003      	strmi	r3, [r0, #0]
 800b122:	2201      	movmi	r2, #1
 800b124:	bf5c      	itt	pl
 800b126:	6003      	strpl	r3, [r0, #0]
 800b128:	2202      	movpl	r2, #2
 800b12a:	4610      	mov	r0, r2
 800b12c:	4770      	bx	lr
 800b12e:	b299      	uxth	r1, r3
 800b130:	b909      	cbnz	r1, 800b136 <__lo0bits+0x2a>
 800b132:	0c1b      	lsrs	r3, r3, #16
 800b134:	2210      	movs	r2, #16
 800b136:	b2d9      	uxtb	r1, r3
 800b138:	b909      	cbnz	r1, 800b13e <__lo0bits+0x32>
 800b13a:	3208      	adds	r2, #8
 800b13c:	0a1b      	lsrs	r3, r3, #8
 800b13e:	0719      	lsls	r1, r3, #28
 800b140:	bf04      	itt	eq
 800b142:	091b      	lsreq	r3, r3, #4
 800b144:	3204      	addeq	r2, #4
 800b146:	0799      	lsls	r1, r3, #30
 800b148:	bf04      	itt	eq
 800b14a:	089b      	lsreq	r3, r3, #2
 800b14c:	3202      	addeq	r2, #2
 800b14e:	07d9      	lsls	r1, r3, #31
 800b150:	d403      	bmi.n	800b15a <__lo0bits+0x4e>
 800b152:	085b      	lsrs	r3, r3, #1
 800b154:	f102 0201 	add.w	r2, r2, #1
 800b158:	d003      	beq.n	800b162 <__lo0bits+0x56>
 800b15a:	6003      	str	r3, [r0, #0]
 800b15c:	e7e5      	b.n	800b12a <__lo0bits+0x1e>
 800b15e:	2200      	movs	r2, #0
 800b160:	e7e3      	b.n	800b12a <__lo0bits+0x1e>
 800b162:	2220      	movs	r2, #32
 800b164:	e7e1      	b.n	800b12a <__lo0bits+0x1e>
	...

0800b168 <__i2b>:
 800b168:	b510      	push	{r4, lr}
 800b16a:	460c      	mov	r4, r1
 800b16c:	2101      	movs	r1, #1
 800b16e:	f7ff ff05 	bl	800af7c <_Balloc>
 800b172:	4602      	mov	r2, r0
 800b174:	b928      	cbnz	r0, 800b182 <__i2b+0x1a>
 800b176:	4b05      	ldr	r3, [pc, #20]	; (800b18c <__i2b+0x24>)
 800b178:	4805      	ldr	r0, [pc, #20]	; (800b190 <__i2b+0x28>)
 800b17a:	f240 1145 	movw	r1, #325	; 0x145
 800b17e:	f000 fca9 	bl	800bad4 <__assert_func>
 800b182:	2301      	movs	r3, #1
 800b184:	6144      	str	r4, [r0, #20]
 800b186:	6103      	str	r3, [r0, #16]
 800b188:	bd10      	pop	{r4, pc}
 800b18a:	bf00      	nop
 800b18c:	0800c2d8 	.word	0x0800c2d8
 800b190:	0800c2e9 	.word	0x0800c2e9

0800b194 <__multiply>:
 800b194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b198:	4691      	mov	r9, r2
 800b19a:	690a      	ldr	r2, [r1, #16]
 800b19c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b1a0:	429a      	cmp	r2, r3
 800b1a2:	bfb8      	it	lt
 800b1a4:	460b      	movlt	r3, r1
 800b1a6:	460c      	mov	r4, r1
 800b1a8:	bfbc      	itt	lt
 800b1aa:	464c      	movlt	r4, r9
 800b1ac:	4699      	movlt	r9, r3
 800b1ae:	6927      	ldr	r7, [r4, #16]
 800b1b0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b1b4:	68a3      	ldr	r3, [r4, #8]
 800b1b6:	6861      	ldr	r1, [r4, #4]
 800b1b8:	eb07 060a 	add.w	r6, r7, sl
 800b1bc:	42b3      	cmp	r3, r6
 800b1be:	b085      	sub	sp, #20
 800b1c0:	bfb8      	it	lt
 800b1c2:	3101      	addlt	r1, #1
 800b1c4:	f7ff feda 	bl	800af7c <_Balloc>
 800b1c8:	b930      	cbnz	r0, 800b1d8 <__multiply+0x44>
 800b1ca:	4602      	mov	r2, r0
 800b1cc:	4b44      	ldr	r3, [pc, #272]	; (800b2e0 <__multiply+0x14c>)
 800b1ce:	4845      	ldr	r0, [pc, #276]	; (800b2e4 <__multiply+0x150>)
 800b1d0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b1d4:	f000 fc7e 	bl	800bad4 <__assert_func>
 800b1d8:	f100 0514 	add.w	r5, r0, #20
 800b1dc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b1e0:	462b      	mov	r3, r5
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	4543      	cmp	r3, r8
 800b1e6:	d321      	bcc.n	800b22c <__multiply+0x98>
 800b1e8:	f104 0314 	add.w	r3, r4, #20
 800b1ec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b1f0:	f109 0314 	add.w	r3, r9, #20
 800b1f4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b1f8:	9202      	str	r2, [sp, #8]
 800b1fa:	1b3a      	subs	r2, r7, r4
 800b1fc:	3a15      	subs	r2, #21
 800b1fe:	f022 0203 	bic.w	r2, r2, #3
 800b202:	3204      	adds	r2, #4
 800b204:	f104 0115 	add.w	r1, r4, #21
 800b208:	428f      	cmp	r7, r1
 800b20a:	bf38      	it	cc
 800b20c:	2204      	movcc	r2, #4
 800b20e:	9201      	str	r2, [sp, #4]
 800b210:	9a02      	ldr	r2, [sp, #8]
 800b212:	9303      	str	r3, [sp, #12]
 800b214:	429a      	cmp	r2, r3
 800b216:	d80c      	bhi.n	800b232 <__multiply+0x9e>
 800b218:	2e00      	cmp	r6, #0
 800b21a:	dd03      	ble.n	800b224 <__multiply+0x90>
 800b21c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b220:	2b00      	cmp	r3, #0
 800b222:	d05b      	beq.n	800b2dc <__multiply+0x148>
 800b224:	6106      	str	r6, [r0, #16]
 800b226:	b005      	add	sp, #20
 800b228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b22c:	f843 2b04 	str.w	r2, [r3], #4
 800b230:	e7d8      	b.n	800b1e4 <__multiply+0x50>
 800b232:	f8b3 a000 	ldrh.w	sl, [r3]
 800b236:	f1ba 0f00 	cmp.w	sl, #0
 800b23a:	d024      	beq.n	800b286 <__multiply+0xf2>
 800b23c:	f104 0e14 	add.w	lr, r4, #20
 800b240:	46a9      	mov	r9, r5
 800b242:	f04f 0c00 	mov.w	ip, #0
 800b246:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b24a:	f8d9 1000 	ldr.w	r1, [r9]
 800b24e:	fa1f fb82 	uxth.w	fp, r2
 800b252:	b289      	uxth	r1, r1
 800b254:	fb0a 110b 	mla	r1, sl, fp, r1
 800b258:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b25c:	f8d9 2000 	ldr.w	r2, [r9]
 800b260:	4461      	add	r1, ip
 800b262:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b266:	fb0a c20b 	mla	r2, sl, fp, ip
 800b26a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b26e:	b289      	uxth	r1, r1
 800b270:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b274:	4577      	cmp	r7, lr
 800b276:	f849 1b04 	str.w	r1, [r9], #4
 800b27a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b27e:	d8e2      	bhi.n	800b246 <__multiply+0xb2>
 800b280:	9a01      	ldr	r2, [sp, #4]
 800b282:	f845 c002 	str.w	ip, [r5, r2]
 800b286:	9a03      	ldr	r2, [sp, #12]
 800b288:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b28c:	3304      	adds	r3, #4
 800b28e:	f1b9 0f00 	cmp.w	r9, #0
 800b292:	d021      	beq.n	800b2d8 <__multiply+0x144>
 800b294:	6829      	ldr	r1, [r5, #0]
 800b296:	f104 0c14 	add.w	ip, r4, #20
 800b29a:	46ae      	mov	lr, r5
 800b29c:	f04f 0a00 	mov.w	sl, #0
 800b2a0:	f8bc b000 	ldrh.w	fp, [ip]
 800b2a4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b2a8:	fb09 220b 	mla	r2, r9, fp, r2
 800b2ac:	4452      	add	r2, sl
 800b2ae:	b289      	uxth	r1, r1
 800b2b0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b2b4:	f84e 1b04 	str.w	r1, [lr], #4
 800b2b8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b2bc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b2c0:	f8be 1000 	ldrh.w	r1, [lr]
 800b2c4:	fb09 110a 	mla	r1, r9, sl, r1
 800b2c8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b2cc:	4567      	cmp	r7, ip
 800b2ce:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b2d2:	d8e5      	bhi.n	800b2a0 <__multiply+0x10c>
 800b2d4:	9a01      	ldr	r2, [sp, #4]
 800b2d6:	50a9      	str	r1, [r5, r2]
 800b2d8:	3504      	adds	r5, #4
 800b2da:	e799      	b.n	800b210 <__multiply+0x7c>
 800b2dc:	3e01      	subs	r6, #1
 800b2de:	e79b      	b.n	800b218 <__multiply+0x84>
 800b2e0:	0800c2d8 	.word	0x0800c2d8
 800b2e4:	0800c2e9 	.word	0x0800c2e9

0800b2e8 <__pow5mult>:
 800b2e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2ec:	4615      	mov	r5, r2
 800b2ee:	f012 0203 	ands.w	r2, r2, #3
 800b2f2:	4606      	mov	r6, r0
 800b2f4:	460f      	mov	r7, r1
 800b2f6:	d007      	beq.n	800b308 <__pow5mult+0x20>
 800b2f8:	4c25      	ldr	r4, [pc, #148]	; (800b390 <__pow5mult+0xa8>)
 800b2fa:	3a01      	subs	r2, #1
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b302:	f7ff fe9d 	bl	800b040 <__multadd>
 800b306:	4607      	mov	r7, r0
 800b308:	10ad      	asrs	r5, r5, #2
 800b30a:	d03d      	beq.n	800b388 <__pow5mult+0xa0>
 800b30c:	69f4      	ldr	r4, [r6, #28]
 800b30e:	b97c      	cbnz	r4, 800b330 <__pow5mult+0x48>
 800b310:	2010      	movs	r0, #16
 800b312:	f7ff fd7f 	bl	800ae14 <malloc>
 800b316:	4602      	mov	r2, r0
 800b318:	61f0      	str	r0, [r6, #28]
 800b31a:	b928      	cbnz	r0, 800b328 <__pow5mult+0x40>
 800b31c:	4b1d      	ldr	r3, [pc, #116]	; (800b394 <__pow5mult+0xac>)
 800b31e:	481e      	ldr	r0, [pc, #120]	; (800b398 <__pow5mult+0xb0>)
 800b320:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b324:	f000 fbd6 	bl	800bad4 <__assert_func>
 800b328:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b32c:	6004      	str	r4, [r0, #0]
 800b32e:	60c4      	str	r4, [r0, #12]
 800b330:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b334:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b338:	b94c      	cbnz	r4, 800b34e <__pow5mult+0x66>
 800b33a:	f240 2171 	movw	r1, #625	; 0x271
 800b33e:	4630      	mov	r0, r6
 800b340:	f7ff ff12 	bl	800b168 <__i2b>
 800b344:	2300      	movs	r3, #0
 800b346:	f8c8 0008 	str.w	r0, [r8, #8]
 800b34a:	4604      	mov	r4, r0
 800b34c:	6003      	str	r3, [r0, #0]
 800b34e:	f04f 0900 	mov.w	r9, #0
 800b352:	07eb      	lsls	r3, r5, #31
 800b354:	d50a      	bpl.n	800b36c <__pow5mult+0x84>
 800b356:	4639      	mov	r1, r7
 800b358:	4622      	mov	r2, r4
 800b35a:	4630      	mov	r0, r6
 800b35c:	f7ff ff1a 	bl	800b194 <__multiply>
 800b360:	4639      	mov	r1, r7
 800b362:	4680      	mov	r8, r0
 800b364:	4630      	mov	r0, r6
 800b366:	f7ff fe49 	bl	800affc <_Bfree>
 800b36a:	4647      	mov	r7, r8
 800b36c:	106d      	asrs	r5, r5, #1
 800b36e:	d00b      	beq.n	800b388 <__pow5mult+0xa0>
 800b370:	6820      	ldr	r0, [r4, #0]
 800b372:	b938      	cbnz	r0, 800b384 <__pow5mult+0x9c>
 800b374:	4622      	mov	r2, r4
 800b376:	4621      	mov	r1, r4
 800b378:	4630      	mov	r0, r6
 800b37a:	f7ff ff0b 	bl	800b194 <__multiply>
 800b37e:	6020      	str	r0, [r4, #0]
 800b380:	f8c0 9000 	str.w	r9, [r0]
 800b384:	4604      	mov	r4, r0
 800b386:	e7e4      	b.n	800b352 <__pow5mult+0x6a>
 800b388:	4638      	mov	r0, r7
 800b38a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b38e:	bf00      	nop
 800b390:	0800c438 	.word	0x0800c438
 800b394:	0800c269 	.word	0x0800c269
 800b398:	0800c2e9 	.word	0x0800c2e9

0800b39c <__lshift>:
 800b39c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3a0:	460c      	mov	r4, r1
 800b3a2:	6849      	ldr	r1, [r1, #4]
 800b3a4:	6923      	ldr	r3, [r4, #16]
 800b3a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b3aa:	68a3      	ldr	r3, [r4, #8]
 800b3ac:	4607      	mov	r7, r0
 800b3ae:	4691      	mov	r9, r2
 800b3b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b3b4:	f108 0601 	add.w	r6, r8, #1
 800b3b8:	42b3      	cmp	r3, r6
 800b3ba:	db0b      	blt.n	800b3d4 <__lshift+0x38>
 800b3bc:	4638      	mov	r0, r7
 800b3be:	f7ff fddd 	bl	800af7c <_Balloc>
 800b3c2:	4605      	mov	r5, r0
 800b3c4:	b948      	cbnz	r0, 800b3da <__lshift+0x3e>
 800b3c6:	4602      	mov	r2, r0
 800b3c8:	4b28      	ldr	r3, [pc, #160]	; (800b46c <__lshift+0xd0>)
 800b3ca:	4829      	ldr	r0, [pc, #164]	; (800b470 <__lshift+0xd4>)
 800b3cc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b3d0:	f000 fb80 	bl	800bad4 <__assert_func>
 800b3d4:	3101      	adds	r1, #1
 800b3d6:	005b      	lsls	r3, r3, #1
 800b3d8:	e7ee      	b.n	800b3b8 <__lshift+0x1c>
 800b3da:	2300      	movs	r3, #0
 800b3dc:	f100 0114 	add.w	r1, r0, #20
 800b3e0:	f100 0210 	add.w	r2, r0, #16
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	4553      	cmp	r3, sl
 800b3e8:	db33      	blt.n	800b452 <__lshift+0xb6>
 800b3ea:	6920      	ldr	r0, [r4, #16]
 800b3ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b3f0:	f104 0314 	add.w	r3, r4, #20
 800b3f4:	f019 091f 	ands.w	r9, r9, #31
 800b3f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b3fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b400:	d02b      	beq.n	800b45a <__lshift+0xbe>
 800b402:	f1c9 0e20 	rsb	lr, r9, #32
 800b406:	468a      	mov	sl, r1
 800b408:	2200      	movs	r2, #0
 800b40a:	6818      	ldr	r0, [r3, #0]
 800b40c:	fa00 f009 	lsl.w	r0, r0, r9
 800b410:	4310      	orrs	r0, r2
 800b412:	f84a 0b04 	str.w	r0, [sl], #4
 800b416:	f853 2b04 	ldr.w	r2, [r3], #4
 800b41a:	459c      	cmp	ip, r3
 800b41c:	fa22 f20e 	lsr.w	r2, r2, lr
 800b420:	d8f3      	bhi.n	800b40a <__lshift+0x6e>
 800b422:	ebac 0304 	sub.w	r3, ip, r4
 800b426:	3b15      	subs	r3, #21
 800b428:	f023 0303 	bic.w	r3, r3, #3
 800b42c:	3304      	adds	r3, #4
 800b42e:	f104 0015 	add.w	r0, r4, #21
 800b432:	4584      	cmp	ip, r0
 800b434:	bf38      	it	cc
 800b436:	2304      	movcc	r3, #4
 800b438:	50ca      	str	r2, [r1, r3]
 800b43a:	b10a      	cbz	r2, 800b440 <__lshift+0xa4>
 800b43c:	f108 0602 	add.w	r6, r8, #2
 800b440:	3e01      	subs	r6, #1
 800b442:	4638      	mov	r0, r7
 800b444:	612e      	str	r6, [r5, #16]
 800b446:	4621      	mov	r1, r4
 800b448:	f7ff fdd8 	bl	800affc <_Bfree>
 800b44c:	4628      	mov	r0, r5
 800b44e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b452:	f842 0f04 	str.w	r0, [r2, #4]!
 800b456:	3301      	adds	r3, #1
 800b458:	e7c5      	b.n	800b3e6 <__lshift+0x4a>
 800b45a:	3904      	subs	r1, #4
 800b45c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b460:	f841 2f04 	str.w	r2, [r1, #4]!
 800b464:	459c      	cmp	ip, r3
 800b466:	d8f9      	bhi.n	800b45c <__lshift+0xc0>
 800b468:	e7ea      	b.n	800b440 <__lshift+0xa4>
 800b46a:	bf00      	nop
 800b46c:	0800c2d8 	.word	0x0800c2d8
 800b470:	0800c2e9 	.word	0x0800c2e9

0800b474 <__mcmp>:
 800b474:	b530      	push	{r4, r5, lr}
 800b476:	6902      	ldr	r2, [r0, #16]
 800b478:	690c      	ldr	r4, [r1, #16]
 800b47a:	1b12      	subs	r2, r2, r4
 800b47c:	d10e      	bne.n	800b49c <__mcmp+0x28>
 800b47e:	f100 0314 	add.w	r3, r0, #20
 800b482:	3114      	adds	r1, #20
 800b484:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b488:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b48c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b490:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b494:	42a5      	cmp	r5, r4
 800b496:	d003      	beq.n	800b4a0 <__mcmp+0x2c>
 800b498:	d305      	bcc.n	800b4a6 <__mcmp+0x32>
 800b49a:	2201      	movs	r2, #1
 800b49c:	4610      	mov	r0, r2
 800b49e:	bd30      	pop	{r4, r5, pc}
 800b4a0:	4283      	cmp	r3, r0
 800b4a2:	d3f3      	bcc.n	800b48c <__mcmp+0x18>
 800b4a4:	e7fa      	b.n	800b49c <__mcmp+0x28>
 800b4a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b4aa:	e7f7      	b.n	800b49c <__mcmp+0x28>

0800b4ac <__mdiff>:
 800b4ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4b0:	460c      	mov	r4, r1
 800b4b2:	4606      	mov	r6, r0
 800b4b4:	4611      	mov	r1, r2
 800b4b6:	4620      	mov	r0, r4
 800b4b8:	4690      	mov	r8, r2
 800b4ba:	f7ff ffdb 	bl	800b474 <__mcmp>
 800b4be:	1e05      	subs	r5, r0, #0
 800b4c0:	d110      	bne.n	800b4e4 <__mdiff+0x38>
 800b4c2:	4629      	mov	r1, r5
 800b4c4:	4630      	mov	r0, r6
 800b4c6:	f7ff fd59 	bl	800af7c <_Balloc>
 800b4ca:	b930      	cbnz	r0, 800b4da <__mdiff+0x2e>
 800b4cc:	4b3a      	ldr	r3, [pc, #232]	; (800b5b8 <__mdiff+0x10c>)
 800b4ce:	4602      	mov	r2, r0
 800b4d0:	f240 2137 	movw	r1, #567	; 0x237
 800b4d4:	4839      	ldr	r0, [pc, #228]	; (800b5bc <__mdiff+0x110>)
 800b4d6:	f000 fafd 	bl	800bad4 <__assert_func>
 800b4da:	2301      	movs	r3, #1
 800b4dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b4e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4e4:	bfa4      	itt	ge
 800b4e6:	4643      	movge	r3, r8
 800b4e8:	46a0      	movge	r8, r4
 800b4ea:	4630      	mov	r0, r6
 800b4ec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b4f0:	bfa6      	itte	ge
 800b4f2:	461c      	movge	r4, r3
 800b4f4:	2500      	movge	r5, #0
 800b4f6:	2501      	movlt	r5, #1
 800b4f8:	f7ff fd40 	bl	800af7c <_Balloc>
 800b4fc:	b920      	cbnz	r0, 800b508 <__mdiff+0x5c>
 800b4fe:	4b2e      	ldr	r3, [pc, #184]	; (800b5b8 <__mdiff+0x10c>)
 800b500:	4602      	mov	r2, r0
 800b502:	f240 2145 	movw	r1, #581	; 0x245
 800b506:	e7e5      	b.n	800b4d4 <__mdiff+0x28>
 800b508:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b50c:	6926      	ldr	r6, [r4, #16]
 800b50e:	60c5      	str	r5, [r0, #12]
 800b510:	f104 0914 	add.w	r9, r4, #20
 800b514:	f108 0514 	add.w	r5, r8, #20
 800b518:	f100 0e14 	add.w	lr, r0, #20
 800b51c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b520:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b524:	f108 0210 	add.w	r2, r8, #16
 800b528:	46f2      	mov	sl, lr
 800b52a:	2100      	movs	r1, #0
 800b52c:	f859 3b04 	ldr.w	r3, [r9], #4
 800b530:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b534:	fa11 f88b 	uxtah	r8, r1, fp
 800b538:	b299      	uxth	r1, r3
 800b53a:	0c1b      	lsrs	r3, r3, #16
 800b53c:	eba8 0801 	sub.w	r8, r8, r1
 800b540:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b544:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b548:	fa1f f888 	uxth.w	r8, r8
 800b54c:	1419      	asrs	r1, r3, #16
 800b54e:	454e      	cmp	r6, r9
 800b550:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b554:	f84a 3b04 	str.w	r3, [sl], #4
 800b558:	d8e8      	bhi.n	800b52c <__mdiff+0x80>
 800b55a:	1b33      	subs	r3, r6, r4
 800b55c:	3b15      	subs	r3, #21
 800b55e:	f023 0303 	bic.w	r3, r3, #3
 800b562:	3304      	adds	r3, #4
 800b564:	3415      	adds	r4, #21
 800b566:	42a6      	cmp	r6, r4
 800b568:	bf38      	it	cc
 800b56a:	2304      	movcc	r3, #4
 800b56c:	441d      	add	r5, r3
 800b56e:	4473      	add	r3, lr
 800b570:	469e      	mov	lr, r3
 800b572:	462e      	mov	r6, r5
 800b574:	4566      	cmp	r6, ip
 800b576:	d30e      	bcc.n	800b596 <__mdiff+0xea>
 800b578:	f10c 0203 	add.w	r2, ip, #3
 800b57c:	1b52      	subs	r2, r2, r5
 800b57e:	f022 0203 	bic.w	r2, r2, #3
 800b582:	3d03      	subs	r5, #3
 800b584:	45ac      	cmp	ip, r5
 800b586:	bf38      	it	cc
 800b588:	2200      	movcc	r2, #0
 800b58a:	4413      	add	r3, r2
 800b58c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b590:	b17a      	cbz	r2, 800b5b2 <__mdiff+0x106>
 800b592:	6107      	str	r7, [r0, #16]
 800b594:	e7a4      	b.n	800b4e0 <__mdiff+0x34>
 800b596:	f856 8b04 	ldr.w	r8, [r6], #4
 800b59a:	fa11 f288 	uxtah	r2, r1, r8
 800b59e:	1414      	asrs	r4, r2, #16
 800b5a0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b5a4:	b292      	uxth	r2, r2
 800b5a6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b5aa:	f84e 2b04 	str.w	r2, [lr], #4
 800b5ae:	1421      	asrs	r1, r4, #16
 800b5b0:	e7e0      	b.n	800b574 <__mdiff+0xc8>
 800b5b2:	3f01      	subs	r7, #1
 800b5b4:	e7ea      	b.n	800b58c <__mdiff+0xe0>
 800b5b6:	bf00      	nop
 800b5b8:	0800c2d8 	.word	0x0800c2d8
 800b5bc:	0800c2e9 	.word	0x0800c2e9

0800b5c0 <__d2b>:
 800b5c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b5c4:	460f      	mov	r7, r1
 800b5c6:	2101      	movs	r1, #1
 800b5c8:	ec59 8b10 	vmov	r8, r9, d0
 800b5cc:	4616      	mov	r6, r2
 800b5ce:	f7ff fcd5 	bl	800af7c <_Balloc>
 800b5d2:	4604      	mov	r4, r0
 800b5d4:	b930      	cbnz	r0, 800b5e4 <__d2b+0x24>
 800b5d6:	4602      	mov	r2, r0
 800b5d8:	4b24      	ldr	r3, [pc, #144]	; (800b66c <__d2b+0xac>)
 800b5da:	4825      	ldr	r0, [pc, #148]	; (800b670 <__d2b+0xb0>)
 800b5dc:	f240 310f 	movw	r1, #783	; 0x30f
 800b5e0:	f000 fa78 	bl	800bad4 <__assert_func>
 800b5e4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b5e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b5ec:	bb2d      	cbnz	r5, 800b63a <__d2b+0x7a>
 800b5ee:	9301      	str	r3, [sp, #4]
 800b5f0:	f1b8 0300 	subs.w	r3, r8, #0
 800b5f4:	d026      	beq.n	800b644 <__d2b+0x84>
 800b5f6:	4668      	mov	r0, sp
 800b5f8:	9300      	str	r3, [sp, #0]
 800b5fa:	f7ff fd87 	bl	800b10c <__lo0bits>
 800b5fe:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b602:	b1e8      	cbz	r0, 800b640 <__d2b+0x80>
 800b604:	f1c0 0320 	rsb	r3, r0, #32
 800b608:	fa02 f303 	lsl.w	r3, r2, r3
 800b60c:	430b      	orrs	r3, r1
 800b60e:	40c2      	lsrs	r2, r0
 800b610:	6163      	str	r3, [r4, #20]
 800b612:	9201      	str	r2, [sp, #4]
 800b614:	9b01      	ldr	r3, [sp, #4]
 800b616:	61a3      	str	r3, [r4, #24]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	bf14      	ite	ne
 800b61c:	2202      	movne	r2, #2
 800b61e:	2201      	moveq	r2, #1
 800b620:	6122      	str	r2, [r4, #16]
 800b622:	b1bd      	cbz	r5, 800b654 <__d2b+0x94>
 800b624:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b628:	4405      	add	r5, r0
 800b62a:	603d      	str	r5, [r7, #0]
 800b62c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b630:	6030      	str	r0, [r6, #0]
 800b632:	4620      	mov	r0, r4
 800b634:	b003      	add	sp, #12
 800b636:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b63a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b63e:	e7d6      	b.n	800b5ee <__d2b+0x2e>
 800b640:	6161      	str	r1, [r4, #20]
 800b642:	e7e7      	b.n	800b614 <__d2b+0x54>
 800b644:	a801      	add	r0, sp, #4
 800b646:	f7ff fd61 	bl	800b10c <__lo0bits>
 800b64a:	9b01      	ldr	r3, [sp, #4]
 800b64c:	6163      	str	r3, [r4, #20]
 800b64e:	3020      	adds	r0, #32
 800b650:	2201      	movs	r2, #1
 800b652:	e7e5      	b.n	800b620 <__d2b+0x60>
 800b654:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b658:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b65c:	6038      	str	r0, [r7, #0]
 800b65e:	6918      	ldr	r0, [r3, #16]
 800b660:	f7ff fd34 	bl	800b0cc <__hi0bits>
 800b664:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b668:	e7e2      	b.n	800b630 <__d2b+0x70>
 800b66a:	bf00      	nop
 800b66c:	0800c2d8 	.word	0x0800c2d8
 800b670:	0800c2e9 	.word	0x0800c2e9

0800b674 <__ssputs_r>:
 800b674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b678:	688e      	ldr	r6, [r1, #8]
 800b67a:	461f      	mov	r7, r3
 800b67c:	42be      	cmp	r6, r7
 800b67e:	680b      	ldr	r3, [r1, #0]
 800b680:	4682      	mov	sl, r0
 800b682:	460c      	mov	r4, r1
 800b684:	4690      	mov	r8, r2
 800b686:	d82c      	bhi.n	800b6e2 <__ssputs_r+0x6e>
 800b688:	898a      	ldrh	r2, [r1, #12]
 800b68a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b68e:	d026      	beq.n	800b6de <__ssputs_r+0x6a>
 800b690:	6965      	ldr	r5, [r4, #20]
 800b692:	6909      	ldr	r1, [r1, #16]
 800b694:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b698:	eba3 0901 	sub.w	r9, r3, r1
 800b69c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b6a0:	1c7b      	adds	r3, r7, #1
 800b6a2:	444b      	add	r3, r9
 800b6a4:	106d      	asrs	r5, r5, #1
 800b6a6:	429d      	cmp	r5, r3
 800b6a8:	bf38      	it	cc
 800b6aa:	461d      	movcc	r5, r3
 800b6ac:	0553      	lsls	r3, r2, #21
 800b6ae:	d527      	bpl.n	800b700 <__ssputs_r+0x8c>
 800b6b0:	4629      	mov	r1, r5
 800b6b2:	f7ff fbd7 	bl	800ae64 <_malloc_r>
 800b6b6:	4606      	mov	r6, r0
 800b6b8:	b360      	cbz	r0, 800b714 <__ssputs_r+0xa0>
 800b6ba:	6921      	ldr	r1, [r4, #16]
 800b6bc:	464a      	mov	r2, r9
 800b6be:	f7fe fcd4 	bl	800a06a <memcpy>
 800b6c2:	89a3      	ldrh	r3, [r4, #12]
 800b6c4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b6c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6cc:	81a3      	strh	r3, [r4, #12]
 800b6ce:	6126      	str	r6, [r4, #16]
 800b6d0:	6165      	str	r5, [r4, #20]
 800b6d2:	444e      	add	r6, r9
 800b6d4:	eba5 0509 	sub.w	r5, r5, r9
 800b6d8:	6026      	str	r6, [r4, #0]
 800b6da:	60a5      	str	r5, [r4, #8]
 800b6dc:	463e      	mov	r6, r7
 800b6de:	42be      	cmp	r6, r7
 800b6e0:	d900      	bls.n	800b6e4 <__ssputs_r+0x70>
 800b6e2:	463e      	mov	r6, r7
 800b6e4:	6820      	ldr	r0, [r4, #0]
 800b6e6:	4632      	mov	r2, r6
 800b6e8:	4641      	mov	r1, r8
 800b6ea:	f000 f9c9 	bl	800ba80 <memmove>
 800b6ee:	68a3      	ldr	r3, [r4, #8]
 800b6f0:	1b9b      	subs	r3, r3, r6
 800b6f2:	60a3      	str	r3, [r4, #8]
 800b6f4:	6823      	ldr	r3, [r4, #0]
 800b6f6:	4433      	add	r3, r6
 800b6f8:	6023      	str	r3, [r4, #0]
 800b6fa:	2000      	movs	r0, #0
 800b6fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b700:	462a      	mov	r2, r5
 800b702:	f000 fa2d 	bl	800bb60 <_realloc_r>
 800b706:	4606      	mov	r6, r0
 800b708:	2800      	cmp	r0, #0
 800b70a:	d1e0      	bne.n	800b6ce <__ssputs_r+0x5a>
 800b70c:	6921      	ldr	r1, [r4, #16]
 800b70e:	4650      	mov	r0, sl
 800b710:	f7ff fb34 	bl	800ad7c <_free_r>
 800b714:	230c      	movs	r3, #12
 800b716:	f8ca 3000 	str.w	r3, [sl]
 800b71a:	89a3      	ldrh	r3, [r4, #12]
 800b71c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b720:	81a3      	strh	r3, [r4, #12]
 800b722:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b726:	e7e9      	b.n	800b6fc <__ssputs_r+0x88>

0800b728 <_svfiprintf_r>:
 800b728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b72c:	4698      	mov	r8, r3
 800b72e:	898b      	ldrh	r3, [r1, #12]
 800b730:	061b      	lsls	r3, r3, #24
 800b732:	b09d      	sub	sp, #116	; 0x74
 800b734:	4607      	mov	r7, r0
 800b736:	460d      	mov	r5, r1
 800b738:	4614      	mov	r4, r2
 800b73a:	d50e      	bpl.n	800b75a <_svfiprintf_r+0x32>
 800b73c:	690b      	ldr	r3, [r1, #16]
 800b73e:	b963      	cbnz	r3, 800b75a <_svfiprintf_r+0x32>
 800b740:	2140      	movs	r1, #64	; 0x40
 800b742:	f7ff fb8f 	bl	800ae64 <_malloc_r>
 800b746:	6028      	str	r0, [r5, #0]
 800b748:	6128      	str	r0, [r5, #16]
 800b74a:	b920      	cbnz	r0, 800b756 <_svfiprintf_r+0x2e>
 800b74c:	230c      	movs	r3, #12
 800b74e:	603b      	str	r3, [r7, #0]
 800b750:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b754:	e0d0      	b.n	800b8f8 <_svfiprintf_r+0x1d0>
 800b756:	2340      	movs	r3, #64	; 0x40
 800b758:	616b      	str	r3, [r5, #20]
 800b75a:	2300      	movs	r3, #0
 800b75c:	9309      	str	r3, [sp, #36]	; 0x24
 800b75e:	2320      	movs	r3, #32
 800b760:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b764:	f8cd 800c 	str.w	r8, [sp, #12]
 800b768:	2330      	movs	r3, #48	; 0x30
 800b76a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b910 <_svfiprintf_r+0x1e8>
 800b76e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b772:	f04f 0901 	mov.w	r9, #1
 800b776:	4623      	mov	r3, r4
 800b778:	469a      	mov	sl, r3
 800b77a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b77e:	b10a      	cbz	r2, 800b784 <_svfiprintf_r+0x5c>
 800b780:	2a25      	cmp	r2, #37	; 0x25
 800b782:	d1f9      	bne.n	800b778 <_svfiprintf_r+0x50>
 800b784:	ebba 0b04 	subs.w	fp, sl, r4
 800b788:	d00b      	beq.n	800b7a2 <_svfiprintf_r+0x7a>
 800b78a:	465b      	mov	r3, fp
 800b78c:	4622      	mov	r2, r4
 800b78e:	4629      	mov	r1, r5
 800b790:	4638      	mov	r0, r7
 800b792:	f7ff ff6f 	bl	800b674 <__ssputs_r>
 800b796:	3001      	adds	r0, #1
 800b798:	f000 80a9 	beq.w	800b8ee <_svfiprintf_r+0x1c6>
 800b79c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b79e:	445a      	add	r2, fp
 800b7a0:	9209      	str	r2, [sp, #36]	; 0x24
 800b7a2:	f89a 3000 	ldrb.w	r3, [sl]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	f000 80a1 	beq.w	800b8ee <_svfiprintf_r+0x1c6>
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b7b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b7b6:	f10a 0a01 	add.w	sl, sl, #1
 800b7ba:	9304      	str	r3, [sp, #16]
 800b7bc:	9307      	str	r3, [sp, #28]
 800b7be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b7c2:	931a      	str	r3, [sp, #104]	; 0x68
 800b7c4:	4654      	mov	r4, sl
 800b7c6:	2205      	movs	r2, #5
 800b7c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7cc:	4850      	ldr	r0, [pc, #320]	; (800b910 <_svfiprintf_r+0x1e8>)
 800b7ce:	f7f4 fcff 	bl	80001d0 <memchr>
 800b7d2:	9a04      	ldr	r2, [sp, #16]
 800b7d4:	b9d8      	cbnz	r0, 800b80e <_svfiprintf_r+0xe6>
 800b7d6:	06d0      	lsls	r0, r2, #27
 800b7d8:	bf44      	itt	mi
 800b7da:	2320      	movmi	r3, #32
 800b7dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7e0:	0711      	lsls	r1, r2, #28
 800b7e2:	bf44      	itt	mi
 800b7e4:	232b      	movmi	r3, #43	; 0x2b
 800b7e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7ea:	f89a 3000 	ldrb.w	r3, [sl]
 800b7ee:	2b2a      	cmp	r3, #42	; 0x2a
 800b7f0:	d015      	beq.n	800b81e <_svfiprintf_r+0xf6>
 800b7f2:	9a07      	ldr	r2, [sp, #28]
 800b7f4:	4654      	mov	r4, sl
 800b7f6:	2000      	movs	r0, #0
 800b7f8:	f04f 0c0a 	mov.w	ip, #10
 800b7fc:	4621      	mov	r1, r4
 800b7fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b802:	3b30      	subs	r3, #48	; 0x30
 800b804:	2b09      	cmp	r3, #9
 800b806:	d94d      	bls.n	800b8a4 <_svfiprintf_r+0x17c>
 800b808:	b1b0      	cbz	r0, 800b838 <_svfiprintf_r+0x110>
 800b80a:	9207      	str	r2, [sp, #28]
 800b80c:	e014      	b.n	800b838 <_svfiprintf_r+0x110>
 800b80e:	eba0 0308 	sub.w	r3, r0, r8
 800b812:	fa09 f303 	lsl.w	r3, r9, r3
 800b816:	4313      	orrs	r3, r2
 800b818:	9304      	str	r3, [sp, #16]
 800b81a:	46a2      	mov	sl, r4
 800b81c:	e7d2      	b.n	800b7c4 <_svfiprintf_r+0x9c>
 800b81e:	9b03      	ldr	r3, [sp, #12]
 800b820:	1d19      	adds	r1, r3, #4
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	9103      	str	r1, [sp, #12]
 800b826:	2b00      	cmp	r3, #0
 800b828:	bfbb      	ittet	lt
 800b82a:	425b      	neglt	r3, r3
 800b82c:	f042 0202 	orrlt.w	r2, r2, #2
 800b830:	9307      	strge	r3, [sp, #28]
 800b832:	9307      	strlt	r3, [sp, #28]
 800b834:	bfb8      	it	lt
 800b836:	9204      	strlt	r2, [sp, #16]
 800b838:	7823      	ldrb	r3, [r4, #0]
 800b83a:	2b2e      	cmp	r3, #46	; 0x2e
 800b83c:	d10c      	bne.n	800b858 <_svfiprintf_r+0x130>
 800b83e:	7863      	ldrb	r3, [r4, #1]
 800b840:	2b2a      	cmp	r3, #42	; 0x2a
 800b842:	d134      	bne.n	800b8ae <_svfiprintf_r+0x186>
 800b844:	9b03      	ldr	r3, [sp, #12]
 800b846:	1d1a      	adds	r2, r3, #4
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	9203      	str	r2, [sp, #12]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	bfb8      	it	lt
 800b850:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b854:	3402      	adds	r4, #2
 800b856:	9305      	str	r3, [sp, #20]
 800b858:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b920 <_svfiprintf_r+0x1f8>
 800b85c:	7821      	ldrb	r1, [r4, #0]
 800b85e:	2203      	movs	r2, #3
 800b860:	4650      	mov	r0, sl
 800b862:	f7f4 fcb5 	bl	80001d0 <memchr>
 800b866:	b138      	cbz	r0, 800b878 <_svfiprintf_r+0x150>
 800b868:	9b04      	ldr	r3, [sp, #16]
 800b86a:	eba0 000a 	sub.w	r0, r0, sl
 800b86e:	2240      	movs	r2, #64	; 0x40
 800b870:	4082      	lsls	r2, r0
 800b872:	4313      	orrs	r3, r2
 800b874:	3401      	adds	r4, #1
 800b876:	9304      	str	r3, [sp, #16]
 800b878:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b87c:	4825      	ldr	r0, [pc, #148]	; (800b914 <_svfiprintf_r+0x1ec>)
 800b87e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b882:	2206      	movs	r2, #6
 800b884:	f7f4 fca4 	bl	80001d0 <memchr>
 800b888:	2800      	cmp	r0, #0
 800b88a:	d038      	beq.n	800b8fe <_svfiprintf_r+0x1d6>
 800b88c:	4b22      	ldr	r3, [pc, #136]	; (800b918 <_svfiprintf_r+0x1f0>)
 800b88e:	bb1b      	cbnz	r3, 800b8d8 <_svfiprintf_r+0x1b0>
 800b890:	9b03      	ldr	r3, [sp, #12]
 800b892:	3307      	adds	r3, #7
 800b894:	f023 0307 	bic.w	r3, r3, #7
 800b898:	3308      	adds	r3, #8
 800b89a:	9303      	str	r3, [sp, #12]
 800b89c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b89e:	4433      	add	r3, r6
 800b8a0:	9309      	str	r3, [sp, #36]	; 0x24
 800b8a2:	e768      	b.n	800b776 <_svfiprintf_r+0x4e>
 800b8a4:	fb0c 3202 	mla	r2, ip, r2, r3
 800b8a8:	460c      	mov	r4, r1
 800b8aa:	2001      	movs	r0, #1
 800b8ac:	e7a6      	b.n	800b7fc <_svfiprintf_r+0xd4>
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	3401      	adds	r4, #1
 800b8b2:	9305      	str	r3, [sp, #20]
 800b8b4:	4619      	mov	r1, r3
 800b8b6:	f04f 0c0a 	mov.w	ip, #10
 800b8ba:	4620      	mov	r0, r4
 800b8bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b8c0:	3a30      	subs	r2, #48	; 0x30
 800b8c2:	2a09      	cmp	r2, #9
 800b8c4:	d903      	bls.n	800b8ce <_svfiprintf_r+0x1a6>
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d0c6      	beq.n	800b858 <_svfiprintf_r+0x130>
 800b8ca:	9105      	str	r1, [sp, #20]
 800b8cc:	e7c4      	b.n	800b858 <_svfiprintf_r+0x130>
 800b8ce:	fb0c 2101 	mla	r1, ip, r1, r2
 800b8d2:	4604      	mov	r4, r0
 800b8d4:	2301      	movs	r3, #1
 800b8d6:	e7f0      	b.n	800b8ba <_svfiprintf_r+0x192>
 800b8d8:	ab03      	add	r3, sp, #12
 800b8da:	9300      	str	r3, [sp, #0]
 800b8dc:	462a      	mov	r2, r5
 800b8de:	4b0f      	ldr	r3, [pc, #60]	; (800b91c <_svfiprintf_r+0x1f4>)
 800b8e0:	a904      	add	r1, sp, #16
 800b8e2:	4638      	mov	r0, r7
 800b8e4:	f7fd fe22 	bl	800952c <_printf_float>
 800b8e8:	1c42      	adds	r2, r0, #1
 800b8ea:	4606      	mov	r6, r0
 800b8ec:	d1d6      	bne.n	800b89c <_svfiprintf_r+0x174>
 800b8ee:	89ab      	ldrh	r3, [r5, #12]
 800b8f0:	065b      	lsls	r3, r3, #25
 800b8f2:	f53f af2d 	bmi.w	800b750 <_svfiprintf_r+0x28>
 800b8f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b8f8:	b01d      	add	sp, #116	; 0x74
 800b8fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8fe:	ab03      	add	r3, sp, #12
 800b900:	9300      	str	r3, [sp, #0]
 800b902:	462a      	mov	r2, r5
 800b904:	4b05      	ldr	r3, [pc, #20]	; (800b91c <_svfiprintf_r+0x1f4>)
 800b906:	a904      	add	r1, sp, #16
 800b908:	4638      	mov	r0, r7
 800b90a:	f7fe f8b3 	bl	8009a74 <_printf_i>
 800b90e:	e7eb      	b.n	800b8e8 <_svfiprintf_r+0x1c0>
 800b910:	0800c444 	.word	0x0800c444
 800b914:	0800c44e 	.word	0x0800c44e
 800b918:	0800952d 	.word	0x0800952d
 800b91c:	0800b675 	.word	0x0800b675
 800b920:	0800c44a 	.word	0x0800c44a

0800b924 <__sflush_r>:
 800b924:	898a      	ldrh	r2, [r1, #12]
 800b926:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b92a:	4605      	mov	r5, r0
 800b92c:	0710      	lsls	r0, r2, #28
 800b92e:	460c      	mov	r4, r1
 800b930:	d458      	bmi.n	800b9e4 <__sflush_r+0xc0>
 800b932:	684b      	ldr	r3, [r1, #4]
 800b934:	2b00      	cmp	r3, #0
 800b936:	dc05      	bgt.n	800b944 <__sflush_r+0x20>
 800b938:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	dc02      	bgt.n	800b944 <__sflush_r+0x20>
 800b93e:	2000      	movs	r0, #0
 800b940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b944:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b946:	2e00      	cmp	r6, #0
 800b948:	d0f9      	beq.n	800b93e <__sflush_r+0x1a>
 800b94a:	2300      	movs	r3, #0
 800b94c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b950:	682f      	ldr	r7, [r5, #0]
 800b952:	6a21      	ldr	r1, [r4, #32]
 800b954:	602b      	str	r3, [r5, #0]
 800b956:	d032      	beq.n	800b9be <__sflush_r+0x9a>
 800b958:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b95a:	89a3      	ldrh	r3, [r4, #12]
 800b95c:	075a      	lsls	r2, r3, #29
 800b95e:	d505      	bpl.n	800b96c <__sflush_r+0x48>
 800b960:	6863      	ldr	r3, [r4, #4]
 800b962:	1ac0      	subs	r0, r0, r3
 800b964:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b966:	b10b      	cbz	r3, 800b96c <__sflush_r+0x48>
 800b968:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b96a:	1ac0      	subs	r0, r0, r3
 800b96c:	2300      	movs	r3, #0
 800b96e:	4602      	mov	r2, r0
 800b970:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b972:	6a21      	ldr	r1, [r4, #32]
 800b974:	4628      	mov	r0, r5
 800b976:	47b0      	blx	r6
 800b978:	1c43      	adds	r3, r0, #1
 800b97a:	89a3      	ldrh	r3, [r4, #12]
 800b97c:	d106      	bne.n	800b98c <__sflush_r+0x68>
 800b97e:	6829      	ldr	r1, [r5, #0]
 800b980:	291d      	cmp	r1, #29
 800b982:	d82b      	bhi.n	800b9dc <__sflush_r+0xb8>
 800b984:	4a29      	ldr	r2, [pc, #164]	; (800ba2c <__sflush_r+0x108>)
 800b986:	410a      	asrs	r2, r1
 800b988:	07d6      	lsls	r6, r2, #31
 800b98a:	d427      	bmi.n	800b9dc <__sflush_r+0xb8>
 800b98c:	2200      	movs	r2, #0
 800b98e:	6062      	str	r2, [r4, #4]
 800b990:	04d9      	lsls	r1, r3, #19
 800b992:	6922      	ldr	r2, [r4, #16]
 800b994:	6022      	str	r2, [r4, #0]
 800b996:	d504      	bpl.n	800b9a2 <__sflush_r+0x7e>
 800b998:	1c42      	adds	r2, r0, #1
 800b99a:	d101      	bne.n	800b9a0 <__sflush_r+0x7c>
 800b99c:	682b      	ldr	r3, [r5, #0]
 800b99e:	b903      	cbnz	r3, 800b9a2 <__sflush_r+0x7e>
 800b9a0:	6560      	str	r0, [r4, #84]	; 0x54
 800b9a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b9a4:	602f      	str	r7, [r5, #0]
 800b9a6:	2900      	cmp	r1, #0
 800b9a8:	d0c9      	beq.n	800b93e <__sflush_r+0x1a>
 800b9aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b9ae:	4299      	cmp	r1, r3
 800b9b0:	d002      	beq.n	800b9b8 <__sflush_r+0x94>
 800b9b2:	4628      	mov	r0, r5
 800b9b4:	f7ff f9e2 	bl	800ad7c <_free_r>
 800b9b8:	2000      	movs	r0, #0
 800b9ba:	6360      	str	r0, [r4, #52]	; 0x34
 800b9bc:	e7c0      	b.n	800b940 <__sflush_r+0x1c>
 800b9be:	2301      	movs	r3, #1
 800b9c0:	4628      	mov	r0, r5
 800b9c2:	47b0      	blx	r6
 800b9c4:	1c41      	adds	r1, r0, #1
 800b9c6:	d1c8      	bne.n	800b95a <__sflush_r+0x36>
 800b9c8:	682b      	ldr	r3, [r5, #0]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d0c5      	beq.n	800b95a <__sflush_r+0x36>
 800b9ce:	2b1d      	cmp	r3, #29
 800b9d0:	d001      	beq.n	800b9d6 <__sflush_r+0xb2>
 800b9d2:	2b16      	cmp	r3, #22
 800b9d4:	d101      	bne.n	800b9da <__sflush_r+0xb6>
 800b9d6:	602f      	str	r7, [r5, #0]
 800b9d8:	e7b1      	b.n	800b93e <__sflush_r+0x1a>
 800b9da:	89a3      	ldrh	r3, [r4, #12]
 800b9dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9e0:	81a3      	strh	r3, [r4, #12]
 800b9e2:	e7ad      	b.n	800b940 <__sflush_r+0x1c>
 800b9e4:	690f      	ldr	r7, [r1, #16]
 800b9e6:	2f00      	cmp	r7, #0
 800b9e8:	d0a9      	beq.n	800b93e <__sflush_r+0x1a>
 800b9ea:	0793      	lsls	r3, r2, #30
 800b9ec:	680e      	ldr	r6, [r1, #0]
 800b9ee:	bf08      	it	eq
 800b9f0:	694b      	ldreq	r3, [r1, #20]
 800b9f2:	600f      	str	r7, [r1, #0]
 800b9f4:	bf18      	it	ne
 800b9f6:	2300      	movne	r3, #0
 800b9f8:	eba6 0807 	sub.w	r8, r6, r7
 800b9fc:	608b      	str	r3, [r1, #8]
 800b9fe:	f1b8 0f00 	cmp.w	r8, #0
 800ba02:	dd9c      	ble.n	800b93e <__sflush_r+0x1a>
 800ba04:	6a21      	ldr	r1, [r4, #32]
 800ba06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ba08:	4643      	mov	r3, r8
 800ba0a:	463a      	mov	r2, r7
 800ba0c:	4628      	mov	r0, r5
 800ba0e:	47b0      	blx	r6
 800ba10:	2800      	cmp	r0, #0
 800ba12:	dc06      	bgt.n	800ba22 <__sflush_r+0xfe>
 800ba14:	89a3      	ldrh	r3, [r4, #12]
 800ba16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba1a:	81a3      	strh	r3, [r4, #12]
 800ba1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ba20:	e78e      	b.n	800b940 <__sflush_r+0x1c>
 800ba22:	4407      	add	r7, r0
 800ba24:	eba8 0800 	sub.w	r8, r8, r0
 800ba28:	e7e9      	b.n	800b9fe <__sflush_r+0xda>
 800ba2a:	bf00      	nop
 800ba2c:	dfbffffe 	.word	0xdfbffffe

0800ba30 <_fflush_r>:
 800ba30:	b538      	push	{r3, r4, r5, lr}
 800ba32:	690b      	ldr	r3, [r1, #16]
 800ba34:	4605      	mov	r5, r0
 800ba36:	460c      	mov	r4, r1
 800ba38:	b913      	cbnz	r3, 800ba40 <_fflush_r+0x10>
 800ba3a:	2500      	movs	r5, #0
 800ba3c:	4628      	mov	r0, r5
 800ba3e:	bd38      	pop	{r3, r4, r5, pc}
 800ba40:	b118      	cbz	r0, 800ba4a <_fflush_r+0x1a>
 800ba42:	6a03      	ldr	r3, [r0, #32]
 800ba44:	b90b      	cbnz	r3, 800ba4a <_fflush_r+0x1a>
 800ba46:	f7fe f9c3 	bl	8009dd0 <__sinit>
 800ba4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d0f3      	beq.n	800ba3a <_fflush_r+0xa>
 800ba52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ba54:	07d0      	lsls	r0, r2, #31
 800ba56:	d404      	bmi.n	800ba62 <_fflush_r+0x32>
 800ba58:	0599      	lsls	r1, r3, #22
 800ba5a:	d402      	bmi.n	800ba62 <_fflush_r+0x32>
 800ba5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba5e:	f7fe fb02 	bl	800a066 <__retarget_lock_acquire_recursive>
 800ba62:	4628      	mov	r0, r5
 800ba64:	4621      	mov	r1, r4
 800ba66:	f7ff ff5d 	bl	800b924 <__sflush_r>
 800ba6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ba6c:	07da      	lsls	r2, r3, #31
 800ba6e:	4605      	mov	r5, r0
 800ba70:	d4e4      	bmi.n	800ba3c <_fflush_r+0xc>
 800ba72:	89a3      	ldrh	r3, [r4, #12]
 800ba74:	059b      	lsls	r3, r3, #22
 800ba76:	d4e1      	bmi.n	800ba3c <_fflush_r+0xc>
 800ba78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba7a:	f7fe faf5 	bl	800a068 <__retarget_lock_release_recursive>
 800ba7e:	e7dd      	b.n	800ba3c <_fflush_r+0xc>

0800ba80 <memmove>:
 800ba80:	4288      	cmp	r0, r1
 800ba82:	b510      	push	{r4, lr}
 800ba84:	eb01 0402 	add.w	r4, r1, r2
 800ba88:	d902      	bls.n	800ba90 <memmove+0x10>
 800ba8a:	4284      	cmp	r4, r0
 800ba8c:	4623      	mov	r3, r4
 800ba8e:	d807      	bhi.n	800baa0 <memmove+0x20>
 800ba90:	1e43      	subs	r3, r0, #1
 800ba92:	42a1      	cmp	r1, r4
 800ba94:	d008      	beq.n	800baa8 <memmove+0x28>
 800ba96:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ba9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ba9e:	e7f8      	b.n	800ba92 <memmove+0x12>
 800baa0:	4402      	add	r2, r0
 800baa2:	4601      	mov	r1, r0
 800baa4:	428a      	cmp	r2, r1
 800baa6:	d100      	bne.n	800baaa <memmove+0x2a>
 800baa8:	bd10      	pop	{r4, pc}
 800baaa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800baae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bab2:	e7f7      	b.n	800baa4 <memmove+0x24>

0800bab4 <_sbrk_r>:
 800bab4:	b538      	push	{r3, r4, r5, lr}
 800bab6:	4d06      	ldr	r5, [pc, #24]	; (800bad0 <_sbrk_r+0x1c>)
 800bab8:	2300      	movs	r3, #0
 800baba:	4604      	mov	r4, r0
 800babc:	4608      	mov	r0, r1
 800babe:	602b      	str	r3, [r5, #0]
 800bac0:	f7f6 f874 	bl	8001bac <_sbrk>
 800bac4:	1c43      	adds	r3, r0, #1
 800bac6:	d102      	bne.n	800bace <_sbrk_r+0x1a>
 800bac8:	682b      	ldr	r3, [r5, #0]
 800baca:	b103      	cbz	r3, 800bace <_sbrk_r+0x1a>
 800bacc:	6023      	str	r3, [r4, #0]
 800bace:	bd38      	pop	{r3, r4, r5, pc}
 800bad0:	20002fac 	.word	0x20002fac

0800bad4 <__assert_func>:
 800bad4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bad6:	4614      	mov	r4, r2
 800bad8:	461a      	mov	r2, r3
 800bada:	4b09      	ldr	r3, [pc, #36]	; (800bb00 <__assert_func+0x2c>)
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	4605      	mov	r5, r0
 800bae0:	68d8      	ldr	r0, [r3, #12]
 800bae2:	b14c      	cbz	r4, 800baf8 <__assert_func+0x24>
 800bae4:	4b07      	ldr	r3, [pc, #28]	; (800bb04 <__assert_func+0x30>)
 800bae6:	9100      	str	r1, [sp, #0]
 800bae8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800baec:	4906      	ldr	r1, [pc, #24]	; (800bb08 <__assert_func+0x34>)
 800baee:	462b      	mov	r3, r5
 800baf0:	f000 f872 	bl	800bbd8 <fiprintf>
 800baf4:	f000 f882 	bl	800bbfc <abort>
 800baf8:	4b04      	ldr	r3, [pc, #16]	; (800bb0c <__assert_func+0x38>)
 800bafa:	461c      	mov	r4, r3
 800bafc:	e7f3      	b.n	800bae6 <__assert_func+0x12>
 800bafe:	bf00      	nop
 800bb00:	20000068 	.word	0x20000068
 800bb04:	0800c45f 	.word	0x0800c45f
 800bb08:	0800c46c 	.word	0x0800c46c
 800bb0c:	0800c49a 	.word	0x0800c49a

0800bb10 <_calloc_r>:
 800bb10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bb12:	fba1 2402 	umull	r2, r4, r1, r2
 800bb16:	b94c      	cbnz	r4, 800bb2c <_calloc_r+0x1c>
 800bb18:	4611      	mov	r1, r2
 800bb1a:	9201      	str	r2, [sp, #4]
 800bb1c:	f7ff f9a2 	bl	800ae64 <_malloc_r>
 800bb20:	9a01      	ldr	r2, [sp, #4]
 800bb22:	4605      	mov	r5, r0
 800bb24:	b930      	cbnz	r0, 800bb34 <_calloc_r+0x24>
 800bb26:	4628      	mov	r0, r5
 800bb28:	b003      	add	sp, #12
 800bb2a:	bd30      	pop	{r4, r5, pc}
 800bb2c:	220c      	movs	r2, #12
 800bb2e:	6002      	str	r2, [r0, #0]
 800bb30:	2500      	movs	r5, #0
 800bb32:	e7f8      	b.n	800bb26 <_calloc_r+0x16>
 800bb34:	4621      	mov	r1, r4
 800bb36:	f7fe fa18 	bl	8009f6a <memset>
 800bb3a:	e7f4      	b.n	800bb26 <_calloc_r+0x16>

0800bb3c <__ascii_mbtowc>:
 800bb3c:	b082      	sub	sp, #8
 800bb3e:	b901      	cbnz	r1, 800bb42 <__ascii_mbtowc+0x6>
 800bb40:	a901      	add	r1, sp, #4
 800bb42:	b142      	cbz	r2, 800bb56 <__ascii_mbtowc+0x1a>
 800bb44:	b14b      	cbz	r3, 800bb5a <__ascii_mbtowc+0x1e>
 800bb46:	7813      	ldrb	r3, [r2, #0]
 800bb48:	600b      	str	r3, [r1, #0]
 800bb4a:	7812      	ldrb	r2, [r2, #0]
 800bb4c:	1e10      	subs	r0, r2, #0
 800bb4e:	bf18      	it	ne
 800bb50:	2001      	movne	r0, #1
 800bb52:	b002      	add	sp, #8
 800bb54:	4770      	bx	lr
 800bb56:	4610      	mov	r0, r2
 800bb58:	e7fb      	b.n	800bb52 <__ascii_mbtowc+0x16>
 800bb5a:	f06f 0001 	mvn.w	r0, #1
 800bb5e:	e7f8      	b.n	800bb52 <__ascii_mbtowc+0x16>

0800bb60 <_realloc_r>:
 800bb60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb64:	4680      	mov	r8, r0
 800bb66:	4614      	mov	r4, r2
 800bb68:	460e      	mov	r6, r1
 800bb6a:	b921      	cbnz	r1, 800bb76 <_realloc_r+0x16>
 800bb6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb70:	4611      	mov	r1, r2
 800bb72:	f7ff b977 	b.w	800ae64 <_malloc_r>
 800bb76:	b92a      	cbnz	r2, 800bb84 <_realloc_r+0x24>
 800bb78:	f7ff f900 	bl	800ad7c <_free_r>
 800bb7c:	4625      	mov	r5, r4
 800bb7e:	4628      	mov	r0, r5
 800bb80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb84:	f000 f841 	bl	800bc0a <_malloc_usable_size_r>
 800bb88:	4284      	cmp	r4, r0
 800bb8a:	4607      	mov	r7, r0
 800bb8c:	d802      	bhi.n	800bb94 <_realloc_r+0x34>
 800bb8e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bb92:	d812      	bhi.n	800bbba <_realloc_r+0x5a>
 800bb94:	4621      	mov	r1, r4
 800bb96:	4640      	mov	r0, r8
 800bb98:	f7ff f964 	bl	800ae64 <_malloc_r>
 800bb9c:	4605      	mov	r5, r0
 800bb9e:	2800      	cmp	r0, #0
 800bba0:	d0ed      	beq.n	800bb7e <_realloc_r+0x1e>
 800bba2:	42bc      	cmp	r4, r7
 800bba4:	4622      	mov	r2, r4
 800bba6:	4631      	mov	r1, r6
 800bba8:	bf28      	it	cs
 800bbaa:	463a      	movcs	r2, r7
 800bbac:	f7fe fa5d 	bl	800a06a <memcpy>
 800bbb0:	4631      	mov	r1, r6
 800bbb2:	4640      	mov	r0, r8
 800bbb4:	f7ff f8e2 	bl	800ad7c <_free_r>
 800bbb8:	e7e1      	b.n	800bb7e <_realloc_r+0x1e>
 800bbba:	4635      	mov	r5, r6
 800bbbc:	e7df      	b.n	800bb7e <_realloc_r+0x1e>

0800bbbe <__ascii_wctomb>:
 800bbbe:	b149      	cbz	r1, 800bbd4 <__ascii_wctomb+0x16>
 800bbc0:	2aff      	cmp	r2, #255	; 0xff
 800bbc2:	bf85      	ittet	hi
 800bbc4:	238a      	movhi	r3, #138	; 0x8a
 800bbc6:	6003      	strhi	r3, [r0, #0]
 800bbc8:	700a      	strbls	r2, [r1, #0]
 800bbca:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800bbce:	bf98      	it	ls
 800bbd0:	2001      	movls	r0, #1
 800bbd2:	4770      	bx	lr
 800bbd4:	4608      	mov	r0, r1
 800bbd6:	4770      	bx	lr

0800bbd8 <fiprintf>:
 800bbd8:	b40e      	push	{r1, r2, r3}
 800bbda:	b503      	push	{r0, r1, lr}
 800bbdc:	4601      	mov	r1, r0
 800bbde:	ab03      	add	r3, sp, #12
 800bbe0:	4805      	ldr	r0, [pc, #20]	; (800bbf8 <fiprintf+0x20>)
 800bbe2:	f853 2b04 	ldr.w	r2, [r3], #4
 800bbe6:	6800      	ldr	r0, [r0, #0]
 800bbe8:	9301      	str	r3, [sp, #4]
 800bbea:	f000 f83f 	bl	800bc6c <_vfiprintf_r>
 800bbee:	b002      	add	sp, #8
 800bbf0:	f85d eb04 	ldr.w	lr, [sp], #4
 800bbf4:	b003      	add	sp, #12
 800bbf6:	4770      	bx	lr
 800bbf8:	20000068 	.word	0x20000068

0800bbfc <abort>:
 800bbfc:	b508      	push	{r3, lr}
 800bbfe:	2006      	movs	r0, #6
 800bc00:	f000 fa0c 	bl	800c01c <raise>
 800bc04:	2001      	movs	r0, #1
 800bc06:	f7f5 ff59 	bl	8001abc <_exit>

0800bc0a <_malloc_usable_size_r>:
 800bc0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc0e:	1f18      	subs	r0, r3, #4
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	bfbc      	itt	lt
 800bc14:	580b      	ldrlt	r3, [r1, r0]
 800bc16:	18c0      	addlt	r0, r0, r3
 800bc18:	4770      	bx	lr

0800bc1a <__sfputc_r>:
 800bc1a:	6893      	ldr	r3, [r2, #8]
 800bc1c:	3b01      	subs	r3, #1
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	b410      	push	{r4}
 800bc22:	6093      	str	r3, [r2, #8]
 800bc24:	da08      	bge.n	800bc38 <__sfputc_r+0x1e>
 800bc26:	6994      	ldr	r4, [r2, #24]
 800bc28:	42a3      	cmp	r3, r4
 800bc2a:	db01      	blt.n	800bc30 <__sfputc_r+0x16>
 800bc2c:	290a      	cmp	r1, #10
 800bc2e:	d103      	bne.n	800bc38 <__sfputc_r+0x1e>
 800bc30:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc34:	f000 b934 	b.w	800bea0 <__swbuf_r>
 800bc38:	6813      	ldr	r3, [r2, #0]
 800bc3a:	1c58      	adds	r0, r3, #1
 800bc3c:	6010      	str	r0, [r2, #0]
 800bc3e:	7019      	strb	r1, [r3, #0]
 800bc40:	4608      	mov	r0, r1
 800bc42:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc46:	4770      	bx	lr

0800bc48 <__sfputs_r>:
 800bc48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc4a:	4606      	mov	r6, r0
 800bc4c:	460f      	mov	r7, r1
 800bc4e:	4614      	mov	r4, r2
 800bc50:	18d5      	adds	r5, r2, r3
 800bc52:	42ac      	cmp	r4, r5
 800bc54:	d101      	bne.n	800bc5a <__sfputs_r+0x12>
 800bc56:	2000      	movs	r0, #0
 800bc58:	e007      	b.n	800bc6a <__sfputs_r+0x22>
 800bc5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc5e:	463a      	mov	r2, r7
 800bc60:	4630      	mov	r0, r6
 800bc62:	f7ff ffda 	bl	800bc1a <__sfputc_r>
 800bc66:	1c43      	adds	r3, r0, #1
 800bc68:	d1f3      	bne.n	800bc52 <__sfputs_r+0xa>
 800bc6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bc6c <_vfiprintf_r>:
 800bc6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc70:	460d      	mov	r5, r1
 800bc72:	b09d      	sub	sp, #116	; 0x74
 800bc74:	4614      	mov	r4, r2
 800bc76:	4698      	mov	r8, r3
 800bc78:	4606      	mov	r6, r0
 800bc7a:	b118      	cbz	r0, 800bc84 <_vfiprintf_r+0x18>
 800bc7c:	6a03      	ldr	r3, [r0, #32]
 800bc7e:	b90b      	cbnz	r3, 800bc84 <_vfiprintf_r+0x18>
 800bc80:	f7fe f8a6 	bl	8009dd0 <__sinit>
 800bc84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc86:	07d9      	lsls	r1, r3, #31
 800bc88:	d405      	bmi.n	800bc96 <_vfiprintf_r+0x2a>
 800bc8a:	89ab      	ldrh	r3, [r5, #12]
 800bc8c:	059a      	lsls	r2, r3, #22
 800bc8e:	d402      	bmi.n	800bc96 <_vfiprintf_r+0x2a>
 800bc90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc92:	f7fe f9e8 	bl	800a066 <__retarget_lock_acquire_recursive>
 800bc96:	89ab      	ldrh	r3, [r5, #12]
 800bc98:	071b      	lsls	r3, r3, #28
 800bc9a:	d501      	bpl.n	800bca0 <_vfiprintf_r+0x34>
 800bc9c:	692b      	ldr	r3, [r5, #16]
 800bc9e:	b99b      	cbnz	r3, 800bcc8 <_vfiprintf_r+0x5c>
 800bca0:	4629      	mov	r1, r5
 800bca2:	4630      	mov	r0, r6
 800bca4:	f000 f93a 	bl	800bf1c <__swsetup_r>
 800bca8:	b170      	cbz	r0, 800bcc8 <_vfiprintf_r+0x5c>
 800bcaa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bcac:	07dc      	lsls	r4, r3, #31
 800bcae:	d504      	bpl.n	800bcba <_vfiprintf_r+0x4e>
 800bcb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bcb4:	b01d      	add	sp, #116	; 0x74
 800bcb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcba:	89ab      	ldrh	r3, [r5, #12]
 800bcbc:	0598      	lsls	r0, r3, #22
 800bcbe:	d4f7      	bmi.n	800bcb0 <_vfiprintf_r+0x44>
 800bcc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bcc2:	f7fe f9d1 	bl	800a068 <__retarget_lock_release_recursive>
 800bcc6:	e7f3      	b.n	800bcb0 <_vfiprintf_r+0x44>
 800bcc8:	2300      	movs	r3, #0
 800bcca:	9309      	str	r3, [sp, #36]	; 0x24
 800bccc:	2320      	movs	r3, #32
 800bcce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bcd2:	f8cd 800c 	str.w	r8, [sp, #12]
 800bcd6:	2330      	movs	r3, #48	; 0x30
 800bcd8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800be8c <_vfiprintf_r+0x220>
 800bcdc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bce0:	f04f 0901 	mov.w	r9, #1
 800bce4:	4623      	mov	r3, r4
 800bce6:	469a      	mov	sl, r3
 800bce8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bcec:	b10a      	cbz	r2, 800bcf2 <_vfiprintf_r+0x86>
 800bcee:	2a25      	cmp	r2, #37	; 0x25
 800bcf0:	d1f9      	bne.n	800bce6 <_vfiprintf_r+0x7a>
 800bcf2:	ebba 0b04 	subs.w	fp, sl, r4
 800bcf6:	d00b      	beq.n	800bd10 <_vfiprintf_r+0xa4>
 800bcf8:	465b      	mov	r3, fp
 800bcfa:	4622      	mov	r2, r4
 800bcfc:	4629      	mov	r1, r5
 800bcfe:	4630      	mov	r0, r6
 800bd00:	f7ff ffa2 	bl	800bc48 <__sfputs_r>
 800bd04:	3001      	adds	r0, #1
 800bd06:	f000 80a9 	beq.w	800be5c <_vfiprintf_r+0x1f0>
 800bd0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bd0c:	445a      	add	r2, fp
 800bd0e:	9209      	str	r2, [sp, #36]	; 0x24
 800bd10:	f89a 3000 	ldrb.w	r3, [sl]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	f000 80a1 	beq.w	800be5c <_vfiprintf_r+0x1f0>
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bd20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd24:	f10a 0a01 	add.w	sl, sl, #1
 800bd28:	9304      	str	r3, [sp, #16]
 800bd2a:	9307      	str	r3, [sp, #28]
 800bd2c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bd30:	931a      	str	r3, [sp, #104]	; 0x68
 800bd32:	4654      	mov	r4, sl
 800bd34:	2205      	movs	r2, #5
 800bd36:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd3a:	4854      	ldr	r0, [pc, #336]	; (800be8c <_vfiprintf_r+0x220>)
 800bd3c:	f7f4 fa48 	bl	80001d0 <memchr>
 800bd40:	9a04      	ldr	r2, [sp, #16]
 800bd42:	b9d8      	cbnz	r0, 800bd7c <_vfiprintf_r+0x110>
 800bd44:	06d1      	lsls	r1, r2, #27
 800bd46:	bf44      	itt	mi
 800bd48:	2320      	movmi	r3, #32
 800bd4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd4e:	0713      	lsls	r3, r2, #28
 800bd50:	bf44      	itt	mi
 800bd52:	232b      	movmi	r3, #43	; 0x2b
 800bd54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd58:	f89a 3000 	ldrb.w	r3, [sl]
 800bd5c:	2b2a      	cmp	r3, #42	; 0x2a
 800bd5e:	d015      	beq.n	800bd8c <_vfiprintf_r+0x120>
 800bd60:	9a07      	ldr	r2, [sp, #28]
 800bd62:	4654      	mov	r4, sl
 800bd64:	2000      	movs	r0, #0
 800bd66:	f04f 0c0a 	mov.w	ip, #10
 800bd6a:	4621      	mov	r1, r4
 800bd6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd70:	3b30      	subs	r3, #48	; 0x30
 800bd72:	2b09      	cmp	r3, #9
 800bd74:	d94d      	bls.n	800be12 <_vfiprintf_r+0x1a6>
 800bd76:	b1b0      	cbz	r0, 800bda6 <_vfiprintf_r+0x13a>
 800bd78:	9207      	str	r2, [sp, #28]
 800bd7a:	e014      	b.n	800bda6 <_vfiprintf_r+0x13a>
 800bd7c:	eba0 0308 	sub.w	r3, r0, r8
 800bd80:	fa09 f303 	lsl.w	r3, r9, r3
 800bd84:	4313      	orrs	r3, r2
 800bd86:	9304      	str	r3, [sp, #16]
 800bd88:	46a2      	mov	sl, r4
 800bd8a:	e7d2      	b.n	800bd32 <_vfiprintf_r+0xc6>
 800bd8c:	9b03      	ldr	r3, [sp, #12]
 800bd8e:	1d19      	adds	r1, r3, #4
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	9103      	str	r1, [sp, #12]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	bfbb      	ittet	lt
 800bd98:	425b      	neglt	r3, r3
 800bd9a:	f042 0202 	orrlt.w	r2, r2, #2
 800bd9e:	9307      	strge	r3, [sp, #28]
 800bda0:	9307      	strlt	r3, [sp, #28]
 800bda2:	bfb8      	it	lt
 800bda4:	9204      	strlt	r2, [sp, #16]
 800bda6:	7823      	ldrb	r3, [r4, #0]
 800bda8:	2b2e      	cmp	r3, #46	; 0x2e
 800bdaa:	d10c      	bne.n	800bdc6 <_vfiprintf_r+0x15a>
 800bdac:	7863      	ldrb	r3, [r4, #1]
 800bdae:	2b2a      	cmp	r3, #42	; 0x2a
 800bdb0:	d134      	bne.n	800be1c <_vfiprintf_r+0x1b0>
 800bdb2:	9b03      	ldr	r3, [sp, #12]
 800bdb4:	1d1a      	adds	r2, r3, #4
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	9203      	str	r2, [sp, #12]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	bfb8      	it	lt
 800bdbe:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800bdc2:	3402      	adds	r4, #2
 800bdc4:	9305      	str	r3, [sp, #20]
 800bdc6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800be9c <_vfiprintf_r+0x230>
 800bdca:	7821      	ldrb	r1, [r4, #0]
 800bdcc:	2203      	movs	r2, #3
 800bdce:	4650      	mov	r0, sl
 800bdd0:	f7f4 f9fe 	bl	80001d0 <memchr>
 800bdd4:	b138      	cbz	r0, 800bde6 <_vfiprintf_r+0x17a>
 800bdd6:	9b04      	ldr	r3, [sp, #16]
 800bdd8:	eba0 000a 	sub.w	r0, r0, sl
 800bddc:	2240      	movs	r2, #64	; 0x40
 800bdde:	4082      	lsls	r2, r0
 800bde0:	4313      	orrs	r3, r2
 800bde2:	3401      	adds	r4, #1
 800bde4:	9304      	str	r3, [sp, #16]
 800bde6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdea:	4829      	ldr	r0, [pc, #164]	; (800be90 <_vfiprintf_r+0x224>)
 800bdec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bdf0:	2206      	movs	r2, #6
 800bdf2:	f7f4 f9ed 	bl	80001d0 <memchr>
 800bdf6:	2800      	cmp	r0, #0
 800bdf8:	d03f      	beq.n	800be7a <_vfiprintf_r+0x20e>
 800bdfa:	4b26      	ldr	r3, [pc, #152]	; (800be94 <_vfiprintf_r+0x228>)
 800bdfc:	bb1b      	cbnz	r3, 800be46 <_vfiprintf_r+0x1da>
 800bdfe:	9b03      	ldr	r3, [sp, #12]
 800be00:	3307      	adds	r3, #7
 800be02:	f023 0307 	bic.w	r3, r3, #7
 800be06:	3308      	adds	r3, #8
 800be08:	9303      	str	r3, [sp, #12]
 800be0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be0c:	443b      	add	r3, r7
 800be0e:	9309      	str	r3, [sp, #36]	; 0x24
 800be10:	e768      	b.n	800bce4 <_vfiprintf_r+0x78>
 800be12:	fb0c 3202 	mla	r2, ip, r2, r3
 800be16:	460c      	mov	r4, r1
 800be18:	2001      	movs	r0, #1
 800be1a:	e7a6      	b.n	800bd6a <_vfiprintf_r+0xfe>
 800be1c:	2300      	movs	r3, #0
 800be1e:	3401      	adds	r4, #1
 800be20:	9305      	str	r3, [sp, #20]
 800be22:	4619      	mov	r1, r3
 800be24:	f04f 0c0a 	mov.w	ip, #10
 800be28:	4620      	mov	r0, r4
 800be2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be2e:	3a30      	subs	r2, #48	; 0x30
 800be30:	2a09      	cmp	r2, #9
 800be32:	d903      	bls.n	800be3c <_vfiprintf_r+0x1d0>
 800be34:	2b00      	cmp	r3, #0
 800be36:	d0c6      	beq.n	800bdc6 <_vfiprintf_r+0x15a>
 800be38:	9105      	str	r1, [sp, #20]
 800be3a:	e7c4      	b.n	800bdc6 <_vfiprintf_r+0x15a>
 800be3c:	fb0c 2101 	mla	r1, ip, r1, r2
 800be40:	4604      	mov	r4, r0
 800be42:	2301      	movs	r3, #1
 800be44:	e7f0      	b.n	800be28 <_vfiprintf_r+0x1bc>
 800be46:	ab03      	add	r3, sp, #12
 800be48:	9300      	str	r3, [sp, #0]
 800be4a:	462a      	mov	r2, r5
 800be4c:	4b12      	ldr	r3, [pc, #72]	; (800be98 <_vfiprintf_r+0x22c>)
 800be4e:	a904      	add	r1, sp, #16
 800be50:	4630      	mov	r0, r6
 800be52:	f7fd fb6b 	bl	800952c <_printf_float>
 800be56:	4607      	mov	r7, r0
 800be58:	1c78      	adds	r0, r7, #1
 800be5a:	d1d6      	bne.n	800be0a <_vfiprintf_r+0x19e>
 800be5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be5e:	07d9      	lsls	r1, r3, #31
 800be60:	d405      	bmi.n	800be6e <_vfiprintf_r+0x202>
 800be62:	89ab      	ldrh	r3, [r5, #12]
 800be64:	059a      	lsls	r2, r3, #22
 800be66:	d402      	bmi.n	800be6e <_vfiprintf_r+0x202>
 800be68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be6a:	f7fe f8fd 	bl	800a068 <__retarget_lock_release_recursive>
 800be6e:	89ab      	ldrh	r3, [r5, #12]
 800be70:	065b      	lsls	r3, r3, #25
 800be72:	f53f af1d 	bmi.w	800bcb0 <_vfiprintf_r+0x44>
 800be76:	9809      	ldr	r0, [sp, #36]	; 0x24
 800be78:	e71c      	b.n	800bcb4 <_vfiprintf_r+0x48>
 800be7a:	ab03      	add	r3, sp, #12
 800be7c:	9300      	str	r3, [sp, #0]
 800be7e:	462a      	mov	r2, r5
 800be80:	4b05      	ldr	r3, [pc, #20]	; (800be98 <_vfiprintf_r+0x22c>)
 800be82:	a904      	add	r1, sp, #16
 800be84:	4630      	mov	r0, r6
 800be86:	f7fd fdf5 	bl	8009a74 <_printf_i>
 800be8a:	e7e4      	b.n	800be56 <_vfiprintf_r+0x1ea>
 800be8c:	0800c444 	.word	0x0800c444
 800be90:	0800c44e 	.word	0x0800c44e
 800be94:	0800952d 	.word	0x0800952d
 800be98:	0800bc49 	.word	0x0800bc49
 800be9c:	0800c44a 	.word	0x0800c44a

0800bea0 <__swbuf_r>:
 800bea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bea2:	460e      	mov	r6, r1
 800bea4:	4614      	mov	r4, r2
 800bea6:	4605      	mov	r5, r0
 800bea8:	b118      	cbz	r0, 800beb2 <__swbuf_r+0x12>
 800beaa:	6a03      	ldr	r3, [r0, #32]
 800beac:	b90b      	cbnz	r3, 800beb2 <__swbuf_r+0x12>
 800beae:	f7fd ff8f 	bl	8009dd0 <__sinit>
 800beb2:	69a3      	ldr	r3, [r4, #24]
 800beb4:	60a3      	str	r3, [r4, #8]
 800beb6:	89a3      	ldrh	r3, [r4, #12]
 800beb8:	071a      	lsls	r2, r3, #28
 800beba:	d525      	bpl.n	800bf08 <__swbuf_r+0x68>
 800bebc:	6923      	ldr	r3, [r4, #16]
 800bebe:	b31b      	cbz	r3, 800bf08 <__swbuf_r+0x68>
 800bec0:	6823      	ldr	r3, [r4, #0]
 800bec2:	6922      	ldr	r2, [r4, #16]
 800bec4:	1a98      	subs	r0, r3, r2
 800bec6:	6963      	ldr	r3, [r4, #20]
 800bec8:	b2f6      	uxtb	r6, r6
 800beca:	4283      	cmp	r3, r0
 800becc:	4637      	mov	r7, r6
 800bece:	dc04      	bgt.n	800beda <__swbuf_r+0x3a>
 800bed0:	4621      	mov	r1, r4
 800bed2:	4628      	mov	r0, r5
 800bed4:	f7ff fdac 	bl	800ba30 <_fflush_r>
 800bed8:	b9e0      	cbnz	r0, 800bf14 <__swbuf_r+0x74>
 800beda:	68a3      	ldr	r3, [r4, #8]
 800bedc:	3b01      	subs	r3, #1
 800bede:	60a3      	str	r3, [r4, #8]
 800bee0:	6823      	ldr	r3, [r4, #0]
 800bee2:	1c5a      	adds	r2, r3, #1
 800bee4:	6022      	str	r2, [r4, #0]
 800bee6:	701e      	strb	r6, [r3, #0]
 800bee8:	6962      	ldr	r2, [r4, #20]
 800beea:	1c43      	adds	r3, r0, #1
 800beec:	429a      	cmp	r2, r3
 800beee:	d004      	beq.n	800befa <__swbuf_r+0x5a>
 800bef0:	89a3      	ldrh	r3, [r4, #12]
 800bef2:	07db      	lsls	r3, r3, #31
 800bef4:	d506      	bpl.n	800bf04 <__swbuf_r+0x64>
 800bef6:	2e0a      	cmp	r6, #10
 800bef8:	d104      	bne.n	800bf04 <__swbuf_r+0x64>
 800befa:	4621      	mov	r1, r4
 800befc:	4628      	mov	r0, r5
 800befe:	f7ff fd97 	bl	800ba30 <_fflush_r>
 800bf02:	b938      	cbnz	r0, 800bf14 <__swbuf_r+0x74>
 800bf04:	4638      	mov	r0, r7
 800bf06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf08:	4621      	mov	r1, r4
 800bf0a:	4628      	mov	r0, r5
 800bf0c:	f000 f806 	bl	800bf1c <__swsetup_r>
 800bf10:	2800      	cmp	r0, #0
 800bf12:	d0d5      	beq.n	800bec0 <__swbuf_r+0x20>
 800bf14:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800bf18:	e7f4      	b.n	800bf04 <__swbuf_r+0x64>
	...

0800bf1c <__swsetup_r>:
 800bf1c:	b538      	push	{r3, r4, r5, lr}
 800bf1e:	4b2a      	ldr	r3, [pc, #168]	; (800bfc8 <__swsetup_r+0xac>)
 800bf20:	4605      	mov	r5, r0
 800bf22:	6818      	ldr	r0, [r3, #0]
 800bf24:	460c      	mov	r4, r1
 800bf26:	b118      	cbz	r0, 800bf30 <__swsetup_r+0x14>
 800bf28:	6a03      	ldr	r3, [r0, #32]
 800bf2a:	b90b      	cbnz	r3, 800bf30 <__swsetup_r+0x14>
 800bf2c:	f7fd ff50 	bl	8009dd0 <__sinit>
 800bf30:	89a3      	ldrh	r3, [r4, #12]
 800bf32:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bf36:	0718      	lsls	r0, r3, #28
 800bf38:	d422      	bmi.n	800bf80 <__swsetup_r+0x64>
 800bf3a:	06d9      	lsls	r1, r3, #27
 800bf3c:	d407      	bmi.n	800bf4e <__swsetup_r+0x32>
 800bf3e:	2309      	movs	r3, #9
 800bf40:	602b      	str	r3, [r5, #0]
 800bf42:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bf46:	81a3      	strh	r3, [r4, #12]
 800bf48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bf4c:	e034      	b.n	800bfb8 <__swsetup_r+0x9c>
 800bf4e:	0758      	lsls	r0, r3, #29
 800bf50:	d512      	bpl.n	800bf78 <__swsetup_r+0x5c>
 800bf52:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bf54:	b141      	cbz	r1, 800bf68 <__swsetup_r+0x4c>
 800bf56:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bf5a:	4299      	cmp	r1, r3
 800bf5c:	d002      	beq.n	800bf64 <__swsetup_r+0x48>
 800bf5e:	4628      	mov	r0, r5
 800bf60:	f7fe ff0c 	bl	800ad7c <_free_r>
 800bf64:	2300      	movs	r3, #0
 800bf66:	6363      	str	r3, [r4, #52]	; 0x34
 800bf68:	89a3      	ldrh	r3, [r4, #12]
 800bf6a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bf6e:	81a3      	strh	r3, [r4, #12]
 800bf70:	2300      	movs	r3, #0
 800bf72:	6063      	str	r3, [r4, #4]
 800bf74:	6923      	ldr	r3, [r4, #16]
 800bf76:	6023      	str	r3, [r4, #0]
 800bf78:	89a3      	ldrh	r3, [r4, #12]
 800bf7a:	f043 0308 	orr.w	r3, r3, #8
 800bf7e:	81a3      	strh	r3, [r4, #12]
 800bf80:	6923      	ldr	r3, [r4, #16]
 800bf82:	b94b      	cbnz	r3, 800bf98 <__swsetup_r+0x7c>
 800bf84:	89a3      	ldrh	r3, [r4, #12]
 800bf86:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bf8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf8e:	d003      	beq.n	800bf98 <__swsetup_r+0x7c>
 800bf90:	4621      	mov	r1, r4
 800bf92:	4628      	mov	r0, r5
 800bf94:	f000 f884 	bl	800c0a0 <__smakebuf_r>
 800bf98:	89a0      	ldrh	r0, [r4, #12]
 800bf9a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bf9e:	f010 0301 	ands.w	r3, r0, #1
 800bfa2:	d00a      	beq.n	800bfba <__swsetup_r+0x9e>
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	60a3      	str	r3, [r4, #8]
 800bfa8:	6963      	ldr	r3, [r4, #20]
 800bfaa:	425b      	negs	r3, r3
 800bfac:	61a3      	str	r3, [r4, #24]
 800bfae:	6923      	ldr	r3, [r4, #16]
 800bfb0:	b943      	cbnz	r3, 800bfc4 <__swsetup_r+0xa8>
 800bfb2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bfb6:	d1c4      	bne.n	800bf42 <__swsetup_r+0x26>
 800bfb8:	bd38      	pop	{r3, r4, r5, pc}
 800bfba:	0781      	lsls	r1, r0, #30
 800bfbc:	bf58      	it	pl
 800bfbe:	6963      	ldrpl	r3, [r4, #20]
 800bfc0:	60a3      	str	r3, [r4, #8]
 800bfc2:	e7f4      	b.n	800bfae <__swsetup_r+0x92>
 800bfc4:	2000      	movs	r0, #0
 800bfc6:	e7f7      	b.n	800bfb8 <__swsetup_r+0x9c>
 800bfc8:	20000068 	.word	0x20000068

0800bfcc <_raise_r>:
 800bfcc:	291f      	cmp	r1, #31
 800bfce:	b538      	push	{r3, r4, r5, lr}
 800bfd0:	4604      	mov	r4, r0
 800bfd2:	460d      	mov	r5, r1
 800bfd4:	d904      	bls.n	800bfe0 <_raise_r+0x14>
 800bfd6:	2316      	movs	r3, #22
 800bfd8:	6003      	str	r3, [r0, #0]
 800bfda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bfde:	bd38      	pop	{r3, r4, r5, pc}
 800bfe0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800bfe2:	b112      	cbz	r2, 800bfea <_raise_r+0x1e>
 800bfe4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bfe8:	b94b      	cbnz	r3, 800bffe <_raise_r+0x32>
 800bfea:	4620      	mov	r0, r4
 800bfec:	f000 f830 	bl	800c050 <_getpid_r>
 800bff0:	462a      	mov	r2, r5
 800bff2:	4601      	mov	r1, r0
 800bff4:	4620      	mov	r0, r4
 800bff6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bffa:	f000 b817 	b.w	800c02c <_kill_r>
 800bffe:	2b01      	cmp	r3, #1
 800c000:	d00a      	beq.n	800c018 <_raise_r+0x4c>
 800c002:	1c59      	adds	r1, r3, #1
 800c004:	d103      	bne.n	800c00e <_raise_r+0x42>
 800c006:	2316      	movs	r3, #22
 800c008:	6003      	str	r3, [r0, #0]
 800c00a:	2001      	movs	r0, #1
 800c00c:	e7e7      	b.n	800bfde <_raise_r+0x12>
 800c00e:	2400      	movs	r4, #0
 800c010:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c014:	4628      	mov	r0, r5
 800c016:	4798      	blx	r3
 800c018:	2000      	movs	r0, #0
 800c01a:	e7e0      	b.n	800bfde <_raise_r+0x12>

0800c01c <raise>:
 800c01c:	4b02      	ldr	r3, [pc, #8]	; (800c028 <raise+0xc>)
 800c01e:	4601      	mov	r1, r0
 800c020:	6818      	ldr	r0, [r3, #0]
 800c022:	f7ff bfd3 	b.w	800bfcc <_raise_r>
 800c026:	bf00      	nop
 800c028:	20000068 	.word	0x20000068

0800c02c <_kill_r>:
 800c02c:	b538      	push	{r3, r4, r5, lr}
 800c02e:	4d07      	ldr	r5, [pc, #28]	; (800c04c <_kill_r+0x20>)
 800c030:	2300      	movs	r3, #0
 800c032:	4604      	mov	r4, r0
 800c034:	4608      	mov	r0, r1
 800c036:	4611      	mov	r1, r2
 800c038:	602b      	str	r3, [r5, #0]
 800c03a:	f7f5 fd2f 	bl	8001a9c <_kill>
 800c03e:	1c43      	adds	r3, r0, #1
 800c040:	d102      	bne.n	800c048 <_kill_r+0x1c>
 800c042:	682b      	ldr	r3, [r5, #0]
 800c044:	b103      	cbz	r3, 800c048 <_kill_r+0x1c>
 800c046:	6023      	str	r3, [r4, #0]
 800c048:	bd38      	pop	{r3, r4, r5, pc}
 800c04a:	bf00      	nop
 800c04c:	20002fac 	.word	0x20002fac

0800c050 <_getpid_r>:
 800c050:	f7f5 bd1c 	b.w	8001a8c <_getpid>

0800c054 <__swhatbuf_r>:
 800c054:	b570      	push	{r4, r5, r6, lr}
 800c056:	460c      	mov	r4, r1
 800c058:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c05c:	2900      	cmp	r1, #0
 800c05e:	b096      	sub	sp, #88	; 0x58
 800c060:	4615      	mov	r5, r2
 800c062:	461e      	mov	r6, r3
 800c064:	da0d      	bge.n	800c082 <__swhatbuf_r+0x2e>
 800c066:	89a3      	ldrh	r3, [r4, #12]
 800c068:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c06c:	f04f 0100 	mov.w	r1, #0
 800c070:	bf0c      	ite	eq
 800c072:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c076:	2340      	movne	r3, #64	; 0x40
 800c078:	2000      	movs	r0, #0
 800c07a:	6031      	str	r1, [r6, #0]
 800c07c:	602b      	str	r3, [r5, #0]
 800c07e:	b016      	add	sp, #88	; 0x58
 800c080:	bd70      	pop	{r4, r5, r6, pc}
 800c082:	466a      	mov	r2, sp
 800c084:	f000 f848 	bl	800c118 <_fstat_r>
 800c088:	2800      	cmp	r0, #0
 800c08a:	dbec      	blt.n	800c066 <__swhatbuf_r+0x12>
 800c08c:	9901      	ldr	r1, [sp, #4]
 800c08e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c092:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c096:	4259      	negs	r1, r3
 800c098:	4159      	adcs	r1, r3
 800c09a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c09e:	e7eb      	b.n	800c078 <__swhatbuf_r+0x24>

0800c0a0 <__smakebuf_r>:
 800c0a0:	898b      	ldrh	r3, [r1, #12]
 800c0a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c0a4:	079d      	lsls	r5, r3, #30
 800c0a6:	4606      	mov	r6, r0
 800c0a8:	460c      	mov	r4, r1
 800c0aa:	d507      	bpl.n	800c0bc <__smakebuf_r+0x1c>
 800c0ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c0b0:	6023      	str	r3, [r4, #0]
 800c0b2:	6123      	str	r3, [r4, #16]
 800c0b4:	2301      	movs	r3, #1
 800c0b6:	6163      	str	r3, [r4, #20]
 800c0b8:	b002      	add	sp, #8
 800c0ba:	bd70      	pop	{r4, r5, r6, pc}
 800c0bc:	ab01      	add	r3, sp, #4
 800c0be:	466a      	mov	r2, sp
 800c0c0:	f7ff ffc8 	bl	800c054 <__swhatbuf_r>
 800c0c4:	9900      	ldr	r1, [sp, #0]
 800c0c6:	4605      	mov	r5, r0
 800c0c8:	4630      	mov	r0, r6
 800c0ca:	f7fe fecb 	bl	800ae64 <_malloc_r>
 800c0ce:	b948      	cbnz	r0, 800c0e4 <__smakebuf_r+0x44>
 800c0d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0d4:	059a      	lsls	r2, r3, #22
 800c0d6:	d4ef      	bmi.n	800c0b8 <__smakebuf_r+0x18>
 800c0d8:	f023 0303 	bic.w	r3, r3, #3
 800c0dc:	f043 0302 	orr.w	r3, r3, #2
 800c0e0:	81a3      	strh	r3, [r4, #12]
 800c0e2:	e7e3      	b.n	800c0ac <__smakebuf_r+0xc>
 800c0e4:	89a3      	ldrh	r3, [r4, #12]
 800c0e6:	6020      	str	r0, [r4, #0]
 800c0e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0ec:	81a3      	strh	r3, [r4, #12]
 800c0ee:	9b00      	ldr	r3, [sp, #0]
 800c0f0:	6163      	str	r3, [r4, #20]
 800c0f2:	9b01      	ldr	r3, [sp, #4]
 800c0f4:	6120      	str	r0, [r4, #16]
 800c0f6:	b15b      	cbz	r3, 800c110 <__smakebuf_r+0x70>
 800c0f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c0fc:	4630      	mov	r0, r6
 800c0fe:	f000 f81d 	bl	800c13c <_isatty_r>
 800c102:	b128      	cbz	r0, 800c110 <__smakebuf_r+0x70>
 800c104:	89a3      	ldrh	r3, [r4, #12]
 800c106:	f023 0303 	bic.w	r3, r3, #3
 800c10a:	f043 0301 	orr.w	r3, r3, #1
 800c10e:	81a3      	strh	r3, [r4, #12]
 800c110:	89a3      	ldrh	r3, [r4, #12]
 800c112:	431d      	orrs	r5, r3
 800c114:	81a5      	strh	r5, [r4, #12]
 800c116:	e7cf      	b.n	800c0b8 <__smakebuf_r+0x18>

0800c118 <_fstat_r>:
 800c118:	b538      	push	{r3, r4, r5, lr}
 800c11a:	4d07      	ldr	r5, [pc, #28]	; (800c138 <_fstat_r+0x20>)
 800c11c:	2300      	movs	r3, #0
 800c11e:	4604      	mov	r4, r0
 800c120:	4608      	mov	r0, r1
 800c122:	4611      	mov	r1, r2
 800c124:	602b      	str	r3, [r5, #0]
 800c126:	f7f5 fd18 	bl	8001b5a <_fstat>
 800c12a:	1c43      	adds	r3, r0, #1
 800c12c:	d102      	bne.n	800c134 <_fstat_r+0x1c>
 800c12e:	682b      	ldr	r3, [r5, #0]
 800c130:	b103      	cbz	r3, 800c134 <_fstat_r+0x1c>
 800c132:	6023      	str	r3, [r4, #0]
 800c134:	bd38      	pop	{r3, r4, r5, pc}
 800c136:	bf00      	nop
 800c138:	20002fac 	.word	0x20002fac

0800c13c <_isatty_r>:
 800c13c:	b538      	push	{r3, r4, r5, lr}
 800c13e:	4d06      	ldr	r5, [pc, #24]	; (800c158 <_isatty_r+0x1c>)
 800c140:	2300      	movs	r3, #0
 800c142:	4604      	mov	r4, r0
 800c144:	4608      	mov	r0, r1
 800c146:	602b      	str	r3, [r5, #0]
 800c148:	f7f5 fd17 	bl	8001b7a <_isatty>
 800c14c:	1c43      	adds	r3, r0, #1
 800c14e:	d102      	bne.n	800c156 <_isatty_r+0x1a>
 800c150:	682b      	ldr	r3, [r5, #0]
 800c152:	b103      	cbz	r3, 800c156 <_isatty_r+0x1a>
 800c154:	6023      	str	r3, [r4, #0]
 800c156:	bd38      	pop	{r3, r4, r5, pc}
 800c158:	20002fac 	.word	0x20002fac

0800c15c <_init>:
 800c15c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c15e:	bf00      	nop
 800c160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c162:	bc08      	pop	{r3}
 800c164:	469e      	mov	lr, r3
 800c166:	4770      	bx	lr

0800c168 <_fini>:
 800c168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c16a:	bf00      	nop
 800c16c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c16e:	bc08      	pop	{r3}
 800c170:	469e      	mov	lr, r3
 800c172:	4770      	bx	lr
